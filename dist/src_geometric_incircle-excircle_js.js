/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgraphics"] = self["webpackChunkgraphics"] || []).push([["src_geometric_incircle-excircle_js"],{

/***/ "./src/geometric/incircle-excircle.js":
/*!********************************************!*\
  !*** ./src/geometric/incircle-excircle.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createInCirclesDemo\": () => (/* binding */ createInCirclesDemo)\n/* harmony export */ });\n/* harmony import */ var _graphics_context2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../graphics_context2 */ \"./src/graphics_context2.js\");\n/* harmony import */ var _lib_esm_vec3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/esm/vec3 */ \"./src/lib/esm/vec3.js\");\n\n\n\n/**\n * Create a demo to visualize the incircle and excircle of a triangle.\n * @param {object} sk - The p5.js sketch object.\n * @param {number} [CANVAS_WIDTH=600] - The width of the canvas.\n * @param {number} [CANVAS_HEIGHT=600] - The height of the canvas.\n * @returns {object} An object containing setup and display methods for the demo.\n */\nconst createInCirclesDemo = (sk, CANVAS_WIDTH = 600, CANVAS_HEIGHT = 600) => {\n\n    // Define the drawing area and viewport\n    let win = {left: -100, right: 100, top: 100, bottom: -100};\n    let view = {left: 0.1, right: 0.9, top: 0.9, bottom: 0.1};\n\n    // Create a graphics context for drawing\n    const ctx = (0,_graphics_context2__WEBPACK_IMPORTED_MODULE_0__.createGraphicsContext2)(win, view, CANVAS_WIDTH, CANVAS_HEIGHT, sk);\n    const {sx, sy, tx, ty} = ctx.viewport;\n\n    return {\n        /**\n         * Setup function to initialize the canvas and background.\n         */\n        setup: () => {\n            const canvas = sk.createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT);\n            canvas.id('canvas');\n            sk.background(40);\n            sk.noLoop(); // Prevent continuous looping\n        },\n\n        /**\n         * Display function to draw the triangle, incircle, and excircle.\n         */\n        display: () => {\n            // Apply transformations to the drawing context\n            sk.applyMatrix(1, 0, 0, -1, 0, CANVAS_HEIGHT);\n            sk.applyMatrix(CANVAS_WIDTH, 0, 0, CANVAS_HEIGHT, 0, 0);\n            sk.applyMatrix(sx, 0, 0, sy, tx, ty);\n\n            // Set stroke properties for the window\n            sk.stroke(255, 204, 0);\n            sk.strokeWeight(1);\n\n            // Define vertices of the triangle\n            const A = _lib_esm_vec3__WEBPACK_IMPORTED_MODULE_1__.fromValues(-98, -50, 0);\n            const B = _lib_esm_vec3__WEBPACK_IMPORTED_MODULE_1__.fromValues(98, -70, 0);\n            const C = _lib_esm_vec3__WEBPACK_IMPORTED_MODULE_1__.fromValues(-56, 98, 0);\n            const vertices = [A, B, C];\n\n            // Draw the triangle\n            ctx.moveTo(vertices[0][0], vertices[0][1]);\n            vertices.forEach(([x, y]) => ctx.lineTo(x, y));\n            ctx.lineTo(vertices[0][0], vertices[0][1]);\n\n            // Calculate and draw the excircle\n            const { center: ex_center, radius: ex_radius } = ctx.excircle(A, B, C);\n            sk.noFill();\n            sk.stroke(0, 204, 255); // Cyan color for the excircle\n            sk.strokeWeight(1);\n            sk.circle(ex_center[0], ex_center[1], 2 * ex_radius);\n\n            // Calculate the incircle and its excircle vertices\n            const { R, S, T } = ctx.incircle(A, B, C);\n            const { center: in_center, radius: in_radius } = ctx.excircle(R, S, T);\n\n            // Draw incircle vertices\n            sk.stroke(1);\n            sk.strokeWeight(2);\n            sk.fill(127);\n            [R, S, T].forEach(point => sk.ellipse(point[0], point[1], 5, 5));\n\n            // Draw the incircle's excircle\n            sk.noFill();\n            sk.stroke(255, 102, 102); // Light red color for the incircle's excircle\n            sk.strokeWeight(1);\n            sk.circle(in_center[0], in_center[1], 2 * in_radius);\n        }\n    };\n};\n\n\n//# sourceURL=webpack://graphics/./src/geometric/incircle-excircle.js?");

/***/ })

}]);