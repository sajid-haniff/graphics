/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/demos.js":
/*!**********************!*\
  !*** ./src/demos.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst demos = {\n    'createTriangleCirclesDemo': () => Promise.all(/*! import() */[__webpack_require__.e(\"src_graphics_context2_js\"), __webpack_require__.e(\"src_geometric_triangle-circles_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./geometric/triangle-circles */ \"./src/geometric/triangle-circles.js\")),\n    'createInCirclesDemo': () => Promise.all(/*! import() */[__webpack_require__.e(\"src_graphics_context2_js\"), __webpack_require__.e(\"src_geometric_incircle-excircle_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./geometric/incircle-excircle */ \"./src/geometric/incircle-excircle.js\")),\n    'createPolygonDemo': () => Promise.all(/*! import() */[__webpack_require__.e(\"src_graphics_context2_js\"), __webpack_require__.e(\"src_geometric_polygon-demo_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./geometric/polygon-demo */ \"./src/geometric/polygon-demo.js\"))\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (demos);\n\n\n//# sourceURL=webpack://graphics/./src/demos.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_p5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/p5 */ \"./src/lib/p5.js\");\n/* harmony import */ var _lib_p5__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_p5__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _demos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./demos */ \"./src/demos.js\");\n\n\n\n/*\nconst demos = {\n    'createTriangleCirclesDemo': () => import('./geometric/triangle-circles'),\n    'createInCirclesDemo': () => import('./geometric/incircle-excircle'),\n    'createPolygonDemo': () => import('./geometric/polygon-demo')\n    // Add more demos here as needed\n};*/\n\nconst demoName = 'createPolygonDemo';\n\nconst runDemo = async (demoName) => {\n    try {\n        // Dynamically import the module corresponding to the demoName\n        // and extract the exported function using a computed property name.\n        //\n        // - `await demos[demoName]();` dynamically imports the module.\n        //   For example, if demoName is 'createTriangleCirclesDemo', this will import from './geometric/triangle-circles'.\n        //\n        // - `const { [demoName]: demoFunction } = module;` uses object destructuring with a computed property name to extract\n        //   the function named `demoName` from the imported module.\n        //   For instance, if demoName is 'createTriangleCirclesDemo', it is equivalent to:\n        //   const demoFunction = module.createTriangleCirclesDemo;\n        //\n        // This syntax allows us to dynamically determine which property to extract based on the value of demoName.\n        const { [demoName]: demoFunction } = await _demos__WEBPACK_IMPORTED_MODULE_1__.default[demoName]();\n\n        //const module = await demos[demoName]();\n        //const demoFunction = module[demoName];\n\n        if (typeof demoFunction !== 'function') {\n            throw new Error(`Demo ${demoName} is not a valid function`);\n        }\n\n        new _lib_p5__WEBPACK_IMPORTED_MODULE_0__((sk) => {\n            const sketch = demoFunction(sk);\n\n            sk.setup = sketch.setup;\n            sk.draw = sketch.display;\n        });\n    } catch (error) {\n        console.error(`Error loading demo ${demoName}:`, error);\n    }\n};\n\nrunDemo(demoName);\n\n\n//# sourceURL=webpack://graphics/./src/index.js?");

/***/ }),

/***/ "./src/lib/p5.js":
/*!***********************!*\
  !*** ./src/lib/p5.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! p5.js v1.2.0 December 19, 2020 */\n(function(f) {\n  if (true) {\n    module.exports = f();\n  } else { var g; }\n})(function() {\n  var define, module, exports;\n  return (function() {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = undefined;\n            if (!f && c) return require(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw ((a.code = 'MODULE_NOT_FOUND'), a);\n          }\n          var p = (n[i] = { exports: {} });\n          e[i][0].call(\n            p.exports,\n            function(r) {\n              var n = e[i][1][r];\n              return o(n || r);\n            },\n            p,\n            p.exports,\n            r,\n            e,\n            n,\n            t\n          );\n        }\n        return n[i].exports;\n      }\n      for (var u = undefined, i = 0; i < t.length; i++)\n        o(t[i]);\n      return o;\n    }\n    return r;\n  })()(\n    {\n      1: [\n        function(_dereq_, module, exports) {\n          module.exports = {\n            p5: {\n              describe: {\n                name: 'describe',\n                params: [\n                  {\n                    name: 'text',\n                    description: '<p>description of the canvas</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'display',\n                    description: '<p>either LABEL or FALLBACK (Optional)</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Environment'\n              },\n              describeElement: {\n                name: 'describeElement',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>name of the element</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'text',\n                    description: '<p>description of the element</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'display',\n                    description: '<p>either LABEL or FALLBACK (Optional)</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Environment'\n              },\n              textOutput: {\n                name: 'textOutput',\n                params: [\n                  {\n                    name: 'display',\n                    description: '<p>either FALLBACK or LABEL (Optional)</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Environment'\n              },\n              gridOutput: {\n                name: 'gridOutput',\n                params: [\n                  {\n                    name: 'display',\n                    description: '<p>either FALLBACK or LABEL (Optional)</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Environment'\n              },\n              alpha: {\n                name: 'alpha',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              blue: {\n                name: 'blue',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              brightness: {\n                name: 'brightness',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              color: {\n                name: 'color',\n                class: 'p5',\n                module: 'Color',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'gray',\n                        description:\n                          '<p>number specifying value between white and black.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description:\n                          '<p>alpha value relative to current color range\\n                                (default is 0-255)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'p5.Color'\n                      }\n                    ]\n                  }\n                ]\n              },\n              green: {\n                name: 'green',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              hue: {\n                name: 'hue',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              lerpColor: {\n                name: 'lerpColor',\n                params: [\n                  {\n                    name: 'c1',\n                    description: '<p>interpolate from this color</p>\\n',\n                    type: 'p5.Color'\n                  },\n                  {\n                    name: 'c2',\n                    description: '<p>interpolate to this color</p>\\n',\n                    type: 'p5.Color'\n                  },\n                  {\n                    name: 'amt',\n                    description: '<p>number between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              lightness: {\n                name: 'lightness',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              red: {\n                name: 'red',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              saturation: {\n                name: 'saturation',\n                params: [\n                  {\n                    name: 'color',\n                    description:\n                      '<p><a href=\"#/p5.Color\">p5.Color</a> object, color components,\\n                                        or CSS color</p>\\n',\n                    type: 'p5.Color|Number[]|String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              background: {\n                name: 'background',\n                class: 'p5',\n                module: 'Color',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description:\n                          '<p>any value created by the <a href=\"#/p5/color\">color()</a> function</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'colorstring',\n                        description:\n                          '<p>color string, possible formats include: integer\\n                        rgb() or rgba(), percentage rgb() or rgba(),\\n                        3-digit hex, 6-digit hex</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'a',\n                        description:\n                          '<p>opacity of the background relative to current\\n                            color range (default is 0-255)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>specifies a value between white and black</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'a',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value (depending on the current color\\n                       mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value (depending on the current\\n                       color mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value (depending on the current\\n                       color mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'a',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red, green, blue\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'image',\n                        description:\n                          '<p>image created with <a href=\"#/p5/loadImage\">loadImage()</a> or <a href=\"#/p5/createImage\">createImage()</a>,\\n                            to set as background\\n                            (must be same size as the sketch window)</p>\\n',\n                        type: 'p5.Image'\n                      },\n                      {\n                        name: 'a',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              clear: {\n                name: 'clear',\n                class: 'p5',\n                module: 'Color'\n              },\n              colorMode: {\n                name: 'colorMode',\n                class: 'p5',\n                module: 'Color',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'mode',\n                        description:\n                          '<p>either RGB, HSB or HSL, corresponding to\\n                         Red/Green/Blue and Hue/Saturation/Brightness\\n                         (or Lightness)</p>\\n',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'max',\n                        description: '<p>range for all values</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'mode',\n                        description: '',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'max1',\n                        description:\n                          '<p>range for the red or hue depending on the\\n                             current color mode</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'max2',\n                        description:\n                          '<p>range for the green or saturation depending\\n                             on the current color mode</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'max3',\n                        description:\n                          '<p>range for the blue or brightness/lightness\\n                             depending on the current color mode</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'maxA',\n                        description: '<p>range for the alpha</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              fill: {\n                name: 'fill',\n                class: 'p5',\n                module: 'Color',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the fill color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              noFill: {\n                name: 'noFill',\n                class: 'p5',\n                module: 'Color'\n              },\n              noStroke: {\n                name: 'noStroke',\n                class: 'p5',\n                module: 'Color'\n              },\n              stroke: {\n                name: 'stroke',\n                class: 'p5',\n                module: 'Color',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the stroke color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              erase: {\n                name: 'erase',\n                params: [\n                  {\n                    name: 'strengthFill',\n                    description:\n                      \"<p>A number (0-255) for the strength of erasing for a shape's fill.\\n                                       This will default to 255 when no argument is given, which\\n                                       is full strength.</p>\\n\",\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'strengthStroke',\n                    description:\n                      \"<p>A number (0-255) for the strength of erasing for a shape's stroke.\\n                                       This will default to 255 when no argument is given, which\\n                                       is full strength.</p>\\n\",\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Color'\n              },\n              noErase: {\n                name: 'noErase',\n                class: 'p5',\n                module: 'Color'\n              },\n              arc: {\n                name: 'arc',\n                params: [\n                  {\n                    name: 'x',\n                    description: \"<p>x-coordinate of the arc's ellipse</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: \"<p>y-coordinate of the arc's ellipse</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'w',\n                    description: \"<p>width of the arc's ellipse by default</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: \"<p>height of the arc's ellipse by default</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'start',\n                    description: '<p>angle to start the arc, specified in radians</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop',\n                    description: '<p>angle to stop the arc, specified in radians</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'mode',\n                    description:\n                      '<p>optional parameter to determine the way of drawing\\n                        the arc. either CHORD, PIE or OPEN</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  },\n                  {\n                    name: 'detail',\n                    description:\n                      '<p>optional parameter for WebGL mode only. This is to\\n                        specify the number of vertices that makes up the\\n                        perimeter of the arc. Default value is 25.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              ellipse: {\n                name: 'ellipse',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the center of ellipse.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the center of ellipse.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '<p>width of the ellipse.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '<p>height of the ellipse.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'detail',\n                        description:\n                          '<p>number of radial sectors to draw (for WebGL mode)</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  }\n                ]\n              },\n              circle: {\n                name: 'circle',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the centre of the circle.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the centre of the circle.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>diameter of the circle.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              line: {\n                name: 'line',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '<p>the x-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '<p>the y-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>the x-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>the y-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description: '<p>the z-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>the z-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              point: {\n                name: 'point',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x-coordinate</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y-coordinate</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z-coordinate (for WebGL mode)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'coordinate_vector',\n                        description: '<p>the coordinate vector</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              quad: {\n                name: 'quad',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '<p>the x-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '<p>the y-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>the x-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>the y-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>the x-coordinate of the third point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>the y-coordinate of the third point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '<p>the x-coordinate of the fourth point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '<p>the y-coordinate of the fourth point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description: '<p>the z-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>the z-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description: '<p>the z-coordinate of the third point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z4',\n                        description: '<p>the z-coordinate of the fourth point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              rect: {\n                name: 'rect',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the rectangle.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the rectangle.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '<p>width of the rectangle.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '<p>height of the rectangle.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'tl',\n                        description: '<p>optional radius of top-left corner.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'tr',\n                        description: '<p>optional radius of top-right corner.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'br',\n                        description: '<p>optional radius of bottom-right corner.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'bl',\n                        description: '<p>optional radius of bottom-left corner.</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'detailX',\n                        description:\n                          '<p>number of segments in the x-direction (for WebGL mode)</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'detailY',\n                        description:\n                          '<p>number of segments in the y-direction (for WebGL mode)</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              square: {\n                name: 'square',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the square.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the square.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 's',\n                    description: '<p>side size of the square.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'tl',\n                    description: '<p>optional radius of top-left corner.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'tr',\n                    description: '<p>optional radius of top-right corner.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'br',\n                    description: '<p>optional radius of bottom-right corner.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'bl',\n                    description: '<p>optional radius of bottom-left corner.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              triangle: {\n                name: 'triangle',\n                params: [\n                  {\n                    name: 'x1',\n                    description: '<p>x-coordinate of the first point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y1',\n                    description: '<p>y-coordinate of the first point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'x2',\n                    description: '<p>x-coordinate of the second point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y2',\n                    description: '<p>y-coordinate of the second point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'x3',\n                    description: '<p>x-coordinate of the third point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y3',\n                    description: '<p>y-coordinate of the third point</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              ellipseMode: {\n                name: 'ellipseMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either CENTER, RADIUS, CORNER, or CORNERS</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              noSmooth: {\n                name: 'noSmooth',\n                class: 'p5',\n                module: 'Shape'\n              },\n              rectMode: {\n                name: 'rectMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either CORNER, CORNERS, CENTER, or RADIUS</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              smooth: {\n                name: 'smooth',\n                class: 'p5',\n                module: 'Shape'\n              },\n              strokeCap: {\n                name: 'strokeCap',\n                params: [\n                  {\n                    name: 'cap',\n                    description: '<p>either ROUND, SQUARE or PROJECT</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              strokeJoin: {\n                name: 'strokeJoin',\n                params: [\n                  {\n                    name: 'join',\n                    description: '<p>either MITER, BEVEL, ROUND</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              strokeWeight: {\n                name: 'strokeWeight',\n                params: [\n                  {\n                    name: 'weight',\n                    description: '<p>the weight of the stroke (in pixels)</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              bezier: {\n                name: 'bezier',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '<p>x-coordinate for the first anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '<p>y-coordinate for the first anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>x-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>y-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>x-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>y-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '<p>x-coordinate for the second anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '<p>y-coordinate for the second anchor point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description: '<p>z-coordinate for the first anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>z-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description: '<p>z-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z4',\n                        description: '<p>z-coordinate for the second anchor point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              bezierDetail: {\n                name: 'bezierDetail',\n                params: [\n                  {\n                    name: 'detail',\n                    description: '<p>resolution of the curves</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              bezierPoint: {\n                name: 'bezierPoint',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>coordinate of first point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>coordinate of first control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description: '<p>coordinate of second control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>coordinate of second point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 't',\n                    description: '<p>value between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              bezierTangent: {\n                name: 'bezierTangent',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>coordinate of first point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>coordinate of first control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description: '<p>coordinate of second control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>coordinate of second point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 't',\n                    description: '<p>value between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              curve: {\n                name: 'curve',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description:\n                          '<p>x-coordinate for the beginning control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description:\n                          '<p>y-coordinate for the beginning control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>x-coordinate for the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>y-coordinate for the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>x-coordinate for the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>y-coordinate for the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '<p>x-coordinate for the ending control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '<p>y-coordinate for the ending control point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description:\n                          '<p>z-coordinate for the beginning control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>z-coordinate for the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description: '<p>z-coordinate for the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z4',\n                        description: '<p>z-coordinate for the ending control point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              curveDetail: {\n                name: 'curveDetail',\n                params: [\n                  {\n                    name: 'resolution',\n                    description: '<p>resolution of the curves</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              curveTightness: {\n                name: 'curveTightness',\n                params: [\n                  {\n                    name: 'amount',\n                    description:\n                      '<p>amount of deformation from the original vertices</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              curvePoint: {\n                name: 'curvePoint',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>coordinate of first control point of the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>coordinate of first point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description: '<p>coordinate of second point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>coordinate of second control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 't',\n                    description: '<p>value between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              curveTangent: {\n                name: 'curveTangent',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>coordinate of first control point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>coordinate of first point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description: '<p>coordinate of second point on the curve</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description: '<p>coordinate of second conrol point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 't',\n                    description: '<p>value between 0 and 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              beginContour: {\n                name: 'beginContour',\n                class: 'p5',\n                module: 'Shape'\n              },\n              beginShape: {\n                name: 'beginShape',\n                params: [\n                  {\n                    name: 'kind',\n                    description:\n                      '<p>either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\\n                               TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              bezierVertex: {\n                name: 'bezierVertex',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x2',\n                        description: '<p>x-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>y-coordinate for the first control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>x-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>y-coordinate for the second control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '<p>x-coordinate for the anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '<p>y-coordinate for the anchor point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description:\n                          '<p>z-coordinate for the first control point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description:\n                          '<p>z-coordinate for the second control point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y4',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z4',\n                        description:\n                          '<p>z-coordinate for the anchor point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              curveVertex: {\n                name: 'curveVertex',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z-coordinate of the vertex (for WebGL mode)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              endContour: {\n                name: 'endContour',\n                class: 'p5',\n                module: 'Shape'\n              },\n              endShape: {\n                name: 'endShape',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>use CLOSE to close the shape</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              quadraticVertex: {\n                name: 'quadraticVertex',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'cx',\n                        description: '<p>x-coordinate for the control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'cy',\n                        description: '<p>y-coordinate for the control point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '<p>x-coordinate for the anchor point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '<p>y-coordinate for the anchor point</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'cx',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'cy',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'cz',\n                        description:\n                          '<p>z-coordinate for the control point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z3',\n                        description:\n                          '<p>z-coordinate for the anchor point (for WebGL mode)</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              vertex: {\n                name: 'vertex',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z-coordinate of the vertex</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'u',\n                        description: \"<p>the vertex's texture u-coordinate</p>\\n\",\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'v',\n                        description: \"<p>the vertex's texture v-coordinate</p>\\n\",\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              P2D: {\n                name: 'P2D',\n                class: 'p5',\n                module: 'Constants'\n              },\n              WEBGL: {\n                name: 'WEBGL',\n                class: 'p5',\n                module: 'Constants'\n              },\n              ARROW: {\n                name: 'ARROW',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CROSS: {\n                name: 'CROSS',\n                class: 'p5',\n                module: 'Constants'\n              },\n              HAND: {\n                name: 'HAND',\n                class: 'p5',\n                module: 'Constants'\n              },\n              MOVE: {\n                name: 'MOVE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TEXT: {\n                name: 'TEXT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              WAIT: {\n                name: 'WAIT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              HALF_PI: {\n                name: 'HALF_PI',\n                class: 'p5',\n                module: 'Constants'\n              },\n              PI: {\n                name: 'PI',\n                class: 'p5',\n                module: 'Constants'\n              },\n              QUARTER_PI: {\n                name: 'QUARTER_PI',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TAU: {\n                name: 'TAU',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TWO_PI: {\n                name: 'TWO_PI',\n                class: 'p5',\n                module: 'Constants'\n              },\n              DEGREES: {\n                name: 'DEGREES',\n                class: 'p5',\n                module: 'Constants'\n              },\n              RADIANS: {\n                name: 'RADIANS',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CORNER: {\n                name: 'CORNER',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CORNERS: {\n                name: 'CORNERS',\n                class: 'p5',\n                module: 'Constants'\n              },\n              RADIUS: {\n                name: 'RADIUS',\n                class: 'p5',\n                module: 'Constants'\n              },\n              RIGHT: {\n                name: 'RIGHT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LEFT: {\n                name: 'LEFT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CENTER: {\n                name: 'CENTER',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TOP: {\n                name: 'TOP',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BOTTOM: {\n                name: 'BOTTOM',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BASELINE: {\n                name: 'BASELINE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              POINTS: {\n                name: 'POINTS',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LINES: {\n                name: 'LINES',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LINE_STRIP: {\n                name: 'LINE_STRIP',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LINE_LOOP: {\n                name: 'LINE_LOOP',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TRIANGLES: {\n                name: 'TRIANGLES',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TRIANGLE_FAN: {\n                name: 'TRIANGLE_FAN',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TRIANGLE_STRIP: {\n                name: 'TRIANGLE_STRIP',\n                class: 'p5',\n                module: 'Constants'\n              },\n              QUADS: {\n                name: 'QUADS',\n                class: 'p5',\n                module: 'Constants'\n              },\n              QUAD_STRIP: {\n                name: 'QUAD_STRIP',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TESS: {\n                name: 'TESS',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CLOSE: {\n                name: 'CLOSE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              OPEN: {\n                name: 'OPEN',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CHORD: {\n                name: 'CHORD',\n                class: 'p5',\n                module: 'Constants'\n              },\n              PIE: {\n                name: 'PIE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              PROJECT: {\n                name: 'PROJECT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              SQUARE: {\n                name: 'SQUARE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              ROUND: {\n                name: 'ROUND',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BEVEL: {\n                name: 'BEVEL',\n                class: 'p5',\n                module: 'Constants'\n              },\n              MITER: {\n                name: 'MITER',\n                class: 'p5',\n                module: 'Constants'\n              },\n              RGB: {\n                name: 'RGB',\n                class: 'p5',\n                module: 'Constants'\n              },\n              HSB: {\n                name: 'HSB',\n                class: 'p5',\n                module: 'Constants'\n              },\n              HSL: {\n                name: 'HSL',\n                class: 'p5',\n                module: 'Constants'\n              },\n              AUTO: {\n                name: 'AUTO',\n                class: 'p5',\n                module: 'Constants'\n              },\n              ALT: {\n                name: 'ALT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BACKSPACE: {\n                name: 'BACKSPACE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CONTROL: {\n                name: 'CONTROL',\n                class: 'p5',\n                module: 'Constants'\n              },\n              DELETE: {\n                name: 'DELETE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              DOWN_ARROW: {\n                name: 'DOWN_ARROW',\n                class: 'p5',\n                module: 'Constants'\n              },\n              ENTER: {\n                name: 'ENTER',\n                class: 'p5',\n                module: 'Constants'\n              },\n              ESCAPE: {\n                name: 'ESCAPE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LEFT_ARROW: {\n                name: 'LEFT_ARROW',\n                class: 'p5',\n                module: 'Constants'\n              },\n              OPTION: {\n                name: 'OPTION',\n                class: 'p5',\n                module: 'Constants'\n              },\n              RETURN: {\n                name: 'RETURN',\n                class: 'p5',\n                module: 'Constants'\n              },\n              RIGHT_ARROW: {\n                name: 'RIGHT_ARROW',\n                class: 'p5',\n                module: 'Constants'\n              },\n              SHIFT: {\n                name: 'SHIFT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TAB: {\n                name: 'TAB',\n                class: 'p5',\n                module: 'Constants'\n              },\n              UP_ARROW: {\n                name: 'UP_ARROW',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BLEND: {\n                name: 'BLEND',\n                class: 'p5',\n                module: 'Constants'\n              },\n              REMOVE: {\n                name: 'REMOVE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              ADD: {\n                name: 'ADD',\n                class: 'p5',\n                module: 'Constants'\n              },\n              DARKEST: {\n                name: 'DARKEST',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LIGHTEST: {\n                name: 'LIGHTEST',\n                class: 'p5',\n                module: 'Constants'\n              },\n              DIFFERENCE: {\n                name: 'DIFFERENCE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              SUBTRACT: {\n                name: 'SUBTRACT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              EXCLUSION: {\n                name: 'EXCLUSION',\n                class: 'p5',\n                module: 'Constants'\n              },\n              MULTIPLY: {\n                name: 'MULTIPLY',\n                class: 'p5',\n                module: 'Constants'\n              },\n              SCREEN: {\n                name: 'SCREEN',\n                class: 'p5',\n                module: 'Constants'\n              },\n              REPLACE: {\n                name: 'REPLACE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              OVERLAY: {\n                name: 'OVERLAY',\n                class: 'p5',\n                module: 'Constants'\n              },\n              HARD_LIGHT: {\n                name: 'HARD_LIGHT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              SOFT_LIGHT: {\n                name: 'SOFT_LIGHT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              DODGE: {\n                name: 'DODGE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BURN: {\n                name: 'BURN',\n                class: 'p5',\n                module: 'Constants'\n              },\n              THRESHOLD: {\n                name: 'THRESHOLD',\n                class: 'p5',\n                module: 'Constants'\n              },\n              GRAY: {\n                name: 'GRAY',\n                class: 'p5',\n                module: 'Constants'\n              },\n              OPAQUE: {\n                name: 'OPAQUE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              INVERT: {\n                name: 'INVERT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              POSTERIZE: {\n                name: 'POSTERIZE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              DILATE: {\n                name: 'DILATE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              ERODE: {\n                name: 'ERODE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BLUR: {\n                name: 'BLUR',\n                class: 'p5',\n                module: 'Constants'\n              },\n              NORMAL: {\n                name: 'NORMAL',\n                class: 'p5',\n                module: 'Constants'\n              },\n              ITALIC: {\n                name: 'ITALIC',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BOLD: {\n                name: 'BOLD',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BOLDITALIC: {\n                name: 'BOLDITALIC',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LINEAR: {\n                name: 'LINEAR',\n                class: 'p5',\n                module: 'Constants'\n              },\n              QUADRATIC: {\n                name: 'QUADRATIC',\n                class: 'p5',\n                module: 'Constants'\n              },\n              BEZIER: {\n                name: 'BEZIER',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CURVE: {\n                name: 'CURVE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              STROKE: {\n                name: 'STROKE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              FILL: {\n                name: 'FILL',\n                class: 'p5',\n                module: 'Constants'\n              },\n              TEXTURE: {\n                name: 'TEXTURE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              IMMEDIATE: {\n                name: 'IMMEDIATE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              IMAGE: {\n                name: 'IMAGE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              NEAREST: {\n                name: 'NEAREST',\n                class: 'p5',\n                module: 'Constants'\n              },\n              REPEAT: {\n                name: 'REPEAT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              CLAMP: {\n                name: 'CLAMP',\n                class: 'p5',\n                module: 'Constants'\n              },\n              MIRROR: {\n                name: 'MIRROR',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LANDSCAPE: {\n                name: 'LANDSCAPE',\n                class: 'p5',\n                module: 'Constants'\n              },\n              PORTRAIT: {\n                name: 'PORTRAIT',\n                class: 'p5',\n                module: 'Constants'\n              },\n              GRID: {\n                name: 'GRID',\n                class: 'p5',\n                module: 'Constants'\n              },\n              AXES: {\n                name: 'AXES',\n                class: 'p5',\n                module: 'Constants'\n              },\n              LABEL: {\n                name: 'LABEL',\n                class: 'p5',\n                module: 'Constants'\n              },\n              FALLBACK: {\n                name: 'FALLBACK',\n                class: 'p5',\n                module: 'Constants'\n              },\n              print: {\n                name: 'print',\n                params: [\n                  {\n                    name: 'contents',\n                    description:\n                      '<p>any combination of Number, String, Object, Boolean,\\n                      Array to print</p>\\n',\n                    type: 'Any'\n                  }\n                ],\n                class: 'p5',\n                module: 'Environment'\n              },\n              frameCount: {\n                name: 'frameCount',\n                class: 'p5',\n                module: 'Environment'\n              },\n              deltaTime: {\n                name: 'deltaTime',\n                class: 'p5',\n                module: 'Environment'\n              },\n              focused: {\n                name: 'focused',\n                class: 'p5',\n                module: 'Environment'\n              },\n              cursor: {\n                name: 'cursor',\n                params: [\n                  {\n                    name: 'type',\n                    description:\n                      \"<p>Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\\n                              Native CSS properties: 'grab', 'progress', 'cell' etc.\\n                              External: path for cursor's images\\n                              (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\\n                              For more information on Native CSS cursors and url visit:\\n                              <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\\\">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a></p>\\n\",\n                    type: 'String|Constant'\n                  },\n                  {\n                    name: 'x',\n                    description:\n                      '<p>the horizontal active spot of the cursor (must be less than 32)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description:\n                      '<p>the vertical active spot of the cursor (must be less than 32)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Environment'\n              },\n              frameRate: {\n                name: 'frameRate',\n                class: 'p5',\n                module: 'Environment',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'fps',\n                        description:\n                          '<p>number of frames to be displayed every second</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              noCursor: {\n                name: 'noCursor',\n                class: 'p5',\n                module: 'Environment'\n              },\n              displayWidth: {\n                name: 'displayWidth',\n                class: 'p5',\n                module: 'Environment'\n              },\n              displayHeight: {\n                name: 'displayHeight',\n                class: 'p5',\n                module: 'Environment'\n              },\n              windowWidth: {\n                name: 'windowWidth',\n                class: 'p5',\n                module: 'Environment'\n              },\n              windowHeight: {\n                name: 'windowHeight',\n                class: 'p5',\n                module: 'Environment'\n              },\n              windowResized: {\n                name: 'windowResized',\n                class: 'p5',\n                module: 'Environment'\n              },\n              width: {\n                name: 'width',\n                class: 'p5',\n                module: 'Environment'\n              },\n              height: {\n                name: 'height',\n                class: 'p5',\n                module: 'Environment'\n              },\n              fullscreen: {\n                name: 'fullscreen',\n                params: [\n                  {\n                    name: 'val',\n                    description:\n                      '<p>whether the sketch should be in fullscreen mode\\nor not</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Environment'\n              },\n              pixelDensity: {\n                name: 'pixelDensity',\n                class: 'p5',\n                module: 'Environment',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'val',\n                        description: '<p>whether or how much the sketch should scale</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              displayDensity: {\n                name: 'displayDensity',\n                class: 'p5',\n                module: 'Environment'\n              },\n              getURL: {\n                name: 'getURL',\n                class: 'p5',\n                module: 'Environment'\n              },\n              getURLPath: {\n                name: 'getURLPath',\n                class: 'p5',\n                module: 'Environment'\n              },\n              getURLParams: {\n                name: 'getURLParams',\n                class: 'p5',\n                module: 'Environment'\n              },\n              preload: {\n                name: 'preload',\n                class: 'p5',\n                module: 'Structure'\n              },\n              setup: {\n                name: 'setup',\n                class: 'p5',\n                module: 'Structure'\n              },\n              draw: {\n                name: 'draw',\n                class: 'p5',\n                module: 'Structure'\n              },\n              remove: {\n                name: 'remove',\n                class: 'p5',\n                module: 'Structure'\n              },\n              disableFriendlyErrors: {\n                name: 'disableFriendlyErrors',\n                class: 'p5',\n                module: 'Structure'\n              },\n              let: {\n                name: 'let',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              const: {\n                name: 'const',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              '===': {\n                name: '===',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              '>': {\n                name: '>',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              '>=': {\n                name: '>=',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              '<': {\n                name: '<',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              '<=': {\n                name: '<=',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              'if-else': {\n                name: 'if-else',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              function: {\n                name: 'function',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              return: {\n                name: 'return',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              boolean: {\n                name: 'boolean',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>value to parse</p>\\n',\n                    type: 'String|Boolean|Number|Array'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              string: {\n                name: 'string',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              number: {\n                name: 'number',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              object: {\n                name: 'object',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              class: {\n                name: 'class',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              for: {\n                name: 'for',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              while: {\n                name: 'while',\n                class: 'p5',\n                module: 'Foundation'\n              },\n              createCanvas: {\n                name: 'createCanvas',\n                params: [\n                  {\n                    name: 'w',\n                    description: '<p>width of the canvas</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of the canvas</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'renderer',\n                    description: '<p>either P2D or WEBGL</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Rendering'\n              },\n              resizeCanvas: {\n                name: 'resizeCanvas',\n                params: [\n                  {\n                    name: 'w',\n                    description: '<p>width of the canvas</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of the canvas</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'noRedraw',\n                    description: \"<p>don't redraw the canvas immediately</p>\\n\",\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Rendering'\n              },\n              noCanvas: {\n                name: 'noCanvas',\n                class: 'p5',\n                module: 'Rendering'\n              },\n              createGraphics: {\n                name: 'createGraphics',\n                params: [\n                  {\n                    name: 'w',\n                    description: '<p>width of the offscreen graphics buffer</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of the offscreen graphics buffer</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'renderer',\n                    description:\n                      '<p>either P2D or WEBGL\\n                              undefined defaults to p2d</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Rendering'\n              },\n              blendMode: {\n                name: 'blendMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description:\n                      '<p>blend mode to set for canvas.\\n               either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\\n               EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\\n               SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                class: 'p5',\n                module: 'Rendering'\n              },\n              drawingContext: {\n                name: 'drawingContext',\n                class: 'p5',\n                module: 'Rendering'\n              },\n              noLoop: {\n                name: 'noLoop',\n                class: 'p5',\n                module: 'Structure'\n              },\n              loop: {\n                name: 'loop',\n                class: 'p5',\n                module: 'Structure'\n              },\n              isLooping: {\n                name: 'isLooping',\n                class: 'p5',\n                module: 'Structure'\n              },\n              push: {\n                name: 'push',\n                class: 'p5',\n                module: 'Structure'\n              },\n              pop: {\n                name: 'pop',\n                class: 'p5',\n                module: 'Structure'\n              },\n              redraw: {\n                name: 'redraw',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>Redraw for n-times. The default value is 1.</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Structure'\n              },\n              p5: {\n                name: 'p5',\n                params: [\n                  {\n                    name: 'sketch',\n                    description: '<p>a function containing a p5.js sketch</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'node',\n                    description:\n                      '<p>ID or pointer to HTML DOM node to contain sketch in</p>\\n',\n                    type: 'String|Object'\n                  }\n                ],\n                class: 'p5',\n                module: 'Structure'\n              },\n              applyMatrix: {\n                name: 'applyMatrix',\n                params: [\n                  {\n                    name: 'a',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'd',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'e',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'f',\n                    description:\n                      '<p>numbers which define the 2x3 matrix to be multiplied</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Transform'\n              },\n              resetMatrix: {\n                name: 'resetMatrix',\n                class: 'p5',\n                module: 'Transform'\n              },\n              rotate: {\n                name: 'rotate',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the angle of rotation, specified in radians\\n                       or degrees, depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'axis',\n                    description: '<p>(in 3d) the axis to rotate around</p>\\n',\n                    type: 'p5.Vector|Number[]',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Transform'\n              },\n              rotateX: {\n                name: 'rotateX',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the angle of rotation, specified in radians\\n                       or degrees, depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Transform'\n              },\n              rotateY: {\n                name: 'rotateY',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the angle of rotation, specified in radians\\n                       or degrees, depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Transform'\n              },\n              rotateZ: {\n                name: 'rotateZ',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the angle of rotation, specified in radians\\n                       or degrees, depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Transform'\n              },\n              scale: {\n                name: 'scale',\n                class: 'p5',\n                module: 'Transform',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 's',\n                        description:\n                          '<p>percent to scale the object, or percentage to\\n                     scale the object in the x-axis if multiple arguments\\n                     are given</p>\\n',\n                        type: 'Number|p5.Vector|Number[]'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>percent to scale the object in the y-axis</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description:\n                          '<p>percent to scale the object in the z-axis (webgl only)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'scales',\n                        description: '<p>per-axis percents to scale the object</p>\\n',\n                        type: 'p5.Vector|Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              shearX: {\n                name: 'shearX',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>angle of shear specified in radians or degrees,\\n                       depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Transform'\n              },\n              shearY: {\n                name: 'shearY',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>angle of shear specified in radians or degrees,\\n                       depending on current angleMode</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Transform'\n              },\n              translate: {\n                name: 'translate',\n                class: 'p5',\n                module: 'Transform',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>left/right translation</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>up/down translation</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>forward/backward translation (webgl only)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'vector',\n                        description: '<p>the vector to translate by</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              storeItem: {\n                name: 'storeItem',\n                params: [\n                  {\n                    name: 'key',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'value',\n                    description: '',\n                    type: 'String|Number|Object|Boolean|p5.Color|p5.Vector'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              getItem: {\n                name: 'getItem',\n                params: [\n                  {\n                    name: 'key',\n                    description:\n                      '<p>name that you wish to use to store in local storage</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              clearStorage: {\n                name: 'clearStorage',\n                class: 'p5',\n                module: 'Data'\n              },\n              removeItem: {\n                name: 'removeItem',\n                params: [\n                  {\n                    name: 'key',\n                    description: '',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              createStringDict: {\n                name: 'createStringDict',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'key',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'object',\n                        description: '<p>object</p>\\n',\n                        type: 'Object'\n                      }\n                    ]\n                  }\n                ]\n              },\n              createNumberDict: {\n                name: 'createNumberDict',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'key',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'object',\n                        description: '<p>object</p>\\n',\n                        type: 'Object'\n                      }\n                    ]\n                  }\n                ]\n              },\n              select: {\n                name: 'select',\n                params: [\n                  {\n                    name: 'selectors',\n                    description: '<p>CSS selector string of element to search for</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'container',\n                    description:\n                      '<p>CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\\n                                            HTML element to search within</p>\\n',\n                    type: 'String|p5.Element|HTMLElement',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              selectAll: {\n                name: 'selectAll',\n                params: [\n                  {\n                    name: 'selectors',\n                    description: '<p>CSS selector string of elements to search for</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'container',\n                    description:\n                      '<p>CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>\\n                                            , or HTML element to search within</p>\\n',\n                    type: 'String|p5.Element|HTMLElement',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              removeElements: {\n                name: 'removeElements',\n                class: 'p5',\n                module: 'DOM'\n              },\n              changed: {\n                name: 'changed',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when the value of\\n                               an element changes.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              input: {\n                name: 'input',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when any user input is\\n                               detected within the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createDiv: {\n                name: 'createDiv',\n                params: [\n                  {\n                    name: 'html',\n                    description: '<p>inner HTML for element created</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createP: {\n                name: 'createP',\n                params: [\n                  {\n                    name: 'html',\n                    description: '<p>inner HTML for element created</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createSpan: {\n                name: 'createSpan',\n                params: [\n                  {\n                    name: 'html',\n                    description: '<p>inner HTML for element created</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createImg: {\n                name: 'createImg',\n                class: 'p5',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'src',\n                        description: '<p>src path or url for image</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'alt',\n                        description:\n                          '<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes\">alternate text</a> to be used if image does not load. You can use also an empty string (<code>\"\"</code>) if that an image is not intended to be viewed.</p>\\n',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'src',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'alt',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'crossOrigin',\n                        description:\n                          '<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">crossOrigin property</a> of the <code>img</code> element; use either \\'anonymous\\' or \\'use-credentials\\' to retrieve the image with cross-origin access (for later use with <code>canvas</code>. if an empty string(<code>\"\"</code>) is passed, CORS is not used</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'successCallback',\n                        description:\n                          '<p>callback to be called once image data is loaded with the <a href=\"#/p5.Element\">p5.Element</a> as argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              createA: {\n                name: 'createA',\n                params: [\n                  {\n                    name: 'href',\n                    description: '<p>url of page to link to</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'html',\n                    description: '<p>inner html of link element to display</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'target',\n                    description:\n                      '<p>target where new link should open,\\n                            could be _blank, _self, _parent, _top.</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createSlider: {\n                name: 'createSlider',\n                params: [\n                  {\n                    name: 'min',\n                    description: '<p>minimum value of the slider</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'max',\n                    description: '<p>maximum value of the slider</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>default value of the slider</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'step',\n                    description:\n                      '<p>step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createButton: {\n                name: 'createButton',\n                params: [\n                  {\n                    name: 'label',\n                    description: '<p>label displayed on the button</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value of the button</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createCheckbox: {\n                name: 'createCheckbox',\n                params: [\n                  {\n                    name: 'label',\n                    description: '<p>label displayed after checkbox</p>\\n',\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>value of the checkbox; checked is true, unchecked is false</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createSelect: {\n                name: 'createSelect',\n                class: 'p5',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'multiple',\n                        description:\n                          '<p>true if dropdown should support multiple selections</p>\\n',\n                        type: 'Boolean',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'existing',\n                        description: '<p>DOM select element</p>\\n',\n                        type: 'Object'\n                      }\n                    ]\n                  }\n                ]\n              },\n              createRadio: {\n                name: 'createRadio',\n                class: 'p5',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'containerElement',\n                        description:\n                          '<p>An container HTML Element either a div\\nor span inside which all existing radio inputs will be considered as options.</p>\\n',\n                        type: 'Object'\n                      },\n                      {\n                        name: 'name',\n                        description: '<p>A name parameter for each Input Element.</p>\\n',\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'name',\n                        description: '',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              createColorPicker: {\n                name: 'createColorPicker',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>default color of element</p>\\n',\n                    type: 'String|p5.Color',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createInput: {\n                name: 'createInput',\n                class: 'p5',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>default value of the input box</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'type',\n                        description:\n                          '<p>type of text, ie text, password etc. Defaults to text.\\n  Needs a value to be specified first.</p>\\n',\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              createFileInput: {\n                name: 'createFileInput',\n                params: [\n                  {\n                    name: 'callback',\n                    description: '<p>callback function for when a file is loaded</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'multiple',\n                    description:\n                      '<p>optional, to allow multiple files to be selected</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createVideo: {\n                name: 'createVideo',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>path to a video file, or array of paths for\\n                            supporting different browsers</p>\\n',\n                    type: 'String|String[]'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      \"<p>callback function to be called upon\\n                            'canplaythrough' event fire, that is, when the\\n                            browser can play the media, and estimates that\\n                            enough data has been loaded to play the media\\n                            up to its end without having to stop for\\n                            further buffering of content</p>\\n\",\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createAudio: {\n                name: 'createAudio',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>path to an audio file, or array of paths\\n                            for supporting different browsers</p>\\n',\n                    type: 'String|String[]',\n                    optional: true\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      \"<p>callback function to be called upon\\n                            'canplaythrough' event fire, that is, when the\\n                            browser can play the media, and estimates that\\n                            enough data has been loaded to play the media\\n                            up to its end without having to stop for\\n                            further buffering of content</p>\\n\",\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              VIDEO: {\n                name: 'VIDEO',\n                class: 'p5',\n                module: 'DOM'\n              },\n              AUDIO: {\n                name: 'AUDIO',\n                class: 'p5',\n                module: 'DOM'\n              },\n              createCapture: {\n                name: 'createCapture',\n                params: [\n                  {\n                    name: 'type',\n                    description:\n                      '<p>type of capture, either VIDEO or\\n                                  AUDIO if none specified, default both,\\n                                  or a Constraints object</p>\\n',\n                    type: 'String|Constant|Object'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be called once\\n                                  stream has loaded</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              createElement: {\n                name: 'createElement',\n                params: [\n                  {\n                    name: 'tag',\n                    description: '<p>tag for the new element</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'content',\n                    description: '<p>html content to be inserted into the element</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'DOM'\n              },\n              deviceOrientation: {\n                name: 'deviceOrientation',\n                class: 'p5',\n                module: 'Events'\n              },\n              accelerationX: {\n                name: 'accelerationX',\n                class: 'p5',\n                module: 'Events'\n              },\n              accelerationY: {\n                name: 'accelerationY',\n                class: 'p5',\n                module: 'Events'\n              },\n              accelerationZ: {\n                name: 'accelerationZ',\n                class: 'p5',\n                module: 'Events'\n              },\n              pAccelerationX: {\n                name: 'pAccelerationX',\n                class: 'p5',\n                module: 'Events'\n              },\n              pAccelerationY: {\n                name: 'pAccelerationY',\n                class: 'p5',\n                module: 'Events'\n              },\n              pAccelerationZ: {\n                name: 'pAccelerationZ',\n                class: 'p5',\n                module: 'Events'\n              },\n              rotationX: {\n                name: 'rotationX',\n                class: 'p5',\n                module: 'Events'\n              },\n              rotationY: {\n                name: 'rotationY',\n                class: 'p5',\n                module: 'Events'\n              },\n              rotationZ: {\n                name: 'rotationZ',\n                class: 'p5',\n                module: 'Events'\n              },\n              pRotationX: {\n                name: 'pRotationX',\n                class: 'p5',\n                module: 'Events'\n              },\n              pRotationY: {\n                name: 'pRotationY',\n                class: 'p5',\n                module: 'Events'\n              },\n              pRotationZ: {\n                name: 'pRotationZ',\n                class: 'p5',\n                module: 'Events'\n              },\n              turnAxis: {\n                name: 'turnAxis',\n                class: 'p5',\n                module: 'Events'\n              },\n              setMoveThreshold: {\n                name: 'setMoveThreshold',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>The threshold value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              setShakeThreshold: {\n                name: 'setShakeThreshold',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>The threshold value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              deviceMoved: {\n                name: 'deviceMoved',\n                class: 'p5',\n                module: 'Events'\n              },\n              deviceTurned: {\n                name: 'deviceTurned',\n                class: 'p5',\n                module: 'Events'\n              },\n              deviceShaken: {\n                name: 'deviceShaken',\n                class: 'p5',\n                module: 'Events'\n              },\n              keyIsPressed: {\n                name: 'keyIsPressed',\n                class: 'p5',\n                module: 'Events'\n              },\n              key: {\n                name: 'key',\n                class: 'p5',\n                module: 'Events'\n              },\n              keyCode: {\n                name: 'keyCode',\n                class: 'p5',\n                module: 'Events'\n              },\n              keyPressed: {\n                name: 'keyPressed',\n                class: 'p5',\n                module: 'Events'\n              },\n              keyReleased: {\n                name: 'keyReleased',\n                class: 'p5',\n                module: 'Events'\n              },\n              keyTyped: {\n                name: 'keyTyped',\n                class: 'p5',\n                module: 'Events'\n              },\n              keyIsDown: {\n                name: 'keyIsDown',\n                params: [\n                  {\n                    name: 'code',\n                    description: '<p>The key to check for.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              movedX: {\n                name: 'movedX',\n                class: 'p5',\n                module: 'Events'\n              },\n              movedY: {\n                name: 'movedY',\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseX: {\n                name: 'mouseX',\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseY: {\n                name: 'mouseY',\n                class: 'p5',\n                module: 'Events'\n              },\n              pmouseX: {\n                name: 'pmouseX',\n                class: 'p5',\n                module: 'Events'\n              },\n              pmouseY: {\n                name: 'pmouseY',\n                class: 'p5',\n                module: 'Events'\n              },\n              winMouseX: {\n                name: 'winMouseX',\n                class: 'p5',\n                module: 'Events'\n              },\n              winMouseY: {\n                name: 'winMouseY',\n                class: 'p5',\n                module: 'Events'\n              },\n              pwinMouseX: {\n                name: 'pwinMouseX',\n                class: 'p5',\n                module: 'Events'\n              },\n              pwinMouseY: {\n                name: 'pwinMouseY',\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseButton: {\n                name: 'mouseButton',\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseIsPressed: {\n                name: 'mouseIsPressed',\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseMoved: {\n                name: 'mouseMoved',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseDragged: {\n                name: 'mouseDragged',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              mousePressed: {\n                name: 'mousePressed',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseReleased: {\n                name: 'mouseReleased',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseClicked: {\n                name: 'mouseClicked',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              doubleClicked: {\n                name: 'doubleClicked',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional MouseEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              mouseWheel: {\n                name: 'mouseWheel',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional WheelEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              requestPointerLock: {\n                name: 'requestPointerLock',\n                class: 'p5',\n                module: 'Events'\n              },\n              exitPointerLock: {\n                name: 'exitPointerLock',\n                class: 'p5',\n                module: 'Events'\n              },\n              touches: {\n                name: 'touches',\n                class: 'p5',\n                module: 'Events'\n              },\n              touchStarted: {\n                name: 'touchStarted',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional TouchEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              touchMoved: {\n                name: 'touchMoved',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional TouchEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              touchEnded: {\n                name: 'touchEnded',\n                params: [\n                  {\n                    name: 'event',\n                    description: '<p>optional TouchEvent callback argument.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Events'\n              },\n              createImage: {\n                name: 'createImage',\n                params: [\n                  {\n                    name: 'width',\n                    description: '<p>width in pixels</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>height in pixels</p>\\n',\n                    type: 'Integer'\n                  }\n                ],\n                class: 'p5',\n                module: 'Image'\n              },\n              saveCanvas: {\n                name: 'saveCanvas',\n                class: 'p5',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'selectedCanvas',\n                        description:\n                          '<p>a variable\\n                                representing a specific html5 canvas (optional)</p>\\n',\n                        type: 'p5.Element|HTMLCanvasElement'\n                      },\n                      {\n                        name: 'filename',\n                        description: '',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'extension',\n                        description: \"<p>'jpg' or 'png'</p>\\n\",\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'filename',\n                        description: '',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'extension',\n                        description: '',\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              saveFrames: {\n                name: 'saveFrames',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: \"<p>'jpg' or 'png'</p>\\n\",\n                    type: 'String'\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>Duration in seconds to save the frames for.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'framerate',\n                    description: '<p>Framerate to save the frames in.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>A callback function that will be executed\\n                                to handle the image data. This function\\n                                should accept an array as argument. The\\n                                array will contain the specified number of\\n                                frames of objects. Each object has three\\n                                properties: imageData - an\\n                                image/octet-stream, filename and extension.</p>\\n',\n                    type: 'Function(Array)',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Image'\n              },\n              loadImage: {\n                name: 'loadImage',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>Path of the image to be loaded</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'successCallback',\n                    description:\n                      '<p>Function to be called once\\n                               the image is loaded. Will be passed the\\n                               <a href=\"#/p5.Image\">p5.Image</a>.</p>\\n',\n                    type: 'function(p5.Image)',\n                    optional: true\n                  },\n                  {\n                    name: 'failureCallback',\n                    description:\n                      '<p>called with event error if\\n                               the image fails to load.</p>\\n',\n                    type: 'Function(Event)',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Image'\n              },\n              image: {\n                name: 'image',\n                class: 'p5',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'img',\n                        description: '<p>the image to display</p>\\n',\n                        type: 'p5.Image|p5.Element'\n                      },\n                      {\n                        name: 'x',\n                        description:\n                          '<p>the x-coordinate of the top-left corner of the image</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description:\n                          '<p>the y-coordinate of the top-left corner of the image</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'width',\n                        description: '<p>the width to draw the image</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'height',\n                        description: '<p>the height to draw the image</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'img',\n                        description: '',\n                        type: 'p5.Image|p5.Element'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          '<p>the x-coordinate of the destination\\n                          rectangle in which to draw the source image</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          '<p>the y-coordinate of the destination\\n                          rectangle in which to draw the source image</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'dWidth',\n                        description: '<p>the width of the destination rectangle</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'dHeight',\n                        description: '<p>the height of the destination rectangle</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          '<p>the x-coordinate of the subsection of the source\\nimage to draw into the destination rectangle</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          '<p>the y-coordinate of the subsection of the source\\nimage to draw into the destination rectangle</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'sWidth',\n                        description:\n                          '<p>the width of the subsection of the\\n                          source image to draw into the destination\\n                          rectangle</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'sHeight',\n                        description:\n                          '<p>the height of the subsection of the\\n                           source image to draw into the destination rectangle</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              tint: {\n                name: 'tint',\n                class: 'p5',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the tint color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ]\n                  }\n                ]\n              },\n              noTint: {\n                name: 'noTint',\n                class: 'p5',\n                module: 'Image'\n              },\n              imageMode: {\n                name: 'imageMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either CORNER, CORNERS, or CENTER</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                class: 'p5',\n                module: 'Image'\n              },\n              pixels: {\n                name: 'pixels',\n                class: 'p5',\n                module: 'Image'\n              },\n              blend: {\n                name: 'blend',\n                class: 'p5',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'srcImage',\n                        description: '<p>source image</p>\\n',\n                        type: 'p5.Image'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          \"<p>X coordinate of the source's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          \"<p>Y coordinate of the source's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '<p>source image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '<p>source image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          \"<p>X coordinate of the destination's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          \"<p>Y coordinate of the destination's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '<p>destination image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '<p>destination image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'blendMode',\n                        description:\n                          '<p>the blend mode. either\\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\\n',\n                        type: 'Constant'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'sx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'blendMode',\n                        description: '',\n                        type: 'Constant'\n                      }\n                    ]\n                  }\n                ]\n              },\n              copy: {\n                name: 'copy',\n                class: 'p5',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'srcImage',\n                        description: '<p>source image</p>\\n',\n                        type: 'p5.Image|p5.Element'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          \"<p>X coordinate of the source's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          \"<p>Y coordinate of the source's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '<p>source image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '<p>source image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          \"<p>X coordinate of the destination's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          \"<p>Y coordinate of the destination's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '<p>destination image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '<p>destination image height</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'sx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '',\n                        type: 'Integer'\n                      }\n                    ]\n                  }\n                ]\n              },\n              filter: {\n                name: 'filter',\n                params: [\n                  {\n                    name: 'filterType',\n                    description:\n                      '<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\\n                               See Filters.js for docs on\\n                               each available filter</p>\\n',\n                    type: 'Constant'\n                  },\n                  {\n                    name: 'filterParam',\n                    description:\n                      '<p>an optional parameter unique\\n                               to each filter, see above</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Image'\n              },\n              get: {\n                name: 'get',\n                class: 'p5',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the pixel</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the pixel</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '<p>width</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '<p>height</p>\\n',\n                        type: 'Number'\n                      }\n                    ]\n                  },\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ]\n                  }\n                ]\n              },\n              loadPixels: {\n                name: 'loadPixels',\n                class: 'p5',\n                module: 'Image'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the pixel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the pixel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'c',\n                    description:\n                      '<p>insert a grayscale value | a pixel array |\\n                               a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy</p>\\n',\n                    type: 'Number|Number[]|Object'\n                  }\n                ],\n                class: 'p5',\n                module: 'Image'\n              },\n              updatePixels: {\n                name: 'updatePixels',\n                params: [\n                  {\n                    name: 'x',\n                    description:\n                      '<p>x-coordinate of the upper-left corner of region\\n                        to update</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description:\n                      '<p>y-coordinate of the upper-left corner of region\\n                        to update</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'w',\n                    description: '<p>width of region to update</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'h',\n                    description: '<p>height of region to update</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Image'\n              },\n              loadJSON: {\n                name: 'loadJSON',\n                class: 'p5',\n                module: 'IO',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>name of the file or url to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'jsonpOptions',\n                        description: '<p>options object for jsonp related settings</p>\\n',\n                        type: 'Object',\n                        optional: true\n                      },\n                      {\n                        name: 'datatype',\n                        description: '<p>\"json\" or \"jsonp\"</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                   <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                   there is an error, response is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'datatype',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function'\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              loadStrings: {\n                name: 'loadStrings',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '<p>name of the file or url to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>\\n                              completes, Array is passed in as first\\n                              argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to be executed if\\n                              there is an error, response is passed\\n                              in as first argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              loadTable: {\n                name: 'loadTable',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '<p>name of the file or URL to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description:\n                      '<p>parse the table by comma-separated values \"csv\", semicolon-separated\\n                                     values \"ssv\", or tab-separated values \"tsv\"</p>\\n',\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'header',\n                    description: '<p>\"header\" to indicate table has header row</p>\\n',\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after\\n                                     <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the\\n                                     <a href=\"#/p5.Table\">Table</a> object is passed in as the\\n                                     first argument.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to be executed if\\n                                     there is an error, response is passed\\n                                     in as first argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              loadXML: {\n                name: 'loadXML',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '<p>name of the file or URL to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>\\n                              completes, XML object is passed in as\\n                              first argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to be executed if\\n                              there is an error, response is passed\\n                              in as first argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              loadBytes: {\n                name: 'loadBytes',\n                params: [\n                  {\n                    name: 'file',\n                    description: '<p>name of the file or URL to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>\\n                                   completes</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to be executed if there\\n                                   is an error</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              httpGet: {\n                name: 'httpGet',\n                class: 'p5',\n                module: 'IO',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>name of the file or url to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'datatype',\n                        description:\n                          '<p>\"json\", \"jsonp\", \"binary\", \"arrayBuffer\",\\n                                   \"xml\", or \"text\"</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'data',\n                        description: '<p>param data passed sent with request</p>\\n',\n                        type: 'Object|Boolean',\n                        optional: true\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\\n                                   as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                   there is an error, response is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'data',\n                        description: '',\n                        type: 'Object|Boolean'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function'\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              httpPost: {\n                name: 'httpPost',\n                class: 'p5',\n                module: 'IO',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>name of the file or url to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'datatype',\n                        description:\n                          '<p>\"json\", \"jsonp\", \"xml\", or \"text\".\\n                                   If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'data',\n                        description: '<p>param data passed sent with request</p>\\n',\n                        type: 'Object|Boolean',\n                        optional: true\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                   <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in\\n                                   as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                   there is an error, response is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'data',\n                        description: '',\n                        type: 'Object|Boolean'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function'\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              httpDo: {\n                name: 'httpDo',\n                class: 'p5',\n                module: 'IO',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>name of the file or url to load</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'method',\n                        description:\n                          '<p>either \"GET\", \"POST\", or \"PUT\",\\n                                   defaults to \"GET\"</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'datatype',\n                        description: '<p>\"json\", \"jsonp\", \"xml\", or \"text\"</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'data',\n                        description: '<p>param data passed sent with request</p>\\n',\n                        type: 'Object',\n                        optional: true\n                      },\n                      {\n                        name: 'callback',\n                        description:\n                          '<p>function to be executed after\\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\\n                                   as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description:\n                          '<p>function to be executed if\\n                                   there is an error, response is passed\\n                                   in as first argument</p>\\n',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'options',\n                        description:\n                          '<p>Request object options as documented in the\\n                                   \"fetch\" API\\n<a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a></p>\\n',\n                        type: 'Object'\n                      },\n                      {\n                        name: 'callback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      },\n                      {\n                        name: 'errorCallback',\n                        description: '',\n                        type: 'Function',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              createWriter: {\n                name: 'createWriter',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>name of the file to be created</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: '',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              save: {\n                name: 'save',\n                params: [\n                  {\n                    name: 'objectOrFilename',\n                    description:\n                      '<p>If filename is provided, will\\n                                           save canvas as an image with\\n                                           either png or jpg extension\\n                                           depending on the filename.\\n                                           If object is provided, will\\n                                           save depending on the object\\n                                           and filename (see examples\\n                                           above).</p>\\n',\n                    type: 'Object|String',\n                    optional: true\n                  },\n                  {\n                    name: 'filename',\n                    description:\n                      '<p>If an object is provided as the first\\n                             parameter, then the second parameter\\n                             indicates the filename,\\n                             and should include an appropriate\\n                             file extension (see examples above).</p>\\n',\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'options',\n                    description:\n                      '<p>Additional options depend on\\n                          filetype. For example, when saving JSON,\\n                          <code>true</code> indicates that the\\n                          output will be optimized for filesize,\\n                          rather than readability.</p>\\n',\n                    type: 'Boolean|String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              saveJSON: {\n                name: 'saveJSON',\n                params: [\n                  {\n                    name: 'json',\n                    description: '',\n                    type: 'Array|Object'\n                  },\n                  {\n                    name: 'filename',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'optimize',\n                    description:\n                      '<p>If true, removes line breaks\\n                               and spaces from the output\\n                               file to optimize filesize\\n                               (but not readability).</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              saveStrings: {\n                name: 'saveStrings',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>string array to be written</p>\\n',\n                    type: 'String[]'\n                  },\n                  {\n                    name: 'filename',\n                    description: '<p>filename for output</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: \"<p>the filename's extension</p>\\n\",\n                    type: 'String',\n                    optional: true\n                  },\n                  {\n                    name: 'isCRLF',\n                    description: '<p>if true, change line-break to CRLF</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              saveTable: {\n                name: 'saveTable',\n                params: [\n                  {\n                    name: 'Table',\n                    description:\n                      '<p>the <a href=\"#/p5.Table\">Table</a> object to save to a file</p>\\n',\n                    type: 'p5.Table'\n                  },\n                  {\n                    name: 'filename',\n                    description: '<p>the filename to which the Table should be saved</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'options',\n                    description: '<p>can be one of \"tsv\", \"csv\", or \"html\"</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'IO'\n              },\n              abs: {\n                name: 'abs',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to compute</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              ceil: {\n                name: 'ceil',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to round up</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              constrain: {\n                name: 'constrain',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to constrain</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'low',\n                    description: '<p>minimum limit</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'high',\n                    description: '<p>maximum limit</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              dist: {\n                name: 'dist',\n                class: 'p5',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '<p>x-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '<p>y-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '<p>x-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '<p>y-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z1',\n                        description: '<p>z-coordinate of the first point</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z2',\n                        description: '<p>z-coordinate of the second point</p>\\n',\n                        type: 'Number'\n                      }\n                    ]\n                  }\n                ]\n              },\n              exp: {\n                name: 'exp',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>exponent to raise</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              floor: {\n                name: 'floor',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to round down</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              lerp: {\n                name: 'lerp',\n                params: [\n                  {\n                    name: 'start',\n                    description: '<p>first value</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop',\n                    description: '<p>second value</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'amt',\n                    description: '<p>number</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              log: {\n                name: 'log',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number greater than 0</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              mag: {\n                name: 'mag',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>first value</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>second value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              map: {\n                name: 'map',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the incoming value to be converted</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'start1',\n                    description: \"<p>lower bound of the value's current range</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop1',\n                    description: \"<p>upper bound of the value's current range</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'start2',\n                    description: \"<p>lower bound of the value's target range</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop2',\n                    description: \"<p>upper bound of the value's target range</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'withinBounds',\n                    description: '<p>constrain the value to the newly mapped range</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              max: {\n                name: 'max',\n                class: 'p5',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n0',\n                        description: '<p>Number to compare</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'n1',\n                        description: '<p>Number to compare</p>\\n',\n                        type: 'Number'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>Numbers to compare</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ]\n                  }\n                ]\n              },\n              min: {\n                name: 'min',\n                class: 'p5',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n0',\n                        description: '<p>Number to compare</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'n1',\n                        description: '<p>Number to compare</p>\\n',\n                        type: 'Number'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>Numbers to compare</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ]\n                  }\n                ]\n              },\n              norm: {\n                name: 'norm',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>incoming value to be normalized</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'start',\n                    description: \"<p>lower bound of the value's current range</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'stop',\n                    description: \"<p>upper bound of the value's current range</p>\\n\",\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              pow: {\n                name: 'pow',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>base of the exponential expression</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'e',\n                    description: '<p>power by which to raise the base</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              round: {\n                name: 'round',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to round</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decimals',\n                    description:\n                      '<p>number of decimal places to round to, default is 0</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              sq: {\n                name: 'sq',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>number to square</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              sqrt: {\n                name: 'sqrt',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>non-negative number to square root</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              fract: {\n                name: 'fract',\n                params: [\n                  {\n                    name: 'num',\n                    description:\n                      '<p>Number whose fractional part needs to be found out</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              createVector: {\n                name: 'createVector',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z component of the vector</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              noise: {\n                name: 'noise',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate in noise space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate in noise space</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z-coordinate in noise space</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              noiseDetail: {\n                name: 'noiseDetail',\n                params: [\n                  {\n                    name: 'lod',\n                    description: '<p>number of octaves to be used by the noise</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'falloff',\n                    description: '<p>falloff factor for each octave</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              noiseSeed: {\n                name: 'noiseSeed',\n                params: [\n                  {\n                    name: 'seed',\n                    description: '<p>the seed value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              randomSeed: {\n                name: 'randomSeed',\n                params: [\n                  {\n                    name: 'seed',\n                    description: '<p>the seed value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              random: {\n                name: 'random',\n                class: 'p5',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'min',\n                        description: '<p>the lower bound (inclusive)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'max',\n                        description: '<p>the upper bound (exclusive)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'choices',\n                        description: '<p>the array to choose from</p>\\n',\n                        type: 'Array'\n                      }\n                    ]\n                  }\n                ]\n              },\n              randomGaussian: {\n                name: 'randomGaussian',\n                params: [\n                  {\n                    name: 'mean',\n                    description: '<p>the mean</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sd',\n                    description: '<p>the standard deviation</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              acos: {\n                name: 'acos',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the value whose arc cosine is to be returned</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              asin: {\n                name: 'asin',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the value whose arc sine is to be returned</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              atan: {\n                name: 'atan',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the value whose arc tangent is to be returned</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              atan2: {\n                name: 'atan2',\n                params: [\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the point</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the point</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              cos: {\n                name: 'cos',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              sin: {\n                name: 'sin',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              tan: {\n                name: 'tan',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              degrees: {\n                name: 'degrees',\n                params: [\n                  {\n                    name: 'radians',\n                    description: '<p>the radians value to convert to degrees</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              radians: {\n                name: 'radians',\n                params: [\n                  {\n                    name: 'degrees',\n                    description: '<p>the degree value to convert to radians</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              angleMode: {\n                name: 'angleMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either RADIANS or DEGREES</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                class: 'p5',\n                module: 'Math'\n              },\n              textAlign: {\n                name: 'textAlign',\n                class: 'p5',\n                module: 'Typography',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'horizAlign',\n                        description:\n                          '<p>horizontal alignment, either LEFT,\\n                           CENTER, or RIGHT</p>\\n',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'vertAlign',\n                        description:\n                          '<p>vertical alignment, either TOP,\\n                           BOTTOM, CENTER, or BASELINE</p>\\n',\n                        type: 'Constant',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              textLeading: {\n                name: 'textLeading',\n                class: 'p5',\n                module: 'Typography',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'leading',\n                        description:\n                          '<p>the size in pixels for spacing between lines</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              textSize: {\n                name: 'textSize',\n                class: 'p5',\n                module: 'Typography',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'theSize',\n                        description: '<p>the size of the letters in units of pixels</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              textStyle: {\n                name: 'textStyle',\n                class: 'p5',\n                module: 'Typography',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'theStyle',\n                        description:\n                          '<p>styling for text, either NORMAL,\\n                           ITALIC, BOLD or BOLDITALIC</p>\\n',\n                        type: 'Constant'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              textWidth: {\n                name: 'textWidth',\n                params: [\n                  {\n                    name: 'theText',\n                    description: '<p>the String of characters to measure</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Typography'\n              },\n              textAscent: {\n                name: 'textAscent',\n                class: 'p5',\n                module: 'Typography'\n              },\n              textDescent: {\n                name: 'textDescent',\n                class: 'p5',\n                module: 'Typography'\n              },\n              loadFont: {\n                name: 'loadFont',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>name of the file or url to load</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to be executed after\\n                                   <a href=\"#/p5/loadFont\">loadFont()</a> completes</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'onError',\n                    description:\n                      '<p>function to be executed if\\n                                   an error occurs</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Typography'\n              },\n              text: {\n                name: 'text',\n                params: [\n                  {\n                    name: 'str',\n                    description:\n                      '<p>the alphanumeric\\n                                            symbols to be displayed</p>\\n',\n                    type: 'String|Object|Array|Number|Boolean'\n                  },\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of text</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of text</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'x2',\n                    description:\n                      '<p>by default, the width of the text box,\\n                    see <a href=\"#/p5/rectMode\">rectMode()</a> for more info</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y2',\n                    description:\n                      '<p>by default, the height of the text box,\\n                    see <a href=\"#/p5/rectMode\">rectMode()</a> for more info</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Typography'\n              },\n              textFont: {\n                name: 'textFont',\n                class: 'p5',\n                module: 'Typography',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'font',\n                        description:\n                          '<p>a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>,\\nor a String representing a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a>\\n(a font that is generally available across all systems)</p>\\n',\n                        type: 'Object|String'\n                      },\n                      {\n                        name: 'size',\n                        description: '<p>the font size to use</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              append: {\n                name: 'append',\n                params: [\n                  {\n                    name: 'array',\n                    description: '<p>Array to append</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>to be added to the Array</p>\\n',\n                    type: 'Any'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              arrayCopy: {\n                name: 'arrayCopy',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'src',\n                        description: '<p>the source Array</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'srcPosition',\n                        description: '<p>starting position in the source Array</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dst',\n                        description: '<p>the destination Array</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'dstPosition',\n                        description: '<p>starting position in the destination Array</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'length',\n                        description: '<p>number of Array elements to be copied</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'src',\n                        description: '',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'dst',\n                        description: '',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'length',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              concat: {\n                name: 'concat',\n                params: [\n                  {\n                    name: 'a',\n                    description: '<p>first Array to concatenate</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'b',\n                    description: '<p>second Array to concatenate</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              reverse: {\n                name: 'reverse',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to reverse</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              shorten: {\n                name: 'shorten',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to shorten</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              shuffle: {\n                name: 'shuffle',\n                params: [\n                  {\n                    name: 'array',\n                    description: '<p>Array to shuffle</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'bool',\n                    description: '<p>modify passed array</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              sort: {\n                name: 'sort',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to sort</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'count',\n                    description: '<p>number of elements to sort, starting from 0</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              splice: {\n                name: 'splice',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to splice into</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value to be spliced in</p>\\n',\n                    type: 'Any'\n                  },\n                  {\n                    name: 'position',\n                    description: '<p>in the array from which to insert data</p>\\n',\n                    type: 'Integer'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              subset: {\n                name: 'subset',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>Array to extract from</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'start',\n                    description: '<p>position to begin</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'count',\n                    description: '<p>number of values to extract</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              float: {\n                name: 'float',\n                params: [\n                  {\n                    name: 'str',\n                    description: '<p>float string to parse</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              int: {\n                name: 'int',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String|Boolean|Number'\n                      },\n                      {\n                        name: 'radix',\n                        description: '<p>the radix to convert to (default: 10)</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ]\n                  }\n                ]\n              },\n              str: {\n                name: 'str',\n                params: [\n                  {\n                    name: 'n',\n                    description: '<p>value to parse</p>\\n',\n                    type: 'String|Boolean|Number|Array'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              byte: {\n                name: 'byte',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String|Boolean|Number'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ]\n                  }\n                ]\n              },\n              char: {\n                name: 'char',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String|Number'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ]\n                  }\n                ]\n              },\n              unchar: {\n                name: 'unchar',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ]\n                  }\n                ]\n              },\n              hex: {\n                name: 'hex',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'digits',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>array of values to parse</p>\\n',\n                        type: 'Number[]'\n                      },\n                      {\n                        name: 'digits',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              unhex: {\n                name: 'unhex',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>value to parse</p>\\n',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'ns',\n                        description: '<p>values to parse</p>\\n',\n                        type: 'Array'\n                      }\n                    ]\n                  }\n                ]\n              },\n              join: {\n                name: 'join',\n                params: [\n                  {\n                    name: 'list',\n                    description: '<p>array of Strings to be joined</p>\\n',\n                    type: 'Array'\n                  },\n                  {\n                    name: 'separator',\n                    description: '<p>String to be placed between each item</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              match: {\n                name: 'match',\n                params: [\n                  {\n                    name: 'str',\n                    description: '<p>the String to be searched</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'regexp',\n                    description: '<p>the regexp to be used for matching</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              matchAll: {\n                name: 'matchAll',\n                params: [\n                  {\n                    name: 'str',\n                    description: '<p>the String to be searched</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'regexp',\n                    description: '<p>the regexp to be used for matching</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              nf: {\n                name: 'nf',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'num',\n                        description: '<p>the Number to format</p>\\n',\n                        type: 'Number|String'\n                      },\n                      {\n                        name: 'left',\n                        description:\n                          '<p>number of digits to the left of the\\n                               decimal point</p>\\n',\n                        type: 'Integer|String',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description:\n                          '<p>number of digits to the right of the\\n                               decimal point</p>\\n',\n                        type: 'Integer|String',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>the Numbers to format</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'left',\n                        description: '',\n                        type: 'Integer|String',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description: '',\n                        type: 'Integer|String',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              nfc: {\n                name: 'nfc',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'num',\n                        description: '<p>the Number to format</p>\\n',\n                        type: 'Number|String'\n                      },\n                      {\n                        name: 'right',\n                        description:\n                          '<p>number of digits to the right of the\\n                                 decimal point</p>\\n',\n                        type: 'Integer|String',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>the Numbers to format</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'right',\n                        description: '',\n                        type: 'Integer|String',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              nfp: {\n                name: 'nfp',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'num',\n                        description: '<p>the Number to format</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'left',\n                        description:\n                          '<p>number of digits to the left of the decimal\\n                               point</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description:\n                          '<p>number of digits to the right of the\\n                               decimal point</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>the Numbers to format</p>\\n',\n                        type: 'Number[]'\n                      },\n                      {\n                        name: 'left',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              nfs: {\n                name: 'nfs',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'num',\n                        description: '<p>the Number to format</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'left',\n                        description:\n                          '<p>number of digits to the left of the decimal\\n                               point</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description:\n                          '<p>number of digits to the right of the\\n                               decimal point</p>\\n',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'nums',\n                        description: '<p>the Numbers to format</p>\\n',\n                        type: 'Array'\n                      },\n                      {\n                        name: 'left',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      },\n                      {\n                        name: 'right',\n                        description: '',\n                        type: 'Integer',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              split: {\n                name: 'split',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the String to be split</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'delim',\n                    description: '<p>the String used to separate the data</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              splitTokens: {\n                name: 'splitTokens',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>the String to be split</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'delim',\n                    description:\n                      '<p>list of individual Strings that will be used as\\n                         separators</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Data'\n              },\n              trim: {\n                name: 'trim',\n                class: 'p5',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'str',\n                        description: '<p>a String to be trimmed</p>\\n',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'strs',\n                        description: '<p>an Array of Strings to be trimmed</p>\\n',\n                        type: 'Array'\n                      }\n                    ]\n                  }\n                ]\n              },\n              day: {\n                name: 'day',\n                class: 'p5',\n                module: 'IO'\n              },\n              hour: {\n                name: 'hour',\n                class: 'p5',\n                module: 'IO'\n              },\n              minute: {\n                name: 'minute',\n                class: 'p5',\n                module: 'IO'\n              },\n              millis: {\n                name: 'millis',\n                class: 'p5',\n                module: 'IO'\n              },\n              month: {\n                name: 'month',\n                class: 'p5',\n                module: 'IO'\n              },\n              second: {\n                name: 'second',\n                class: 'p5',\n                module: 'IO'\n              },\n              year: {\n                name: 'year',\n                class: 'p5',\n                module: 'IO'\n              },\n              plane: {\n                name: 'plane',\n                params: [\n                  {\n                    name: 'width',\n                    description: '<p>width of the plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>height of the plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>Optional number of triangle\\n                            subdivisions in x-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>Optional number of triangle\\n                            subdivisions in y-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              box: {\n                name: 'box',\n                params: [\n                  {\n                    name: 'width',\n                    description: '<p>width of the box</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'Height',\n                    description: '<p>height of the box</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'depth',\n                    description: '<p>depth of the box</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>Optional number of triangle\\n                           subdivisions in x-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>Optional number of triangle\\n                           subdivisions in y-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              sphere: {\n                name: 'sphere',\n                params: [\n                  {\n                    name: 'radius',\n                    description: '<p>radius of circle</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description: '<p>optional number of subdivisions in x-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description: '<p>optional number of subdivisions in y-dimension</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              cylinder: {\n                name: 'cylinder',\n                params: [\n                  {\n                    name: 'radius',\n                    description: '<p>radius of the surface</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>height of the cylinder</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of subdivisions in x-dimension;\\n                              default is 24</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of subdivisions in y-dimension;\\n                              default is 1</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'bottomCap',\n                    description: '<p>whether to draw the bottom of the cylinder</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  },\n                  {\n                    name: 'topCap',\n                    description: '<p>whether to draw the top of the cylinder</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              cone: {\n                name: 'cone',\n                params: [\n                  {\n                    name: 'radius',\n                    description: '<p>radius of the bottom surface</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>height of the cone</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of segments,\\n                            the more segments the smoother geometry\\n                            default is 24</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of segments,\\n                            the more segments the smoother geometry\\n                            default is 1</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'cap',\n                    description: '<p>whether to draw the base of the cone</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              ellipsoid: {\n                name: 'ellipsoid',\n                params: [\n                  {\n                    name: 'radiusx',\n                    description: '<p>x-radius of ellipsoid</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'radiusy',\n                    description: '<p>y-radius of ellipsoid</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'radiusz',\n                    description: '<p>z-radius of ellipsoid</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of segments,\\n                                   the more segments the smoother geometry\\n                                   default is 24. Avoid detail number above\\n                                   150, it may crash the browser.</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of segments,\\n                                   the more segments the smoother geometry\\n                                   default is 16. Avoid detail number above\\n                                   150, it may crash the browser.</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              torus: {\n                name: 'torus',\n                params: [\n                  {\n                    name: 'radius',\n                    description: '<p>radius of the whole ring</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'tubeRadius',\n                    description: '<p>radius of the tube</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'detailX',\n                    description:\n                      '<p>number of segments in x-dimension,\\n                               the more segments the smoother geometry\\n                               default is 24</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  },\n                  {\n                    name: 'detailY',\n                    description:\n                      '<p>number of segments in y-dimension,\\n                               the more segments the smoother geometry\\n                               default is 16</p>\\n',\n                    type: 'Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              orbitControl: {\n                name: 'orbitControl',\n                params: [\n                  {\n                    name: 'sensitivityX',\n                    description: '<p>sensitivity to mouse movement along X axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sensitivityY',\n                    description: '<p>sensitivity to mouse movement along Y axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sensitivityZ',\n                    description: '<p>sensitivity to scroll movement along Z axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              debugMode: {\n                name: 'debugMode',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'mode',\n                        description: '<p>either GRID or AXES</p>\\n',\n                        type: 'Constant'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'mode',\n                        description: '',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'gridSize',\n                        description: '<p>size of one side of the grid</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridDivisions',\n                        description: '<p>number of divisions in the grid</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'xOff',\n                        description: '<p>X axis offset from origin (0,0,0)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'yOff',\n                        description: '<p>Y axis offset from origin (0,0,0)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'zOff',\n                        description: '<p>Z axis offset from origin (0,0,0)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'mode',\n                        description: '',\n                        type: 'Constant'\n                      },\n                      {\n                        name: 'axesSize',\n                        description: '<p>size of axes icon</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'xOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'yOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'zOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'gridSize',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridDivisions',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridXOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridYOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'gridZOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'axesSize',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'axesXOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'axesYOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'axesZOff',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              noDebugMode: {\n                name: 'noDebugMode',\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              ambientLight: {\n                name: 'ambientLight',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '<p>the alpha value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the ambient light color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              specularColor: {\n                name: 'specularColor',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>a color string</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'gray',\n                        description: '<p>a gray value</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'values',\n                        description:\n                          '<p>an array containing the red,green,blue &\\n                                and alpha components of the color</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>the ambient light color</p>\\n',\n                        type: 'p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              directionalLight: {\n                name: 'directionalLight',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value (depending on the current\\ncolor mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'position',\n                        description: '<p>the direction of the light</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description:\n                          '<p>color Array, CSS color string,\\n                                            or <a href=\"#/p5.Color\">p5.Color</a> value</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'x',\n                        description: '<p>x axis direction</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y axis direction</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z axis direction</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'position',\n                        description: '',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              pointLight: {\n                name: 'pointLight',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value (depending on the current\\ncolor mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x',\n                        description: '<p>x axis position</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y axis position</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z axis position</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'position',\n                        description: '<p>the position of the light</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description:\n                          '<p>color Array, CSS color string,\\nor <a href=\"#/p5.Color\">p5.Color</a> value</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'position',\n                        description: '',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              lights: {\n                name: 'lights',\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              lightFalloff: {\n                name: 'lightFalloff',\n                params: [\n                  {\n                    name: 'constant',\n                    description: '<p>constant value for determining falloff</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'linear',\n                    description: '<p>linear value for determining falloff</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'quadratic',\n                    description: '<p>quadratic value for determining falloff</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              spotLight: {\n                name: 'spotLight',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value (depending on the current\\ncolor mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x',\n                        description: '<p>x axis position</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y axis position</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z axis position</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'rx',\n                        description: '<p>x axis direction of light</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'ry',\n                        description: '<p>y axis direction of light</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'rz',\n                        description: '<p>z axis direction of light</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'angle',\n                        description:\n                          '<p>optional parameter for angle. Defaults to PI/3</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'conc',\n                        description:\n                          '<p>optional parameter for concentration. Defaults to 100</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description:\n                          '<p>color Array, CSS color string,\\nor <a href=\"#/p5.Color\">p5.Color</a> value</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'position',\n                        description: '<p>the position of the light</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'direction',\n                        description: '<p>the direction of the light</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'angle',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'conc',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'position',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'direction',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'angle',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'conc',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'direction',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'angle',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'conc',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'position',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'rx',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'ry',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'rz',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'angle',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'conc',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'direction',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'angle',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'conc',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'position',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'rx',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'ry',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'rz',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'angle',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'conc',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '',\n                        type: 'Number[]|String|p5.Color'\n                      },\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'rx',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'ry',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'rz',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'angle',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'conc',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              noLights: {\n                name: 'noLights',\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              loadModel: {\n                name: 'loadModel',\n                class: 'p5',\n                module: 'Shape',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '<p>Path of the model to be loaded</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'normalize',\n                        description:\n                          '<p>If true, scale the model to a\\n                                     standardized size when loading</p>\\n',\n                        type: 'Boolean'\n                      },\n                      {\n                        name: 'successCallback',\n                        description:\n                          '<p>Function to be called\\n                                    once the model is loaded. Will be passed\\n                                    the 3D model object.</p>\\n',\n                        type: 'function(p5.Geometry)',\n                        optional: true\n                      },\n                      {\n                        name: 'failureCallback',\n                        description:\n                          '<p>called with event error if\\n                                        the model fails to load.</p>\\n',\n                        type: 'Function(Event)',\n                        optional: true\n                      },\n                      {\n                        name: 'fileType',\n                        description:\n                          '<p>The file extension of the model\\n                                     (<code>.stl</code>, <code>.obj</code>).</p>\\n',\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'path',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'successCallback',\n                        description: '',\n                        type: 'function(p5.Geometry)',\n                        optional: true\n                      },\n                      {\n                        name: 'failureCallback',\n                        description: '',\n                        type: 'Function(Event)',\n                        optional: true\n                      },\n                      {\n                        name: 'fileType',\n                        description: '',\n                        type: 'String',\n                        optional: true\n                      }\n                    ]\n                  }\n                ]\n              },\n              model: {\n                name: 'model',\n                params: [\n                  {\n                    name: 'model',\n                    description: '<p>Loaded 3d model to be rendered</p>\\n',\n                    type: 'p5.Geometry'\n                  }\n                ],\n                class: 'p5',\n                module: 'Shape'\n              },\n              loadShader: {\n                name: 'loadShader',\n                params: [\n                  {\n                    name: 'vertFilename',\n                    description:\n                      '<p>path to file containing vertex shader\\nsource code</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'fragFilename',\n                    description:\n                      '<p>path to file containing fragment shader\\nsource code</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>callback to be executed after loadShader\\ncompletes. On success, the Shader object is passed as the first argument.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>callback to be executed when an error\\noccurs inside loadShader. On error, the error is passed as the first\\nargument.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              createShader: {\n                name: 'createShader',\n                params: [\n                  {\n                    name: 'vertSrc',\n                    description: '<p>source code for the vertex shader</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'fragSrc',\n                    description: '<p>source code for the fragment shader</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              shader: {\n                name: 'shader',\n                params: [\n                  {\n                    name: 's',\n                    description:\n                      '<p>the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering\\nshapes.</p>\\n',\n                    type: 'p5.Shader',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              resetShader: {\n                name: 'resetShader',\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              normalMaterial: {\n                name: 'normalMaterial',\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              texture: {\n                name: 'texture',\n                params: [\n                  {\n                    name: 'tex',\n                    description:\n                      '<p>2-dimensional graphics\\n                   to render as texture</p>\\n',\n                    type: 'p5.Image|p5.MediaElement|p5.Graphics'\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              textureMode: {\n                name: 'textureMode',\n                params: [\n                  {\n                    name: 'mode',\n                    description: '<p>either IMAGE or NORMAL</p>\\n',\n                    type: 'Constant'\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              textureWrap: {\n                name: 'textureWrap',\n                params: [\n                  {\n                    name: 'wrapX',\n                    description: '<p>either CLAMP, REPEAT, or MIRROR</p>\\n',\n                    type: 'Constant'\n                  },\n                  {\n                    name: 'wrapY',\n                    description: '<p>either CLAMP, REPEAT, or MIRROR</p>\\n',\n                    type: 'Constant',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              ambientMaterial: {\n                name: 'ambientMaterial',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>gray value, red or hue value\\n                        (depending on the current color mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>color, color Array, or CSS color string</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              emissiveMaterial: {\n                name: 'emissiveMaterial',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>gray value, red or hue value\\n                        (depending on the current color mode),</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>green or saturation value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'v3',\n                        description: '<p>blue or brightness value</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'a',\n                        description: '<p>opacity</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>color, color Array, or CSS color string</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              specularMaterial: {\n                name: 'specularMaterial',\n                class: 'p5',\n                module: 'Lights, Camera',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'gray',\n                        description:\n                          '<p>number specifying value between white and black.</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description:\n                          '<p>alpha value relative to current color range\\n                                (default is 0-255)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>red or hue value relative to\\n                                the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>green or saturation value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'v3',\n                        description:\n                          '<p>blue or brightness value\\n                                relative to the current color range</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'alpha',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'color',\n                        description: '<p>color Array, or CSS color string</p>\\n',\n                        type: 'Number[]|String|p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              shininess: {\n                name: 'shininess',\n                params: [\n                  {\n                    name: 'shine',\n                    description:\n                      '<p>Degree of Shininess.\\n                      Defaults to 1.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              camera: {\n                name: 'camera',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>camera position value on x axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>camera position value on y axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>camera position value on z axis</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'centerX',\n                    description: '<p>x coordinate representing center of the sketch</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'centerY',\n                    description: '<p>y coordinate representing center of the sketch</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'centerZ',\n                    description: '<p>z coordinate representing center of the sketch</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'upX',\n                    description: \"<p>x component of direction 'up' from camera</p>\\n\",\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'upY',\n                    description: \"<p>y component of direction 'up' from camera</p>\\n\",\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'upZ',\n                    description: \"<p>z component of direction 'up' from camera</p>\\n\",\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              perspective: {\n                name: 'perspective',\n                params: [\n                  {\n                    name: 'fovy',\n                    description:\n                      '<p>camera frustum vertical field of view,\\n                          from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'aspect',\n                    description: '<p>camera frustum aspect ratio</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'near',\n                    description: '<p>frustum near plane length</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'far',\n                    description: '<p>frustum far plane length</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              ortho: {\n                name: 'ortho',\n                params: [\n                  {\n                    name: 'left',\n                    description: '<p>camera frustum left plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'right',\n                    description: '<p>camera frustum right plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'bottom',\n                    description: '<p>camera frustum bottom plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'top',\n                    description: '<p>camera frustum top plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'near',\n                    description: '<p>camera frustum near plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'far',\n                    description: '<p>camera frustum far plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              frustum: {\n                name: 'frustum',\n                params: [\n                  {\n                    name: 'left',\n                    description: '<p>camera frustum left plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'right',\n                    description: '<p>camera frustum right plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'bottom',\n                    description: '<p>camera frustum bottom plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'top',\n                    description: '<p>camera frustum top plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'near',\n                    description: '<p>camera frustum near plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'far',\n                    description: '<p>camera frustum far plane</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              createCamera: {\n                name: 'createCamera',\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              setCamera: {\n                name: 'setCamera',\n                params: [\n                  {\n                    name: 'cam',\n                    description: '<p>p5.Camera object</p>\\n',\n                    type: 'p5.Camera'\n                  }\n                ],\n                class: 'p5',\n                module: 'Lights, Camera'\n              },\n              setAttributes: {\n                name: 'setAttributes',\n                class: 'p5',\n                module: 'Rendering',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'key',\n                        description: '<p>Name of attribute</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'value',\n                        description: '<p>New value of named attribute</p>\\n',\n                        type: 'Boolean'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'obj',\n                        description: '<p>object with key-value pairs</p>\\n',\n                        type: 'Object'\n                      }\n                    ]\n                  }\n                ]\n              },\n              sampleRate: {\n                name: 'sampleRate',\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              freqToMidi: {\n                name: 'freqToMidi',\n                params: [\n                  {\n                    name: 'frequency',\n                    description:\n                      '<p>A freqeuncy, for example, the \"A\"\\n                           above Middle C is 440Hz</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              midiToFreq: {\n                name: 'midiToFreq',\n                params: [\n                  {\n                    name: 'midiNote',\n                    description: '<p>The number of a MIDI note</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              soundFormats: {\n                name: 'soundFormats',\n                params: [\n                  {\n                    name: 'formats',\n                    description: \"<p>i.e. 'mp3', 'wav', 'ogg'</p>\\n\",\n                    type: 'String',\n                    optional: true,\n                    multiple: true\n                  }\n                ],\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              getAudioContext: {\n                name: 'getAudioContext',\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              userStartAudio: {\n                params: [\n                  {\n                    name: 'element(s)',\n                    description:\n                      '<p>This argument can be an Element,\\n                              Selector String, NodeList, p5.Element,\\n                              jQuery Element, or an Array of any of those.</p>\\n',\n                    type: 'Element|Array',\n                    optional: true\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>Callback to invoke when the AudioContext\\n                              has started</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                name: 'userStartAudio',\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              loadSound: {\n                name: 'loadSound',\n                params: [\n                  {\n                    name: 'path',\n                    description:\n                      \"<p>Path to the sound file, or an array with\\n                                  paths to soundfiles in multiple formats\\n                                  i.e. ['sound.ogg', 'sound.mp3'].\\n                                  Alternately, accepts an object: either\\n                                  from the HTML5 File API, or a p5.File.</p>\\n\",\n                    type: 'String|Array'\n                  },\n                  {\n                    name: 'successCallback',\n                    description: '<p>Name of a function to call once file loads</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>Name of a function to call if there is\\n                                    an error loading the file.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'whileLoading',\n                    description:\n                      '<p>Name of a function to call while file is loading.\\n                               This function will receive the percentage loaded\\n                               so far, from 0.0 to 1.0.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              createConvolver: {\n                name: 'createConvolver',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to a sound file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to call if loading is successful.\\n                              The object will be passed in as the argument\\n                              to the callback function.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>function to call if loading is not successful.\\n                              A custom error will be passed in as the argument\\n                              to the callback function.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              setBPM: {\n                name: 'setBPM',\n                params: [\n                  {\n                    name: 'BPM',\n                    description: '<p>Beats Per Minute</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Seconds from now</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5',\n                module: 'p5.sound'\n              },\n              saveSound: {\n                name: 'saveSound',\n                params: [\n                  {\n                    name: 'soundFile',\n                    description: '<p>p5.SoundFile that you wish to save</p>\\n',\n                    type: 'p5.SoundFile'\n                  },\n                  {\n                    name: 'fileName',\n                    description: '<p>name of the resulting .wav file.</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Color': {\n              toString: {\n                name: 'toString',\n                params: [\n                  {\n                    name: 'format',\n                    description:\n                      \"<p>How the color string will be formatted.\\nLeaving this empty formats the string as rgba(r, g, b, a).\\n'#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\\n'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\\n'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\\n'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.</p>\\n\",\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Color',\n                module: 'Color'\n              },\n              setRed: {\n                name: 'setRed',\n                params: [\n                  {\n                    name: 'red',\n                    description: '<p>the new red value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Color',\n                module: 'Color'\n              },\n              setGreen: {\n                name: 'setGreen',\n                params: [\n                  {\n                    name: 'green',\n                    description: '<p>the new green value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Color',\n                module: 'Color'\n              },\n              setBlue: {\n                name: 'setBlue',\n                params: [\n                  {\n                    name: 'blue',\n                    description: '<p>the new blue value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Color',\n                module: 'Color'\n              },\n              setAlpha: {\n                name: 'setAlpha',\n                params: [\n                  {\n                    name: 'alpha',\n                    description: '<p>the new alpha value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Color',\n                module: 'Color'\n              }\n            },\n            'p5.Element': {\n              elt: {\n                name: 'elt',\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              parent: {\n                name: 'parent',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'parent',\n                        description:\n                          '<p>the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\\n                         of desired parent element</p>\\n',\n                        type: 'String|p5.Element|Object'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              id: {\n                name: 'id',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'id',\n                        description: '<p>ID of the element</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              class: {\n                name: 'class',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'class',\n                        description: '<p>class to add</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              mousePressed: {\n                name: 'mousePressed',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               pressed over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              doubleClicked: {\n                name: 'doubleClicked',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               double clicked over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              mouseWheel: {\n                name: 'mouseWheel',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               scrolled over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              mouseReleased: {\n                name: 'mouseReleased',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               released over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              mouseClicked: {\n                name: 'mouseClicked',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when mouse is\\n                               clicked over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              mouseMoved: {\n                name: 'mouseMoved',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a mouse moves\\n                               over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              mouseOver: {\n                name: 'mouseOver',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a mouse moves\\n                               onto the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              mouseOut: {\n                name: 'mouseOut',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a mouse\\n                               moves off of an element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              touchStarted: {\n                name: 'touchStarted',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a touch\\n                               starts over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              touchMoved: {\n                name: 'touchMoved',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a touch moves over\\n                               the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              touchEnded: {\n                name: 'touchEnded',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a touch ends\\n                               over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              dragOver: {\n                name: 'dragOver',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a file is\\n                               dragged over the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              dragLeave: {\n                name: 'dragLeave',\n                params: [\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>function to be fired when a file is\\n                               dragged off the element.\\n                               if <code>false</code> is passed instead, the previously\\n                               firing function will no longer fire.</p>\\n',\n                    type: 'Function|Boolean'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              addClass: {\n                name: 'addClass',\n                params: [\n                  {\n                    name: 'class',\n                    description: '<p>name of class to add</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              removeClass: {\n                name: 'removeClass',\n                params: [\n                  {\n                    name: 'class',\n                    description: '<p>name of class to remove</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              hasClass: {\n                name: 'hasClass',\n                params: [\n                  {\n                    name: 'c',\n                    description: '<p>class name of class to check</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              toggleClass: {\n                name: 'toggleClass',\n                params: [\n                  {\n                    name: 'c',\n                    description: '<p>class name to toggle</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              child: {\n                name: 'child',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'child',\n                        description:\n                          '<p>the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\\n                        to add to the current element</p>\\n',\n                        type: 'String|p5.Element',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              center: {\n                name: 'center',\n                params: [\n                  {\n                    name: 'align',\n                    description:\n                      \"<p>passing 'vertical', 'horizontal' aligns element accordingly</p>\\n\",\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              html: {\n                name: 'html',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'html',\n                        description: '<p>the HTML to be placed inside the element</p>\\n',\n                        type: 'String',\n                        optional: true\n                      },\n                      {\n                        name: 'append',\n                        description: '<p>whether to append HTML to existing</p>\\n',\n                        type: 'Boolean',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              position: {\n                name: 'position',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description:\n                          '<p>x-position relative to upper left of window (optional)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'y',\n                        description:\n                          '<p>y-position relative to upper left of window (optional)</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'positionType',\n                        description:\n                          '<p>it can be static, fixed, relative, sticky, initial or inherit (optional)</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              style: {\n                name: 'style',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'property',\n                        description: '<p>property to be set</p>\\n',\n                        type: 'String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'property',\n                        description: '',\n                        type: 'String'\n                      },\n                      {\n                        name: 'value',\n                        description: '<p>value to assign to property</p>\\n',\n                        type: 'String|p5.Color'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              attribute: {\n                name: 'attribute',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'attr',\n                        description: '<p>attribute to set</p>\\n',\n                        type: 'String'\n                      },\n                      {\n                        name: 'value',\n                        description: '<p>value to assign to attribute</p>\\n',\n                        type: 'String'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              removeAttribute: {\n                name: 'removeAttribute',\n                params: [\n                  {\n                    name: 'attr',\n                    description: '<p>attribute to remove</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              value: {\n                name: 'value',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'String|Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              show: {\n                name: 'show',\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              hide: {\n                name: 'hide',\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              size: {\n                name: 'size',\n                class: 'p5.Element',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'w',\n                        description:\n                          '<p>width of the element, either AUTO, or a number</p>\\n',\n                        type: 'Number|Constant'\n                      },\n                      {\n                        name: 'h',\n                        description:\n                          '<p>height of the element, either AUTO, or a number</p>\\n',\n                        type: 'Number|Constant',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              remove: {\n                name: 'remove',\n                class: 'p5.Element',\n                module: 'DOM'\n              },\n              drop: {\n                name: 'drop',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>callback to receive loaded file, called for each file dropped.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'fxn',\n                    description:\n                      '<p>callback triggered once when files are dropped with the drop event.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Element',\n                module: 'DOM'\n              }\n            },\n            'p5.Graphics': {\n              reset: {\n                name: 'reset',\n                class: 'p5.Graphics',\n                module: 'Rendering'\n              },\n              remove: {\n                name: 'remove',\n                class: 'p5.Graphics',\n                module: 'Rendering'\n              }\n            },\n            JSON: {\n              stringify: {\n                name: 'stringify',\n                params: [\n                  {\n                    name: 'object',\n                    description:\n                      '<p>:Javascript object that you would like to convert to JSON</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'JSON',\n                module: 'Foundation'\n              }\n            },\n            console: {\n              log: {\n                name: 'log',\n                params: [\n                  {\n                    name: 'message',\n                    description:\n                      '<p>:Message that you would like to print to the console</p>\\n',\n                    type: 'String|Expression|Object'\n                  }\n                ],\n                class: 'console',\n                module: 'Foundation'\n              }\n            },\n            'p5.TypedDict': {\n              size: {\n                name: 'size',\n                class: 'p5.TypedDict',\n                module: 'Data'\n              },\n              hasKey: {\n                name: 'hasKey',\n                params: [\n                  {\n                    name: 'key',\n                    description: '<p>that you want to look up</p>\\n',\n                    type: 'Number|String'\n                  }\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data'\n              },\n              get: {\n                name: 'get',\n                params: [\n                  {\n                    name: 'the',\n                    description: '<p>key you want to access</p>\\n',\n                    type: 'Number|String'\n                  }\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'key',\n                    description: '',\n                    type: 'Number|String'\n                  },\n                  {\n                    name: 'value',\n                    description: '',\n                    type: 'Number|String'\n                  }\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data'\n              },\n              create: {\n                name: 'create',\n                class: 'p5.TypedDict',\n                module: 'Data',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'key',\n                        description: '',\n                        type: 'Number|String'\n                      },\n                      {\n                        name: 'value',\n                        description: '',\n                        type: 'Number|String'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'obj',\n                        description: '<p>key/value pair</p>\\n',\n                        type: 'Object'\n                      }\n                    ]\n                  }\n                ]\n              },\n              clear: {\n                name: 'clear',\n                class: 'p5.TypedDict',\n                module: 'Data'\n              },\n              remove: {\n                name: 'remove',\n                params: [\n                  {\n                    name: 'key',\n                    description: '<p>for the pair to remove</p>\\n',\n                    type: 'Number|String'\n                  }\n                ],\n                class: 'p5.TypedDict',\n                module: 'Data'\n              },\n              print: {\n                name: 'print',\n                class: 'p5.TypedDict',\n                module: 'Data'\n              },\n              saveTable: {\n                name: 'saveTable',\n                class: 'p5.TypedDict',\n                module: 'Data'\n              },\n              saveJSON: {\n                name: 'saveJSON',\n                class: 'p5.TypedDict',\n                module: 'Data'\n              }\n            },\n            'p5.NumberDict': {\n              add: {\n                name: 'add',\n                params: [\n                  {\n                    name: 'Key',\n                    description: '<p>for the value you wish to add to</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'Number',\n                    description: '<p>to add to the value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data'\n              },\n              sub: {\n                name: 'sub',\n                params: [\n                  {\n                    name: 'Key',\n                    description: '<p>for the value you wish to subtract from</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'Number',\n                    description: '<p>to subtract from the value</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data'\n              },\n              mult: {\n                name: 'mult',\n                params: [\n                  {\n                    name: 'Key',\n                    description: '<p>for value you wish to multiply</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'Amount',\n                    description: '<p>to multiply the value by</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data'\n              },\n              div: {\n                name: 'div',\n                params: [\n                  {\n                    name: 'Key',\n                    description: '<p>for value you wish to divide</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'Amount',\n                    description: '<p>to divide the value by</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.NumberDict',\n                module: 'Data'\n              },\n              minValue: {\n                name: 'minValue',\n                class: 'p5.NumberDict',\n                module: 'Data'\n              },\n              maxValue: {\n                name: 'maxValue',\n                class: 'p5.NumberDict',\n                module: 'Data'\n              },\n              minKey: {\n                name: 'minKey',\n                class: 'p5.NumberDict',\n                module: 'Data'\n              },\n              maxKey: {\n                name: 'maxKey',\n                class: 'p5.NumberDict',\n                module: 'Data'\n              }\n            },\n            'p5.MediaElement': {\n              src: {\n                name: 'src',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              play: {\n                name: 'play',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              stop: {\n                name: 'stop',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              pause: {\n                name: 'pause',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              loop: {\n                name: 'loop',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              noLoop: {\n                name: 'noLoop',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              autoplay: {\n                name: 'autoplay',\n                params: [\n                  {\n                    name: 'shouldAutoplay',\n                    description: '<p>whether the element should autoplay</p>\\n',\n                    type: 'Boolean'\n                  }\n                ],\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              volume: {\n                name: 'volume',\n                class: 'p5.MediaElement',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'val',\n                        description: '<p>volume between 0.0 and 1.0</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              speed: {\n                name: 'speed',\n                class: 'p5.MediaElement',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'speed',\n                        description: '<p>speed multiplier for element playback</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              time: {\n                name: 'time',\n                class: 'p5.MediaElement',\n                module: 'DOM',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'time',\n                        description: '<p>time to jump to (in seconds)</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              duration: {\n                name: 'duration',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              onended: {\n                name: 'onended',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to call when the\\n                            soundfile has ended. The\\n                            media element will be passed\\n                            in as the argument to the\\n                            callback.</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'audioNode',\n                    description:\n                      '<p>AudioNode from the Web Audio API,\\nor an object from the p5.sound library</p>\\n',\n                    type: 'AudioNode|Object'\n                  }\n                ],\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              showControls: {\n                name: 'showControls',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              hideControls: {\n                name: 'hideControls',\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              addCue: {\n                name: 'addCue',\n                params: [\n                  {\n                    name: 'time',\n                    description:\n                      \"<p>Time in seconds, relative to this media\\n                            element's playback. For example, to trigger\\n                            an event every time playback reaches two\\n                            seconds, pass in the number 2. This will be\\n                            passed as the first parameter to\\n                            the callback function.</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>Name of a function that will be\\n                            called at the given time. The callback will\\n                            receive time and (optionally) param as its\\n                            two parameters.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>An object to be passed as the\\n                            second parameter to the\\n                            callback function.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              removeCue: {\n                name: 'removeCue',\n                params: [\n                  {\n                    name: 'id',\n                    description: '<p>ID of the cue, as returned by addCue</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              },\n              clearCues: {\n                name: 'clearCues',\n                params: [\n                  {\n                    name: 'id',\n                    description: '<p>ID of the cue, as returned by addCue</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.MediaElement',\n                module: 'DOM'\n              }\n            },\n            'p5.File': {\n              file: {\n                name: 'file',\n                class: 'p5.File',\n                module: 'DOM'\n              },\n              type: {\n                name: 'type',\n                class: 'p5.File',\n                module: 'DOM'\n              },\n              subtype: {\n                name: 'subtype',\n                class: 'p5.File',\n                module: 'DOM'\n              },\n              name: {\n                name: 'name',\n                class: 'p5.File',\n                module: 'DOM'\n              },\n              size: {\n                name: 'size',\n                class: 'p5.File',\n                module: 'DOM'\n              },\n              data: {\n                name: 'data',\n                class: 'p5.File',\n                module: 'DOM'\n              }\n            },\n            'p5.Image': {\n              width: {\n                name: 'width',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              height: {\n                name: 'height',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              pixels: {\n                name: 'pixels',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              loadPixels: {\n                name: 'loadPixels',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              updatePixels: {\n                name: 'updatePixels',\n                class: 'p5.Image',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description:\n                          '<p>x-offset of the target update area for the\\n                             underlying canvas</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'y',\n                        description:\n                          '<p>y-offset of the target update area for the\\n                             underlying canvas</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'w',\n                        description:\n                          '<p>height of the target update area for the\\n                             underlying canvas</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'h',\n                        description:\n                          '<p>height of the target update area for the\\n                             underlying canvas</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  },\n                  {\n                    params: []\n                  }\n                ]\n              },\n              get: {\n                name: 'get',\n                class: 'p5.Image',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x-coordinate of the pixel</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y-coordinate of the pixel</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'w',\n                        description: '<p>width</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'h',\n                        description: '<p>height</p>\\n',\n                        type: 'Number'\n                      }\n                    ]\n                  },\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ]\n                  }\n                ]\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x-coordinate of the pixel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-coordinate of the pixel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'a',\n                    description:\n                      '<p>grayscale value | pixel array |\\n                               a <a href=\"#/p5.Color\">p5.Color</a> | image to copy</p>\\n',\n                    type: 'Number|Number[]|Object'\n                  }\n                ],\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              resize: {\n                name: 'resize',\n                params: [\n                  {\n                    name: 'width',\n                    description: '<p>the resized image width</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'height',\n                    description: '<p>the resized image height</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              copy: {\n                name: 'copy',\n                class: 'p5.Image',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'srcImage',\n                        description: '<p>source image</p>\\n',\n                        type: 'p5.Image|p5.Element'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          \"<p>X coordinate of the source's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          \"<p>Y coordinate of the source's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '<p>source image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '<p>source image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          \"<p>X coordinate of the destination's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          \"<p>Y coordinate of the destination's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '<p>destination image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '<p>destination image height</p>\\n',\n                        type: 'Integer'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'sx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '',\n                        type: 'Integer'\n                      }\n                    ]\n                  }\n                ]\n              },\n              mask: {\n                name: 'mask',\n                params: [\n                  {\n                    name: 'srcImage',\n                    description: '<p>source image</p>\\n',\n                    type: 'p5.Image'\n                  }\n                ],\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              filter: {\n                name: 'filter',\n                params: [\n                  {\n                    name: 'filterType',\n                    description:\n                      '<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\\n                               POSTERIZE, ERODE, DILATE or BLUR.\\n                               See Filters.js for docs on\\n                               each available filter</p>\\n',\n                    type: 'Constant'\n                  },\n                  {\n                    name: 'filterParam',\n                    description:\n                      '<p>an optional parameter unique\\n                               to each filter, see above</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              blend: {\n                name: 'blend',\n                class: 'p5.Image',\n                module: 'Image',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'srcImage',\n                        description: '<p>source image</p>\\n',\n                        type: 'p5.Image'\n                      },\n                      {\n                        name: 'sx',\n                        description:\n                          \"<p>X coordinate of the source's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description:\n                          \"<p>Y coordinate of the source's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '<p>source image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '<p>source image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description:\n                          \"<p>X coordinate of the destination's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description:\n                          \"<p>Y coordinate of the destination's upper left corner</p>\\n\",\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '<p>destination image width</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '<p>destination image height</p>\\n',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'blendMode',\n                        description:\n                          '<p>the blend mode. either\\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\\n<p>Available blend modes are: normal | multiply | screen | overlay |\\n           darken | lighten | color-dodge | color-burn | hard-light |\\n           soft-light | difference | exclusion | hue | saturation |\\n           color | luminosity</p>\\n<p><a href=\"http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a></p>\\n',\n                        type: 'Constant'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'sx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'sh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dx',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dy',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dw',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'dh',\n                        description: '',\n                        type: 'Integer'\n                      },\n                      {\n                        name: 'blendMode',\n                        description: '',\n                        type: 'Constant'\n                      }\n                    ]\n                  }\n                ]\n              },\n              save: {\n                name: 'save',\n                params: [\n                  {\n                    name: 'filename',\n                    description: '<p>give your file a name</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'extension',\n                    description: \"<p>'png' or 'jpg'</p>\\n\",\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              reset: {\n                name: 'reset',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              getCurrentFrame: {\n                name: 'getCurrentFrame',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              setFrame: {\n                name: 'setFrame',\n                params: [\n                  {\n                    name: 'index',\n                    description:\n                      '<p>the index for the frame that should be displayed</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              numFrames: {\n                name: 'numFrames',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              play: {\n                name: 'play',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              pause: {\n                name: 'pause',\n                class: 'p5.Image',\n                module: 'Image'\n              },\n              delay: {\n                name: 'delay',\n                params: [\n                  {\n                    name: 'd',\n                    description:\n                      '<p>the amount in milliseconds to delay between switching frames</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'index',\n                    description:\n                      '<p>the index of the frame that should have the new delay value {optional}</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Image',\n                module: 'Image'\n              }\n            },\n            'p5.PrintWriter': {\n              write: {\n                name: 'write',\n                params: [\n                  {\n                    name: 'data',\n                    description: '<p>all data to be written by the PrintWriter</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5.PrintWriter',\n                module: 'IO'\n              },\n              print: {\n                name: 'print',\n                params: [\n                  {\n                    name: 'data',\n                    description: '<p>all data to be printed by the PrintWriter</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5.PrintWriter',\n                module: 'IO'\n              },\n              clear: {\n                name: 'clear',\n                class: 'p5.PrintWriter',\n                module: 'IO'\n              },\n              close: {\n                name: 'close',\n                class: 'p5.PrintWriter',\n                module: 'IO'\n              }\n            },\n            'p5.Table': {\n              columns: {\n                name: 'columns',\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              rows: {\n                name: 'rows',\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              addRow: {\n                name: 'addRow',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row to be added to the table</p>\\n',\n                    type: 'p5.TableRow',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              removeRow: {\n                name: 'removeRow',\n                params: [\n                  {\n                    name: 'id',\n                    description: '<p>ID number of the row to remove</p>\\n',\n                    type: 'Integer'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getRow: {\n                name: 'getRow',\n                params: [\n                  {\n                    name: 'rowID',\n                    description: '<p>ID number of the row to get</p>\\n',\n                    type: 'Integer'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getRows: {\n                name: 'getRows',\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              findRow: {\n                name: 'findRow',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>The value to match</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>ID number or title of the\\n                               column to search</p>\\n',\n                    type: 'Integer|String'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              findRows: {\n                name: 'findRows',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>The value to match</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>ID number or title of the\\n                               column to search</p>\\n',\n                    type: 'Integer|String'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              matchRow: {\n                name: 'matchRow',\n                params: [\n                  {\n                    name: 'regexp',\n                    description: '<p>The regular expression to match</p>\\n',\n                    type: 'String|RegExp'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>The column ID (number) or\\n                                 title (string)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              matchRows: {\n                name: 'matchRows',\n                params: [\n                  {\n                    name: 'regexp',\n                    description: '<p>The regular expression to match</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>The column ID (number) or\\n                                 title (string)</p>\\n',\n                    type: 'String|Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getColumn: {\n                name: 'getColumn',\n                params: [\n                  {\n                    name: 'column',\n                    description: '<p>String or Number of the column to return</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              clearRows: {\n                name: 'clearRows',\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              addColumn: {\n                name: 'addColumn',\n                params: [\n                  {\n                    name: 'title',\n                    description: '<p>title of the given column</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getColumnCount: {\n                name: 'getColumnCount',\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getRowCount: {\n                name: 'getRowCount',\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              removeTokens: {\n                name: 'removeTokens',\n                params: [\n                  {\n                    name: 'chars',\n                    description: '<p>String listing characters to be removed</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (number)\\n                                 or name (string)</p>\\n',\n                    type: 'String|Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              trim: {\n                name: 'trim',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (number)\\n                                 or name (string)</p>\\n',\n                    type: 'String|Integer',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              removeColumn: {\n                name: 'removeColumn',\n                params: [\n                  {\n                    name: 'column',\n                    description: '<p>columnName (string) or ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>column ID (Number)\\n                              or title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value to assign</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              setNum: {\n                name: 'setNum',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>column ID (Number)\\n                              or title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value to assign</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              setString: {\n                name: 'setString',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>column ID (Number)\\n                              or title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>value to assign</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              get: {\n                name: 'get',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                  ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getNum: {\n                name: 'getNum',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                  ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getString: {\n                name: 'getString',\n                params: [\n                  {\n                    name: 'row',\n                    description: '<p>row ID</p>\\n',\n                    type: 'Integer'\n                  },\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                  ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getObject: {\n                name: 'getObject',\n                params: [\n                  {\n                    name: 'headerColumn',\n                    description:\n                      '<p>Name of the column which should be used to\\n                             title each row object (optional)</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Table',\n                module: 'IO'\n              },\n              getArray: {\n                name: 'getArray',\n                class: 'p5.Table',\n                module: 'IO'\n              }\n            },\n            'p5.TableRow': {\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (Number)\\n                              or Title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>The value to be stored</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                class: 'p5.TableRow',\n                module: 'IO'\n              },\n              setNum: {\n                name: 'setNum',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (Number)\\n                              or Title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>The value to be stored\\n                              as a Float</p>\\n',\n                    type: 'Number|String'\n                  }\n                ],\n                class: 'p5.TableRow',\n                module: 'IO'\n              },\n              setString: {\n                name: 'setString',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>Column ID (Number)\\n                              or Title (String)</p>\\n',\n                    type: 'String|Integer'\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>The value to be stored\\n                              as a String</p>\\n',\n                    type: 'String|Number|Boolean|Object'\n                  }\n                ],\n                class: 'p5.TableRow',\n                module: 'IO'\n              },\n              get: {\n                name: 'get',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                 ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.TableRow',\n                module: 'IO'\n              },\n              getNum: {\n                name: 'getNum',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                 ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.TableRow',\n                module: 'IO'\n              },\n              getString: {\n                name: 'getString',\n                params: [\n                  {\n                    name: 'column',\n                    description:\n                      '<p>columnName (string) or\\n                                 ID (number)</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.TableRow',\n                module: 'IO'\n              }\n            },\n            'p5.XML': {\n              getParent: {\n                name: 'getParent',\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              getName: {\n                name: 'getName',\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              setName: {\n                name: 'setName',\n                params: [\n                  {\n                    name: 'the',\n                    description: '<p>new name of the node</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              hasChildren: {\n                name: 'hasChildren',\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              listChildren: {\n                name: 'listChildren',\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              getChildren: {\n                name: 'getChildren',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>element name</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              getChild: {\n                name: 'getChild',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>element name or index</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              addChild: {\n                name: 'addChild',\n                params: [\n                  {\n                    name: 'node',\n                    description:\n                      '<p>a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added</p>\\n',\n                    type: 'p5.XML'\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              removeChild: {\n                name: 'removeChild',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>element name or index</p>\\n',\n                    type: 'String|Integer'\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              getAttributeCount: {\n                name: 'getAttributeCount',\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              listAttributes: {\n                name: 'listAttributes',\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              hasAttribute: {\n                name: 'hasAttribute',\n                params: [\n                  {\n                    name: 'the',\n                    description: '<p>attribute to be checked</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              getNum: {\n                name: 'getNum',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>the non-null full name of the attribute</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'defaultValue',\n                    description: '<p>the default value of the attribute</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              getString: {\n                name: 'getString',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>the non-null full name of the attribute</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'defaultValue',\n                    description: '<p>the default value of the attribute</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              setAttribute: {\n                name: 'setAttribute',\n                params: [\n                  {\n                    name: 'name',\n                    description: '<p>the full name of the attribute</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'value',\n                    description: '<p>the value of the attribute</p>\\n',\n                    type: 'Number|String|Boolean'\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              getContent: {\n                name: 'getContent',\n                params: [\n                  {\n                    name: 'defaultValue',\n                    description: '<p>value returned if no content is found</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              setContent: {\n                name: 'setContent',\n                params: [\n                  {\n                    name: 'text',\n                    description: '<p>the new content</p>\\n',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.XML',\n                module: 'IO'\n              },\n              serialize: {\n                name: 'serialize',\n                class: 'p5.XML',\n                module: 'IO'\n              }\n            },\n            'p5.Vector': {\n              x: {\n                name: 'x',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              y: {\n                name: 'y',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              z: {\n                name: 'z',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              toString: {\n                name: 'toString',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              set: {\n                name: 'set',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>the vector to set</p>\\n',\n                        type: 'p5.Vector|Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  }\n                ]\n              },\n              copy: {\n                name: 'copy',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              add: {\n                name: 'add',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of the vector to be added</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of the vector to be added</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of the vector to be added</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>the vector to add</p>\\n',\n                        type: 'p5.Vector|Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>a <a href=\"#/p5.Vector\">p5.Vector</a> to add</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>a <a href=\"#/p5.Vector\">p5.Vector</a> to add</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>the vector to receive the result (Optional)</p>\\n',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              rem: {\n                name: 'rem',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of divisor vector</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of divisor vector</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of divisor vector</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>divisor vector</p>\\n',\n                        type: 'p5.Vector | Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>dividend <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description: '<p>divisor <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              sub: {\n                name: 'sub',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of the vector to subtract</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of the vector to subtract</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of the vector to subtract</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>the vector to subtract</p>\\n',\n                        type: 'p5.Vector|Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>the vector to receive the result (Optional)</p>\\n',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              mult: {\n                name: 'mult',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>The number to multiply with the vector</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description:\n                          '<p>The number to multiply with the x component of the vector</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description:\n                          '<p>The number to multiply with the y component of the vector</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description:\n                          '<p>The number to multiply with the z component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'arr',\n                        description:\n                          '<p>The array to multiply with the components of the vector</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v',\n                        description:\n                          '<p>The vector to multiply with the components of the original vector</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'n',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>the vector to receive the result (Optional)</p>\\n',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v0',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'target',\n                        description: '',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v0',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'arr',\n                        description: '',\n                        type: 'Number[]'\n                      },\n                      {\n                        name: 'target',\n                        description: '',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              div: {\n                name: 'div',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'n',\n                        description: '<p>The number to divide the vector by</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description:\n                          '<p>The number to divide with the x component of the vector</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description:\n                          '<p>The number to divide with the y component of the vector</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description:\n                          '<p>The number to divide with the z component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'arr',\n                        description:\n                          '<p>The array to divide the components of the vector by</p>\\n',\n                        type: 'Number[]'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v',\n                        description:\n                          '<p>The vector to divide the components of the original vector by</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'n',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>the vector to receive the result (Optional)</p>\\n',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v0',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'target',\n                        description: '',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v0',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'arr',\n                        description: '',\n                        type: 'Number[]'\n                      },\n                      {\n                        name: 'target',\n                        description: '',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              mag: {\n                name: 'mag',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: []\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'vecT',\n                        description: '<p>the vector to return the magnitude of</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              magSq: {\n                name: 'magSq',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              dot: {\n                name: 'dot',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>x component of the vector</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>y component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>z component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description:\n                          '<p>value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>the first <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>the second <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              cross: {\n                name: 'cross',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v',\n                        description:\n                          '<p><a href=\"#/p5.Vector\">p5.Vector</a> to be crossed</p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>the first <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>the second <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              dist: {\n                name: 'dist',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'v',\n                        description:\n                          '<p>the x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description:\n                          '<p>the first <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description:\n                          '<p>the second <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                        type: 'p5.Vector'\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              normalize: {\n                name: 'normalize',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              limit: {\n                name: 'limit',\n                params: [\n                  {\n                    name: 'max',\n                    description: '<p>the maximum magnitude for the vector</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              setMag: {\n                name: 'setMag',\n                params: [\n                  {\n                    name: 'len',\n                    description: '<p>the new length for this vector</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              heading: {\n                name: 'heading',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              setHeading: {\n                name: 'setHeading',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle of rotation</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              rotate: {\n                name: 'rotate',\n                params: [\n                  {\n                    name: 'angle',\n                    description: '<p>the angle of rotation</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              angleBetween: {\n                name: 'angleBetween',\n                params: [\n                  {\n                    name: 'value',\n                    description:\n                      '<p>the x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a></p>\\n',\n                    type: 'p5.Vector'\n                  }\n                ],\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              lerp: {\n                name: 'lerp',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component</p>\\n',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'amt',\n                        description:\n                          '<p>the amount of interpolation; some value between 0.0\\n                        (old vector) and 1.0 (new vector). 0.9 is very near\\n                        the new vector. 0.5 is halfway in between.</p>\\n',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v',\n                        description:\n                          '<p>the <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to</p>\\n',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'amt',\n                        description: '',\n                        type: 'Number'\n                      }\n                    ],\n                    chainable: 1\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'v1',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'v2',\n                        description: '',\n                        type: 'p5.Vector'\n                      },\n                      {\n                        name: 'amt',\n                        description: '',\n                        type: 'Number'\n                      },\n                      {\n                        name: 'target',\n                        description: '<p>the vector to receive the result (Optional)</p>\\n',\n                        type: 'p5.Vector',\n                        optional: true\n                      }\n                    ],\n                    static: 1\n                  }\n                ]\n              },\n              reflect: {\n                name: 'reflect',\n                params: [\n                  {\n                    name: 'surfaceNormal',\n                    description:\n                      '<p>the <a href=\"#/p5.Vector\">p5.Vector</a> to reflect about, will be normalized by this method</p>\\n',\n                    type: 'p5.Vector'\n                  }\n                ],\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              array: {\n                name: 'array',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              equals: {\n                name: 'equals',\n                class: 'p5.Vector',\n                module: 'Math',\n                overloads: [\n                  {\n                    params: [\n                      {\n                        name: 'x',\n                        description: '<p>the x component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'y',\n                        description: '<p>the y component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      },\n                      {\n                        name: 'z',\n                        description: '<p>the z component of the vector</p>\\n',\n                        type: 'Number',\n                        optional: true\n                      }\n                    ]\n                  },\n                  {\n                    params: [\n                      {\n                        name: 'value',\n                        description: '<p>the vector to compare</p>\\n',\n                        type: 'p5.Vector|Array'\n                      }\n                    ]\n                  }\n                ]\n              },\n              fromAngle: {\n                name: 'fromAngle',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>the desired angle, in radians (unaffected by <a href=\"#/p5/angleMode\">angleMode</a>)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'length',\n                    description: '<p>the length of the new vector (defaults to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              fromAngles: {\n                name: 'fromAngles',\n                params: [\n                  {\n                    name: 'theta',\n                    description: '<p>the polar angle, in radians (zero is up)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'phi',\n                    description:\n                      '<p>the azimuthal angle, in radians\\n                              (zero is out of the screen)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'length',\n                    description: '<p>the length of the new vector (defaults to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              random2D: {\n                name: 'random2D',\n                class: 'p5.Vector',\n                module: 'Math'\n              },\n              random3D: {\n                name: 'random3D',\n                class: 'p5.Vector',\n                module: 'Math'\n              }\n            },\n            'p5.Font': {\n              font: {\n                name: 'font',\n                class: 'p5.Font',\n                module: 'Typography'\n              },\n              textBounds: {\n                name: 'textBounds',\n                params: [\n                  {\n                    name: 'line',\n                    description: '<p>a line of text</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'x',\n                    description: '<p>x-position</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-position</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'fontSize',\n                    description: '<p>font size to use (optional) Default is 12.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'options',\n                    description:\n                      \"<p>opentype options (optional)\\n                           opentype fonts contains alignment and baseline options.\\n                           Default is 'LEFT' and 'alphabetic'</p>\\n\",\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Font',\n                module: 'Typography'\n              },\n              textToPoints: {\n                name: 'textToPoints',\n                params: [\n                  {\n                    name: 'txt',\n                    description: '<p>a line of text</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'x',\n                    description: '<p>x-position</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y-position</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'fontSize',\n                    description: '<p>font size to use (optional)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'options',\n                    description:\n                      '<p>an (optional) object that can contain:</p>\\n<p><br>sampleFactor - the ratio of path-length to number of samples\\n(default=.1); higher values yield more points and are therefore\\nmore precise</p>\\n<p><br>simplifyThreshold - if set to a non-zero value, collinear points will be\\nbe removed from the polygon; the value represents the threshold angle to use\\nwhen determining whether two edges are collinear</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Font',\n                module: 'Typography'\n              }\n            },\n            'p5.Camera': {\n              perspective: {\n                name: 'perspective',\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              },\n              ortho: {\n                name: 'ortho',\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              },\n              frustum: {\n                name: 'frustum',\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              },\n              pan: {\n                name: 'pan',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>amount to rotate camera in current\\n<a href=\"#/p5/angleMode\">angleMode</a> units.\\nGreater than 0 values rotate counterclockwise (to the left).</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              },\n              tilt: {\n                name: 'tilt',\n                params: [\n                  {\n                    name: 'angle',\n                    description:\n                      '<p>amount to rotate camera in current\\n<a href=\"#/p5/angleMode\">angleMode</a> units.\\nGreater than 0 values rotate counterclockwise (to the left).</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              },\n              lookAt: {\n                name: 'lookAt',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x position of a point in world space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y position of a point in world space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z position of a point in world space</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              },\n              camera: {\n                name: 'camera',\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              },\n              move: {\n                name: 'move',\n                params: [\n                  {\n                    name: 'x',\n                    description: \"<p>amount to move along camera's left-right axis</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: \"<p>amount to move along camera's up-down axis</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'z',\n                    description:\n                      \"<p>amount to move along camera's forward-backward axis</p>\\n\",\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              },\n              setPosition: {\n                name: 'setPosition',\n                params: [\n                  {\n                    name: 'x',\n                    description: '<p>x position of a point in world space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'y',\n                    description: '<p>y position of a point in world space</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'z',\n                    description: '<p>z position of a point in world space</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Camera',\n                module: 'Lights, Camera'\n              }\n            },\n            'p5.Geometry': {\n              computeFaces: {\n                name: 'computeFaces',\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              computeNormals: {\n                name: 'computeNormals',\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              averageNormals: {\n                name: 'averageNormals',\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              averagePoleNormals: {\n                name: 'averagePoleNormals',\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              },\n              normalize: {\n                name: 'normalize',\n                class: 'p5.Geometry',\n                module: 'Lights, Camera'\n              }\n            },\n            'p5.Shader': {\n              setUniform: {\n                name: 'setUniform',\n                params: [\n                  {\n                    name: 'uniformName',\n                    description: '<p>the name of the uniform in the\\nshader program</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'data',\n                    description:\n                      '<p>the data to be associated\\nwith that uniform; type varies (could be a single numerical value, array,\\nmatrix, or texture / sampler reference)</p>\\n',\n                    type: 'Object|Number|Boolean|Number[]'\n                  }\n                ],\n                class: 'p5.Shader',\n                module: 'Lights, Camera'\n              }\n            },\n            'p5.sound': {\n              getMasterVolume: {\n                name: 'getMasterVolume',\n                class: 'p5.sound',\n                module: 'p5.sound'\n              },\n              masterVolume: {\n                name: 'masterVolume',\n                params: [\n                  {\n                    name: 'volume',\n                    description:\n                      '<p>Volume (amplitude) between 0.0\\n                                   and 1.0 or modulating signal/oscillator</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Fade for t seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>Schedule this event to happen at\\n                               t seconds in the future</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.sound',\n                module: 'p5.sound'\n              },\n              soundOut: {\n                name: 'soundOut',\n                class: 'p5.sound',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Effect': {\n              amp: {\n                name: 'amp',\n                params: [\n                  {\n                    name: 'vol',\n                    description: '<p>amplitude between 0 and 1.0</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts until rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'tFromNow',\n                    description:\n                      '<p>schedule this event to happen in tFromNow seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Effect',\n                module: 'p5.sound'\n              },\n              chain: {\n                name: 'chain',\n                params: [\n                  {\n                    name: 'arguments',\n                    description: '<p>Chain together multiple sound objects</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Effect',\n                module: 'p5.sound'\n              },\n              drywet: {\n                name: 'drywet',\n                params: [\n                  {\n                    name: 'fade',\n                    description: '<p>The desired drywet value (0 - 1.0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Effect',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Effect',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.Effect',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Filter': {\n              biquadFilter: {\n                name: 'biquadFilter',\n                class: 'p5.Filter',\n                module: 'p5.sound'\n              },\n              process: {\n                name: 'process',\n                params: [\n                  {\n                    name: 'Signal',\n                    description: '<p>An object that outputs audio</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'freq',\n                    description: '<p>Frequency in Hz, from 10 to 22050</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'res',\n                    description:\n                      '<p>Resonance/Width of the filter frequency\\n                      from 0.001 to 1000</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Frequency in Hz, from 10 to 22050</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'res',\n                    description: '<p>Resonance (Q) from 0.001 to 1000</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound'\n              },\n              freq: {\n                name: 'freq',\n                params: [\n                  {\n                    name: 'freq',\n                    description: '<p>Filter Frequency</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound'\n              },\n              res: {\n                name: 'res',\n                params: [\n                  {\n                    name: 'res',\n                    description:\n                      '<p>Resonance/Width of filter freq\\n                     from 0.001 to 1000</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound'\n              },\n              gain: {\n                name: 'gain',\n                params: [\n                  {\n                    name: 'gain',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound'\n              },\n              toggle: {\n                name: 'toggle',\n                class: 'p5.Filter',\n                module: 'p5.sound'\n              },\n              setType: {\n                name: 'setType',\n                params: [\n                  {\n                    name: 't',\n                    description: '',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Filter',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Oscillator': {\n              start: {\n                name: 'start',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>startTime in seconds from now.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'frequency',\n                    description: '<p>frequency in Hz.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              stop: {\n                name: 'stop',\n                params: [\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>Time, in seconds from now.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              amp: {\n                name: 'amp',\n                params: [\n                  {\n                    name: 'vol',\n                    description:\n                      '<p>between 0 and 1.0\\n                            or a modulating signal/oscillator</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              freq: {\n                name: 'freq',\n                params: [\n                  {\n                    name: 'Frequency',\n                    description:\n                      '<p>Frequency in Hz\\n                                      or modulating signal/oscillator</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Ramp time (in seconds)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>Schedule this event to happen\\n                                 at x seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              setType: {\n                name: 'setType',\n                params: [\n                  {\n                    name: 'type',\n                    description: \"<p>'sine', 'triangle', 'sawtooth' or 'square'.</p>\\n\",\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>A p5.sound or Web Audio object</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              pan: {\n                name: 'pan',\n                params: [\n                  {\n                    name: 'panning',\n                    description: '<p>Number between -1 and 1</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              phase: {\n                name: 'phase',\n                params: [\n                  {\n                    name: 'phase',\n                    description: '<p>float between 0.0 and 1.0</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              add: {\n                name: 'add',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>Constant number to add</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              mult: {\n                name: 'mult',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>Constant number to multiply</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              },\n              scale: {\n                name: 'scale',\n                params: [\n                  {\n                    name: 'inMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'inMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Oscillator',\n                module: 'p5.sound'\n              }\n            },\n            'p5.MonoSynth': {\n              play: {\n                name: 'play',\n                params: [\n                  {\n                    name: 'note',\n                    description:\n                      '<p>the note you want to play, specified as a\\n                               frequency in Hertz (Number) or as a midi\\n                               value in Note/Octave format (\"C4\", \"Eb3\"...etc\")\\n                               See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">\\n                               Tone</a>. Defaults to 440 hz.</p>\\n',\n                    type: 'String | Number'\n                  },\n                  {\n                    name: 'velocity',\n                    description:\n                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds) at which to play</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sustainTime',\n                    description:\n                      '<p>time to sustain before releasing the envelope. Defaults to 0.15 seconds.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              triggerAttack: {\n                params: [\n                  {\n                    name: 'note',\n                    description:\n                      '<p>the note you want to play, specified as a\\n                               frequency in Hertz (Number) or as a midi\\n                               value in Note/Octave format (\"C4\", \"Eb3\"...etc\")\\n                               See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">\\n                               Tone</a>. Defaults to 440 hz</p>\\n',\n                    type: 'String | Number'\n                  },\n                  {\n                    name: 'velocity',\n                    description:\n                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds) at which to play</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                name: 'triggerAttack',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              triggerRelease: {\n                params: [\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time to trigger the release</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                name: 'triggerRelease',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              setADSR: {\n                name: 'setADSR',\n                params: [\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds before envelope\\n                              reaches Attack Level</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decayTime',\n                    description:\n                      '<p>Time (in seconds) before envelope\\n                              reaches Decay/Sustain Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'susRatio',\n                    description:\n                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\\n                              The susRatio determines the decayLevel and the level at which the\\n                              sustain portion of the envelope will sustain.\\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\\n                              increased to 1.0 (using <code>setRange</code>),\\n                              then decayLevel would increase proportionally, to become 0.5.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Time in seconds from now (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              attack: {\n                name: 'attack',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              decay: {\n                name: 'decay',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              sustain: {\n                name: 'sustain',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              release: {\n                name: 'release',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              amp: {\n                name: 'amp',\n                params: [\n                  {\n                    name: 'vol',\n                    description: '<p>desired volume</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Time to reach new volume</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>A p5.sound or Web Audio object</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              },\n              dispose: {\n                name: 'dispose',\n                class: 'p5.MonoSynth',\n                module: 'p5.sound'\n              }\n            },\n            'p5.AudioVoice': {\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.AudioVoice',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.AudioVoice',\n                module: 'p5.sound'\n              }\n            },\n            'p5.PolySynth': {\n              notes: {\n                name: 'notes',\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              polyvalue: {\n                name: 'polyvalue',\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              AudioVoice: {\n                name: 'AudioVoice',\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              play: {\n                name: 'play',\n                params: [\n                  {\n                    name: 'note',\n                    description:\n                      '<p>midi note to play (ranging from 0 to 127 - 60 being a middle C)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'velocity',\n                    description:\n                      '<p>velocity of the note to play (ranging from 0 to 1)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds) at which to play</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sustainTime',\n                    description: '<p>time to sustain before releasing the envelope</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              noteADSR: {\n                name: 'noteADSR',\n                params: [\n                  {\n                    name: 'note',\n                    description: '<p>Midi note on which ADSR should be set.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds before envelope\\n                              reaches Attack Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'decayTime',\n                    description:\n                      '<p>Time (in seconds) before envelope\\n                              reaches Decay/Sustain Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'susRatio',\n                    description:\n                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\\n                              The susRatio determines the decayLevel and the level at which the\\n                              sustain portion of the envelope will sustain.\\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\\n                              increased to 1.0 (using <code>setRange</code>),\\n                              then decayLevel would increase proportionally, to become 0.5.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Time in seconds from now (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              setADSR: {\n                name: 'setADSR',\n                params: [\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds before envelope\\n                               reaches Attack Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'decayTime',\n                    description:\n                      '<p>Time (in seconds) before envelope\\n                               reaches Decay/Sustain Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'susRatio',\n                    description:\n                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\\n                               where 1.0 = attackLevel, 0.0 = releaseLevel.\\n                               The susRatio determines the decayLevel and the level at which the\\n                               sustain portion of the envelope will sustain.\\n                               For example, if attackLevel is 0.4, releaseLevel is 0,\\n                               and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\\n                               increased to 1.0 (using <code>setRange</code>),\\n                               then decayLevel would increase proportionally, to become 0.5.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Time in seconds from now (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              noteAttack: {\n                name: 'noteAttack',\n                params: [\n                  {\n                    name: 'note',\n                    description: '<p>midi note on which attack should be triggered.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'velocity',\n                    description:\n                      '<p>velocity of the note to play (ranging from 0 to 1)/</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              noteRelease: {\n                name: 'noteRelease',\n                params: [\n                  {\n                    name: 'note',\n                    description:\n                      '<p>midi note on which attack should be triggered.\\n                                  If no value is provided, all notes will be released.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time to trigger the release</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>A p5.sound or Web Audio object</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              },\n              dispose: {\n                name: 'dispose',\n                class: 'p5.PolySynth',\n                module: 'p5.sound'\n              }\n            },\n            'p5.SoundFile': {\n              isLoaded: {\n                name: 'isLoaded',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              play: {\n                name: 'play',\n                params: [\n                  {\n                    name: 'startTime',\n                    description:\n                      '<p>(optional) schedule playback to start (in seconds from now).</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'rate',\n                    description: '<p>(optional) playback rate</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'amp',\n                    description:\n                      '<p>(optional) amplitude (volume)\\n                                    of playback</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'cueStart',\n                    description: '<p>(optional) cue start time in seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>(optional) duration of playback in seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              playMode: {\n                name: 'playMode',\n                params: [\n                  {\n                    name: 'str',\n                    description: \"<p>'restart' or 'sustain' or 'untilDone'</p>\\n\",\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              pause: {\n                name: 'pause',\n                params: [\n                  {\n                    name: 'startTime',\n                    description:\n                      '<p>(optional) schedule event to occur\\n                             seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              loop: {\n                name: 'loop',\n                params: [\n                  {\n                    name: 'startTime',\n                    description:\n                      '<p>(optional) schedule event to occur\\n                            seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'rate',\n                    description: '<p>(optional) playback rate</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'amp',\n                    description: '<p>(optional) playback volume</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'cueLoopStart',\n                    description: '<p>(optional) startTime in seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>(optional) loop duration in seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              setLoop: {\n                name: 'setLoop',\n                params: [\n                  {\n                    name: 'Boolean',\n                    description: '<p>set looping to true or false</p>\\n',\n                    type: 'Boolean'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              isLooping: {\n                name: 'isLooping',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              isPlaying: {\n                name: 'isPlaying',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              isPaused: {\n                name: 'isPaused',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              stop: {\n                name: 'stop',\n                params: [\n                  {\n                    name: 'startTime',\n                    description:\n                      '<p>(optional) schedule event to occur\\n                            in seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              setVolume: {\n                name: 'setVolume',\n                params: [\n                  {\n                    name: 'volume',\n                    description:\n                      '<p>Volume (amplitude) between 0.0\\n                                   and 1.0 or modulating signal/oscillator</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Fade for t seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>Schedule this event to happen at\\n                               t seconds in the future</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              pan: {\n                name: 'pan',\n                params: [\n                  {\n                    name: 'panValue',\n                    description: '<p>Set the stereo panner</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                                seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              getPan: {\n                name: 'getPan',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              rate: {\n                name: 'rate',\n                params: [\n                  {\n                    name: 'playbackRate',\n                    description:\n                      '<p>Set the playback rate. 1.0 is normal,\\n                                   .5 is half-speed, 2.0 is twice as fast.\\n                                   Values less than zero play backwards.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              duration: {\n                name: 'duration',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              currentTime: {\n                name: 'currentTime',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              jump: {\n                name: 'jump',\n                params: [\n                  {\n                    name: 'cueTime',\n                    description: '<p>cueTime of the soundFile in seconds.</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>duration in seconds.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              channels: {\n                name: 'channels',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              sampleRate: {\n                name: 'sampleRate',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              frames: {\n                name: 'frames',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              getPeaks: {\n                name: 'getPeaks',\n                params: [\n                  {\n                    name: 'length',\n                    description:\n                      '<p>length is the size of the returned array.\\n                         Larger length results in more precision.\\n                         Defaults to 5*width of the browser window.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              reverseBuffer: {\n                name: 'reverseBuffer',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              onended: {\n                name: 'onended',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>function to call when the\\n                            soundfile has ended.</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'object',\n                    description: '<p>Audio object that accepts an input</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              setPath: {\n                name: 'setPath',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to audio file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description: '<p>Callback</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              setBuffer: {\n                name: 'setBuffer',\n                params: [\n                  {\n                    name: 'buf',\n                    description:\n                      '<p>Array of Float32 Array(s). 2 Float32 Arrays\\n                   will create a stereo source. 1 will create\\n                   a mono source.</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              processPeaks: {\n                name: 'processPeaks',\n                params: [\n                  {\n                    name: 'callback',\n                    description: '<p>a function to call once this data is returned</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'initThreshold',\n                    description: '<p>initial threshold defaults to 0.9</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'minThreshold',\n                    description: '<p>minimum threshold defaults to 0.22</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'minPeaks',\n                    description: '<p>minimum number of peaks defaults to 200</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              addCue: {\n                name: 'addCue',\n                params: [\n                  {\n                    name: 'time',\n                    description:\n                      \"<p>Time in seconds, relative to this media\\n                           element's playback. For example, to trigger\\n                           an event every time playback reaches two\\n                           seconds, pass in the number 2. This will be\\n                           passed as the first parameter to\\n                           the callback function.</p>\\n\",\n                    type: 'Number'\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>Name of a function that will be\\n                           called at the given time. The callback will\\n                           receive time and (optionally) param as its\\n                           two parameters.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'value',\n                    description:\n                      '<p>An object to be passed as the\\n                           second parameter to the\\n                           callback function.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              removeCue: {\n                name: 'removeCue',\n                params: [\n                  {\n                    name: 'id',\n                    description: '<p>ID of the cue, as returned by addCue</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              clearCues: {\n                name: 'clearCues',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              save: {\n                name: 'save',\n                params: [\n                  {\n                    name: 'fileName',\n                    description: '<p>name of the resulting .wav file.</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              },\n              getBlob: {\n                name: 'getBlob',\n                class: 'p5.SoundFile',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Amplitude': {\n              setInput: {\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'snd',\n                    description:\n                      '<p>set the sound source\\n                                     (optional, defaults to\\n                                     master output)</p>\\n',\n                    type: 'SoundObject|undefined',\n                    optional: true\n                  },\n                  {\n                    name: 'smoothing',\n                    description:\n                      '<p>a range between 0.0 and 1.0\\n                                      to smooth amplitude readings</p>\\n',\n                    type: 'Number|undefined',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Amplitude',\n                module: 'p5.sound'\n              },\n              getLevel: {\n                name: 'getLevel',\n                params: [\n                  {\n                    name: 'channel',\n                    description:\n                      '<p>Optionally return only channel 0 (left) or 1 (right)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Amplitude',\n                module: 'p5.sound'\n              },\n              toggleNormalize: {\n                name: 'toggleNormalize',\n                params: [\n                  {\n                    name: 'boolean',\n                    description: '<p>set normalize to true (1) or false (0)</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Amplitude',\n                module: 'p5.sound'\n              },\n              smooth: {\n                name: 'smooth',\n                params: [\n                  {\n                    name: 'set',\n                    description: '<p>smoothing from 0.0 <= 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Amplitude',\n                module: 'p5.sound'\n              }\n            },\n            'p5.FFT': {\n              setInput: {\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'source',\n                    description: '<p>p5.sound object (or web audio API source node)</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              },\n              waveform: {\n                name: 'waveform',\n                params: [\n                  {\n                    name: 'bins',\n                    description:\n                      '<p>Must be a power of two between\\n                          16 and 1024. Defaults to 1024.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'precision',\n                    description:\n                      '<p>If any value is provided, will return results\\n                            in a Float32 Array which is more precise\\n                            than a regular array.</p>\\n',\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              },\n              analyze: {\n                name: 'analyze',\n                params: [\n                  {\n                    name: 'bins',\n                    description:\n                      '<p>Must be a power of two between\\n                           16 and 1024. Defaults to 1024.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'scale',\n                    description:\n                      '<p>If \"dB,\" returns decibel\\n                           float measurements between\\n                           -140 and 0 (max).\\n                           Otherwise returns integers from 0-255.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              },\n              getEnergy: {\n                name: 'getEnergy',\n                params: [\n                  {\n                    name: 'frequency1',\n                    description:\n                      '<p>Will return a value representing\\n                              energy at this frequency. Alternately,\\n                              the strings \"bass\", \"lowMid\" \"mid\",\\n                              \"highMid\", and \"treble\" will return\\n                              predefined frequency ranges.</p>\\n',\n                    type: 'Number|String'\n                  },\n                  {\n                    name: 'frequency2',\n                    description:\n                      '<p>If a second frequency is given,\\n                              will return average amount of\\n                              energy that exists between the\\n                              two frequencies.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              },\n              getCentroid: {\n                name: 'getCentroid',\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              },\n              smooth: {\n                name: 'smooth',\n                params: [\n                  {\n                    name: 'smoothing',\n                    description:\n                      '<p>0.0 < smoothing < 1.0.\\n                             Defaults to 0.8.</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              },\n              linAverages: {\n                name: 'linAverages',\n                params: [\n                  {\n                    name: 'N',\n                    description: '<p>Number of returned frequency groups</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              },\n              logAverages: {\n                name: 'logAverages',\n                params: [\n                  {\n                    name: 'octaveBands',\n                    description: '<p>Array of Octave Bands objects for grouping</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              },\n              getOctaveBands: {\n                name: 'getOctaveBands',\n                params: [\n                  {\n                    name: 'N',\n                    description:\n                      '<p>Specifies the 1/N type of generated octave bands</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'fCtr0',\n                    description: '<p>Minimum central frequency for the lowest band</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.FFT',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Signal': {\n              fade: {\n                name: 'fade',\n                params: [\n                  {\n                    name: 'value',\n                    description: '<p>Value to set this signal</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>Length of fade, in seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Signal',\n                module: 'p5.sound'\n              },\n              setInput: {\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'input',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Signal',\n                module: 'p5.sound'\n              },\n              add: {\n                name: 'add',\n                params: [\n                  {\n                    name: 'number',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Signal',\n                module: 'p5.sound'\n              },\n              mult: {\n                name: 'mult',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>to multiply</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Signal',\n                module: 'p5.sound'\n              },\n              scale: {\n                name: 'scale',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>to multiply</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'inMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'inMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Signal',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Envelope': {\n              attackTime: {\n                name: 'attackTime',\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              attackLevel: {\n                name: 'attackLevel',\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              decayTime: {\n                name: 'decayTime',\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              decayLevel: {\n                name: 'decayLevel',\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              releaseTime: {\n                name: 'releaseTime',\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              releaseLevel: {\n                name: 'releaseLevel',\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds) before level\\n                               reaches attackLevel</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'attackLevel',\n                    description:\n                      '<p>Typically an amplitude between\\n                               0.0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decayTime',\n                    description: '<p>Time</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decayLevel',\n                    description:\n                      '<p>Amplitude (In a standard ADSR envelope,\\n                               decayLevel = sustainLevel)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Release Time (in seconds)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'releaseLevel',\n                    description: '<p>Amplitude</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              setADSR: {\n                name: 'setADSR',\n                params: [\n                  {\n                    name: 'attackTime',\n                    description:\n                      '<p>Time (in seconds before envelope\\n                              reaches Attack Level</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'decayTime',\n                    description:\n                      '<p>Time (in seconds) before envelope\\n                              reaches Decay/Sustain Level</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'susRatio',\n                    description:\n                      '<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\\n                              The susRatio determines the decayLevel and the level at which the\\n                              sustain portion of the envelope will sustain.\\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\\n                              increased to 1.0 (using <code>setRange</code>),\\n                              then decayLevel would increase proportionally, to become 0.5.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'releaseTime',\n                    description: '<p>Time in seconds from now (defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              setRange: {\n                name: 'setRange',\n                params: [\n                  {\n                    name: 'aLevel',\n                    description: '<p>attack level (defaults to 1)</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rLevel',\n                    description: '<p>release level (defaults to 0)</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              setInput: {\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'inputs',\n                    description:\n                      '<p>A p5.sound object or\\n                              Web Audio Param.</p>\\n',\n                    type: 'Object',\n                    optional: true,\n                    multiple: true\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              setExp: {\n                name: 'setExp',\n                params: [\n                  {\n                    name: 'isExp',\n                    description: '<p>true is exponential, false is linear</p>\\n',\n                    type: 'Boolean'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              play: {\n                name: 'play',\n                params: [\n                  {\n                    name: 'unit',\n                    description:\n                      '<p>A p5.sound object or\\n                              Web Audio Param.</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'startTime',\n                    description: '<p>time from now (in seconds) at which to play</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'sustainTime',\n                    description: '<p>time to sustain before releasing the envelope</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              triggerAttack: {\n                name: 'triggerAttack',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>p5.sound Object or Web Audio Param</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time from now (in seconds)</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              triggerRelease: {\n                name: 'triggerRelease',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>p5.sound Object or Web Audio Param</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>time to trigger the release</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              ramp: {\n                name: 'ramp',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '<p>p5.sound Object or Web Audio Param</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'secondsFromNow',\n                    description: '<p>When to trigger the ramp</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'v',\n                    description: '<p>Target value</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'v2',\n                    description: '<p>Second target value (optional)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              add: {\n                name: 'add',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>Constant number to add</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              mult: {\n                name: 'mult',\n                params: [\n                  {\n                    name: 'number',\n                    description: '<p>Constant number to multiply</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              },\n              scale: {\n                name: 'scale',\n                params: [\n                  {\n                    name: 'inMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'inMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMin',\n                    description: '<p>input range minumum</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'outMax',\n                    description: '<p>input range maximum</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Envelope',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Pulse': {\n              width: {\n                name: 'width',\n                params: [\n                  {\n                    name: 'width',\n                    description:\n                      '<p>Width between the pulses (0 to 1.0,\\n                       defaults to 0)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Pulse',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Noise': {\n              setType: {\n                name: 'setType',\n                params: [\n                  {\n                    name: 'type',\n                    description: \"<p>'white', 'pink' or 'brown'</p>\\n\",\n                    type: 'String',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Noise',\n                module: 'p5.sound'\n              }\n            },\n            'p5.AudioIn': {\n              input: {\n                name: 'input',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              output: {\n                name: 'output',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              stream: {\n                name: 'stream',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              mediaStream: {\n                name: 'mediaStream',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              currentSource: {\n                name: 'currentSource',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              enabled: {\n                name: 'enabled',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              amplitude: {\n                name: 'amplitude',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              start: {\n                name: 'start',\n                params: [\n                  {\n                    name: 'successCallback',\n                    description:\n                      '<p>Name of a function to call on\\n                                  success.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>Name of a function to call if\\n                                  there was an error. For example,\\n                                  some browsers do not support\\n                                  getUserMedia.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              stop: {\n                name: 'stop',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description:\n                      '<p>An object that accepts audio input,\\n                        such as an FFT</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              getLevel: {\n                name: 'getLevel',\n                params: [\n                  {\n                    name: 'smoothing',\n                    description:\n                      '<p>Smoothing is 0.0 by default.\\n                             Smooths values based on previous values.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              amp: {\n                name: 'amp',\n                params: [\n                  {\n                    name: 'vol',\n                    description: '<p>between 0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description: '<p>ramp time (optional)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              getSources: {\n                name: 'getSources',\n                params: [\n                  {\n                    name: 'successCallback',\n                    description:\n                      '<p>This callback function handles the sources when they\\n                                     have been enumerated. The callback function\\n                                     receives the deviceList array as its only argument</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  },\n                  {\n                    name: 'errorCallback',\n                    description:\n                      '<p>This optional callback receives the error\\n                                   message as its argument.</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              },\n              setSource: {\n                name: 'setSource',\n                params: [\n                  {\n                    name: 'num',\n                    description: '<p>position of input source in the array</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.AudioIn',\n                module: 'p5.sound'\n              }\n            },\n            'p5.EQ': {\n              bands: {\n                name: 'bands',\n                class: 'p5.EQ',\n                module: 'p5.sound'\n              },\n              process: {\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description: '<p>Audio source</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.EQ',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Panner3D': {\n              panner: {\n                name: 'panner',\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              process: {\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description: '<p>Input source</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'xVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'yVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'zVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              positionX: {\n                name: 'positionX',\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              positionY: {\n                name: 'positionY',\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              positionZ: {\n                name: 'positionZ',\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              orient: {\n                name: 'orient',\n                params: [\n                  {\n                    name: 'xVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'yVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'zVal',\n                    description: '',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              orientX: {\n                name: 'orientX',\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              orientY: {\n                name: 'orientY',\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              orientZ: {\n                name: 'orientZ',\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              setFalloff: {\n                name: 'setFalloff',\n                params: [\n                  {\n                    name: 'maxDistance',\n                    description: '',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'rolloffFactor',\n                    description: '',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              maxDist: {\n                name: 'maxDist',\n                params: [\n                  {\n                    name: 'maxDistance',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              },\n              rollof: {\n                name: 'rollof',\n                params: [\n                  {\n                    name: 'rolloffFactor',\n                    description: '',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Panner3D',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Delay': {\n              leftDelay: {\n                name: 'leftDelay',\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              rightDelay: {\n                name: 'rightDelay',\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              process: {\n                name: 'process',\n                params: [\n                  {\n                    name: 'Signal',\n                    description: '<p>An object that outputs audio</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'delayTime',\n                    description:\n                      '<p>Time (in seconds) of the delay/echo.\\n                             Some browsers limit delayTime to\\n                             1 second.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'feedback',\n                    description:\n                      '<p>sends the delay back through itself\\n                             in a loop that decreases in volume\\n                             each time.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'lowPass',\n                    description:\n                      '<p>Cutoff frequency. Only frequencies\\n                             below the lowPass will be part of the\\n                             delay.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              delayTime: {\n                name: 'delayTime',\n                params: [\n                  {\n                    name: 'delayTime',\n                    description: '<p>Time (in seconds) of the delay</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              feedback: {\n                name: 'feedback',\n                params: [\n                  {\n                    name: 'feedback',\n                    description:\n                      '<p>0.0 to 1.0, or an object such as an\\n                                Oscillator that can be used to\\n                                modulate this param</p>\\n',\n                    type: 'Number|Object'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              filter: {\n                name: 'filter',\n                params: [\n                  {\n                    name: 'cutoffFreq',\n                    description:\n                      '<p>A lowpass filter will cut off any\\n                            frequencies higher than the filter frequency.</p>\\n',\n                    type: 'Number|Object'\n                  },\n                  {\n                    name: 'res',\n                    description:\n                      '<p>Resonance of the filter frequency\\n                            cutoff, or an object (i.e. a p5.Oscillator)\\n                            that can be used to modulate this parameter.\\n                            High numbers (i.e. 15) will produce a resonance,\\n                            low numbers (i.e. .2) will produce a slope.</p>\\n',\n                    type: 'Number|Object'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              setType: {\n                name: 'setType',\n                params: [\n                  {\n                    name: 'type',\n                    description: \"<p>'pingPong' (1) or 'default' (0)</p>\\n\",\n                    type: 'String|Number'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              amp: {\n                name: 'amp',\n                params: [\n                  {\n                    name: 'volume',\n                    description: '<p>amplitude between 0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.Delay',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Reverb': {\n              process: {\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>p5.sound / Web Audio object with a sound\\n                         output.</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'seconds',\n                    description:\n                      '<p>Duration of the reverb, in seconds.\\n                         Min: 0, Max: 10. Defaults to 3.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'decayRate',\n                    description:\n                      '<p>Percentage of decay with each echo.\\n                          Min: 0, Max: 100. Defaults to 2.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'reverse',\n                    description: '<p>Play the reverb backwards or forwards.</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Reverb',\n                module: 'p5.sound'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'seconds',\n                    description:\n                      '<p>Duration of the reverb, in seconds.\\n                         Min: 0, Max: 10. Defaults to 3.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'decayRate',\n                    description:\n                      '<p>Percentage of decay with each echo.\\n                          Min: 0, Max: 100. Defaults to 2.</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'reverse',\n                    description: '<p>Play the reverb backwards or forwards.</p>\\n',\n                    type: 'Boolean',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Reverb',\n                module: 'p5.sound'\n              },\n              amp: {\n                name: 'amp',\n                params: [\n                  {\n                    name: 'volume',\n                    description: '<p>amplitude between 0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Reverb',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Reverb',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.Reverb',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Convolver': {\n              convolverNode: {\n                name: 'convolverNode',\n                class: 'p5.Convolver',\n                module: 'p5.sound'\n              },\n              process: {\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>p5.sound / Web Audio object with a sound\\n                         output.</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound'\n              },\n              impulses: {\n                name: 'impulses',\n                class: 'p5.Convolver',\n                module: 'p5.sound'\n              },\n              addImpulse: {\n                name: 'addImpulse',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to a sound file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description: '<p>function (optional)</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'errorCallback',\n                    description: '<p>function (optional)</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound'\n              },\n              resetImpulse: {\n                name: 'resetImpulse',\n                params: [\n                  {\n                    name: 'path',\n                    description: '<p>path to a sound file</p>\\n',\n                    type: 'String'\n                  },\n                  {\n                    name: 'callback',\n                    description: '<p>function (optional)</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'errorCallback',\n                    description: '<p>function (optional)</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound'\n              },\n              toggleImpulse: {\n                name: 'toggleImpulse',\n                params: [\n                  {\n                    name: 'id',\n                    description:\n                      '<p>Identify the impulse by its original filename\\n                          (String), or by its position in the\\n                          <code>.impulses</code> Array (Number).</p>\\n',\n                    type: 'String|Number'\n                  }\n                ],\n                class: 'p5.Convolver',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Phrase': {\n              sequence: {\n                name: 'sequence',\n                class: 'p5.Phrase',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Part': {\n              setBPM: {\n                name: 'setBPM',\n                params: [\n                  {\n                    name: 'BPM',\n                    description: '<p>Beats Per Minute</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              getBPM: {\n                name: 'getBPM',\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              start: {\n                name: 'start',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              loop: {\n                name: 'loop',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              noLoop: {\n                name: 'noLoop',\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              stop: {\n                name: 'stop',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              pause: {\n                name: 'pause',\n                params: [\n                  {\n                    name: 'time',\n                    description: '<p>seconds from now</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              addPhrase: {\n                name: 'addPhrase',\n                params: [\n                  {\n                    name: 'phrase',\n                    description: '<p>reference to a p5.Phrase</p>\\n',\n                    type: 'p5.Phrase'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              removePhrase: {\n                name: 'removePhrase',\n                params: [\n                  {\n                    name: 'phraseName',\n                    description: '',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              getPhrase: {\n                name: 'getPhrase',\n                params: [\n                  {\n                    name: 'phraseName',\n                    description: '',\n                    type: 'String'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              replaceSequence: {\n                name: 'replaceSequence',\n                params: [\n                  {\n                    name: 'phraseName',\n                    description: '',\n                    type: 'String'\n                  },\n                  {\n                    name: 'sequence',\n                    description:\n                      '<p>Array of values to pass into the callback\\n                          at each step of the phrase.</p>\\n',\n                    type: 'Array'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              },\n              onStep: {\n                name: 'onStep',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>The name of the callback\\n                            you want to fire\\n                            on every beat/tatum.</p>\\n',\n                    type: 'Function'\n                  }\n                ],\n                class: 'p5.Part',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Score': {\n              start: {\n                name: 'start',\n                class: 'p5.Score',\n                module: 'p5.sound'\n              },\n              stop: {\n                name: 'stop',\n                class: 'p5.Score',\n                module: 'p5.sound'\n              },\n              pause: {\n                name: 'pause',\n                class: 'p5.Score',\n                module: 'p5.sound'\n              },\n              loop: {\n                name: 'loop',\n                class: 'p5.Score',\n                module: 'p5.sound'\n              },\n              noLoop: {\n                name: 'noLoop',\n                class: 'p5.Score',\n                module: 'p5.sound'\n              },\n              setBPM: {\n                name: 'setBPM',\n                params: [\n                  {\n                    name: 'BPM',\n                    description: '<p>Beats Per Minute</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>Seconds from now</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Score',\n                module: 'p5.sound'\n              }\n            },\n            'p5.SoundLoop': {\n              musicalTimeMode: {\n                name: 'musicalTimeMode',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              maxIterations: {\n                name: 'maxIterations',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              start: {\n                name: 'start',\n                params: [\n                  {\n                    name: 'timeFromNow',\n                    description: '<p>schedule a starting time</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              stop: {\n                name: 'stop',\n                params: [\n                  {\n                    name: 'timeFromNow',\n                    description: '<p>schedule a stopping time</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              pause: {\n                name: 'pause',\n                params: [\n                  {\n                    name: 'timeFromNow',\n                    description: '<p>schedule a pausing time</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              syncedStart: {\n                name: 'syncedStart',\n                params: [\n                  {\n                    name: 'otherLoop',\n                    description: '<p>a p5.SoundLoop to sync with</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>Start the loops in sync after timeFromNow seconds</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              bpm: {\n                name: 'bpm',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              timeSignature: {\n                name: 'timeSignature',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              interval: {\n                name: 'interval',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              },\n              iterations: {\n                name: 'iterations',\n                class: 'p5.SoundLoop',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Compressor': {\n              compressor: {\n                name: 'compressor',\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              },\n              process: {\n                name: 'process',\n                params: [\n                  {\n                    name: 'src',\n                    description: '<p>Sound source to be connected</p>\\n',\n                    type: 'Object'\n                  },\n                  {\n                    name: 'attack',\n                    description:\n                      '<p>The amount of time (in seconds) to reduce the gain by 10dB,\\n                           default = .003, range 0 - 1</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'knee',\n                    description:\n                      '<p>A decibel value representing the range above the\\n                           threshold where the curve smoothly transitions to the \"ratio\" portion.\\n                           default = 30, range 0 - 40</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'ratio',\n                    description:\n                      '<p>The amount of dB change in input for a 1 dB change in output\\n                           default = 12, range 1 - 20</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'threshold',\n                    description:\n                      '<p>The decibel value above which the compression will start taking effect\\n                           default = -24, range -100 - 0</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'release',\n                    description:\n                      '<p>The amount of time (in seconds) to increase the gain by 10dB\\n                           default = .25, range 0 - 1</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'attack',\n                    description:\n                      '<p>The amount of time (in seconds) to reduce the gain by 10dB,\\n                           default = .003, range 0 - 1</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'knee',\n                    description:\n                      '<p>A decibel value representing the range above the\\n                           threshold where the curve smoothly transitions to the \"ratio\" portion.\\n                           default = 30, range 0 - 40</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'ratio',\n                    description:\n                      '<p>The amount of dB change in input for a 1 dB change in output\\n                           default = 12, range 1 - 20</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'threshold',\n                    description:\n                      '<p>The decibel value above which the compression will start taking effect\\n                           default = -24, range -100 - 0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'release',\n                    description:\n                      '<p>The amount of time (in seconds) to increase the gain by 10dB\\n                           default = .25, range 0 - 1</p>\\n',\n                    type: 'Number'\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              },\n              attack: {\n                name: 'attack',\n                params: [\n                  {\n                    name: 'attack',\n                    description:\n                      '<p>Attack is the amount of time (in seconds) to reduce the gain by 10dB,\\n                         default = .003, range 0 - 1</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              },\n              knee: {\n                name: 'knee',\n                params: [\n                  {\n                    name: 'knee',\n                    description:\n                      '<p>A decibel value representing the range above the\\n                       threshold where the curve smoothly transitions to the \"ratio\" portion.\\n                       default = 30, range 0 - 40</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              },\n              ratio: {\n                name: 'ratio',\n                params: [\n                  {\n                    name: 'ratio',\n                    description:\n                      '<p>The amount of dB change in input for a 1 dB change in output\\n                           default = 12, range 1 - 20</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              },\n              threshold: {\n                name: 'threshold',\n                params: [\n                  {\n                    name: 'threshold',\n                    description:\n                      '<p>The decibel value above which the compression will start taking effect\\n                           default = -24, range -100 - 0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              },\n              release: {\n                name: 'release',\n                params: [\n                  {\n                    name: 'release',\n                    description:\n                      '<p>The amount of time (in seconds) to increase the gain by 10dB\\n                           default = .25, range 0 - 1</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'time',\n                    description:\n                      '<p>Assign time value to schedule the change in value</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              },\n              reduction: {\n                name: 'reduction',\n                class: 'p5.Compressor',\n                module: 'p5.sound'\n              }\n            },\n            'p5.SoundRecorder': {\n              setInput: {\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'unit',\n                    description:\n                      '<p>p5.sound object or a web audio unit\\n                       that outputs sound</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundRecorder',\n                module: 'p5.sound'\n              },\n              record: {\n                name: 'record',\n                params: [\n                  {\n                    name: 'soundFile',\n                    description: '<p>p5.SoundFile</p>\\n',\n                    type: 'p5.SoundFile'\n                  },\n                  {\n                    name: 'duration',\n                    description: '<p>Time (in seconds)</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>The name of a function that will be\\n                              called once the recording completes</p>\\n',\n                    type: 'Function',\n                    optional: true\n                  }\n                ],\n                class: 'p5.SoundRecorder',\n                module: 'p5.sound'\n              },\n              stop: {\n                name: 'stop',\n                class: 'p5.SoundRecorder',\n                module: 'p5.sound'\n              }\n            },\n            'p5.PeakDetect': {\n              isDetected: {\n                name: 'isDetected',\n                class: 'p5.PeakDetect',\n                module: 'p5.sound'\n              },\n              update: {\n                name: 'update',\n                params: [\n                  {\n                    name: 'fftObject',\n                    description: '<p>A p5.FFT object</p>\\n',\n                    type: 'p5.FFT'\n                  }\n                ],\n                class: 'p5.PeakDetect',\n                module: 'p5.sound'\n              },\n              onPeak: {\n                name: 'onPeak',\n                params: [\n                  {\n                    name: 'callback',\n                    description:\n                      '<p>Name of a function that will\\n                            be called when a peak is\\n                            detected.</p>\\n',\n                    type: 'Function'\n                  },\n                  {\n                    name: 'val',\n                    description:\n                      '<p>Optional value to pass\\n                            into the function when\\n                            a peak is detected.</p>\\n',\n                    type: 'Object',\n                    optional: true\n                  }\n                ],\n                class: 'p5.PeakDetect',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Gain': {\n              setInput: {\n                name: 'setInput',\n                params: [\n                  {\n                    name: 'src',\n                    description:\n                      '<p>p5.sound / Web Audio object with a sound\\n                         output.</p>\\n',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Gain',\n                module: 'p5.sound'\n              },\n              connect: {\n                name: 'connect',\n                params: [\n                  {\n                    name: 'unit',\n                    description: '',\n                    type: 'Object'\n                  }\n                ],\n                class: 'p5.Gain',\n                module: 'p5.sound'\n              },\n              disconnect: {\n                name: 'disconnect',\n                class: 'p5.Gain',\n                module: 'p5.sound'\n              },\n              amp: {\n                name: 'amp',\n                params: [\n                  {\n                    name: 'volume',\n                    description: '<p>amplitude between 0 and 1.0</p>\\n',\n                    type: 'Number'\n                  },\n                  {\n                    name: 'rampTime',\n                    description: '<p>create a fade that lasts rampTime</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  },\n                  {\n                    name: 'timeFromNow',\n                    description:\n                      '<p>schedule this event to happen\\n                              seconds from now</p>\\n',\n                    type: 'Number',\n                    optional: true\n                  }\n                ],\n                class: 'p5.Gain',\n                module: 'p5.sound'\n              }\n            },\n            'p5.Distortion': {\n              WaveShaperNode: {\n                name: 'WaveShaperNode',\n                class: 'p5.Distortion',\n                module: 'p5.sound'\n              },\n              process: {\n                name: 'process',\n                params: [\n                  {\n                    name: 'amount',\n                    description:\n                      '<p>Unbounded distortion amount.\\n                               Normal values range from 0-1.</p>\\n',\n                    type: 'Number',\n                    optional: true,\n                    optdefault: '0.25'\n                  },\n                  {\n                    name: 'oversample',\n                    description: \"<p>'none', '2x', or '4x'.</p>\\n\",\n                    type: 'String',\n                    optional: true,\n                    optdefault: \"'none'\"\n                  }\n                ],\n                class: 'p5.Distortion',\n                module: 'p5.sound'\n              },\n              set: {\n                name: 'set',\n                params: [\n                  {\n                    name: 'amount',\n                    description:\n                      '<p>Unbounded distortion amount.\\n                               Normal values range from 0-1.</p>\\n',\n                    type: 'Number',\n                    optional: true,\n                    optdefault: '0.25'\n                  },\n                  {\n                    name: 'oversample',\n                    description: \"<p>'none', '2x', or '4x'.</p>\\n\",\n                    type: 'String',\n                    optional: true,\n                    optdefault: \"'none'\"\n                  }\n                ],\n                class: 'p5.Distortion',\n                module: 'p5.sound'\n              },\n              getAmount: {\n                name: 'getAmount',\n                class: 'p5.Distortion',\n                module: 'p5.sound'\n              },\n              getOversample: {\n                name: 'getOversample',\n                class: 'p5.Distortion',\n                module: 'p5.sound'\n              }\n            }\n          };\n        },\n        {}\n      ],\n      2: [\n        function(_dereq_, module, exports) {\n          function _arrayWithHoles(arr) {\n            if (Array.isArray(arr)) return arr;\n          }\n\n          module.exports = _arrayWithHoles;\n        },\n        {}\n      ],\n      3: [\n        function(_dereq_, module, exports) {\n          function _arrayWithoutHoles(arr) {\n            if (Array.isArray(arr)) {\n              for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n                arr2[i] = arr[i];\n              }\n\n              return arr2;\n            }\n          }\n\n          module.exports = _arrayWithoutHoles;\n        },\n        {}\n      ],\n      4: [\n        function(_dereq_, module, exports) {\n          function _assertThisInitialized(self) {\n            if (self === void 0) {\n              throw new ReferenceError(\n                \"this hasn't been initialised - super() hasn't been called\"\n              );\n            }\n\n            return self;\n          }\n\n          module.exports = _assertThisInitialized;\n        },\n        {}\n      ],\n      5: [\n        function(_dereq_, module, exports) {\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError('Cannot call a class as a function');\n            }\n          }\n\n          module.exports = _classCallCheck;\n        },\n        {}\n      ],\n      6: [\n        function(_dereq_, module, exports) {\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if ('value' in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n          }\n\n          module.exports = _createClass;\n        },\n        {}\n      ],\n      7: [\n        function(_dereq_, module, exports) {\n          function _defineProperty(obj, key, value) {\n            if (key in obj) {\n              Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n              });\n            } else {\n              obj[key] = value;\n            }\n\n            return obj;\n          }\n\n          module.exports = _defineProperty;\n        },\n        {}\n      ],\n      8: [\n        function(_dereq_, module, exports) {\n          function _getPrototypeOf(o) {\n            module.exports = _getPrototypeOf = Object.setPrototypeOf\n              ? Object.getPrototypeOf\n              : function _getPrototypeOf(o) {\n                  return o.__proto__ || Object.getPrototypeOf(o);\n                };\n            return _getPrototypeOf(o);\n          }\n\n          module.exports = _getPrototypeOf;\n        },\n        {}\n      ],\n      9: [\n        function(_dereq_, module, exports) {\n          var setPrototypeOf = _dereq_('./setPrototypeOf');\n\n          function _inherits(subClass, superClass) {\n            if (typeof superClass !== 'function' && superClass !== null) {\n              throw new TypeError('Super expression must either be null or a function');\n            }\n\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n              constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n              }\n            });\n            if (superClass) setPrototypeOf(subClass, superClass);\n          }\n\n          module.exports = _inherits;\n        },\n        { './setPrototypeOf': 16 }\n      ],\n      10: [\n        function(_dereq_, module, exports) {\n          function _iterableToArray(iter) {\n            if (\n              Symbol.iterator in Object(iter) ||\n              Object.prototype.toString.call(iter) === '[object Arguments]'\n            )\n              return Array.from(iter);\n          }\n\n          module.exports = _iterableToArray;\n        },\n        {}\n      ],\n      11: [\n        function(_dereq_, module, exports) {\n          function _iterableToArrayLimit(arr, i) {\n            var _arr = [];\n            var _n = true;\n            var _d = false;\n            var _e = undefined;\n\n            try {\n              for (\n                var _i = arr[Symbol.iterator](), _s;\n                !(_n = (_s = _i.next()).done);\n                _n = true\n              ) {\n                _arr.push(_s.value);\n\n                if (i && _arr.length === i) break;\n              }\n            } catch (err) {\n              _d = true;\n              _e = err;\n            } finally {\n              try {\n                if (!_n && _i['return'] != null) _i['return']();\n              } finally {\n                if (_d) throw _e;\n              }\n            }\n\n            return _arr;\n          }\n\n          module.exports = _iterableToArrayLimit;\n        },\n        {}\n      ],\n      12: [\n        function(_dereq_, module, exports) {\n          function _nonIterableRest() {\n            throw new TypeError('Invalid attempt to destructure non-iterable instance');\n          }\n\n          module.exports = _nonIterableRest;\n        },\n        {}\n      ],\n      13: [\n        function(_dereq_, module, exports) {\n          function _nonIterableSpread() {\n            throw new TypeError('Invalid attempt to spread non-iterable instance');\n          }\n\n          module.exports = _nonIterableSpread;\n        },\n        {}\n      ],\n      14: [\n        function(_dereq_, module, exports) {\n          var defineProperty = _dereq_('./defineProperty');\n\n          function _objectSpread(target) {\n            for (var i = 1; i < arguments.length; i++) {\n              var source = arguments[i] != null ? arguments[i] : {};\n              var ownKeys = Object.keys(source);\n\n              if (typeof Object.getOwnPropertySymbols === 'function') {\n                ownKeys = ownKeys.concat(\n                  Object.getOwnPropertySymbols(source).filter(function(sym) {\n                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n                  })\n                );\n              }\n\n              ownKeys.forEach(function(key) {\n                defineProperty(target, key, source[key]);\n              });\n            }\n\n            return target;\n          }\n\n          module.exports = _objectSpread;\n        },\n        { './defineProperty': 7 }\n      ],\n      15: [\n        function(_dereq_, module, exports) {\n          var _typeof = _dereq_('../helpers/typeof');\n\n          var assertThisInitialized = _dereq_('./assertThisInitialized');\n\n          function _possibleConstructorReturn(self, call) {\n            if (call && (_typeof(call) === 'object' || typeof call === 'function')) {\n              return call;\n            }\n\n            return assertThisInitialized(self);\n          }\n\n          module.exports = _possibleConstructorReturn;\n        },\n        { '../helpers/typeof': 19, './assertThisInitialized': 4 }\n      ],\n      16: [\n        function(_dereq_, module, exports) {\n          function _setPrototypeOf(o, p) {\n            module.exports = _setPrototypeOf =\n              Object.setPrototypeOf ||\n              function _setPrototypeOf(o, p) {\n                o.__proto__ = p;\n                return o;\n              };\n\n            return _setPrototypeOf(o, p);\n          }\n\n          module.exports = _setPrototypeOf;\n        },\n        {}\n      ],\n      17: [\n        function(_dereq_, module, exports) {\n          var arrayWithHoles = _dereq_('./arrayWithHoles');\n\n          var iterableToArrayLimit = _dereq_('./iterableToArrayLimit');\n\n          var nonIterableRest = _dereq_('./nonIterableRest');\n\n          function _slicedToArray(arr, i) {\n            return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n          }\n\n          module.exports = _slicedToArray;\n        },\n        { './arrayWithHoles': 2, './iterableToArrayLimit': 11, './nonIterableRest': 12 }\n      ],\n      18: [\n        function(_dereq_, module, exports) {\n          var arrayWithoutHoles = _dereq_('./arrayWithoutHoles');\n\n          var iterableToArray = _dereq_('./iterableToArray');\n\n          var nonIterableSpread = _dereq_('./nonIterableSpread');\n\n          function _toConsumableArray(arr) {\n            return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n          }\n\n          module.exports = _toConsumableArray;\n        },\n        { './arrayWithoutHoles': 3, './iterableToArray': 10, './nonIterableSpread': 13 }\n      ],\n      19: [\n        function(_dereq_, module, exports) {\n          function _typeof2(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof2 = function _typeof2(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof2 = function _typeof2(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof2(obj);\n          }\n\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol') {\n              module.exports = _typeof = function _typeof(obj) {\n                return _typeof2(obj);\n              };\n            } else {\n              module.exports = _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : _typeof2(obj);\n              };\n            }\n\n            return _typeof(obj);\n          }\n\n          module.exports = _typeof;\n        },\n        {}\n      ],\n      20: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          exports.byteLength = byteLength;\n          exports.toByteArray = toByteArray;\n          exports.fromByteArray = fromByteArray;\n\n          var lookup = [];\n          var revLookup = [];\n          var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\n          var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n          for (var i = 0, len = code.length; i < len; ++i) {\n            lookup[i] = code[i];\n            revLookup[code.charCodeAt(i)] = i;\n          }\n\n          // Support decoding URL-safe base64 strings, as Node.js does.\n          // See: https://en.wikipedia.org/wiki/Base64#URL_applications\n          revLookup['-'.charCodeAt(0)] = 62;\n          revLookup['_'.charCodeAt(0)] = 63;\n\n          function getLens(b64) {\n            var len = b64.length;\n\n            if (len % 4 > 0) {\n              throw new Error('Invalid string. Length must be a multiple of 4');\n            }\n\n            // Trim off extra bytes after placeholder bytes are found\n            // See: https://github.com/beatgammit/base64-js/issues/42\n            var validLen = b64.indexOf('=');\n            if (validLen === -1) validLen = len;\n\n            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n\n            return [validLen, placeHoldersLen];\n          }\n\n          // base64 is 4/3 + up to two characters of the original data\n          function byteLength(b64) {\n            var lens = getLens(b64);\n            var validLen = lens[0];\n            var placeHoldersLen = lens[1];\n            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n          }\n\n          function _byteLength(b64, validLen, placeHoldersLen) {\n            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n          }\n\n          function toByteArray(b64) {\n            var tmp;\n            var lens = getLens(b64);\n            var validLen = lens[0];\n            var placeHoldersLen = lens[1];\n\n            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n\n            var curByte = 0;\n\n            // if there are placeholders, only get up to the last complete 4 chars\n            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n\n            var i;\n            for (i = 0; i < len; i += 4) {\n              tmp =\n                (revLookup[b64.charCodeAt(i)] << 18) |\n                (revLookup[b64.charCodeAt(i + 1)] << 12) |\n                (revLookup[b64.charCodeAt(i + 2)] << 6) |\n                revLookup[b64.charCodeAt(i + 3)];\n              arr[curByte++] = (tmp >> 16) & 0xff;\n              arr[curByte++] = (tmp >> 8) & 0xff;\n              arr[curByte++] = tmp & 0xff;\n            }\n\n            if (placeHoldersLen === 2) {\n              tmp =\n                (revLookup[b64.charCodeAt(i)] << 2) |\n                (revLookup[b64.charCodeAt(i + 1)] >> 4);\n              arr[curByte++] = tmp & 0xff;\n            }\n\n            if (placeHoldersLen === 1) {\n              tmp =\n                (revLookup[b64.charCodeAt(i)] << 10) |\n                (revLookup[b64.charCodeAt(i + 1)] << 4) |\n                (revLookup[b64.charCodeAt(i + 2)] >> 2);\n              arr[curByte++] = (tmp >> 8) & 0xff;\n              arr[curByte++] = tmp & 0xff;\n            }\n\n            return arr;\n          }\n\n          function tripletToBase64(num) {\n            return (\n              lookup[(num >> 18) & 0x3f] +\n              lookup[(num >> 12) & 0x3f] +\n              lookup[(num >> 6) & 0x3f] +\n              lookup[num & 0x3f]\n            );\n          }\n\n          function encodeChunk(uint8, start, end) {\n            var tmp;\n            var output = [];\n            for (var i = start; i < end; i += 3) {\n              tmp =\n                ((uint8[i] << 16) & 0xff0000) +\n                ((uint8[i + 1] << 8) & 0xff00) +\n                (uint8[i + 2] & 0xff);\n              output.push(tripletToBase64(tmp));\n            }\n            return output.join('');\n          }\n\n          function fromByteArray(uint8) {\n            var tmp;\n            var len = uint8.length;\n            var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n            var parts = [];\n            var maxChunkLength = 16383; // must be multiple of 3\n\n            // go through the array every three bytes, we'll deal with trailing stuff later\n            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n              parts.push(\n                encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength)\n              );\n            }\n\n            // pad the end with zeros, but make sure to not forget the extra bytes\n            if (extraBytes === 1) {\n              tmp = uint8[len - 1];\n              parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + '==');\n            } else if (extraBytes === 2) {\n              tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n              parts.push(\n                lookup[tmp >> 10] +\n                  lookup[(tmp >> 4) & 0x3f] +\n                  lookup[(tmp << 2) & 0x3f] +\n                  '='\n              );\n            }\n\n            return parts.join('');\n          }\n        },\n        {}\n      ],\n      21: [function(_dereq_, module, exports) {}, {}],\n      22: [\n        function(_dereq_, module, exports) {\n          (function(Buffer) {\n            /*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n            /* eslint-disable no-proto */\n\n            'use strict';\n\n            var base64 = _dereq_('base64-js');\n            var ieee754 = _dereq_('ieee754');\n            var customInspectSymbol =\n              typeof Symbol === 'function' && typeof Symbol.for === 'function'\n                ? Symbol.for('nodejs.util.inspect.custom')\n                : null;\n\n            exports.Buffer = Buffer;\n            exports.SlowBuffer = SlowBuffer;\n            exports.INSPECT_MAX_BYTES = 50;\n\n            var K_MAX_LENGTH = 0x7fffffff;\n            exports.kMaxLength = K_MAX_LENGTH;\n\n            /**\n             * If `Buffer.TYPED_ARRAY_SUPPORT`:\n             *   === true    Use Uint8Array implementation (fastest)\n             *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n             *               implementation (most compatible, even IE6)\n             *\n             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n             * Opera 11.6+, iOS 4.2+.\n             *\n             * We report that the browser does not support typed arrays if the are not subclassable\n             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n             * for __proto__ and has a buggy typed array implementation.\n             */\n            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n\n            if (\n              !Buffer.TYPED_ARRAY_SUPPORT &&\n              typeof console !== 'undefined' &&\n              typeof console.error === 'function'\n            ) {\n              console.error(\n                'This browser lacks typed array (Uint8Array) support which is required by ' +\n                  '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n              );\n            }\n\n            function typedArraySupport() {\n              // Can typed array instances can be augmented?\n              try {\n                var arr = new Uint8Array(1);\n                var proto = {\n                  foo: function() {\n                    return 42;\n                  }\n                };\n                Object.setPrototypeOf(proto, Uint8Array.prototype);\n                Object.setPrototypeOf(arr, proto);\n                return arr.foo() === 42;\n              } catch (e) {\n                return false;\n              }\n            }\n\n            Object.defineProperty(Buffer.prototype, 'parent', {\n              enumerable: true,\n              get: function() {\n                if (!Buffer.isBuffer(this)) return undefined;\n                return this.buffer;\n              }\n            });\n\n            Object.defineProperty(Buffer.prototype, 'offset', {\n              enumerable: true,\n              get: function() {\n                if (!Buffer.isBuffer(this)) return undefined;\n                return this.byteOffset;\n              }\n            });\n\n            function createBuffer(length) {\n              if (length > K_MAX_LENGTH) {\n                throw new RangeError(\n                  'The value \"' + length + '\" is invalid for option \"size\"'\n                );\n              }\n              // Return an augmented `Uint8Array` instance\n              var buf = new Uint8Array(length);\n              Object.setPrototypeOf(buf, Buffer.prototype);\n              return buf;\n            }\n\n            /**\n             * The Buffer constructor returns instances of `Uint8Array` that have their\n             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n             * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n             * returns a single octet.\n             *\n             * The `Uint8Array` prototype remains unmodified.\n             */\n\n            function Buffer(arg, encodingOrOffset, length) {\n              // Common case.\n              if (typeof arg === 'number') {\n                if (typeof encodingOrOffset === 'string') {\n                  throw new TypeError(\n                    'The \"string\" argument must be of type string. Received type number'\n                  );\n                }\n                return allocUnsafe(arg);\n              }\n              return from(arg, encodingOrOffset, length);\n            }\n\n            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n            if (\n              typeof Symbol !== 'undefined' &&\n              Symbol.species != null &&\n              Buffer[Symbol.species] === Buffer\n            ) {\n              Object.defineProperty(Buffer, Symbol.species, {\n                value: null,\n                configurable: true,\n                enumerable: false,\n                writable: false\n              });\n            }\n\n            Buffer.poolSize = 8192; // not used by this implementation\n\n            function from(value, encodingOrOffset, length) {\n              if (typeof value === 'string') {\n                return fromString(value, encodingOrOffset);\n              }\n\n              if (ArrayBuffer.isView(value)) {\n                return fromArrayLike(value);\n              }\n\n              if (value == null) {\n                throw new TypeError(\n                  'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n                    'or Array-like Object. Received type ' +\n                    typeof value\n                );\n              }\n\n              if (\n                isInstance(value, ArrayBuffer) ||\n                (value && isInstance(value.buffer, ArrayBuffer))\n              ) {\n                return fromArrayBuffer(value, encodingOrOffset, length);\n              }\n\n              if (typeof value === 'number') {\n                throw new TypeError(\n                  'The \"value\" argument must not be of type number. Received type number'\n                );\n              }\n\n              var valueOf = value.valueOf && value.valueOf();\n              if (valueOf != null && valueOf !== value) {\n                return Buffer.from(valueOf, encodingOrOffset, length);\n              }\n\n              var b = fromObject(value);\n              if (b) return b;\n\n              if (\n                typeof Symbol !== 'undefined' &&\n                Symbol.toPrimitive != null &&\n                typeof value[Symbol.toPrimitive] === 'function'\n              ) {\n                return Buffer.from(\n                  value[Symbol.toPrimitive]('string'),\n                  encodingOrOffset,\n                  length\n                );\n              }\n\n              throw new TypeError(\n                'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n                  'or Array-like Object. Received type ' +\n                  typeof value\n              );\n            }\n\n            /**\n             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n             * if value is a number.\n             * Buffer.from(str[, encoding])\n             * Buffer.from(array)\n             * Buffer.from(buffer)\n             * Buffer.from(arrayBuffer[, byteOffset[, length]])\n             **/\n            Buffer.from = function(value, encodingOrOffset, length) {\n              return from(value, encodingOrOffset, length);\n            };\n\n            // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n            // https://github.com/feross/buffer/pull/148\n            Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\n            Object.setPrototypeOf(Buffer, Uint8Array);\n\n            function assertSize(size) {\n              if (typeof size !== 'number') {\n                throw new TypeError('\"size\" argument must be of type number');\n              } else if (size < 0) {\n                throw new RangeError(\n                  'The value \"' + size + '\" is invalid for option \"size\"'\n                );\n              }\n            }\n\n            function alloc(size, fill, encoding) {\n              assertSize(size);\n              if (size <= 0) {\n                return createBuffer(size);\n              }\n              if (fill !== undefined) {\n                // Only pay attention to encoding if it's a string. This\n                // prevents accidentally sending in a number that would\n                // be interpretted as a start offset.\n                return typeof encoding === 'string'\n                  ? createBuffer(size).fill(fill, encoding)\n                  : createBuffer(size).fill(fill);\n              }\n              return createBuffer(size);\n            }\n\n            /**\n             * Creates a new filled Buffer instance.\n             * alloc(size[, fill[, encoding]])\n             **/\n            Buffer.alloc = function(size, fill, encoding) {\n              return alloc(size, fill, encoding);\n            };\n\n            function allocUnsafe(size) {\n              assertSize(size);\n              return createBuffer(size < 0 ? 0 : checked(size) | 0);\n            }\n\n            /**\n             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n             * */\n            Buffer.allocUnsafe = function(size) {\n              return allocUnsafe(size);\n            };\n            /**\n             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n             */\n            Buffer.allocUnsafeSlow = function(size) {\n              return allocUnsafe(size);\n            };\n\n            function fromString(string, encoding) {\n              if (typeof encoding !== 'string' || encoding === '') {\n                encoding = 'utf8';\n              }\n\n              if (!Buffer.isEncoding(encoding)) {\n                throw new TypeError('Unknown encoding: ' + encoding);\n              }\n\n              var length = byteLength(string, encoding) | 0;\n              var buf = createBuffer(length);\n\n              var actual = buf.write(string, encoding);\n\n              if (actual !== length) {\n                // Writing a hex string, for example, that contains invalid characters will\n                // cause everything after the first invalid character to be ignored. (e.g.\n                // 'abxxcd' will be treated as 'ab')\n                buf = buf.slice(0, actual);\n              }\n\n              return buf;\n            }\n\n            function fromArrayLike(array) {\n              var length = array.length < 0 ? 0 : checked(array.length) | 0;\n              var buf = createBuffer(length);\n              for (var i = 0; i < length; i += 1) {\n                buf[i] = array[i] & 255;\n              }\n              return buf;\n            }\n\n            function fromArrayBuffer(array, byteOffset, length) {\n              if (byteOffset < 0 || array.byteLength < byteOffset) {\n                throw new RangeError('\"offset\" is outside of buffer bounds');\n              }\n\n              if (array.byteLength < byteOffset + (length || 0)) {\n                throw new RangeError('\"length\" is outside of buffer bounds');\n              }\n\n              var buf;\n              if (byteOffset === undefined && length === undefined) {\n                buf = new Uint8Array(array);\n              } else if (length === undefined) {\n                buf = new Uint8Array(array, byteOffset);\n              } else {\n                buf = new Uint8Array(array, byteOffset, length);\n              }\n\n              // Return an augmented `Uint8Array` instance\n              Object.setPrototypeOf(buf, Buffer.prototype);\n\n              return buf;\n            }\n\n            function fromObject(obj) {\n              if (Buffer.isBuffer(obj)) {\n                var len = checked(obj.length) | 0;\n                var buf = createBuffer(len);\n\n                if (buf.length === 0) {\n                  return buf;\n                }\n\n                obj.copy(buf, 0, 0, len);\n                return buf;\n              }\n\n              if (obj.length !== undefined) {\n                if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n                  return createBuffer(0);\n                }\n                return fromArrayLike(obj);\n              }\n\n              if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n                return fromArrayLike(obj.data);\n              }\n            }\n\n            function checked(length) {\n              // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n              // length is NaN (which is otherwise coerced to zero.)\n              if (length >= K_MAX_LENGTH) {\n                throw new RangeError(\n                  'Attempt to allocate Buffer larger than maximum ' +\n                    'size: 0x' +\n                    K_MAX_LENGTH.toString(16) +\n                    ' bytes'\n                );\n              }\n              return length | 0;\n            }\n\n            function SlowBuffer(length) {\n              if (+length != length) {\n                // eslint-disable-line eqeqeq\n                length = 0;\n              }\n              return Buffer.alloc(+length);\n            }\n\n            Buffer.isBuffer = function isBuffer(b) {\n              return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n            };\n\n            Buffer.compare = function compare(a, b) {\n              if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n              if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n              if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n                throw new TypeError(\n                  'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n                );\n              }\n\n              if (a === b) return 0;\n\n              var x = a.length;\n              var y = b.length;\n\n              for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n                if (a[i] !== b[i]) {\n                  x = a[i];\n                  y = b[i];\n                  break;\n                }\n              }\n\n              if (x < y) return -1;\n              if (y < x) return 1;\n              return 0;\n            };\n\n            Buffer.isEncoding = function isEncoding(encoding) {\n              switch (String(encoding).toLowerCase()) {\n                case 'hex':\n                case 'utf8':\n                case 'utf-8':\n                case 'ascii':\n                case 'latin1':\n                case 'binary':\n                case 'base64':\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return true;\n                default:\n                  return false;\n              }\n            };\n\n            Buffer.concat = function concat(list, length) {\n              if (!Array.isArray(list)) {\n                throw new TypeError('\"list\" argument must be an Array of Buffers');\n              }\n\n              if (list.length === 0) {\n                return Buffer.alloc(0);\n              }\n\n              var i;\n              if (length === undefined) {\n                length = 0;\n                for (i = 0; i < list.length; ++i) {\n                  length += list[i].length;\n                }\n              }\n\n              var buffer = Buffer.allocUnsafe(length);\n              var pos = 0;\n              for (i = 0; i < list.length; ++i) {\n                var buf = list[i];\n                if (isInstance(buf, Uint8Array)) {\n                  buf = Buffer.from(buf);\n                }\n                if (!Buffer.isBuffer(buf)) {\n                  throw new TypeError('\"list\" argument must be an Array of Buffers');\n                }\n                buf.copy(buffer, pos);\n                pos += buf.length;\n              }\n              return buffer;\n            };\n\n            function byteLength(string, encoding) {\n              if (Buffer.isBuffer(string)) {\n                return string.length;\n              }\n              if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n                return string.byteLength;\n              }\n              if (typeof string !== 'string') {\n                throw new TypeError(\n                  'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n                    'Received type ' +\n                    typeof string\n                );\n              }\n\n              var len = string.length;\n              var mustMatch = arguments.length > 2 && arguments[2] === true;\n              if (!mustMatch && len === 0) return 0;\n\n              // Use a for loop to avoid recursion\n              var loweredCase = false;\n              for (;;) {\n                switch (encoding) {\n                  case 'ascii':\n                  case 'latin1':\n                  case 'binary':\n                    return len;\n                  case 'utf8':\n                  case 'utf-8':\n                    return utf8ToBytes(string).length;\n                  case 'ucs2':\n                  case 'ucs-2':\n                  case 'utf16le':\n                  case 'utf-16le':\n                    return len * 2;\n                  case 'hex':\n                    return len >>> 1;\n                  case 'base64':\n                    return base64ToBytes(string).length;\n                  default:\n                    if (loweredCase) {\n                      return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n                    }\n                    encoding = ('' + encoding).toLowerCase();\n                    loweredCase = true;\n                }\n              }\n            }\n            Buffer.byteLength = byteLength;\n\n            function slowToString(encoding, start, end) {\n              var loweredCase = false;\n\n              // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n              // property of a typed array.\n\n              // This behaves neither like String nor Uint8Array in that we set start/end\n              // to their upper/lower bounds if the value passed is out of range.\n              // undefined is handled specially as per ECMA-262 6th Edition,\n              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n              if (start === undefined || start < 0) {\n                start = 0;\n              }\n              // Return early if start > this.length. Done here to prevent potential uint32\n              // coercion fail below.\n              if (start > this.length) {\n                return '';\n              }\n\n              if (end === undefined || end > this.length) {\n                end = this.length;\n              }\n\n              if (end <= 0) {\n                return '';\n              }\n\n              // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n              end >>>= 0;\n              start >>>= 0;\n\n              if (end <= start) {\n                return '';\n              }\n\n              if (!encoding) encoding = 'utf8';\n\n              while (true) {\n                switch (encoding) {\n                  case 'hex':\n                    return hexSlice(this, start, end);\n\n                  case 'utf8':\n                  case 'utf-8':\n                    return utf8Slice(this, start, end);\n\n                  case 'ascii':\n                    return asciiSlice(this, start, end);\n\n                  case 'latin1':\n                  case 'binary':\n                    return latin1Slice(this, start, end);\n\n                  case 'base64':\n                    return base64Slice(this, start, end);\n\n                  case 'ucs2':\n                  case 'ucs-2':\n                  case 'utf16le':\n                  case 'utf-16le':\n                    return utf16leSlice(this, start, end);\n\n                  default:\n                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n                    encoding = (encoding + '').toLowerCase();\n                    loweredCase = true;\n                }\n              }\n            }\n\n            // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n            // to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n            // reliably in a browserify context because there could be multiple different\n            // copies of the 'buffer' package in use. This method works even for Buffer\n            // instances that were created from another copy of the `buffer` package.\n            // See: https://github.com/feross/buffer/issues/154\n            Buffer.prototype._isBuffer = true;\n\n            function swap(b, n, m) {\n              var i = b[n];\n              b[n] = b[m];\n              b[m] = i;\n            }\n\n            Buffer.prototype.swap16 = function swap16() {\n              var len = this.length;\n              if (len % 2 !== 0) {\n                throw new RangeError('Buffer size must be a multiple of 16-bits');\n              }\n              for (var i = 0; i < len; i += 2) {\n                swap(this, i, i + 1);\n              }\n              return this;\n            };\n\n            Buffer.prototype.swap32 = function swap32() {\n              var len = this.length;\n              if (len % 4 !== 0) {\n                throw new RangeError('Buffer size must be a multiple of 32-bits');\n              }\n              for (var i = 0; i < len; i += 4) {\n                swap(this, i, i + 3);\n                swap(this, i + 1, i + 2);\n              }\n              return this;\n            };\n\n            Buffer.prototype.swap64 = function swap64() {\n              var len = this.length;\n              if (len % 8 !== 0) {\n                throw new RangeError('Buffer size must be a multiple of 64-bits');\n              }\n              for (var i = 0; i < len; i += 8) {\n                swap(this, i, i + 7);\n                swap(this, i + 1, i + 6);\n                swap(this, i + 2, i + 5);\n                swap(this, i + 3, i + 4);\n              }\n              return this;\n            };\n\n            Buffer.prototype.toString = function toString() {\n              var length = this.length;\n              if (length === 0) return '';\n              if (arguments.length === 0) return utf8Slice(this, 0, length);\n              return slowToString.apply(this, arguments);\n            };\n\n            Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n\n            Buffer.prototype.equals = function equals(b) {\n              if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n              if (this === b) return true;\n              return Buffer.compare(this, b) === 0;\n            };\n\n            Buffer.prototype.inspect = function inspect() {\n              var str = '';\n              var max = exports.INSPECT_MAX_BYTES;\n              str = this.toString('hex', 0, max)\n                .replace(/(.{2})/g, '$1 ')\n                .trim();\n              if (this.length > max) str += ' ... ';\n              return '<Buffer ' + str + '>';\n            };\n            if (customInspectSymbol) {\n              Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n            }\n\n            Buffer.prototype.compare = function compare(\n              target,\n              start,\n              end,\n              thisStart,\n              thisEnd\n            ) {\n              if (isInstance(target, Uint8Array)) {\n                target = Buffer.from(target, target.offset, target.byteLength);\n              }\n              if (!Buffer.isBuffer(target)) {\n                throw new TypeError(\n                  'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n                    'Received type ' +\n                    typeof target\n                );\n              }\n\n              if (start === undefined) {\n                start = 0;\n              }\n              if (end === undefined) {\n                end = target ? target.length : 0;\n              }\n              if (thisStart === undefined) {\n                thisStart = 0;\n              }\n              if (thisEnd === undefined) {\n                thisEnd = this.length;\n              }\n\n              if (\n                start < 0 ||\n                end > target.length ||\n                thisStart < 0 ||\n                thisEnd > this.length\n              ) {\n                throw new RangeError('out of range index');\n              }\n\n              if (thisStart >= thisEnd && start >= end) {\n                return 0;\n              }\n              if (thisStart >= thisEnd) {\n                return -1;\n              }\n              if (start >= end) {\n                return 1;\n              }\n\n              start >>>= 0;\n              end >>>= 0;\n              thisStart >>>= 0;\n              thisEnd >>>= 0;\n\n              if (this === target) return 0;\n\n              var x = thisEnd - thisStart;\n              var y = end - start;\n              var len = Math.min(x, y);\n\n              var thisCopy = this.slice(thisStart, thisEnd);\n              var targetCopy = target.slice(start, end);\n\n              for (var i = 0; i < len; ++i) {\n                if (thisCopy[i] !== targetCopy[i]) {\n                  x = thisCopy[i];\n                  y = targetCopy[i];\n                  break;\n                }\n              }\n\n              if (x < y) return -1;\n              if (y < x) return 1;\n              return 0;\n            };\n\n            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n            //\n            // Arguments:\n            // - buffer - a Buffer to search\n            // - val - a string, Buffer, or number\n            // - byteOffset - an index into `buffer`; will be clamped to an int32\n            // - encoding - an optional encoding, relevant is val is a string\n            // - dir - true for indexOf, false for lastIndexOf\n            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n              // Empty buffer means no match\n              if (buffer.length === 0) return -1;\n\n              // Normalize byteOffset\n              if (typeof byteOffset === 'string') {\n                encoding = byteOffset;\n                byteOffset = 0;\n              } else if (byteOffset > 0x7fffffff) {\n                byteOffset = 0x7fffffff;\n              } else if (byteOffset < -0x80000000) {\n                byteOffset = -0x80000000;\n              }\n              byteOffset = +byteOffset; // Coerce to Number.\n              if (numberIsNaN(byteOffset)) {\n                // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n                byteOffset = dir ? 0 : buffer.length - 1;\n              }\n\n              // Normalize byteOffset: negative offsets start from the end of the buffer\n              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n              if (byteOffset >= buffer.length) {\n                if (dir) return -1;\n                else byteOffset = buffer.length - 1;\n              } else if (byteOffset < 0) {\n                if (dir) byteOffset = 0;\n                else return -1;\n              }\n\n              // Normalize val\n              if (typeof val === 'string') {\n                val = Buffer.from(val, encoding);\n              }\n\n              // Finally, search either indexOf (if dir is true) or lastIndexOf\n              if (Buffer.isBuffer(val)) {\n                // Special case: looking for empty string/buffer always fails\n                if (val.length === 0) {\n                  return -1;\n                }\n                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n              } else if (typeof val === 'number') {\n                val = val & 0xff; // Search for a byte value [0-255]\n                if (typeof Uint8Array.prototype.indexOf === 'function') {\n                  if (dir) {\n                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n                  } else {\n                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n                  }\n                }\n                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n              }\n\n              throw new TypeError('val must be string, number or Buffer');\n            }\n\n            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n              var indexSize = 1;\n              var arrLength = arr.length;\n              var valLength = val.length;\n\n              if (encoding !== undefined) {\n                encoding = String(encoding).toLowerCase();\n                if (\n                  encoding === 'ucs2' ||\n                  encoding === 'ucs-2' ||\n                  encoding === 'utf16le' ||\n                  encoding === 'utf-16le'\n                ) {\n                  if (arr.length < 2 || val.length < 2) {\n                    return -1;\n                  }\n                  indexSize = 2;\n                  arrLength /= 2;\n                  valLength /= 2;\n                  byteOffset /= 2;\n                }\n              }\n\n              function read(buf, i) {\n                if (indexSize === 1) {\n                  return buf[i];\n                } else {\n                  return buf.readUInt16BE(i * indexSize);\n                }\n              }\n\n              var i;\n              if (dir) {\n                var foundIndex = -1;\n                for (i = byteOffset; i < arrLength; i++) {\n                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                    if (foundIndex === -1) foundIndex = i;\n                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n                  } else {\n                    if (foundIndex !== -1) i -= i - foundIndex;\n                    foundIndex = -1;\n                  }\n                }\n              } else {\n                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n                for (i = byteOffset; i >= 0; i--) {\n                  var found = true;\n                  for (var j = 0; j < valLength; j++) {\n                    if (read(arr, i + j) !== read(val, j)) {\n                      found = false;\n                      break;\n                    }\n                  }\n                  if (found) return i;\n                }\n              }\n\n              return -1;\n            }\n\n            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n              return this.indexOf(val, byteOffset, encoding) !== -1;\n            };\n\n            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n            };\n\n            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n            };\n\n            function hexWrite(buf, string, offset, length) {\n              offset = Number(offset) || 0;\n              var remaining = buf.length - offset;\n              if (!length) {\n                length = remaining;\n              } else {\n                length = Number(length);\n                if (length > remaining) {\n                  length = remaining;\n                }\n              }\n\n              var strLen = string.length;\n\n              if (length > strLen / 2) {\n                length = strLen / 2;\n              }\n              for (var i = 0; i < length; ++i) {\n                var parsed = parseInt(string.substr(i * 2, 2), 16);\n                if (numberIsNaN(parsed)) return i;\n                buf[offset + i] = parsed;\n              }\n              return i;\n            }\n\n            function utf8Write(buf, string, offset, length) {\n              return blitBuffer(\n                utf8ToBytes(string, buf.length - offset),\n                buf,\n                offset,\n                length\n              );\n            }\n\n            function asciiWrite(buf, string, offset, length) {\n              return blitBuffer(asciiToBytes(string), buf, offset, length);\n            }\n\n            function latin1Write(buf, string, offset, length) {\n              return asciiWrite(buf, string, offset, length);\n            }\n\n            function base64Write(buf, string, offset, length) {\n              return blitBuffer(base64ToBytes(string), buf, offset, length);\n            }\n\n            function ucs2Write(buf, string, offset, length) {\n              return blitBuffer(\n                utf16leToBytes(string, buf.length - offset),\n                buf,\n                offset,\n                length\n              );\n            }\n\n            Buffer.prototype.write = function write(string, offset, length, encoding) {\n              // Buffer#write(string)\n              if (offset === undefined) {\n                encoding = 'utf8';\n                length = this.length;\n                offset = 0;\n                // Buffer#write(string, encoding)\n              } else if (length === undefined && typeof offset === 'string') {\n                encoding = offset;\n                length = this.length;\n                offset = 0;\n                // Buffer#write(string, offset[, length][, encoding])\n              } else if (isFinite(offset)) {\n                offset = offset >>> 0;\n                if (isFinite(length)) {\n                  length = length >>> 0;\n                  if (encoding === undefined) encoding = 'utf8';\n                } else {\n                  encoding = length;\n                  length = undefined;\n                }\n              } else {\n                throw new Error(\n                  'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n                );\n              }\n\n              var remaining = this.length - offset;\n              if (length === undefined || length > remaining) length = remaining;\n\n              if (\n                (string.length > 0 && (length < 0 || offset < 0)) ||\n                offset > this.length\n              ) {\n                throw new RangeError('Attempt to write outside buffer bounds');\n              }\n\n              if (!encoding) encoding = 'utf8';\n\n              var loweredCase = false;\n              for (;;) {\n                switch (encoding) {\n                  case 'hex':\n                    return hexWrite(this, string, offset, length);\n\n                  case 'utf8':\n                  case 'utf-8':\n                    return utf8Write(this, string, offset, length);\n\n                  case 'ascii':\n                    return asciiWrite(this, string, offset, length);\n\n                  case 'latin1':\n                  case 'binary':\n                    return latin1Write(this, string, offset, length);\n\n                  case 'base64':\n                    // Warning: maxLength not taken into account in base64Write\n                    return base64Write(this, string, offset, length);\n\n                  case 'ucs2':\n                  case 'ucs-2':\n                  case 'utf16le':\n                  case 'utf-16le':\n                    return ucs2Write(this, string, offset, length);\n\n                  default:\n                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n                    encoding = ('' + encoding).toLowerCase();\n                    loweredCase = true;\n                }\n              }\n            };\n\n            Buffer.prototype.toJSON = function toJSON() {\n              return {\n                type: 'Buffer',\n                data: Array.prototype.slice.call(this._arr || this, 0)\n              };\n            };\n\n            function base64Slice(buf, start, end) {\n              if (start === 0 && end === buf.length) {\n                return base64.fromByteArray(buf);\n              } else {\n                return base64.fromByteArray(buf.slice(start, end));\n              }\n            }\n\n            function utf8Slice(buf, start, end) {\n              end = Math.min(buf.length, end);\n              var res = [];\n\n              var i = start;\n              while (i < end) {\n                var firstByte = buf[i];\n                var codePoint = null;\n                var bytesPerSequence =\n                  firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;\n\n                if (i + bytesPerSequence <= end) {\n                  var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n                  switch (bytesPerSequence) {\n                    case 1:\n                      if (firstByte < 0x80) {\n                        codePoint = firstByte;\n                      }\n                      break;\n                    case 2:\n                      secondByte = buf[i + 1];\n                      if ((secondByte & 0xc0) === 0x80) {\n                        tempCodePoint = ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);\n                        if (tempCodePoint > 0x7f) {\n                          codePoint = tempCodePoint;\n                        }\n                      }\n                      break;\n                    case 3:\n                      secondByte = buf[i + 1];\n                      thirdByte = buf[i + 2];\n                      if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {\n                        tempCodePoint =\n                          ((firstByte & 0xf) << 0xc) |\n                          ((secondByte & 0x3f) << 0x6) |\n                          (thirdByte & 0x3f);\n                        if (\n                          tempCodePoint > 0x7ff &&\n                          (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)\n                        ) {\n                          codePoint = tempCodePoint;\n                        }\n                      }\n                      break;\n                    case 4:\n                      secondByte = buf[i + 1];\n                      thirdByte = buf[i + 2];\n                      fourthByte = buf[i + 3];\n                      if (\n                        (secondByte & 0xc0) === 0x80 &&\n                        (thirdByte & 0xc0) === 0x80 &&\n                        (fourthByte & 0xc0) === 0x80\n                      ) {\n                        tempCodePoint =\n                          ((firstByte & 0xf) << 0x12) |\n                          ((secondByte & 0x3f) << 0xc) |\n                          ((thirdByte & 0x3f) << 0x6) |\n                          (fourthByte & 0x3f);\n                        if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {\n                          codePoint = tempCodePoint;\n                        }\n                      }\n                  }\n                }\n\n                if (codePoint === null) {\n                  // we did not generate a valid codePoint so insert a\n                  // replacement char (U+FFFD) and advance only 1 byte\n                  codePoint = 0xfffd;\n                  bytesPerSequence = 1;\n                } else if (codePoint > 0xffff) {\n                  // encode to utf16 (surrogate pair dance)\n                  codePoint -= 0x10000;\n                  res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);\n                  codePoint = 0xdc00 | (codePoint & 0x3ff);\n                }\n\n                res.push(codePoint);\n                i += bytesPerSequence;\n              }\n\n              return decodeCodePointsArray(res);\n            }\n\n            // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n            // the lowest limit is Chrome, with 0x10000 args.\n            // We go 1 magnitude less, for safety\n            var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n            function decodeCodePointsArray(codePoints) {\n              var len = codePoints.length;\n              if (len <= MAX_ARGUMENTS_LENGTH) {\n                return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n              }\n\n              // Decode in chunks to avoid \"call stack size exceeded\".\n              var res = '';\n              var i = 0;\n              while (i < len) {\n                res += String.fromCharCode.apply(\n                  String,\n                  codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))\n                );\n              }\n              return res;\n            }\n\n            function asciiSlice(buf, start, end) {\n              var ret = '';\n              end = Math.min(buf.length, end);\n\n              for (var i = start; i < end; ++i) {\n                ret += String.fromCharCode(buf[i] & 0x7f);\n              }\n              return ret;\n            }\n\n            function latin1Slice(buf, start, end) {\n              var ret = '';\n              end = Math.min(buf.length, end);\n\n              for (var i = start; i < end; ++i) {\n                ret += String.fromCharCode(buf[i]);\n              }\n              return ret;\n            }\n\n            function hexSlice(buf, start, end) {\n              var len = buf.length;\n\n              if (!start || start < 0) start = 0;\n              if (!end || end < 0 || end > len) end = len;\n\n              var out = '';\n              for (var i = start; i < end; ++i) {\n                out += hexSliceLookupTable[buf[i]];\n              }\n              return out;\n            }\n\n            function utf16leSlice(buf, start, end) {\n              var bytes = buf.slice(start, end);\n              var res = '';\n              for (var i = 0; i < bytes.length; i += 2) {\n                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n              }\n              return res;\n            }\n\n            Buffer.prototype.slice = function slice(start, end) {\n              var len = this.length;\n              start = ~~start;\n              end = end === undefined ? len : ~~end;\n\n              if (start < 0) {\n                start += len;\n                if (start < 0) start = 0;\n              } else if (start > len) {\n                start = len;\n              }\n\n              if (end < 0) {\n                end += len;\n                if (end < 0) end = 0;\n              } else if (end > len) {\n                end = len;\n              }\n\n              if (end < start) end = start;\n\n              var newBuf = this.subarray(start, end);\n              // Return an augmented `Uint8Array` instance\n              Object.setPrototypeOf(newBuf, Buffer.prototype);\n\n              return newBuf;\n            };\n\n            /*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n            function checkOffset(offset, ext, length) {\n              if (offset % 1 !== 0 || offset < 0)\n                throw new RangeError('offset is not uint');\n              if (offset + ext > length)\n                throw new RangeError('Trying to access beyond buffer length');\n            }\n\n            Buffer.prototype.readUIntLE = function readUIntLE(\n              offset,\n              byteLength,\n              noAssert\n            ) {\n              offset = offset >>> 0;\n              byteLength = byteLength >>> 0;\n              if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n              var val = this[offset];\n              var mul = 1;\n              var i = 0;\n              while (++i < byteLength && (mul *= 0x100)) {\n                val += this[offset + i] * mul;\n              }\n\n              return val;\n            };\n\n            Buffer.prototype.readUIntBE = function readUIntBE(\n              offset,\n              byteLength,\n              noAssert\n            ) {\n              offset = offset >>> 0;\n              byteLength = byteLength >>> 0;\n              if (!noAssert) {\n                checkOffset(offset, byteLength, this.length);\n              }\n\n              var val = this[offset + --byteLength];\n              var mul = 1;\n              while (byteLength > 0 && (mul *= 0x100)) {\n                val += this[offset + --byteLength] * mul;\n              }\n\n              return val;\n            };\n\n            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 1, this.length);\n              return this[offset];\n            };\n\n            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 2, this.length);\n              return this[offset] | (this[offset + 1] << 8);\n            };\n\n            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 2, this.length);\n              return (this[offset] << 8) | this[offset + 1];\n            };\n\n            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 4, this.length);\n\n              return (\n                (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +\n                this[offset + 3] * 0x1000000\n              );\n            };\n\n            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 4, this.length);\n\n              return (\n                this[offset] * 0x1000000 +\n                ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3])\n              );\n            };\n\n            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n              offset = offset >>> 0;\n              byteLength = byteLength >>> 0;\n              if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n              var val = this[offset];\n              var mul = 1;\n              var i = 0;\n              while (++i < byteLength && (mul *= 0x100)) {\n                val += this[offset + i] * mul;\n              }\n              mul *= 0x80;\n\n              if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n              return val;\n            };\n\n            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n              offset = offset >>> 0;\n              byteLength = byteLength >>> 0;\n              if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n              var i = byteLength;\n              var mul = 1;\n              var val = this[offset + --i];\n              while (i > 0 && (mul *= 0x100)) {\n                val += this[offset + --i] * mul;\n              }\n              mul *= 0x80;\n\n              if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n              return val;\n            };\n\n            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 1, this.length);\n              if (!(this[offset] & 0x80)) return this[offset];\n              return (0xff - this[offset] + 1) * -1;\n            };\n\n            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 2, this.length);\n              var val = this[offset] | (this[offset + 1] << 8);\n              return val & 0x8000 ? val | 0xffff0000 : val;\n            };\n\n            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 2, this.length);\n              var val = this[offset + 1] | (this[offset] << 8);\n              return val & 0x8000 ? val | 0xffff0000 : val;\n            };\n\n            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 4, this.length);\n\n              return (\n                this[offset] |\n                (this[offset + 1] << 8) |\n                (this[offset + 2] << 16) |\n                (this[offset + 3] << 24)\n              );\n            };\n\n            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 4, this.length);\n\n              return (\n                (this[offset] << 24) |\n                (this[offset + 1] << 16) |\n                (this[offset + 2] << 8) |\n                this[offset + 3]\n              );\n            };\n\n            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 4, this.length);\n              return ieee754.read(this, offset, true, 23, 4);\n            };\n\n            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 4, this.length);\n              return ieee754.read(this, offset, false, 23, 4);\n            };\n\n            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 8, this.length);\n              return ieee754.read(this, offset, true, 52, 8);\n            };\n\n            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n              offset = offset >>> 0;\n              if (!noAssert) checkOffset(offset, 8, this.length);\n              return ieee754.read(this, offset, false, 52, 8);\n            };\n\n            function checkInt(buf, value, offset, ext, max, min) {\n              if (!Buffer.isBuffer(buf))\n                throw new TypeError('\"buffer\" argument must be a Buffer instance');\n              if (value > max || value < min)\n                throw new RangeError('\"value\" argument is out of bounds');\n              if (offset + ext > buf.length) throw new RangeError('Index out of range');\n            }\n\n            Buffer.prototype.writeUIntLE = function writeUIntLE(\n              value,\n              offset,\n              byteLength,\n              noAssert\n            ) {\n              value = +value;\n              offset = offset >>> 0;\n              byteLength = byteLength >>> 0;\n              if (!noAssert) {\n                var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n                checkInt(this, value, offset, byteLength, maxBytes, 0);\n              }\n\n              var mul = 1;\n              var i = 0;\n              this[offset] = value & 0xff;\n              while (++i < byteLength && (mul *= 0x100)) {\n                this[offset + i] = (value / mul) & 0xff;\n              }\n\n              return offset + byteLength;\n            };\n\n            Buffer.prototype.writeUIntBE = function writeUIntBE(\n              value,\n              offset,\n              byteLength,\n              noAssert\n            ) {\n              value = +value;\n              offset = offset >>> 0;\n              byteLength = byteLength >>> 0;\n              if (!noAssert) {\n                var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n                checkInt(this, value, offset, byteLength, maxBytes, 0);\n              }\n\n              var i = byteLength - 1;\n              var mul = 1;\n              this[offset + i] = value & 0xff;\n              while (--i >= 0 && (mul *= 0x100)) {\n                this[offset + i] = (value / mul) & 0xff;\n              }\n\n              return offset + byteLength;\n            };\n\n            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n              this[offset] = value & 0xff;\n              return offset + 1;\n            };\n\n            Buffer.prototype.writeUInt16LE = function writeUInt16LE(\n              value,\n              offset,\n              noAssert\n            ) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n              this[offset] = value & 0xff;\n              this[offset + 1] = value >>> 8;\n              return offset + 2;\n            };\n\n            Buffer.prototype.writeUInt16BE = function writeUInt16BE(\n              value,\n              offset,\n              noAssert\n            ) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n              this[offset] = value >>> 8;\n              this[offset + 1] = value & 0xff;\n              return offset + 2;\n            };\n\n            Buffer.prototype.writeUInt32LE = function writeUInt32LE(\n              value,\n              offset,\n              noAssert\n            ) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n              this[offset + 3] = value >>> 24;\n              this[offset + 2] = value >>> 16;\n              this[offset + 1] = value >>> 8;\n              this[offset] = value & 0xff;\n              return offset + 4;\n            };\n\n            Buffer.prototype.writeUInt32BE = function writeUInt32BE(\n              value,\n              offset,\n              noAssert\n            ) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n              this[offset] = value >>> 24;\n              this[offset + 1] = value >>> 16;\n              this[offset + 2] = value >>> 8;\n              this[offset + 3] = value & 0xff;\n              return offset + 4;\n            };\n\n            Buffer.prototype.writeIntLE = function writeIntLE(\n              value,\n              offset,\n              byteLength,\n              noAssert\n            ) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) {\n                var limit = Math.pow(2, 8 * byteLength - 1);\n\n                checkInt(this, value, offset, byteLength, limit - 1, -limit);\n              }\n\n              var i = 0;\n              var mul = 1;\n              var sub = 0;\n              this[offset] = value & 0xff;\n              while (++i < byteLength && (mul *= 0x100)) {\n                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n                  sub = 1;\n                }\n                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;\n              }\n\n              return offset + byteLength;\n            };\n\n            Buffer.prototype.writeIntBE = function writeIntBE(\n              value,\n              offset,\n              byteLength,\n              noAssert\n            ) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) {\n                var limit = Math.pow(2, 8 * byteLength - 1);\n\n                checkInt(this, value, offset, byteLength, limit - 1, -limit);\n              }\n\n              var i = byteLength - 1;\n              var mul = 1;\n              var sub = 0;\n              this[offset + i] = value & 0xff;\n              while (--i >= 0 && (mul *= 0x100)) {\n                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n                  sub = 1;\n                }\n                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;\n              }\n\n              return offset + byteLength;\n            };\n\n            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n              if (value < 0) value = 0xff + value + 1;\n              this[offset] = value & 0xff;\n              return offset + 1;\n            };\n\n            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n              this[offset] = value & 0xff;\n              this[offset + 1] = value >>> 8;\n              return offset + 2;\n            };\n\n            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n              this[offset] = value >>> 8;\n              this[offset + 1] = value & 0xff;\n              return offset + 2;\n            };\n\n            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n              this[offset] = value & 0xff;\n              this[offset + 1] = value >>> 8;\n              this[offset + 2] = value >>> 16;\n              this[offset + 3] = value >>> 24;\n              return offset + 4;\n            };\n\n            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n              if (value < 0) value = 0xffffffff + value + 1;\n              this[offset] = value >>> 24;\n              this[offset + 1] = value >>> 16;\n              this[offset + 2] = value >>> 8;\n              this[offset + 3] = value & 0xff;\n              return offset + 4;\n            };\n\n            function checkIEEE754(buf, value, offset, ext, max, min) {\n              if (offset + ext > buf.length) throw new RangeError('Index out of range');\n              if (offset < 0) throw new RangeError('Index out of range');\n            }\n\n            function writeFloat(buf, value, offset, littleEndian, noAssert) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) {\n                checkIEEE754(\n                  buf,\n                  value,\n                  offset,\n                  4,\n                  3.4028234663852886e38,\n                  -3.4028234663852886e38\n                );\n              }\n              ieee754.write(buf, value, offset, littleEndian, 23, 4);\n              return offset + 4;\n            }\n\n            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n              return writeFloat(this, value, offset, true, noAssert);\n            };\n\n            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n              return writeFloat(this, value, offset, false, noAssert);\n            };\n\n            function writeDouble(buf, value, offset, littleEndian, noAssert) {\n              value = +value;\n              offset = offset >>> 0;\n              if (!noAssert) {\n                checkIEEE754(\n                  buf,\n                  value,\n                  offset,\n                  8,\n                  1.7976931348623157e308,\n                  -1.7976931348623157e308\n                );\n              }\n              ieee754.write(buf, value, offset, littleEndian, 52, 8);\n              return offset + 8;\n            }\n\n            Buffer.prototype.writeDoubleLE = function writeDoubleLE(\n              value,\n              offset,\n              noAssert\n            ) {\n              return writeDouble(this, value, offset, true, noAssert);\n            };\n\n            Buffer.prototype.writeDoubleBE = function writeDoubleBE(\n              value,\n              offset,\n              noAssert\n            ) {\n              return writeDouble(this, value, offset, false, noAssert);\n            };\n\n            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n            Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n              if (!Buffer.isBuffer(target))\n                throw new TypeError('argument should be a Buffer');\n              if (!start) start = 0;\n              if (!end && end !== 0) end = this.length;\n              if (targetStart >= target.length) targetStart = target.length;\n              if (!targetStart) targetStart = 0;\n              if (end > 0 && end < start) end = start;\n\n              // Copy 0 bytes; we're done\n              if (end === start) return 0;\n              if (target.length === 0 || this.length === 0) return 0;\n\n              // Fatal error conditions\n              if (targetStart < 0) {\n                throw new RangeError('targetStart out of bounds');\n              }\n              if (start < 0 || start >= this.length)\n                throw new RangeError('Index out of range');\n              if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n              // Are we oob?\n              if (end > this.length) end = this.length;\n              if (target.length - targetStart < end - start) {\n                end = target.length - targetStart + start;\n              }\n\n              var len = end - start;\n\n              if (\n                this === target &&\n                typeof Uint8Array.prototype.copyWithin === 'function'\n              ) {\n                // Use built-in when available, missing from IE11\n                this.copyWithin(targetStart, start, end);\n              } else if (this === target && start < targetStart && targetStart < end) {\n                // descending copy from end\n                for (var i = len - 1; i >= 0; --i) {\n                  target[i + targetStart] = this[i + start];\n                }\n              } else {\n                Uint8Array.prototype.set.call(\n                  target,\n                  this.subarray(start, end),\n                  targetStart\n                );\n              }\n\n              return len;\n            };\n\n            // Usage:\n            //    buffer.fill(number[, offset[, end]])\n            //    buffer.fill(buffer[, offset[, end]])\n            //    buffer.fill(string[, offset[, end]][, encoding])\n            Buffer.prototype.fill = function fill(val, start, end, encoding) {\n              // Handle string cases:\n              if (typeof val === 'string') {\n                if (typeof start === 'string') {\n                  encoding = start;\n                  start = 0;\n                  end = this.length;\n                } else if (typeof end === 'string') {\n                  encoding = end;\n                  end = this.length;\n                }\n                if (encoding !== undefined && typeof encoding !== 'string') {\n                  throw new TypeError('encoding must be a string');\n                }\n                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n                  throw new TypeError('Unknown encoding: ' + encoding);\n                }\n                if (val.length === 1) {\n                  var code = val.charCodeAt(0);\n                  if ((encoding === 'utf8' && code < 128) || encoding === 'latin1') {\n                    // Fast path: If `val` fits into a single byte, use that numeric value.\n                    val = code;\n                  }\n                }\n              } else if (typeof val === 'number') {\n                val = val & 255;\n              } else if (typeof val === 'boolean') {\n                val = Number(val);\n              }\n\n              // Invalid ranges are not set to a default, so can range check early.\n              if (start < 0 || this.length < start || this.length < end) {\n                throw new RangeError('Out of range index');\n              }\n\n              if (end <= start) {\n                return this;\n              }\n\n              start = start >>> 0;\n              end = end === undefined ? this.length : end >>> 0;\n\n              if (!val) val = 0;\n\n              var i;\n              if (typeof val === 'number') {\n                for (i = start; i < end; ++i) {\n                  this[i] = val;\n                }\n              } else {\n                var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n                var len = bytes.length;\n                if (len === 0) {\n                  throw new TypeError(\n                    'The value \"' + val + '\" is invalid for argument \"value\"'\n                  );\n                }\n                for (i = 0; i < end - start; ++i) {\n                  this[i + start] = bytes[i % len];\n                }\n              }\n\n              return this;\n            };\n\n            // HELPER FUNCTIONS\n            // ================\n\n            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n\n            function base64clean(str) {\n              // Node takes equal signs as end of the Base64 encoding\n              str = str.split('=')[0];\n              // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n              str = str.trim().replace(INVALID_BASE64_RE, '');\n              // Node converts strings with length < 2 to ''\n              if (str.length < 2) return '';\n              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n              while (str.length % 4 !== 0) {\n                str = str + '=';\n              }\n              return str;\n            }\n\n            function utf8ToBytes(string, units) {\n              units = units || Infinity;\n              var codePoint;\n              var length = string.length;\n              var leadSurrogate = null;\n              var bytes = [];\n\n              for (var i = 0; i < length; ++i) {\n                codePoint = string.charCodeAt(i);\n\n                // is surrogate component\n                if (codePoint > 0xd7ff && codePoint < 0xe000) {\n                  // last char was a lead\n                  if (!leadSurrogate) {\n                    // no lead yet\n                    if (codePoint > 0xdbff) {\n                      // unexpected trail\n                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n                      continue;\n                    } else if (i + 1 === length) {\n                      // unpaired lead\n                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n                      continue;\n                    }\n\n                    // valid lead\n                    leadSurrogate = codePoint;\n\n                    continue;\n                  }\n\n                  // 2 leads in a row\n                  if (codePoint < 0xdc00) {\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n                    leadSurrogate = codePoint;\n                    continue;\n                  }\n\n                  // valid surrogate pair\n                  codePoint =\n                    (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) + 0x10000;\n                } else if (leadSurrogate) {\n                  // valid bmp char, but last char was a lead\n                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);\n                }\n\n                leadSurrogate = null;\n\n                // encode utf8\n                if (codePoint < 0x80) {\n                  if ((units -= 1) < 0) break;\n                  bytes.push(codePoint);\n                } else if (codePoint < 0x800) {\n                  if ((units -= 2) < 0) break;\n                  bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);\n                } else if (codePoint < 0x10000) {\n                  if ((units -= 3) < 0) break;\n                  bytes.push(\n                    (codePoint >> 0xc) | 0xe0,\n                    ((codePoint >> 0x6) & 0x3f) | 0x80,\n                    (codePoint & 0x3f) | 0x80\n                  );\n                } else if (codePoint < 0x110000) {\n                  if ((units -= 4) < 0) break;\n                  bytes.push(\n                    (codePoint >> 0x12) | 0xf0,\n                    ((codePoint >> 0xc) & 0x3f) | 0x80,\n                    ((codePoint >> 0x6) & 0x3f) | 0x80,\n                    (codePoint & 0x3f) | 0x80\n                  );\n                } else {\n                  throw new Error('Invalid code point');\n                }\n              }\n\n              return bytes;\n            }\n\n            function asciiToBytes(str) {\n              var byteArray = [];\n              for (var i = 0; i < str.length; ++i) {\n                // Node's code seems to be doing this and not & 0x7F..\n                byteArray.push(str.charCodeAt(i) & 0xff);\n              }\n              return byteArray;\n            }\n\n            function utf16leToBytes(str, units) {\n              var c, hi, lo;\n              var byteArray = [];\n              for (var i = 0; i < str.length; ++i) {\n                if ((units -= 2) < 0) break;\n\n                c = str.charCodeAt(i);\n                hi = c >> 8;\n                lo = c % 256;\n                byteArray.push(lo);\n                byteArray.push(hi);\n              }\n\n              return byteArray;\n            }\n\n            function base64ToBytes(str) {\n              return base64.toByteArray(base64clean(str));\n            }\n\n            function blitBuffer(src, dst, offset, length) {\n              for (var i = 0; i < length; ++i) {\n                if (i + offset >= dst.length || i >= src.length) break;\n                dst[i + offset] = src[i];\n              }\n              return i;\n            }\n\n            // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n            // the `instanceof` check but they should be treated as of that type.\n            // See: https://github.com/feross/buffer/issues/166\n            function isInstance(obj, type) {\n              return (\n                obj instanceof type ||\n                (obj != null &&\n                  obj.constructor != null &&\n                  obj.constructor.name != null &&\n                  obj.constructor.name === type.name)\n              );\n            }\n            function numberIsNaN(obj) {\n              // For IE11 support\n              return obj !== obj; // eslint-disable-line no-self-compare\n            }\n\n            // Create lookup table for `toString('hex')`\n            // See: https://github.com/feross/buffer/issues/219\n            var hexSliceLookupTable = (function() {\n              var alphabet = '0123456789abcdef';\n              var table = new Array(256);\n              for (var i = 0; i < 16; ++i) {\n                var i16 = i * 16;\n                for (var j = 0; j < 16; ++j) {\n                  table[i16 + j] = alphabet[i] + alphabet[j];\n                }\n              }\n              return table;\n            })();\n          }.call(this, _dereq_('buffer').Buffer));\n        },\n        { 'base64-js': 20, buffer: 22, ieee754: 31 }\n      ],\n      23: [\n        function(_dereq_, module, exports) {\n          // This file can be required in Browserify and Node.js for automatic polyfill\n          // To use it:  require('es6-promise/auto');\n          'use strict';\n          module.exports = _dereq_('./').polyfill();\n        },\n        { './': 24 }\n      ],\n      24: [\n        function(_dereq_, module, exports) {\n          (function(process, global) {\n            /*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */\n\n            (function(global, factory) {\n              typeof exports === 'object' && typeof module !== 'undefined'\n                ? (module.exports = factory())\n                : typeof define === 'function' && define.amd\n                  ? define(factory)\n                  : (global.ES6Promise = factory());\n            })(this, function() {\n              'use strict';\n\n              function objectOrFunction(x) {\n                var type = typeof x;\n                return x !== null && (type === 'object' || type === 'function');\n              }\n\n              function isFunction(x) {\n                return typeof x === 'function';\n              }\n\n              var _isArray = void 0;\n              if (Array.isArray) {\n                _isArray = Array.isArray;\n              } else {\n                _isArray = function(x) {\n                  return Object.prototype.toString.call(x) === '[object Array]';\n                };\n              }\n\n              var isArray = _isArray;\n\n              var len = 0;\n              var vertxNext = void 0;\n              var customSchedulerFn = void 0;\n\n              var asap = function asap(callback, arg) {\n                queue[len] = callback;\n                queue[len + 1] = arg;\n                len += 2;\n                if (len === 2) {\n                  // If len is 2, that means that we need to schedule an async flush.\n                  // If additional callbacks are queued before the queue is flushed, they\n                  // will be processed by this flush that we are scheduling.\n                  if (customSchedulerFn) {\n                    customSchedulerFn(flush);\n                  } else {\n                    scheduleFlush();\n                  }\n                }\n              };\n\n              function setScheduler(scheduleFn) {\n                customSchedulerFn = scheduleFn;\n              }\n\n              function setAsap(asapFn) {\n                asap = asapFn;\n              }\n\n              var browserWindow = typeof window !== 'undefined' ? window : undefined;\n              var browserGlobal = browserWindow || {};\n              var BrowserMutationObserver =\n                browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n              var isNode =\n                typeof self === 'undefined' &&\n                typeof process !== 'undefined' &&\n                {}.toString.call(process) === '[object process]';\n\n              // test for web worker but not in IE10\n              var isWorker =\n                typeof Uint8ClampedArray !== 'undefined' &&\n                typeof importScripts !== 'undefined' &&\n                typeof MessageChannel !== 'undefined';\n\n              // node\n              function useNextTick() {\n                // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n                // see https://github.com/cujojs/when/issues/410 for details\n                return function() {\n                  return process.nextTick(flush);\n                };\n              }\n\n              // vertx\n              function useVertxTimer() {\n                if (typeof vertxNext !== 'undefined') {\n                  return function() {\n                    vertxNext(flush);\n                  };\n                }\n\n                return useSetTimeout();\n              }\n\n              function useMutationObserver() {\n                var iterations = 0;\n                var observer = new BrowserMutationObserver(flush);\n                var node = document.createTextNode('');\n                observer.observe(node, { characterData: true });\n\n                return function() {\n                  node.data = iterations = ++iterations % 2;\n                };\n              }\n\n              // web worker\n              function useMessageChannel() {\n                var channel = new MessageChannel();\n                channel.port1.onmessage = flush;\n                return function() {\n                  return channel.port2.postMessage(0);\n                };\n              }\n\n              function useSetTimeout() {\n                // Store setTimeout reference so es6-promise will be unaffected by\n                // other code modifying setTimeout (like sinon.useFakeTimers())\n                var globalSetTimeout = setTimeout;\n                return function() {\n                  return globalSetTimeout(flush, 1);\n                };\n              }\n\n              var queue = new Array(1000);\n              function flush() {\n                for (var i = 0; i < len; i += 2) {\n                  var callback = queue[i];\n                  var arg = queue[i + 1];\n\n                  callback(arg);\n\n                  queue[i] = undefined;\n                  queue[i + 1] = undefined;\n                }\n\n                len = 0;\n              }\n\n              function attemptVertx() {\n                try {\n                  var vertx = Function('return this')().require('vertx');\n                  vertxNext = vertx.runOnLoop || vertx.runOnContext;\n                  return useVertxTimer();\n                } catch (e) {\n                  return useSetTimeout();\n                }\n              }\n\n              var scheduleFlush = void 0;\n              // Decide what async method to use to triggering processing of queued callbacks:\n              if (isNode) {\n                scheduleFlush = useNextTick();\n              } else if (BrowserMutationObserver) {\n                scheduleFlush = useMutationObserver();\n              } else if (isWorker) {\n                scheduleFlush = useMessageChannel();\n              } else if (browserWindow === undefined && typeof _dereq_ === 'function') {\n                scheduleFlush = attemptVertx();\n              } else {\n                scheduleFlush = useSetTimeout();\n              }\n\n              function then(onFulfillment, onRejection) {\n                var parent = this;\n\n                var child = new this.constructor(noop);\n\n                if (child[PROMISE_ID] === undefined) {\n                  makePromise(child);\n                }\n\n                var _state = parent._state;\n\n                if (_state) {\n                  var callback = arguments[_state - 1];\n                  asap(function() {\n                    return invokeCallback(_state, child, callback, parent._result);\n                  });\n                } else {\n                  subscribe(parent, child, onFulfillment, onRejection);\n                }\n\n                return child;\n              }\n\n              /**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\n              function resolve$1(object) {\n                /*jshint validthis:true */\n                var Constructor = this;\n\n                if (\n                  object &&\n                  typeof object === 'object' &&\n                  object.constructor === Constructor\n                ) {\n                  return object;\n                }\n\n                var promise = new Constructor(noop);\n                resolve(promise, object);\n                return promise;\n              }\n\n              var PROMISE_ID = Math.random()\n                .toString(36)\n                .substring(2);\n\n              function noop() {}\n\n              var PENDING = void 0;\n              var FULFILLED = 1;\n              var REJECTED = 2;\n\n              function selfFulfillment() {\n                return new TypeError('You cannot resolve a promise with itself');\n              }\n\n              function cannotReturnOwn() {\n                return new TypeError(\n                  'A promises callback cannot return that same promise.'\n                );\n              }\n\n              function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n                try {\n                  then$$1.call(value, fulfillmentHandler, rejectionHandler);\n                } catch (e) {\n                  return e;\n                }\n              }\n\n              function handleForeignThenable(promise, thenable, then$$1) {\n                asap(function(promise) {\n                  var sealed = false;\n                  var error = tryThen(\n                    then$$1,\n                    thenable,\n                    function(value) {\n                      if (sealed) {\n                        return;\n                      }\n                      sealed = true;\n                      if (thenable !== value) {\n                        resolve(promise, value);\n                      } else {\n                        fulfill(promise, value);\n                      }\n                    },\n                    function(reason) {\n                      if (sealed) {\n                        return;\n                      }\n                      sealed = true;\n\n                      reject(promise, reason);\n                    },\n                    'Settle: ' + (promise._label || ' unknown promise')\n                  );\n\n                  if (!sealed && error) {\n                    sealed = true;\n                    reject(promise, error);\n                  }\n                }, promise);\n              }\n\n              function handleOwnThenable(promise, thenable) {\n                if (thenable._state === FULFILLED) {\n                  fulfill(promise, thenable._result);\n                } else if (thenable._state === REJECTED) {\n                  reject(promise, thenable._result);\n                } else {\n                  subscribe(\n                    thenable,\n                    undefined,\n                    function(value) {\n                      return resolve(promise, value);\n                    },\n                    function(reason) {\n                      return reject(promise, reason);\n                    }\n                  );\n                }\n              }\n\n              function handleMaybeThenable(promise, maybeThenable, then$$1) {\n                if (\n                  maybeThenable.constructor === promise.constructor &&\n                  then$$1 === then &&\n                  maybeThenable.constructor.resolve === resolve$1\n                ) {\n                  handleOwnThenable(promise, maybeThenable);\n                } else {\n                  if (then$$1 === undefined) {\n                    fulfill(promise, maybeThenable);\n                  } else if (isFunction(then$$1)) {\n                    handleForeignThenable(promise, maybeThenable, then$$1);\n                  } else {\n                    fulfill(promise, maybeThenable);\n                  }\n                }\n              }\n\n              function resolve(promise, value) {\n                if (promise === value) {\n                  reject(promise, selfFulfillment());\n                } else if (objectOrFunction(value)) {\n                  var then$$1 = void 0;\n                  try {\n                    then$$1 = value.then;\n                  } catch (error) {\n                    reject(promise, error);\n                    return;\n                  }\n                  handleMaybeThenable(promise, value, then$$1);\n                } else {\n                  fulfill(promise, value);\n                }\n              }\n\n              function publishRejection(promise) {\n                if (promise._onerror) {\n                  promise._onerror(promise._result);\n                }\n\n                publish(promise);\n              }\n\n              function fulfill(promise, value) {\n                if (promise._state !== PENDING) {\n                  return;\n                }\n\n                promise._result = value;\n                promise._state = FULFILLED;\n\n                if (promise._subscribers.length !== 0) {\n                  asap(publish, promise);\n                }\n              }\n\n              function reject(promise, reason) {\n                if (promise._state !== PENDING) {\n                  return;\n                }\n                promise._state = REJECTED;\n                promise._result = reason;\n\n                asap(publishRejection, promise);\n              }\n\n              function subscribe(parent, child, onFulfillment, onRejection) {\n                var _subscribers = parent._subscribers;\n                var length = _subscribers.length;\n\n                parent._onerror = null;\n\n                _subscribers[length] = child;\n                _subscribers[length + FULFILLED] = onFulfillment;\n                _subscribers[length + REJECTED] = onRejection;\n\n                if (length === 0 && parent._state) {\n                  asap(publish, parent);\n                }\n              }\n\n              function publish(promise) {\n                var subscribers = promise._subscribers;\n                var settled = promise._state;\n\n                if (subscribers.length === 0) {\n                  return;\n                }\n\n                var child = void 0,\n                  callback = void 0,\n                  detail = promise._result;\n\n                for (var i = 0; i < subscribers.length; i += 3) {\n                  child = subscribers[i];\n                  callback = subscribers[i + settled];\n\n                  if (child) {\n                    invokeCallback(settled, child, callback, detail);\n                  } else {\n                    callback(detail);\n                  }\n                }\n\n                promise._subscribers.length = 0;\n              }\n\n              function invokeCallback(settled, promise, callback, detail) {\n                var hasCallback = isFunction(callback),\n                  value = void 0,\n                  error = void 0,\n                  succeeded = true;\n\n                if (hasCallback) {\n                  try {\n                    value = callback(detail);\n                  } catch (e) {\n                    succeeded = false;\n                    error = e;\n                  }\n\n                  if (promise === value) {\n                    reject(promise, cannotReturnOwn());\n                    return;\n                  }\n                } else {\n                  value = detail;\n                }\n\n                if (promise._state !== PENDING) {\n                  // noop\n                } else if (hasCallback && succeeded) {\n                  resolve(promise, value);\n                } else if (succeeded === false) {\n                  reject(promise, error);\n                } else if (settled === FULFILLED) {\n                  fulfill(promise, value);\n                } else if (settled === REJECTED) {\n                  reject(promise, value);\n                }\n              }\n\n              function initializePromise(promise, resolver) {\n                try {\n                  resolver(\n                    function resolvePromise(value) {\n                      resolve(promise, value);\n                    },\n                    function rejectPromise(reason) {\n                      reject(promise, reason);\n                    }\n                  );\n                } catch (e) {\n                  reject(promise, e);\n                }\n              }\n\n              var id = 0;\n              function nextId() {\n                return id++;\n              }\n\n              function makePromise(promise) {\n                promise[PROMISE_ID] = id++;\n                promise._state = undefined;\n                promise._result = undefined;\n                promise._subscribers = [];\n              }\n\n              function validationError() {\n                return new Error('Array Methods must be provided an Array');\n              }\n\n              var Enumerator = (function() {\n                function Enumerator(Constructor, input) {\n                  this._instanceConstructor = Constructor;\n                  this.promise = new Constructor(noop);\n\n                  if (!this.promise[PROMISE_ID]) {\n                    makePromise(this.promise);\n                  }\n\n                  if (isArray(input)) {\n                    this.length = input.length;\n                    this._remaining = input.length;\n\n                    this._result = new Array(this.length);\n\n                    if (this.length === 0) {\n                      fulfill(this.promise, this._result);\n                    } else {\n                      this.length = this.length || 0;\n                      this._enumerate(input);\n                      if (this._remaining === 0) {\n                        fulfill(this.promise, this._result);\n                      }\n                    }\n                  } else {\n                    reject(this.promise, validationError());\n                  }\n                }\n\n                Enumerator.prototype._enumerate = function _enumerate(input) {\n                  for (var i = 0; this._state === PENDING && i < input.length; i++) {\n                    this._eachEntry(input[i], i);\n                  }\n                };\n\n                Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n                  var c = this._instanceConstructor;\n                  var resolve$$1 = c.resolve;\n\n                  if (resolve$$1 === resolve$1) {\n                    var _then = void 0;\n                    var error = void 0;\n                    var didError = false;\n                    try {\n                      _then = entry.then;\n                    } catch (e) {\n                      didError = true;\n                      error = e;\n                    }\n\n                    if (_then === then && entry._state !== PENDING) {\n                      this._settledAt(entry._state, i, entry._result);\n                    } else if (typeof _then !== 'function') {\n                      this._remaining--;\n                      this._result[i] = entry;\n                    } else if (c === Promise$1) {\n                      var promise = new c(noop);\n                      if (didError) {\n                        reject(promise, error);\n                      } else {\n                        handleMaybeThenable(promise, entry, _then);\n                      }\n                      this._willSettleAt(promise, i);\n                    } else {\n                      this._willSettleAt(\n                        new c(function(resolve$$1) {\n                          return resolve$$1(entry);\n                        }),\n                        i\n                      );\n                    }\n                  } else {\n                    this._willSettleAt(resolve$$1(entry), i);\n                  }\n                };\n\n                Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n                  var promise = this.promise;\n\n                  if (promise._state === PENDING) {\n                    this._remaining--;\n\n                    if (state === REJECTED) {\n                      reject(promise, value);\n                    } else {\n                      this._result[i] = value;\n                    }\n                  }\n\n                  if (this._remaining === 0) {\n                    fulfill(promise, this._result);\n                  }\n                };\n\n                Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n                  var enumerator = this;\n\n                  subscribe(\n                    promise,\n                    undefined,\n                    function(value) {\n                      return enumerator._settledAt(FULFILLED, i, value);\n                    },\n                    function(reason) {\n                      return enumerator._settledAt(REJECTED, i, reason);\n                    }\n                  );\n                };\n\n                return Enumerator;\n              })();\n\n              /**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\n              function all(entries) {\n                return new Enumerator(this, entries).promise;\n              }\n\n              /**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\n              function race(entries) {\n                /*jshint validthis:true */\n                var Constructor = this;\n\n                if (!isArray(entries)) {\n                  return new Constructor(function(_, reject) {\n                    return reject(new TypeError('You must pass an array to race.'));\n                  });\n                } else {\n                  return new Constructor(function(resolve, reject) {\n                    var length = entries.length;\n                    for (var i = 0; i < length; i++) {\n                      Constructor.resolve(entries[i]).then(resolve, reject);\n                    }\n                  });\n                }\n              }\n\n              /**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\n              function reject$1(reason) {\n                /*jshint validthis:true */\n                var Constructor = this;\n                var promise = new Constructor(noop);\n                reject(promise, reason);\n                return promise;\n              }\n\n              function needsResolver() {\n                throw new TypeError(\n                  'You must pass a resolver function as the first argument to the promise constructor'\n                );\n              }\n\n              function needsNew() {\n                throw new TypeError(\n                  \"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\"\n                );\n              }\n\n              /**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\n              var Promise$1 = (function() {\n                function Promise(resolver) {\n                  this[PROMISE_ID] = nextId();\n                  this._result = this._state = undefined;\n                  this._subscribers = [];\n\n                  if (noop !== resolver) {\n                    typeof resolver !== 'function' && needsResolver();\n                    this instanceof Promise\n                      ? initializePromise(this, resolver)\n                      : needsNew();\n                  }\n                }\n\n                /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n                /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n                Promise.prototype.catch = function _catch(onRejection) {\n                  return this.then(null, onRejection);\n                };\n\n                /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n                Promise.prototype.finally = function _finally(callback) {\n                  var promise = this;\n                  var constructor = promise.constructor;\n\n                  if (isFunction(callback)) {\n                    return promise.then(\n                      function(value) {\n                        return constructor.resolve(callback()).then(function() {\n                          return value;\n                        });\n                      },\n                      function(reason) {\n                        return constructor.resolve(callback()).then(function() {\n                          throw reason;\n                        });\n                      }\n                    );\n                  }\n\n                  return promise.then(callback, callback);\n                };\n\n                return Promise;\n              })();\n\n              Promise$1.prototype.then = then;\n              Promise$1.all = all;\n              Promise$1.race = race;\n              Promise$1.resolve = resolve$1;\n              Promise$1.reject = reject$1;\n              Promise$1._setScheduler = setScheduler;\n              Promise$1._setAsap = setAsap;\n              Promise$1._asap = asap;\n\n              /*global self*/\n              function polyfill() {\n                var local = void 0;\n\n                if (typeof global !== 'undefined') {\n                  local = global;\n                } else if (typeof self !== 'undefined') {\n                  local = self;\n                } else {\n                  try {\n                    local = Function('return this')();\n                  } catch (e) {\n                    throw new Error(\n                      'polyfill failed because global object is unavailable in this environment'\n                    );\n                  }\n                }\n\n                var P = local.Promise;\n\n                if (P) {\n                  var promiseToString = null;\n                  try {\n                    promiseToString = Object.prototype.toString.call(P.resolve());\n                  } catch (e) {\n                    // silently ignored\n                  }\n\n                  if (promiseToString === '[object Promise]' && !P.cast) {\n                    return;\n                  }\n                }\n\n                local.Promise = Promise$1;\n              }\n\n              // Strange compat..\n              Promise$1.polyfill = polyfill;\n              Promise$1.Promise = Promise$1;\n\n              return Promise$1;\n            });\n          }.call(\n            this,\n            _dereq_('_process'),\n            typeof __webpack_require__.g !== 'undefined'\n              ? __webpack_require__.g\n              : typeof self !== 'undefined'\n                ? self\n                : typeof window !== 'undefined' ? window : {}\n          ));\n        },\n        { _process: 36 }\n      ],\n      25: [\n        function(_dereq_, module, exports) {\n          (function(global, factory) {\n            if (typeof define === 'function' && define.amd) {\n              define(['exports', 'module'], factory);\n            } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n              factory(exports, module);\n            } else {\n              var mod = {\n                exports: {}\n              };\n              factory(mod.exports, mod);\n              global.fetchJsonp = mod.exports;\n            }\n          })(this, function(exports, module) {\n            'use strict';\n\n            var defaultOptions = {\n              timeout: 5000,\n              jsonpCallback: 'callback',\n              jsonpCallbackFunction: null\n            };\n\n            function generateCallbackFunction() {\n              return 'jsonp_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);\n            }\n\n            function clearFunction(functionName) {\n              // IE8 throws an exception when you try to delete a property on window\n              // http://stackoverflow.com/a/1824228/751089\n              try {\n                delete window[functionName];\n              } catch (e) {\n                window[functionName] = undefined;\n              }\n            }\n\n            function removeScript(scriptId) {\n              var script = document.getElementById(scriptId);\n              if (script) {\n                document.getElementsByTagName('head')[0].removeChild(script);\n              }\n            }\n\n            function fetchJsonp(_url) {\n              var options =\n                arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n              // to avoid param reassign\n              var url = _url;\n              var timeout = options.timeout || defaultOptions.timeout;\n              var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;\n\n              var timeoutId = undefined;\n\n              return new Promise(function(resolve, reject) {\n                var callbackFunction =\n                  options.jsonpCallbackFunction || generateCallbackFunction();\n                var scriptId = jsonpCallback + '_' + callbackFunction;\n\n                window[callbackFunction] = function(response) {\n                  resolve({\n                    ok: true,\n                    // keep consistent with fetch API\n                    json: function json() {\n                      return Promise.resolve(response);\n                    }\n                  });\n\n                  if (timeoutId) clearTimeout(timeoutId);\n\n                  removeScript(scriptId);\n\n                  clearFunction(callbackFunction);\n                };\n\n                // Check if the user set their own params, and if not add a ? to start a list of params\n                url += url.indexOf('?') === -1 ? '?' : '&';\n\n                var jsonpScript = document.createElement('script');\n                jsonpScript.setAttribute(\n                  'src',\n                  '' + url + jsonpCallback + '=' + callbackFunction\n                );\n                if (options.charset) {\n                  jsonpScript.setAttribute('charset', options.charset);\n                }\n                jsonpScript.id = scriptId;\n                document.getElementsByTagName('head')[0].appendChild(jsonpScript);\n\n                timeoutId = setTimeout(function() {\n                  reject(new Error('JSONP request to ' + _url + ' timed out'));\n\n                  clearFunction(callbackFunction);\n                  removeScript(scriptId);\n                  window[callbackFunction] = function() {\n                    clearFunction(callbackFunction);\n                  };\n                }, timeout);\n\n                // Caught if got 404/500\n                jsonpScript.onerror = function() {\n                  reject(new Error('JSONP request to ' + _url + ' failed'));\n\n                  clearFunction(callbackFunction);\n                  removeScript(scriptId);\n                  if (timeoutId) clearTimeout(timeoutId);\n                };\n              });\n            }\n\n            // export as global function\n            /*\n  let local;\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n  local.fetchJsonp = fetchJsonp;\n  */\n\n            module.exports = fetchJsonp;\n          });\n        },\n        {}\n      ],\n      26: [\n        function(_dereq_, module, exports) {\n          /* FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.3.2\n * 2016-06-16 18:25:19\n *\n * By Eli Grey, http://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n */\n\n          /*global self */\n          /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n          /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\n          var saveAs =\n            saveAs ||\n            (function(view) {\n              'use strict';\n              // IE <10 is explicitly unsupported\n              if (\n                typeof view === 'undefined' ||\n                (typeof navigator !== 'undefined' &&\n                  /MSIE [1-9]\\./.test(navigator.userAgent))\n              ) {\n                return;\n              }\n              var doc = view.document,\n                // only get URL when necessary in case Blob.js hasn't overridden it yet\n                get_URL = function() {\n                  return view.URL || view.webkitURL || view;\n                },\n                save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'),\n                can_use_save_link = 'download' in save_link,\n                click = function(node) {\n                  var event = new MouseEvent('click');\n                  node.dispatchEvent(event);\n                },\n                is_safari = /constructor/i.test(view.HTMLElement) || view.safari,\n                is_chrome_ios = /CriOS\\/[\\d]+/.test(navigator.userAgent),\n                throw_outside = function(ex) {\n                  (view.setImmediate || view.setTimeout)(function() {\n                    throw ex;\n                  }, 0);\n                },\n                force_saveable_type = 'application/octet-stream',\n                // the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n                arbitrary_revoke_timeout = 1000 * 40, // in ms\n                revoke = function(file) {\n                  var revoker = function() {\n                    if (typeof file === 'string') {\n                      // file is an object URL\n                      get_URL().revokeObjectURL(file);\n                    } else {\n                      // file is a File\n                      file.remove();\n                    }\n                  };\n                  setTimeout(revoker, arbitrary_revoke_timeout);\n                },\n                dispatch = function(filesaver, event_types, event) {\n                  event_types = [].concat(event_types);\n                  var i = event_types.length;\n                  while (i--) {\n                    var listener = filesaver['on' + event_types[i]];\n                    if (typeof listener === 'function') {\n                      try {\n                        listener.call(filesaver, event || filesaver);\n                      } catch (ex) {\n                        throw_outside(ex);\n                      }\n                    }\n                  }\n                },\n                auto_bom = function(blob) {\n                  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n                  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n                  if (\n                    /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(\n                      blob.type\n                    )\n                  ) {\n                    return new Blob([String.fromCharCode(0xfeff), blob], {\n                      type: blob.type\n                    });\n                  }\n                  return blob;\n                },\n                FileSaver = function(blob, name, no_auto_bom) {\n                  if (!no_auto_bom) {\n                    blob = auto_bom(blob);\n                  }\n                  // First try a.download, then web filesystem, then object URLs\n                  var filesaver = this,\n                    type = blob.type,\n                    force = type === force_saveable_type,\n                    object_url,\n                    dispatch_all = function() {\n                      dispatch(filesaver, 'writestart progress write writeend'.split(' '));\n                    },\n                    // on any filesys errors revert to saving with object URLs\n                    fs_error = function() {\n                      if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {\n                        // Safari doesn't allow downloading of blob urls\n                        var reader = new FileReader();\n                        reader.onloadend = function() {\n                          var url = is_chrome_ios\n                            ? reader.result\n                            : reader.result.replace(\n                                /^data:[^;]*;/,\n                                'data:attachment/file;'\n                              );\n                          var popup = view.open(url, '_blank');\n                          if (!popup) view.location.href = url;\n                          url = undefined; // release reference before dispatching\n                          filesaver.readyState = filesaver.DONE;\n                          dispatch_all();\n                        };\n                        reader.readAsDataURL(blob);\n                        filesaver.readyState = filesaver.INIT;\n                        return;\n                      }\n                      // don't create more object URLs than needed\n                      if (!object_url) {\n                        object_url = get_URL().createObjectURL(blob);\n                      }\n                      if (force) {\n                        view.location.href = object_url;\n                      } else {\n                        var opened = view.open(object_url, '_blank');\n                        if (!opened) {\n                          // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n                          view.location.href = object_url;\n                        }\n                      }\n                      filesaver.readyState = filesaver.DONE;\n                      dispatch_all();\n                      revoke(object_url);\n                    };\n                  filesaver.readyState = filesaver.INIT;\n\n                  if (can_use_save_link) {\n                    object_url = get_URL().createObjectURL(blob);\n                    setTimeout(function() {\n                      save_link.href = object_url;\n                      save_link.download = name;\n                      click(save_link);\n                      dispatch_all();\n                      revoke(object_url);\n                      filesaver.readyState = filesaver.DONE;\n                    });\n                    return;\n                  }\n\n                  fs_error();\n                },\n                FS_proto = FileSaver.prototype,\n                saveAs = function(blob, name, no_auto_bom) {\n                  return new FileSaver(blob, name || blob.name || 'download', no_auto_bom);\n                };\n              // IE 10+ (native saveAs)\n              if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {\n                return function(blob, name, no_auto_bom) {\n                  name = name || blob.name || 'download';\n\n                  if (!no_auto_bom) {\n                    blob = auto_bom(blob);\n                  }\n                  return navigator.msSaveOrOpenBlob(blob, name);\n                };\n              }\n\n              FS_proto.abort = function() {};\n              FS_proto.readyState = FS_proto.INIT = 0;\n              FS_proto.WRITING = 1;\n              FS_proto.DONE = 2;\n\n              FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;\n\n              return saveAs;\n            })(\n              (typeof self !== 'undefined' && self) ||\n                (typeof window !== 'undefined' && window) ||\n                this.content\n            );\n          // `self` is undefined in Firefox for Android content script context\n          // while `this` is nsIContentFrameMessageManager\n          // with an attribute `content` that corresponds to the window\n\n          if (typeof module !== 'undefined' && module.exports) {\n            module.exports.saveAs = saveAs;\n          } else if (\n            typeof define !== 'undefined' &&\n            define !== null &&\n            define.amd !== null\n          ) {\n            define('FileSaver.js', function() {\n              return saveAs;\n            });\n          }\n        },\n        {}\n      ],\n      27: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          function _interopDefault(ex) {\n            return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n          }\n\n          var _classCallCheck = _interopDefault(\n            _dereq_('@babel/runtime/helpers/classCallCheck')\n          );\n          var _createClass = _interopDefault(_dereq_('@babel/runtime/helpers/createClass'));\n\n          var arr = [];\n          var each = arr.forEach;\n          var slice = arr.slice;\n          function defaults(obj) {\n            each.call(slice.call(arguments, 1), function(source) {\n              if (source) {\n                for (var prop in source) {\n                  if (obj[prop] === undefined) obj[prop] = source[prop];\n                }\n              }\n            });\n            return obj;\n          }\n\n          var cookie = {\n            create: function create(name, value, minutes, domain) {\n              var expires;\n\n              if (minutes) {\n                var date = new Date();\n                date.setTime(date.getTime() + minutes * 60 * 1000);\n                expires = '; expires=' + date.toGMTString();\n              } else expires = '';\n\n              domain = domain ? 'domain=' + domain + ';' : '';\n              document.cookie = name + '=' + value + expires + ';' + domain + 'path=/';\n            },\n            read: function read(name) {\n              var nameEQ = name + '=';\n              var ca = document.cookie.split(';');\n\n              for (var i = 0; i < ca.length; i++) {\n                var c = ca[i];\n\n                while (c.charAt(0) === ' ') {\n                  c = c.substring(1, c.length);\n                }\n\n                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n              }\n\n              return null;\n            },\n            remove: function remove(name) {\n              this.create(name, '', -1);\n            }\n          };\n          var cookie$1 = {\n            name: 'cookie',\n            lookup: function lookup(options) {\n              var found;\n\n              if (options.lookupCookie && typeof document !== 'undefined') {\n                var c = cookie.read(options.lookupCookie);\n                if (c) found = c;\n              }\n\n              return found;\n            },\n            cacheUserLanguage: function cacheUserLanguage(lng, options) {\n              if (options.lookupCookie && typeof document !== 'undefined') {\n                cookie.create(\n                  options.lookupCookie,\n                  lng,\n                  options.cookieMinutes,\n                  options.cookieDomain\n                );\n              }\n            }\n          };\n\n          var querystring = {\n            name: 'querystring',\n            lookup: function lookup(options) {\n              var found;\n\n              if (typeof window !== 'undefined') {\n                var query = window.location.search.substring(1);\n                var params = query.split('&');\n\n                for (var i = 0; i < params.length; i++) {\n                  var pos = params[i].indexOf('=');\n\n                  if (pos > 0) {\n                    var key = params[i].substring(0, pos);\n\n                    if (key === options.lookupQuerystring) {\n                      found = params[i].substring(pos + 1);\n                    }\n                  }\n                }\n              }\n\n              return found;\n            }\n          };\n\n          var hasLocalStorageSupport;\n\n          try {\n            hasLocalStorageSupport = window !== 'undefined' && window.localStorage !== null;\n            var testKey = 'i18next.translate.boo';\n            window.localStorage.setItem(testKey, 'foo');\n            window.localStorage.removeItem(testKey);\n          } catch (e) {\n            hasLocalStorageSupport = false;\n          }\n\n          var localStorage = {\n            name: 'localStorage',\n            lookup: function lookup(options) {\n              var found;\n\n              if (options.lookupLocalStorage && hasLocalStorageSupport) {\n                var lng = window.localStorage.getItem(options.lookupLocalStorage);\n                if (lng) found = lng;\n              }\n\n              return found;\n            },\n            cacheUserLanguage: function cacheUserLanguage(lng, options) {\n              if (options.lookupLocalStorage && hasLocalStorageSupport) {\n                window.localStorage.setItem(options.lookupLocalStorage, lng);\n              }\n            }\n          };\n\n          var navigator$1 = {\n            name: 'navigator',\n            lookup: function lookup(options) {\n              var found = [];\n\n              if (typeof navigator !== 'undefined') {\n                if (navigator.languages) {\n                  // chrome only; not an array, so can't use .push.apply instead of iterating\n                  for (var i = 0; i < navigator.languages.length; i++) {\n                    found.push(navigator.languages[i]);\n                  }\n                }\n\n                if (navigator.userLanguage) {\n                  found.push(navigator.userLanguage);\n                }\n\n                if (navigator.language) {\n                  found.push(navigator.language);\n                }\n              }\n\n              return found.length > 0 ? found : undefined;\n            }\n          };\n\n          var htmlTag = {\n            name: 'htmlTag',\n            lookup: function lookup(options) {\n              var found;\n              var htmlTag =\n                options.htmlTag ||\n                (typeof document !== 'undefined' ? document.documentElement : null);\n\n              if (htmlTag && typeof htmlTag.getAttribute === 'function') {\n                found = htmlTag.getAttribute('lang');\n              }\n\n              return found;\n            }\n          };\n\n          var path = {\n            name: 'path',\n            lookup: function lookup(options) {\n              var found;\n\n              if (typeof window !== 'undefined') {\n                var language = window.location.pathname.match(/\\/([a-zA-Z-]*)/g);\n\n                if (language instanceof Array) {\n                  if (typeof options.lookupFromPathIndex === 'number') {\n                    if (typeof language[options.lookupFromPathIndex] !== 'string') {\n                      return undefined;\n                    }\n\n                    found = language[options.lookupFromPathIndex].replace('/', '');\n                  } else {\n                    found = language[0].replace('/', '');\n                  }\n                }\n              }\n\n              return found;\n            }\n          };\n\n          var subdomain = {\n            name: 'subdomain',\n            lookup: function lookup(options) {\n              var found;\n\n              if (typeof window !== 'undefined') {\n                var language = window.location.href.match(\n                  /(?:http[s]*\\:\\/\\/)*(.*?)\\.(?=[^\\/]*\\..{2,5})/gi\n                );\n\n                if (language instanceof Array) {\n                  if (typeof options.lookupFromSubdomainIndex === 'number') {\n                    found = language[options.lookupFromSubdomainIndex]\n                      .replace('http://', '')\n                      .replace('https://', '')\n                      .replace('.', '');\n                  } else {\n                    found = language[0]\n                      .replace('http://', '')\n                      .replace('https://', '')\n                      .replace('.', '');\n                  }\n                }\n              }\n\n              return found;\n            }\n          };\n\n          function getDefaults() {\n            return {\n              order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag'],\n              lookupQuerystring: 'lng',\n              lookupCookie: 'i18next',\n              lookupLocalStorage: 'i18nextLng',\n              // cache user language\n              caches: ['localStorage'],\n              excludeCacheFor: ['cimode'],\n              //cookieMinutes: 10,\n              //cookieDomain: 'myDomain'\n              checkWhitelist: true\n            };\n          }\n\n          var Browser =\n            /*#__PURE__*/\n            (function() {\n              function Browser(services) {\n                var options =\n                  arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n                _classCallCheck(this, Browser);\n\n                this.type = 'languageDetector';\n                this.detectors = {};\n                this.init(services, options);\n              }\n\n              _createClass(Browser, [\n                {\n                  key: 'init',\n                  value: function init(services) {\n                    var options =\n                      arguments.length > 1 && arguments[1] !== undefined\n                        ? arguments[1]\n                        : {};\n                    var i18nOptions =\n                      arguments.length > 2 && arguments[2] !== undefined\n                        ? arguments[2]\n                        : {};\n                    this.services = services;\n                    this.options = defaults(options, this.options || {}, getDefaults()); // backwards compatibility\n\n                    if (this.options.lookupFromUrlIndex)\n                      this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;\n                    this.i18nOptions = i18nOptions;\n                    this.addDetector(cookie$1);\n                    this.addDetector(querystring);\n                    this.addDetector(localStorage);\n                    this.addDetector(navigator$1);\n                    this.addDetector(htmlTag);\n                    this.addDetector(path);\n                    this.addDetector(subdomain);\n                  }\n                },\n                {\n                  key: 'addDetector',\n                  value: function addDetector(detector) {\n                    this.detectors[detector.name] = detector;\n                  }\n                },\n                {\n                  key: 'detect',\n                  value: function detect(detectionOrder) {\n                    var _this = this;\n\n                    if (!detectionOrder) detectionOrder = this.options.order;\n                    var detected = [];\n                    detectionOrder.forEach(function(detectorName) {\n                      if (_this.detectors[detectorName]) {\n                        var lookup = _this.detectors[detectorName].lookup(_this.options);\n\n                        if (lookup && typeof lookup === 'string') lookup = [lookup];\n                        if (lookup) detected = detected.concat(lookup);\n                      }\n                    });\n                    var found;\n                    detected.forEach(function(lng) {\n                      if (found) return;\n\n                      var cleanedLng = _this.services.languageUtils.formatLanguageCode(lng);\n\n                      if (\n                        !_this.options.checkWhitelist ||\n                        _this.services.languageUtils.isWhitelisted(cleanedLng)\n                      )\n                        found = cleanedLng;\n                    });\n\n                    if (!found) {\n                      var fallbacks = this.i18nOptions.fallbackLng;\n                      if (typeof fallbacks === 'string') fallbacks = [fallbacks];\n                      if (!fallbacks) fallbacks = [];\n\n                      if (Object.prototype.toString.apply(fallbacks) === '[object Array]') {\n                        found = fallbacks[0];\n                      } else {\n                        found =\n                          fallbacks[0] || (fallbacks['default'] && fallbacks['default'][0]);\n                      }\n                    }\n\n                    return found;\n                  }\n                },\n                {\n                  key: 'cacheUserLanguage',\n                  value: function cacheUserLanguage(lng, caches) {\n                    var _this2 = this;\n\n                    if (!caches) caches = this.options.caches;\n                    if (!caches) return;\n                    if (\n                      this.options.excludeCacheFor &&\n                      this.options.excludeCacheFor.indexOf(lng) > -1\n                    )\n                      return;\n                    caches.forEach(function(cacheName) {\n                      if (_this2.detectors[cacheName])\n                        _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);\n                    });\n                  }\n                }\n              ]);\n\n              return Browser;\n            })();\n\n          Browser.type = 'languageDetector';\n\n          module.exports = Browser;\n        },\n        {\n          '@babel/runtime/helpers/classCallCheck': 28,\n          '@babel/runtime/helpers/createClass': 29\n        }\n      ],\n      28: [\n        function(_dereq_, module, exports) {\n          arguments[4][5][0].apply(exports, arguments);\n        },\n        { dup: 5 }\n      ],\n      29: [\n        function(_dereq_, module, exports) {\n          arguments[4][6][0].apply(exports, arguments);\n        },\n        { dup: 6 }\n      ],\n      30: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          function _interopDefault(ex) {\n            return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n          }\n\n          var _typeof = _interopDefault(_dereq_('@babel/runtime/helpers/typeof'));\n          var _objectSpread = _interopDefault(\n            _dereq_('@babel/runtime/helpers/objectSpread')\n          );\n          var _classCallCheck = _interopDefault(\n            _dereq_('@babel/runtime/helpers/classCallCheck')\n          );\n          var _createClass = _interopDefault(_dereq_('@babel/runtime/helpers/createClass'));\n          var _possibleConstructorReturn = _interopDefault(\n            _dereq_('@babel/runtime/helpers/possibleConstructorReturn')\n          );\n          var _getPrototypeOf = _interopDefault(\n            _dereq_('@babel/runtime/helpers/getPrototypeOf')\n          );\n          var _assertThisInitialized = _interopDefault(\n            _dereq_('@babel/runtime/helpers/assertThisInitialized')\n          );\n          var _inherits = _interopDefault(_dereq_('@babel/runtime/helpers/inherits'));\n          var _toConsumableArray = _interopDefault(\n            _dereq_('@babel/runtime/helpers/toConsumableArray')\n          );\n          var _slicedToArray = _interopDefault(\n            _dereq_('@babel/runtime/helpers/slicedToArray')\n          );\n\n          var consoleLogger = {\n            type: 'logger',\n            log: function log(args) {\n              this.output('log', args);\n            },\n            warn: function warn(args) {\n              this.output('warn', args);\n            },\n            error: function error(args) {\n              this.output('error', args);\n            },\n            output: function output(type, args) {\n              var _console;\n\n              /* eslint no-console: 0 */\n              if (console && console[type])\n                (_console = console)[type].apply(_console, _toConsumableArray(args));\n            }\n          };\n\n          var Logger =\n            /*#__PURE__*/\n            (function() {\n              function Logger(concreteLogger) {\n                var options =\n                  arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n                _classCallCheck(this, Logger);\n\n                this.init(concreteLogger, options);\n              }\n\n              _createClass(Logger, [\n                {\n                  key: 'init',\n                  value: function init(concreteLogger) {\n                    var options =\n                      arguments.length > 1 && arguments[1] !== undefined\n                        ? arguments[1]\n                        : {};\n                    this.prefix = options.prefix || 'i18next:';\n                    this.logger = concreteLogger || consoleLogger;\n                    this.options = options;\n                    this.debug = options.debug;\n                  }\n                },\n                {\n                  key: 'setDebug',\n                  value: function setDebug(bool) {\n                    this.debug = bool;\n                  }\n                },\n                {\n                  key: 'log',\n                  value: function log() {\n                    for (\n                      var _len = arguments.length, args = new Array(_len), _key = 0;\n                      _key < _len;\n                      _key++\n                    ) {\n                      args[_key] = arguments[_key];\n                    }\n\n                    return this.forward(args, 'log', '', true);\n                  }\n                },\n                {\n                  key: 'warn',\n                  value: function warn() {\n                    for (\n                      var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n                      _key2 < _len2;\n                      _key2++\n                    ) {\n                      args[_key2] = arguments[_key2];\n                    }\n\n                    return this.forward(args, 'warn', '', true);\n                  }\n                },\n                {\n                  key: 'error',\n                  value: function error() {\n                    for (\n                      var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n                      _key3 < _len3;\n                      _key3++\n                    ) {\n                      args[_key3] = arguments[_key3];\n                    }\n\n                    return this.forward(args, 'error', '');\n                  }\n                },\n                {\n                  key: 'deprecate',\n                  value: function deprecate() {\n                    for (\n                      var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;\n                      _key4 < _len4;\n                      _key4++\n                    ) {\n                      args[_key4] = arguments[_key4];\n                    }\n\n                    return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);\n                  }\n                },\n                {\n                  key: 'forward',\n                  value: function forward(args, lvl, prefix, debugOnly) {\n                    if (debugOnly && !this.debug) return null;\n                    if (typeof args[0] === 'string')\n                      args[0] = ''\n                        .concat(prefix)\n                        .concat(this.prefix, ' ')\n                        .concat(args[0]);\n                    return this.logger[lvl](args);\n                  }\n                },\n                {\n                  key: 'create',\n                  value: function create(moduleName) {\n                    return new Logger(\n                      this.logger,\n                      _objectSpread(\n                        {},\n                        {\n                          prefix: ''.concat(this.prefix, ':').concat(moduleName, ':')\n                        },\n                        this.options\n                      )\n                    );\n                  }\n                }\n              ]);\n\n              return Logger;\n            })();\n\n          var baseLogger = new Logger();\n\n          var EventEmitter =\n            /*#__PURE__*/\n            (function() {\n              function EventEmitter() {\n                _classCallCheck(this, EventEmitter);\n\n                this.observers = {};\n              }\n\n              _createClass(EventEmitter, [\n                {\n                  key: 'on',\n                  value: function on(events, listener) {\n                    var _this = this;\n\n                    events.split(' ').forEach(function(event) {\n                      _this.observers[event] = _this.observers[event] || [];\n\n                      _this.observers[event].push(listener);\n                    });\n                    return this;\n                  }\n                },\n                {\n                  key: 'off',\n                  value: function off(event, listener) {\n                    if (!this.observers[event]) return;\n\n                    if (!listener) {\n                      delete this.observers[event];\n                      return;\n                    }\n\n                    this.observers[event] = this.observers[event].filter(function(l) {\n                      return l !== listener;\n                    });\n                  }\n                },\n                {\n                  key: 'emit',\n                  value: function emit(event) {\n                    for (\n                      var _len = arguments.length,\n                        args = new Array(_len > 1 ? _len - 1 : 0),\n                        _key = 1;\n                      _key < _len;\n                      _key++\n                    ) {\n                      args[_key - 1] = arguments[_key];\n                    }\n\n                    if (this.observers[event]) {\n                      var cloned = [].concat(this.observers[event]);\n                      cloned.forEach(function(observer) {\n                        observer.apply(void 0, args);\n                      });\n                    }\n\n                    if (this.observers['*']) {\n                      var _cloned = [].concat(this.observers['*']);\n\n                      _cloned.forEach(function(observer) {\n                        observer.apply(observer, [event].concat(args));\n                      });\n                    }\n                  }\n                }\n              ]);\n\n              return EventEmitter;\n            })();\n\n          // http://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/\n          function defer() {\n            var res;\n            var rej;\n            var promise = new Promise(function(resolve, reject) {\n              res = resolve;\n              rej = reject;\n            });\n            promise.resolve = res;\n            promise.reject = rej;\n            return promise;\n          }\n          function makeString(object) {\n            if (object == null) return '';\n            /* eslint prefer-template: 0 */\n\n            return '' + object;\n          }\n          function copy(a, s, t) {\n            a.forEach(function(m) {\n              if (s[m]) t[m] = s[m];\n            });\n          }\n\n          function getLastOfPath(object, path, Empty) {\n            function cleanKey(key) {\n              return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;\n            }\n\n            function canNotTraverseDeeper() {\n              return !object || typeof object === 'string';\n            }\n\n            var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');\n\n            while (stack.length > 1) {\n              if (canNotTraverseDeeper()) return {};\n              var key = cleanKey(stack.shift());\n              if (!object[key] && Empty) object[key] = new Empty();\n              object = object[key];\n            }\n\n            if (canNotTraverseDeeper()) return {};\n            return {\n              obj: object,\n              k: cleanKey(stack.shift())\n            };\n          }\n\n          function setPath(object, path, newValue) {\n            var _getLastOfPath = getLastOfPath(object, path, Object),\n              obj = _getLastOfPath.obj,\n              k = _getLastOfPath.k;\n\n            obj[k] = newValue;\n          }\n          function pushPath(object, path, newValue, concat) {\n            var _getLastOfPath2 = getLastOfPath(object, path, Object),\n              obj = _getLastOfPath2.obj,\n              k = _getLastOfPath2.k;\n\n            obj[k] = obj[k] || [];\n            if (concat) obj[k] = obj[k].concat(newValue);\n            if (!concat) obj[k].push(newValue);\n          }\n          function getPath(object, path) {\n            var _getLastOfPath3 = getLastOfPath(object, path),\n              obj = _getLastOfPath3.obj,\n              k = _getLastOfPath3.k;\n\n            if (!obj) return undefined;\n            return obj[k];\n          }\n          function getPathWithDefaults(data, defaultData, key) {\n            var value = getPath(data, key);\n\n            if (value !== undefined) {\n              return value;\n            } // Fallback to default values\n\n            return getPath(defaultData, key);\n          }\n          function deepExtend(target, source, overwrite) {\n            /* eslint no-restricted-syntax: 0 */\n            for (var prop in source) {\n              if (prop in target) {\n                // If we reached a leaf string in target or source then replace with source or skip depending on the 'overwrite' switch\n                if (\n                  typeof target[prop] === 'string' ||\n                  target[prop] instanceof String ||\n                  typeof source[prop] === 'string' ||\n                  source[prop] instanceof String\n                ) {\n                  if (overwrite) target[prop] = source[prop];\n                } else {\n                  deepExtend(target[prop], source[prop], overwrite);\n                }\n              } else {\n                target[prop] = source[prop];\n              }\n            }\n\n            return target;\n          }\n          function regexEscape(str) {\n            /* eslint no-useless-escape: 0 */\n            return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n          }\n          /* eslint-disable */\n\n          var _entityMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            '/': '&#x2F;'\n          };\n          /* eslint-enable */\n\n          function escape(data) {\n            if (typeof data === 'string') {\n              return data.replace(/[&<>\"'\\/]/g, function(s) {\n                return _entityMap[s];\n              });\n            }\n\n            return data;\n          }\n\n          var ResourceStore =\n            /*#__PURE__*/\n            (function(_EventEmitter) {\n              _inherits(ResourceStore, _EventEmitter);\n\n              function ResourceStore(data) {\n                var _this;\n\n                var options =\n                  arguments.length > 1 && arguments[1] !== undefined\n                    ? arguments[1]\n                    : {\n                        ns: ['translation'],\n                        defaultNS: 'translation'\n                      };\n\n                _classCallCheck(this, ResourceStore);\n\n                _this = _possibleConstructorReturn(\n                  this,\n                  _getPrototypeOf(ResourceStore).call(this)\n                );\n                EventEmitter.call(_assertThisInitialized(_this)); // <=IE10 fix (unable to call parent constructor)\n\n                _this.data = data || {};\n                _this.options = options;\n\n                if (_this.options.keySeparator === undefined) {\n                  _this.options.keySeparator = '.';\n                }\n\n                return _this;\n              }\n\n              _createClass(ResourceStore, [\n                {\n                  key: 'addNamespaces',\n                  value: function addNamespaces(ns) {\n                    if (this.options.ns.indexOf(ns) < 0) {\n                      this.options.ns.push(ns);\n                    }\n                  }\n                },\n                {\n                  key: 'removeNamespaces',\n                  value: function removeNamespaces(ns) {\n                    var index = this.options.ns.indexOf(ns);\n\n                    if (index > -1) {\n                      this.options.ns.splice(index, 1);\n                    }\n                  }\n                },\n                {\n                  key: 'getResource',\n                  value: function getResource(lng, ns, key) {\n                    var options =\n                      arguments.length > 3 && arguments[3] !== undefined\n                        ? arguments[3]\n                        : {};\n                    var keySeparator =\n                      options.keySeparator !== undefined\n                        ? options.keySeparator\n                        : this.options.keySeparator;\n                    var path = [lng, ns];\n                    if (key && typeof key !== 'string') path = path.concat(key);\n                    if (key && typeof key === 'string')\n                      path = path.concat(keySeparator ? key.split(keySeparator) : key);\n\n                    if (lng.indexOf('.') > -1) {\n                      path = lng.split('.');\n                    }\n\n                    return getPath(this.data, path);\n                  }\n                },\n                {\n                  key: 'addResource',\n                  value: function addResource(lng, ns, key, value) {\n                    var options =\n                      arguments.length > 4 && arguments[4] !== undefined\n                        ? arguments[4]\n                        : {\n                            silent: false\n                          };\n                    var keySeparator = this.options.keySeparator;\n                    if (keySeparator === undefined) keySeparator = '.';\n                    var path = [lng, ns];\n                    if (key)\n                      path = path.concat(keySeparator ? key.split(keySeparator) : key);\n\n                    if (lng.indexOf('.') > -1) {\n                      path = lng.split('.');\n                      value = ns;\n                      ns = path[1];\n                    }\n\n                    this.addNamespaces(ns);\n                    setPath(this.data, path, value);\n                    if (!options.silent) this.emit('added', lng, ns, key, value);\n                  }\n                },\n                {\n                  key: 'addResources',\n                  value: function addResources(lng, ns, resources) {\n                    var options =\n                      arguments.length > 3 && arguments[3] !== undefined\n                        ? arguments[3]\n                        : {\n                            silent: false\n                          };\n\n                    /* eslint no-restricted-syntax: 0 */\n                    for (var m in resources) {\n                      if (\n                        typeof resources[m] === 'string' ||\n                        Object.prototype.toString.apply(resources[m]) === '[object Array]'\n                      )\n                        this.addResource(lng, ns, m, resources[m], {\n                          silent: true\n                        });\n                    }\n\n                    if (!options.silent) this.emit('added', lng, ns, resources);\n                  }\n                },\n                {\n                  key: 'addResourceBundle',\n                  value: function addResourceBundle(lng, ns, resources, deep, overwrite) {\n                    var options =\n                      arguments.length > 5 && arguments[5] !== undefined\n                        ? arguments[5]\n                        : {\n                            silent: false\n                          };\n                    var path = [lng, ns];\n\n                    if (lng.indexOf('.') > -1) {\n                      path = lng.split('.');\n                      deep = resources;\n                      resources = ns;\n                      ns = path[1];\n                    }\n\n                    this.addNamespaces(ns);\n                    var pack = getPath(this.data, path) || {};\n\n                    if (deep) {\n                      deepExtend(pack, resources, overwrite);\n                    } else {\n                      pack = _objectSpread({}, pack, resources);\n                    }\n\n                    setPath(this.data, path, pack);\n                    if (!options.silent) this.emit('added', lng, ns, resources);\n                  }\n                },\n                {\n                  key: 'removeResourceBundle',\n                  value: function removeResourceBundle(lng, ns) {\n                    if (this.hasResourceBundle(lng, ns)) {\n                      delete this.data[lng][ns];\n                    }\n\n                    this.removeNamespaces(ns);\n                    this.emit('removed', lng, ns);\n                  }\n                },\n                {\n                  key: 'hasResourceBundle',\n                  value: function hasResourceBundle(lng, ns) {\n                    return this.getResource(lng, ns) !== undefined;\n                  }\n                },\n                {\n                  key: 'getResourceBundle',\n                  value: function getResourceBundle(lng, ns) {\n                    if (!ns) ns = this.options.defaultNS; // COMPATIBILITY: remove extend in v2.1.0\n\n                    if (this.options.compatibilityAPI === 'v1')\n                      return _objectSpread({}, {}, this.getResource(lng, ns));\n                    return this.getResource(lng, ns);\n                  }\n                },\n                {\n                  key: 'getDataByLanguage',\n                  value: function getDataByLanguage(lng) {\n                    return this.data[lng];\n                  }\n                },\n                {\n                  key: 'toJSON',\n                  value: function toJSON() {\n                    return this.data;\n                  }\n                }\n              ]);\n\n              return ResourceStore;\n            })(EventEmitter);\n\n          var postProcessor = {\n            processors: {},\n            addPostProcessor: function addPostProcessor(module) {\n              this.processors[module.name] = module;\n            },\n            handle: function handle(processors, value, key, options, translator) {\n              var _this = this;\n\n              processors.forEach(function(processor) {\n                if (_this.processors[processor])\n                  value = _this.processors[processor].process(\n                    value,\n                    key,\n                    options,\n                    translator\n                  );\n              });\n              return value;\n            }\n          };\n\n          var checkedLoadedFor = {};\n\n          var Translator =\n            /*#__PURE__*/\n            (function(_EventEmitter) {\n              _inherits(Translator, _EventEmitter);\n\n              function Translator(services) {\n                var _this;\n\n                var options =\n                  arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n                _classCallCheck(this, Translator);\n\n                _this = _possibleConstructorReturn(\n                  this,\n                  _getPrototypeOf(Translator).call(this)\n                );\n                EventEmitter.call(_assertThisInitialized(_this)); // <=IE10 fix (unable to call parent constructor)\n\n                copy(\n                  [\n                    'resourceStore',\n                    'languageUtils',\n                    'pluralResolver',\n                    'interpolator',\n                    'backendConnector',\n                    'i18nFormat',\n                    'utils'\n                  ],\n                  services,\n                  _assertThisInitialized(_this)\n                );\n                _this.options = options;\n\n                if (_this.options.keySeparator === undefined) {\n                  _this.options.keySeparator = '.';\n                }\n\n                _this.logger = baseLogger.create('translator');\n                return _this;\n              }\n\n              _createClass(Translator, [\n                {\n                  key: 'changeLanguage',\n                  value: function changeLanguage(lng) {\n                    if (lng) this.language = lng;\n                  }\n                },\n                {\n                  key: 'exists',\n                  value: function exists(key) {\n                    var options =\n                      arguments.length > 1 && arguments[1] !== undefined\n                        ? arguments[1]\n                        : {\n                            interpolation: {}\n                          };\n                    var resolved = this.resolve(key, options);\n                    return resolved && resolved.res !== undefined;\n                  }\n                },\n                {\n                  key: 'extractFromKey',\n                  value: function extractFromKey(key, options) {\n                    var nsSeparator = options.nsSeparator || this.options.nsSeparator;\n                    if (nsSeparator === undefined) nsSeparator = ':';\n                    var keySeparator =\n                      options.keySeparator !== undefined\n                        ? options.keySeparator\n                        : this.options.keySeparator;\n                    var namespaces = options.ns || this.options.defaultNS;\n\n                    if (nsSeparator && key.indexOf(nsSeparator) > -1) {\n                      var parts = key.split(nsSeparator);\n                      if (\n                        nsSeparator !== keySeparator ||\n                        (nsSeparator === keySeparator &&\n                          this.options.ns.indexOf(parts[0]) > -1)\n                      )\n                        namespaces = parts.shift();\n                      key = parts.join(keySeparator);\n                    }\n\n                    if (typeof namespaces === 'string') namespaces = [namespaces];\n                    return {\n                      key: key,\n                      namespaces: namespaces\n                    };\n                  }\n                },\n                {\n                  key: 'translate',\n                  value: function translate(keys, options) {\n                    var _this2 = this;\n\n                    if (\n                      _typeof(options) !== 'object' &&\n                      this.options.overloadTranslationOptionHandler\n                    ) {\n                      /* eslint prefer-rest-params: 0 */\n                      options = this.options.overloadTranslationOptionHandler(arguments);\n                    }\n\n                    if (!options) options = {}; // non valid keys handling\n\n                    if (\n                      keys === undefined ||\n                      keys === null\n                      /* || keys === ''*/\n                    )\n                      return '';\n                    if (!Array.isArray(keys)) keys = [String(keys)]; // separators\n\n                    var keySeparator =\n                      options.keySeparator !== undefined\n                        ? options.keySeparator\n                        : this.options.keySeparator; // get namespace(s)\n\n                    var _this$extractFromKey = this.extractFromKey(\n                        keys[keys.length - 1],\n                        options\n                      ),\n                      key = _this$extractFromKey.key,\n                      namespaces = _this$extractFromKey.namespaces;\n\n                    var namespace = namespaces[namespaces.length - 1]; // return key on CIMode\n\n                    var lng = options.lng || this.language;\n                    var appendNamespaceToCIMode =\n                      options.appendNamespaceToCIMode ||\n                      this.options.appendNamespaceToCIMode;\n\n                    if (lng && lng.toLowerCase() === 'cimode') {\n                      if (appendNamespaceToCIMode) {\n                        var nsSeparator = options.nsSeparator || this.options.nsSeparator;\n                        return namespace + nsSeparator + key;\n                      }\n\n                      return key;\n                    } // resolve from store\n\n                    var resolved = this.resolve(keys, options);\n                    var res = resolved && resolved.res;\n                    var resUsedKey = (resolved && resolved.usedKey) || key;\n                    var resExactUsedKey = (resolved && resolved.exactUsedKey) || key;\n                    var resType = Object.prototype.toString.apply(res);\n                    var noObject = [\n                      '[object Number]',\n                      '[object Function]',\n                      '[object RegExp]'\n                    ];\n                    var joinArrays =\n                      options.joinArrays !== undefined\n                        ? options.joinArrays\n                        : this.options.joinArrays; // object\n\n                    var handleAsObjectInI18nFormat =\n                      !this.i18nFormat || this.i18nFormat.handleAsObject;\n                    var handleAsObject =\n                      typeof res !== 'string' &&\n                      typeof res !== 'boolean' &&\n                      typeof res !== 'number';\n\n                    if (\n                      handleAsObjectInI18nFormat &&\n                      res &&\n                      handleAsObject &&\n                      noObject.indexOf(resType) < 0 &&\n                      !(typeof joinArrays === 'string' && resType === '[object Array]')\n                    ) {\n                      if (!options.returnObjects && !this.options.returnObjects) {\n                        this.logger.warn(\n                          'accessing an object - but returnObjects options is not enabled!'\n                        );\n                        return this.options.returnedObjectHandler\n                          ? this.options.returnedObjectHandler(resUsedKey, res, options)\n                          : \"key '\"\n                              .concat(key, ' (')\n                              .concat(\n                                this.language,\n                                \")' returned an object instead of string.\"\n                              );\n                      } // if we got a separator we loop over children - else we just return object as is\n                      // as having it set to false means no hierarchy so no lookup for nested values\n\n                      if (keySeparator) {\n                        var resTypeIsArray = resType === '[object Array]';\n                        var copy$$1 = resTypeIsArray ? [] : {}; // apply child translation on a copy\n\n                        /* eslint no-restricted-syntax: 0 */\n\n                        var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;\n\n                        for (var m in res) {\n                          if (Object.prototype.hasOwnProperty.call(res, m)) {\n                            var deepKey = ''\n                              .concat(newKeyToUse)\n                              .concat(keySeparator)\n                              .concat(m);\n                            copy$$1[m] = this.translate(\n                              deepKey,\n                              _objectSpread({}, options, {\n                                joinArrays: false,\n                                ns: namespaces\n                              })\n                            );\n                            if (copy$$1[m] === deepKey) copy$$1[m] = res[m]; // if nothing found use orginal value as fallback\n                          }\n                        }\n\n                        res = copy$$1;\n                      }\n                    } else if (\n                      handleAsObjectInI18nFormat &&\n                      typeof joinArrays === 'string' &&\n                      resType === '[object Array]'\n                    ) {\n                      // array special treatment\n                      res = res.join(joinArrays);\n                      if (res) res = this.extendTranslation(res, keys, options);\n                    } else {\n                      // string, empty or null\n                      var usedDefault = false;\n                      var usedKey = false; // fallback value\n\n                      if (!this.isValidLookup(res) && options.defaultValue !== undefined) {\n                        usedDefault = true;\n\n                        if (options.count !== undefined) {\n                          var suffix = this.pluralResolver.getSuffix(lng, options.count);\n                          res = options['defaultValue'.concat(suffix)];\n                        }\n\n                        if (!res) res = options.defaultValue;\n                      }\n\n                      if (!this.isValidLookup(res)) {\n                        usedKey = true;\n                        res = key;\n                      } // save missing\n\n                      var updateMissing =\n                        options.defaultValue &&\n                        options.defaultValue !== res &&\n                        this.options.updateMissing;\n\n                      if (usedKey || usedDefault || updateMissing) {\n                        this.logger.log(\n                          updateMissing ? 'updateKey' : 'missingKey',\n                          lng,\n                          namespace,\n                          key,\n                          updateMissing ? options.defaultValue : res\n                        );\n                        var lngs = [];\n                        var fallbackLngs = this.languageUtils.getFallbackCodes(\n                          this.options.fallbackLng,\n                          options.lng || this.language\n                        );\n\n                        if (\n                          this.options.saveMissingTo === 'fallback' &&\n                          fallbackLngs &&\n                          fallbackLngs[0]\n                        ) {\n                          for (var i = 0; i < fallbackLngs.length; i++) {\n                            lngs.push(fallbackLngs[i]);\n                          }\n                        } else if (this.options.saveMissingTo === 'all') {\n                          lngs = this.languageUtils.toResolveHierarchy(\n                            options.lng || this.language\n                          );\n                        } else {\n                          lngs.push(options.lng || this.language);\n                        }\n\n                        var send = function send(l, k) {\n                          if (_this2.options.missingKeyHandler) {\n                            _this2.options.missingKeyHandler(\n                              l,\n                              namespace,\n                              k,\n                              updateMissing ? options.defaultValue : res,\n                              updateMissing,\n                              options\n                            );\n                          } else if (\n                            _this2.backendConnector &&\n                            _this2.backendConnector.saveMissing\n                          ) {\n                            _this2.backendConnector.saveMissing(\n                              l,\n                              namespace,\n                              k,\n                              updateMissing ? options.defaultValue : res,\n                              updateMissing,\n                              options\n                            );\n                          }\n\n                          _this2.emit('missingKey', l, namespace, k, res);\n                        };\n\n                        if (this.options.saveMissing) {\n                          var needsPluralHandling =\n                            options.count !== undefined &&\n                            typeof options.count !== 'string';\n\n                          if (this.options.saveMissingPlurals && needsPluralHandling) {\n                            lngs.forEach(function(l) {\n                              var plurals = _this2.pluralResolver.getPluralFormsOfKey(\n                                l,\n                                key\n                              );\n\n                              plurals.forEach(function(p) {\n                                return send([l], p);\n                              });\n                            });\n                          } else {\n                            send(lngs, key);\n                          }\n                        }\n                      } // extend\n\n                      res = this.extendTranslation(res, keys, options, resolved); // append namespace if still key\n\n                      if (\n                        usedKey &&\n                        res === key &&\n                        this.options.appendNamespaceToMissingKey\n                      )\n                        res = ''.concat(namespace, ':').concat(key); // parseMissingKeyHandler\n\n                      if (usedKey && this.options.parseMissingKeyHandler)\n                        res = this.options.parseMissingKeyHandler(res);\n                    } // return\n\n                    return res;\n                  }\n                },\n                {\n                  key: 'extendTranslation',\n                  value: function extendTranslation(res, key, options, resolved) {\n                    var _this3 = this;\n\n                    if (this.i18nFormat && this.i18nFormat.parse) {\n                      res = this.i18nFormat.parse(\n                        res,\n                        options,\n                        resolved.usedLng,\n                        resolved.usedNS,\n                        resolved.usedKey,\n                        {\n                          resolved: resolved\n                        }\n                      );\n                    } else if (!options.skipInterpolation) {\n                      // i18next.parsing\n                      if (options.interpolation)\n                        this.interpolator.init(\n                          _objectSpread({}, options, {\n                            interpolation: _objectSpread(\n                              {},\n                              this.options.interpolation,\n                              options.interpolation\n                            )\n                          })\n                        ); // interpolate\n\n                      var data =\n                        options.replace && typeof options.replace !== 'string'\n                          ? options.replace\n                          : options;\n                      if (this.options.interpolation.defaultVariables)\n                        data = _objectSpread(\n                          {},\n                          this.options.interpolation.defaultVariables,\n                          data\n                        );\n                      res = this.interpolator.interpolate(\n                        res,\n                        data,\n                        options.lng || this.language,\n                        options\n                      ); // nesting\n\n                      if (options.nest !== false)\n                        res = this.interpolator.nest(\n                          res,\n                          function() {\n                            return _this3.translate.apply(_this3, arguments);\n                          },\n                          options\n                        );\n                      if (options.interpolation) this.interpolator.reset();\n                    } // post process\n\n                    var postProcess = options.postProcess || this.options.postProcess;\n                    var postProcessorNames =\n                      typeof postProcess === 'string' ? [postProcess] : postProcess;\n\n                    if (\n                      res !== undefined &&\n                      res !== null &&\n                      postProcessorNames &&\n                      postProcessorNames.length &&\n                      options.applyPostProcessor !== false\n                    ) {\n                      res = postProcessor.handle(\n                        postProcessorNames,\n                        res,\n                        key,\n                        this.options && this.options.postProcessPassResolved\n                          ? _objectSpread(\n                              {\n                                i18nResolved: resolved\n                              },\n                              options\n                            )\n                          : options,\n                        this\n                      );\n                    }\n\n                    return res;\n                  }\n                },\n                {\n                  key: 'resolve',\n                  value: function resolve(keys) {\n                    var _this4 = this;\n\n                    var options =\n                      arguments.length > 1 && arguments[1] !== undefined\n                        ? arguments[1]\n                        : {};\n                    var found;\n                    var usedKey; // plain key\n\n                    var exactUsedKey; // key with context / plural\n\n                    var usedLng;\n                    var usedNS;\n                    if (typeof keys === 'string') keys = [keys]; // forEach possible key\n\n                    keys.forEach(function(k) {\n                      if (_this4.isValidLookup(found)) return;\n\n                      var extracted = _this4.extractFromKey(k, options);\n\n                      var key = extracted.key;\n                      usedKey = key;\n                      var namespaces = extracted.namespaces;\n                      if (_this4.options.fallbackNS)\n                        namespaces = namespaces.concat(_this4.options.fallbackNS);\n                      var needsPluralHandling =\n                        options.count !== undefined && typeof options.count !== 'string';\n                      var needsContextHandling =\n                        options.context !== undefined &&\n                        typeof options.context === 'string' &&\n                        options.context !== '';\n                      var codes = options.lngs\n                        ? options.lngs\n                        : _this4.languageUtils.toResolveHierarchy(\n                            options.lng || _this4.language,\n                            options.fallbackLng\n                          );\n                      namespaces.forEach(function(ns) {\n                        if (_this4.isValidLookup(found)) return;\n                        usedNS = ns;\n\n                        if (\n                          !checkedLoadedFor[''.concat(codes[0], '-').concat(ns)] &&\n                          _this4.utils &&\n                          _this4.utils.hasLoadedNamespace &&\n                          !_this4.utils.hasLoadedNamespace(usedNS)\n                        ) {\n                          checkedLoadedFor[''.concat(codes[0], '-').concat(ns)] = true;\n\n                          _this4.logger.warn(\n                            'key \"'\n                              .concat(usedKey, '\" for namespace \"')\n                              .concat(usedNS, '\" for languages \"')\n                              .concat(\n                                codes.join(', '),\n                                '\" won\\'t get resolved as namespace was not yet loaded'\n                              ),\n                            'This means something IS WRONG in your application setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!'\n                          );\n                        }\n\n                        codes.forEach(function(code) {\n                          if (_this4.isValidLookup(found)) return;\n                          usedLng = code;\n                          var finalKey = key;\n                          var finalKeys = [finalKey];\n\n                          if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {\n                            _this4.i18nFormat.addLookupKeys(\n                              finalKeys,\n                              key,\n                              code,\n                              ns,\n                              options\n                            );\n                          } else {\n                            var pluralSuffix;\n                            if (needsPluralHandling)\n                              pluralSuffix = _this4.pluralResolver.getSuffix(\n                                code,\n                                options.count\n                              ); // fallback for plural if context not found\n\n                            if (needsPluralHandling && needsContextHandling)\n                              finalKeys.push(finalKey + pluralSuffix); // get key for context if needed\n\n                            if (needsContextHandling)\n                              finalKeys.push(\n                                (finalKey += ''\n                                  .concat(_this4.options.contextSeparator)\n                                  .concat(options.context))\n                              ); // get key for plural if needed\n\n                            if (needsPluralHandling)\n                              finalKeys.push((finalKey += pluralSuffix));\n                          } // iterate over finalKeys starting with most specific pluralkey (-> contextkey only) -> singularkey only\n\n                          var possibleKey;\n                          /* eslint no-cond-assign: 0 */\n\n                          while ((possibleKey = finalKeys.pop())) {\n                            if (!_this4.isValidLookup(found)) {\n                              exactUsedKey = possibleKey;\n                              found = _this4.getResource(code, ns, possibleKey, options);\n                            }\n                          }\n                        });\n                      });\n                    });\n                    return {\n                      res: found,\n                      usedKey: usedKey,\n                      exactUsedKey: exactUsedKey,\n                      usedLng: usedLng,\n                      usedNS: usedNS\n                    };\n                  }\n                },\n                {\n                  key: 'isValidLookup',\n                  value: function isValidLookup(res) {\n                    return (\n                      res !== undefined &&\n                      !(!this.options.returnNull && res === null) &&\n                      !(!this.options.returnEmptyString && res === '')\n                    );\n                  }\n                },\n                {\n                  key: 'getResource',\n                  value: function getResource(code, ns, key) {\n                    var options =\n                      arguments.length > 3 && arguments[3] !== undefined\n                        ? arguments[3]\n                        : {};\n                    if (this.i18nFormat && this.i18nFormat.getResource)\n                      return this.i18nFormat.getResource(code, ns, key, options);\n                    return this.resourceStore.getResource(code, ns, key, options);\n                  }\n                }\n              ]);\n\n              return Translator;\n            })(EventEmitter);\n\n          function capitalize(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n          }\n\n          var LanguageUtil =\n            /*#__PURE__*/\n            (function() {\n              function LanguageUtil(options) {\n                _classCallCheck(this, LanguageUtil);\n\n                this.options = options;\n                this.whitelist = this.options.whitelist || false;\n                this.logger = baseLogger.create('languageUtils');\n              }\n\n              _createClass(LanguageUtil, [\n                {\n                  key: 'getScriptPartFromCode',\n                  value: function getScriptPartFromCode(code) {\n                    if (!code || code.indexOf('-') < 0) return null;\n                    var p = code.split('-');\n                    if (p.length === 2) return null;\n                    p.pop();\n                    return this.formatLanguageCode(p.join('-'));\n                  }\n                },\n                {\n                  key: 'getLanguagePartFromCode',\n                  value: function getLanguagePartFromCode(code) {\n                    if (!code || code.indexOf('-') < 0) return code;\n                    var p = code.split('-');\n                    return this.formatLanguageCode(p[0]);\n                  }\n                },\n                {\n                  key: 'formatLanguageCode',\n                  value: function formatLanguageCode(code) {\n                    // http://www.iana.org/assignments/language-tags/language-tags.xhtml\n                    if (typeof code === 'string' && code.indexOf('-') > -1) {\n                      var specialCases = [\n                        'hans',\n                        'hant',\n                        'latn',\n                        'cyrl',\n                        'cans',\n                        'mong',\n                        'arab'\n                      ];\n                      var p = code.split('-');\n\n                      if (this.options.lowerCaseLng) {\n                        p = p.map(function(part) {\n                          return part.toLowerCase();\n                        });\n                      } else if (p.length === 2) {\n                        p[0] = p[0].toLowerCase();\n                        p[1] = p[1].toUpperCase();\n                        if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n                          p[1] = capitalize(p[1].toLowerCase());\n                      } else if (p.length === 3) {\n                        p[0] = p[0].toLowerCase(); // if lenght 2 guess it's a country\n\n                        if (p[1].length === 2) p[1] = p[1].toUpperCase();\n                        if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();\n                        if (specialCases.indexOf(p[1].toLowerCase()) > -1)\n                          p[1] = capitalize(p[1].toLowerCase());\n                        if (specialCases.indexOf(p[2].toLowerCase()) > -1)\n                          p[2] = capitalize(p[2].toLowerCase());\n                      }\n\n                      return p.join('-');\n                    }\n\n                    return this.options.cleanCode || this.options.lowerCaseLng\n                      ? code.toLowerCase()\n                      : code;\n                  }\n                },\n                {\n                  key: 'isWhitelisted',\n                  value: function isWhitelisted(code) {\n                    if (\n                      this.options.load === 'languageOnly' ||\n                      this.options.nonExplicitWhitelist\n                    ) {\n                      code = this.getLanguagePartFromCode(code);\n                    }\n\n                    return (\n                      !this.whitelist ||\n                      !this.whitelist.length ||\n                      this.whitelist.indexOf(code) > -1\n                    );\n                  }\n                },\n                {\n                  key: 'getFallbackCodes',\n                  value: function getFallbackCodes(fallbacks, code) {\n                    if (!fallbacks) return [];\n                    if (typeof fallbacks === 'string') fallbacks = [fallbacks];\n                    if (Object.prototype.toString.apply(fallbacks) === '[object Array]')\n                      return fallbacks;\n                    if (!code) return fallbacks['default'] || []; // asume we have an object defining fallbacks\n\n                    var found = fallbacks[code];\n                    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];\n                    if (!found) found = fallbacks[this.formatLanguageCode(code)];\n                    if (!found) found = fallbacks['default'];\n                    return found || [];\n                  }\n                },\n                {\n                  key: 'toResolveHierarchy',\n                  value: function toResolveHierarchy(code, fallbackCode) {\n                    var _this = this;\n\n                    var fallbackCodes = this.getFallbackCodes(\n                      fallbackCode || this.options.fallbackLng || [],\n                      code\n                    );\n                    var codes = [];\n\n                    var addCode = function addCode(c) {\n                      if (!c) return;\n\n                      if (_this.isWhitelisted(c)) {\n                        codes.push(c);\n                      } else {\n                        _this.logger.warn(\n                          'rejecting non-whitelisted language code: '.concat(c)\n                        );\n                      }\n                    };\n\n                    if (typeof code === 'string' && code.indexOf('-') > -1) {\n                      if (this.options.load !== 'languageOnly')\n                        addCode(this.formatLanguageCode(code));\n                      if (\n                        this.options.load !== 'languageOnly' &&\n                        this.options.load !== 'currentOnly'\n                      )\n                        addCode(this.getScriptPartFromCode(code));\n                      if (this.options.load !== 'currentOnly')\n                        addCode(this.getLanguagePartFromCode(code));\n                    } else if (typeof code === 'string') {\n                      addCode(this.formatLanguageCode(code));\n                    }\n\n                    fallbackCodes.forEach(function(fc) {\n                      if (codes.indexOf(fc) < 0) addCode(_this.formatLanguageCode(fc));\n                    });\n                    return codes;\n                  }\n                }\n              ]);\n\n              return LanguageUtil;\n            })();\n\n          /* eslint-disable */\n\n          var sets = [\n            {\n              lngs: [\n                'ach',\n                'ak',\n                'am',\n                'arn',\n                'br',\n                'fil',\n                'gun',\n                'ln',\n                'mfe',\n                'mg',\n                'mi',\n                'oc',\n                'pt',\n                'pt-BR',\n                'tg',\n                'ti',\n                'tr',\n                'uz',\n                'wa'\n              ],\n              nr: [1, 2],\n              fc: 1\n            },\n            {\n              lngs: [\n                'af',\n                'an',\n                'ast',\n                'az',\n                'bg',\n                'bn',\n                'ca',\n                'da',\n                'de',\n                'dev',\n                'el',\n                'en',\n                'eo',\n                'es',\n                'et',\n                'eu',\n                'fi',\n                'fo',\n                'fur',\n                'fy',\n                'gl',\n                'gu',\n                'ha',\n                'hi',\n                'hu',\n                'hy',\n                'ia',\n                'it',\n                'kn',\n                'ku',\n                'lb',\n                'mai',\n                'ml',\n                'mn',\n                'mr',\n                'nah',\n                'nap',\n                'nb',\n                'ne',\n                'nl',\n                'nn',\n                'no',\n                'nso',\n                'pa',\n                'pap',\n                'pms',\n                'ps',\n                'pt-PT',\n                'rm',\n                'sco',\n                'se',\n                'si',\n                'so',\n                'son',\n                'sq',\n                'sv',\n                'sw',\n                'ta',\n                'te',\n                'tk',\n                'ur',\n                'yo'\n              ],\n              nr: [1, 2],\n              fc: 2\n            },\n            {\n              lngs: [\n                'ay',\n                'bo',\n                'cgg',\n                'fa',\n                'id',\n                'ja',\n                'jbo',\n                'ka',\n                'kk',\n                'km',\n                'ko',\n                'ky',\n                'lo',\n                'ms',\n                'sah',\n                'su',\n                'th',\n                'tt',\n                'ug',\n                'vi',\n                'wo',\n                'zh'\n              ],\n              nr: [1],\n              fc: 3\n            },\n            {\n              lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],\n              nr: [1, 2, 5],\n              fc: 4\n            },\n            {\n              lngs: ['ar'],\n              nr: [0, 1, 2, 3, 11, 100],\n              fc: 5\n            },\n            {\n              lngs: ['cs', 'sk'],\n              nr: [1, 2, 5],\n              fc: 6\n            },\n            {\n              lngs: ['csb', 'pl'],\n              nr: [1, 2, 5],\n              fc: 7\n            },\n            {\n              lngs: ['cy'],\n              nr: [1, 2, 3, 8],\n              fc: 8\n            },\n            {\n              lngs: ['fr'],\n              nr: [1, 2],\n              fc: 9\n            },\n            {\n              lngs: ['ga'],\n              nr: [1, 2, 3, 7, 11],\n              fc: 10\n            },\n            {\n              lngs: ['gd'],\n              nr: [1, 2, 3, 20],\n              fc: 11\n            },\n            {\n              lngs: ['is'],\n              nr: [1, 2],\n              fc: 12\n            },\n            {\n              lngs: ['jv'],\n              nr: [0, 1],\n              fc: 13\n            },\n            {\n              lngs: ['kw'],\n              nr: [1, 2, 3, 4],\n              fc: 14\n            },\n            {\n              lngs: ['lt'],\n              nr: [1, 2, 10],\n              fc: 15\n            },\n            {\n              lngs: ['lv'],\n              nr: [1, 2, 0],\n              fc: 16\n            },\n            {\n              lngs: ['mk'],\n              nr: [1, 2],\n              fc: 17\n            },\n            {\n              lngs: ['mnk'],\n              nr: [0, 1, 2],\n              fc: 18\n            },\n            {\n              lngs: ['mt'],\n              nr: [1, 2, 11, 20],\n              fc: 19\n            },\n            {\n              lngs: ['or'],\n              nr: [2, 1],\n              fc: 2\n            },\n            {\n              lngs: ['ro'],\n              nr: [1, 2, 20],\n              fc: 20\n            },\n            {\n              lngs: ['sl'],\n              nr: [5, 1, 2, 3],\n              fc: 21\n            },\n            {\n              lngs: ['he'],\n              nr: [1, 2, 20, 21],\n              fc: 22\n            }\n          ];\n          var _rulesPluralsTypes = {\n            1: function _(n) {\n              return Number(n > 1);\n            },\n            2: function _(n) {\n              return Number(n != 1);\n            },\n            3: function _(n) {\n              return 0;\n            },\n            4: function _(n) {\n              return Number(\n                n % 10 == 1 && n % 100 != 11\n                  ? 0\n                  : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2\n              );\n            },\n            5: function _(n) {\n              return Number(\n                n === 0\n                  ? 0\n                  : n == 1\n                    ? 1\n                    : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5\n              );\n            },\n            6: function _(n) {\n              return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);\n            },\n            7: function _(n) {\n              return Number(\n                n == 1\n                  ? 0\n                  : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2\n              );\n            },\n            8: function _(n) {\n              return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);\n            },\n            9: function _(n) {\n              return Number(n >= 2);\n            },\n            10: function _(n) {\n              return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);\n            },\n            11: function _(n) {\n              return Number(\n                n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3\n              );\n            },\n            12: function _(n) {\n              return Number(n % 10 != 1 || n % 100 == 11);\n            },\n            13: function _(n) {\n              return Number(n !== 0);\n            },\n            14: function _(n) {\n              return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);\n            },\n            15: function _(n) {\n              return Number(\n                n % 10 == 1 && n % 100 != 11\n                  ? 0\n                  : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2\n              );\n            },\n            16: function _(n) {\n              return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);\n            },\n            17: function _(n) {\n              return Number(n == 1 || n % 10 == 1 ? 0 : 1);\n            },\n            18: function _(n) {\n              return Number(n == 0 ? 0 : n == 1 ? 1 : 2);\n            },\n            19: function _(n) {\n              return Number(\n                n == 1\n                  ? 0\n                  : n === 0 || (n % 100 > 1 && n % 100 < 11)\n                    ? 1\n                    : n % 100 > 10 && n % 100 < 20 ? 2 : 3\n              );\n            },\n            20: function _(n) {\n              return Number(n == 1 ? 0 : n === 0 || (n % 100 > 0 && n % 100 < 20) ? 1 : 2);\n            },\n            21: function _(n) {\n              return Number(\n                n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0\n              );\n            },\n            22: function _(n) {\n              return Number(\n                n === 1 ? 0 : n === 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3\n              );\n            }\n          };\n          /* eslint-enable */\n\n          function createRules() {\n            var rules = {};\n            sets.forEach(function(set) {\n              set.lngs.forEach(function(l) {\n                rules[l] = {\n                  numbers: set.nr,\n                  plurals: _rulesPluralsTypes[set.fc]\n                };\n              });\n            });\n            return rules;\n          }\n\n          var PluralResolver =\n            /*#__PURE__*/\n            (function() {\n              function PluralResolver(languageUtils) {\n                var options =\n                  arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n                _classCallCheck(this, PluralResolver);\n\n                this.languageUtils = languageUtils;\n                this.options = options;\n                this.logger = baseLogger.create('pluralResolver');\n                this.rules = createRules();\n              }\n\n              _createClass(PluralResolver, [\n                {\n                  key: 'addRule',\n                  value: function addRule(lng, obj) {\n                    this.rules[lng] = obj;\n                  }\n                },\n                {\n                  key: 'getRule',\n                  value: function getRule(code) {\n                    return (\n                      this.rules[code] ||\n                      this.rules[this.languageUtils.getLanguagePartFromCode(code)]\n                    );\n                  }\n                },\n                {\n                  key: 'needsPlural',\n                  value: function needsPlural(code) {\n                    var rule = this.getRule(code);\n                    return rule && rule.numbers.length > 1;\n                  }\n                },\n                {\n                  key: 'getPluralFormsOfKey',\n                  value: function getPluralFormsOfKey(code, key) {\n                    var _this = this;\n\n                    var ret = [];\n                    var rule = this.getRule(code);\n                    if (!rule) return ret;\n                    rule.numbers.forEach(function(n) {\n                      var suffix = _this.getSuffix(code, n);\n\n                      ret.push(''.concat(key).concat(suffix));\n                    });\n                    return ret;\n                  }\n                },\n                {\n                  key: 'getSuffix',\n                  value: function getSuffix(code, count) {\n                    var _this2 = this;\n\n                    var rule = this.getRule(code);\n\n                    if (rule) {\n                      // if (rule.numbers.length === 1) return ''; // only singular\n                      var idx = rule.noAbs\n                        ? rule.plurals(count)\n                        : rule.plurals(Math.abs(count));\n                      var suffix = rule.numbers[idx]; // special treatment for lngs only having singular and plural\n\n                      if (\n                        this.options.simplifyPluralSuffix &&\n                        rule.numbers.length === 2 &&\n                        rule.numbers[0] === 1\n                      ) {\n                        if (suffix === 2) {\n                          suffix = 'plural';\n                        } else if (suffix === 1) {\n                          suffix = '';\n                        }\n                      }\n\n                      var returnSuffix = function returnSuffix() {\n                        return _this2.options.prepend && suffix.toString()\n                          ? _this2.options.prepend + suffix.toString()\n                          : suffix.toString();\n                      }; // COMPATIBILITY JSON\n                      // v1\n\n                      if (this.options.compatibilityJSON === 'v1') {\n                        if (suffix === 1) return '';\n                        if (typeof suffix === 'number')\n                          return '_plural_'.concat(suffix.toString());\n                        return returnSuffix();\n                      } else if (\n                        /* v2 */\n                        this.options.compatibilityJSON === 'v2'\n                      ) {\n                        return returnSuffix();\n                      } else if (\n                        /* v3 - gettext index */\n                        this.options.simplifyPluralSuffix &&\n                        rule.numbers.length === 2 &&\n                        rule.numbers[0] === 1\n                      ) {\n                        return returnSuffix();\n                      }\n\n                      return this.options.prepend && idx.toString()\n                        ? this.options.prepend + idx.toString()\n                        : idx.toString();\n                    }\n\n                    this.logger.warn('no plural rule found for: '.concat(code));\n                    return '';\n                  }\n                }\n              ]);\n\n              return PluralResolver;\n            })();\n\n          var Interpolator =\n            /*#__PURE__*/\n            (function() {\n              function Interpolator() {\n                var options =\n                  arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n                _classCallCheck(this, Interpolator);\n\n                this.logger = baseLogger.create('interpolator');\n                this.options = options;\n\n                this.format =\n                  (options.interpolation && options.interpolation.format) ||\n                  function(value) {\n                    return value;\n                  };\n\n                this.init(options);\n              }\n              /* eslint no-param-reassign: 0 */\n\n              _createClass(Interpolator, [\n                {\n                  key: 'init',\n                  value: function init() {\n                    var options =\n                      arguments.length > 0 && arguments[0] !== undefined\n                        ? arguments[0]\n                        : {};\n                    if (!options.interpolation)\n                      options.interpolation = {\n                        escapeValue: true\n                      };\n                    var iOpts = options.interpolation;\n                    this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;\n                    this.escapeValue =\n                      iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;\n                    this.useRawValueToEscape =\n                      iOpts.useRawValueToEscape !== undefined\n                        ? iOpts.useRawValueToEscape\n                        : false;\n                    this.prefix = iOpts.prefix\n                      ? regexEscape(iOpts.prefix)\n                      : iOpts.prefixEscaped || '{{';\n                    this.suffix = iOpts.suffix\n                      ? regexEscape(iOpts.suffix)\n                      : iOpts.suffixEscaped || '}}';\n                    this.formatSeparator = iOpts.formatSeparator\n                      ? iOpts.formatSeparator\n                      : iOpts.formatSeparator || ',';\n                    this.unescapePrefix = iOpts.unescapeSuffix\n                      ? ''\n                      : iOpts.unescapePrefix || '-';\n                    this.unescapeSuffix = this.unescapePrefix\n                      ? ''\n                      : iOpts.unescapeSuffix || '';\n                    this.nestingPrefix = iOpts.nestingPrefix\n                      ? regexEscape(iOpts.nestingPrefix)\n                      : iOpts.nestingPrefixEscaped || regexEscape('$t(');\n                    this.nestingSuffix = iOpts.nestingSuffix\n                      ? regexEscape(iOpts.nestingSuffix)\n                      : iOpts.nestingSuffixEscaped || regexEscape(')');\n                    this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000; // the regexp\n\n                    this.resetRegExp();\n                  }\n                },\n                {\n                  key: 'reset',\n                  value: function reset() {\n                    if (this.options) this.init(this.options);\n                  }\n                },\n                {\n                  key: 'resetRegExp',\n                  value: function resetRegExp() {\n                    // the regexp\n                    var regexpStr = ''.concat(this.prefix, '(.+?)').concat(this.suffix);\n                    this.regexp = new RegExp(regexpStr, 'g');\n                    var regexpUnescapeStr = ''\n                      .concat(this.prefix)\n                      .concat(this.unescapePrefix, '(.+?)')\n                      .concat(this.unescapeSuffix)\n                      .concat(this.suffix);\n                    this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');\n                    var nestingRegexpStr = ''\n                      .concat(this.nestingPrefix, '(.+?)')\n                      .concat(this.nestingSuffix);\n                    this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');\n                  }\n                },\n                {\n                  key: 'interpolate',\n                  value: function interpolate(str, data, lng, options) {\n                    var _this = this;\n\n                    var match;\n                    var value;\n                    var replaces;\n                    var defaultData =\n                      (this.options &&\n                        this.options.interpolation &&\n                        this.options.interpolation.defaultVariables) ||\n                      {};\n\n                    function regexSafe(val) {\n                      return val.replace(/\\$/g, '$$$$');\n                    }\n\n                    var handleFormat = function handleFormat(key) {\n                      if (key.indexOf(_this.formatSeparator) < 0) {\n                        return getPathWithDefaults(data, defaultData, key);\n                      }\n\n                      var p = key.split(_this.formatSeparator);\n                      var k = p.shift().trim();\n                      var f = p.join(_this.formatSeparator).trim();\n                      return _this.format(\n                        getPathWithDefaults(data, defaultData, k),\n                        f,\n                        lng\n                      );\n                    };\n\n                    this.resetRegExp();\n                    var missingInterpolationHandler =\n                      (options && options.missingInterpolationHandler) ||\n                      this.options.missingInterpolationHandler;\n                    replaces = 0; // unescape if has unescapePrefix/Suffix\n\n                    /* eslint no-cond-assign: 0 */\n\n                    while ((match = this.regexpUnescape.exec(str))) {\n                      value = handleFormat(match[1].trim());\n\n                      if (value === undefined) {\n                        if (typeof missingInterpolationHandler === 'function') {\n                          var temp = missingInterpolationHandler(str, match, options);\n                          value = typeof temp === 'string' ? temp : '';\n                        } else {\n                          this.logger.warn(\n                            'missed to pass in variable '\n                              .concat(match[1], ' for interpolating ')\n                              .concat(str)\n                          );\n                          value = '';\n                        }\n                      } else if (typeof value !== 'string' && !this.useRawValueToEscape) {\n                        value = makeString(value);\n                      }\n\n                      str = str.replace(match[0], regexSafe(value));\n                      this.regexpUnescape.lastIndex = 0;\n                      replaces++;\n\n                      if (replaces >= this.maxReplaces) {\n                        break;\n                      }\n                    }\n\n                    replaces = 0; // regular escape on demand\n\n                    while ((match = this.regexp.exec(str))) {\n                      value = handleFormat(match[1].trim());\n\n                      if (value === undefined) {\n                        if (typeof missingInterpolationHandler === 'function') {\n                          var _temp = missingInterpolationHandler(str, match, options);\n\n                          value = typeof _temp === 'string' ? _temp : '';\n                        } else {\n                          this.logger.warn(\n                            'missed to pass in variable '\n                              .concat(match[1], ' for interpolating ')\n                              .concat(str)\n                          );\n                          value = '';\n                        }\n                      } else if (typeof value !== 'string' && !this.useRawValueToEscape) {\n                        value = makeString(value);\n                      }\n\n                      value = this.escapeValue\n                        ? regexSafe(this.escape(value))\n                        : regexSafe(value);\n                      str = str.replace(match[0], value);\n                      this.regexp.lastIndex = 0;\n                      replaces++;\n\n                      if (replaces >= this.maxReplaces) {\n                        break;\n                      }\n                    }\n\n                    return str;\n                  }\n                },\n                {\n                  key: 'nest',\n                  value: function nest(str, fc) {\n                    var options =\n                      arguments.length > 2 && arguments[2] !== undefined\n                        ? arguments[2]\n                        : {};\n                    var match;\n                    var value;\n\n                    var clonedOptions = _objectSpread({}, options);\n\n                    clonedOptions.applyPostProcessor = false; // avoid post processing on nested lookup\n\n                    delete clonedOptions.defaultValue; // assert we do not get a endless loop on interpolating defaultValue again and again\n                    // if value is something like \"myKey\": \"lorem $(anotherKey, { \"count\": {{aValueInOptions}} })\"\n\n                    function handleHasOptions(key, inheritedOptions) {\n                      if (key.indexOf(',') < 0) return key;\n                      var p = key.split(',');\n                      key = p.shift();\n                      var optionsString = p.join(',');\n                      optionsString = this.interpolate(optionsString, clonedOptions);\n                      optionsString = optionsString.replace(/'/g, '\"');\n\n                      try {\n                        clonedOptions = JSON.parse(optionsString);\n                        if (inheritedOptions)\n                          clonedOptions = _objectSpread(\n                            {},\n                            inheritedOptions,\n                            clonedOptions\n                          );\n                      } catch (e) {\n                        this.logger.error(\n                          'failed parsing options string in nesting for key '.concat(key),\n                          e\n                        );\n                      } // assert we do not get a endless loop on interpolating defaultValue again and again\n\n                      delete clonedOptions.defaultValue;\n                      return key;\n                    } // regular escape on demand\n\n                    while ((match = this.nestingRegexp.exec(str))) {\n                      value = fc(\n                        handleHasOptions.call(this, match[1].trim(), clonedOptions),\n                        clonedOptions\n                      ); // is only the nesting key (key1 = '$(key2)') return the value without stringify\n\n                      if (value && match[0] === str && typeof value !== 'string')\n                        return value; // no string to include or empty\n\n                      if (typeof value !== 'string') value = makeString(value);\n\n                      if (!value) {\n                        this.logger.warn(\n                          'missed to resolve '.concat(match[1], ' for nesting ').concat(str)\n                        );\n                        value = '';\n                      } // Nested keys should not be escaped by default #854\n                      // value = this.escapeValue ? regexSafe(utils.escape(value)) : regexSafe(value);\n\n                      str = str.replace(match[0], value);\n                      this.regexp.lastIndex = 0;\n                    }\n\n                    return str;\n                  }\n                }\n              ]);\n\n              return Interpolator;\n            })();\n\n          function remove(arr, what) {\n            var found = arr.indexOf(what);\n\n            while (found !== -1) {\n              arr.splice(found, 1);\n              found = arr.indexOf(what);\n            }\n          }\n\n          var Connector =\n            /*#__PURE__*/\n            (function(_EventEmitter) {\n              _inherits(Connector, _EventEmitter);\n\n              function Connector(backend, store, services) {\n                var _this;\n\n                var options =\n                  arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n                _classCallCheck(this, Connector);\n\n                _this = _possibleConstructorReturn(\n                  this,\n                  _getPrototypeOf(Connector).call(this)\n                );\n                EventEmitter.call(_assertThisInitialized(_this)); // <=IE10 fix (unable to call parent constructor)\n\n                _this.backend = backend;\n                _this.store = store;\n                _this.services = services;\n                _this.languageUtils = services.languageUtils;\n                _this.options = options;\n                _this.logger = baseLogger.create('backendConnector');\n                _this.state = {};\n                _this.queue = [];\n\n                if (_this.backend && _this.backend.init) {\n                  _this.backend.init(services, options.backend, options);\n                }\n\n                return _this;\n              }\n\n              _createClass(Connector, [\n                {\n                  key: 'queueLoad',\n                  value: function queueLoad(languages, namespaces, options, callback) {\n                    var _this2 = this;\n\n                    // find what needs to be loaded\n                    var toLoad = [];\n                    var pending = [];\n                    var toLoadLanguages = [];\n                    var toLoadNamespaces = [];\n                    languages.forEach(function(lng) {\n                      var hasAllNamespaces = true;\n                      namespaces.forEach(function(ns) {\n                        var name = ''.concat(lng, '|').concat(ns);\n\n                        if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {\n                          _this2.state[name] = 2; // loaded\n                        } else if (_this2.state[name] < 0);\n                        else if (_this2.state[name] === 1) {\n                          if (pending.indexOf(name) < 0) pending.push(name);\n                        } else {\n                          _this2.state[name] = 1; // pending\n\n                          hasAllNamespaces = false;\n                          if (pending.indexOf(name) < 0) pending.push(name);\n                          if (toLoad.indexOf(name) < 0) toLoad.push(name);\n                          if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);\n                        }\n                      });\n                      if (!hasAllNamespaces) toLoadLanguages.push(lng);\n                    });\n\n                    if (toLoad.length || pending.length) {\n                      this.queue.push({\n                        pending: pending,\n                        loaded: {},\n                        errors: [],\n                        callback: callback\n                      });\n                    }\n\n                    return {\n                      toLoad: toLoad,\n                      pending: pending,\n                      toLoadLanguages: toLoadLanguages,\n                      toLoadNamespaces: toLoadNamespaces\n                    };\n                  }\n                },\n                {\n                  key: 'loaded',\n                  value: function loaded(name, err, data) {\n                    var _name$split = name.split('|'),\n                      _name$split2 = _slicedToArray(_name$split, 2),\n                      lng = _name$split2[0],\n                      ns = _name$split2[1];\n\n                    if (err) this.emit('failedLoading', lng, ns, err);\n\n                    if (data) {\n                      this.store.addResourceBundle(lng, ns, data);\n                    } // set loaded\n\n                    this.state[name] = err ? -1 : 2; // consolidated loading done in this run - only emit once for a loaded namespace\n\n                    var loaded = {}; // callback if ready\n\n                    this.queue.forEach(function(q) {\n                      pushPath(q.loaded, [lng], ns);\n                      remove(q.pending, name);\n                      if (err) q.errors.push(err);\n\n                      if (q.pending.length === 0 && !q.done) {\n                        // only do once per loaded -> this.emit('loaded', q.loaded);\n                        Object.keys(q.loaded).forEach(function(l) {\n                          if (!loaded[l]) loaded[l] = [];\n\n                          if (q.loaded[l].length) {\n                            q.loaded[l].forEach(function(ns) {\n                              if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);\n                            });\n                          }\n                        });\n                        /* eslint no-param-reassign: 0 */\n\n                        q.done = true;\n\n                        if (q.errors.length) {\n                          q.callback(q.errors);\n                        } else {\n                          q.callback();\n                        }\n                      }\n                    }); // emit consolidated loaded event\n\n                    this.emit('loaded', loaded); // remove done load requests\n\n                    this.queue = this.queue.filter(function(q) {\n                      return !q.done;\n                    });\n                  }\n                },\n                {\n                  key: 'read',\n                  value: function read(lng, ns, fcName) {\n                    var _this3 = this;\n\n                    var tried =\n                      arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n                    var wait =\n                      arguments.length > 4 && arguments[4] !== undefined\n                        ? arguments[4]\n                        : 250;\n                    var callback = arguments.length > 5 ? arguments[5] : undefined;\n                    if (!lng.length) return callback(null, {}); // noting to load\n\n                    return this.backend[fcName](lng, ns, function(err, data) {\n                      if (\n                        err &&\n                        data &&\n                        /* = retryFlag */\n                        tried < 5\n                      ) {\n                        setTimeout(function() {\n                          _this3.read.call(\n                            _this3,\n                            lng,\n                            ns,\n                            fcName,\n                            tried + 1,\n                            wait * 2,\n                            callback\n                          );\n                        }, wait);\n                        return;\n                      }\n\n                      callback(err, data);\n                    });\n                  }\n                  /* eslint consistent-return: 0 */\n                },\n                {\n                  key: 'prepareLoading',\n                  value: function prepareLoading(languages, namespaces) {\n                    var _this4 = this;\n\n                    var options =\n                      arguments.length > 2 && arguments[2] !== undefined\n                        ? arguments[2]\n                        : {};\n                    var callback = arguments.length > 3 ? arguments[3] : undefined;\n\n                    if (!this.backend) {\n                      this.logger.warn(\n                        'No backend was added via i18next.use. Will not load resources.'\n                      );\n                      return callback && callback();\n                    }\n\n                    if (typeof languages === 'string')\n                      languages = this.languageUtils.toResolveHierarchy(languages);\n                    if (typeof namespaces === 'string') namespaces = [namespaces];\n                    var toLoad = this.queueLoad(languages, namespaces, options, callback);\n\n                    if (!toLoad.toLoad.length) {\n                      if (!toLoad.pending.length) callback(); // nothing to load and no pendings...callback now\n\n                      return null; // pendings will trigger callback\n                    }\n\n                    toLoad.toLoad.forEach(function(name) {\n                      _this4.loadOne(name);\n                    });\n                  }\n                },\n                {\n                  key: 'load',\n                  value: function load(languages, namespaces, callback) {\n                    this.prepareLoading(languages, namespaces, {}, callback);\n                  }\n                },\n                {\n                  key: 'reload',\n                  value: function reload(languages, namespaces, callback) {\n                    this.prepareLoading(\n                      languages,\n                      namespaces,\n                      {\n                        reload: true\n                      },\n                      callback\n                    );\n                  }\n                },\n                {\n                  key: 'loadOne',\n                  value: function loadOne(name) {\n                    var _this5 = this;\n\n                    var prefix =\n                      arguments.length > 1 && arguments[1] !== undefined\n                        ? arguments[1]\n                        : '';\n\n                    var _name$split3 = name.split('|'),\n                      _name$split4 = _slicedToArray(_name$split3, 2),\n                      lng = _name$split4[0],\n                      ns = _name$split4[1];\n\n                    this.read(lng, ns, 'read', null, null, function(err, data) {\n                      if (err)\n                        _this5.logger.warn(\n                          ''\n                            .concat(prefix, 'loading namespace ')\n                            .concat(ns, ' for language ')\n                            .concat(lng, ' failed'),\n                          err\n                        );\n                      if (!err && data)\n                        _this5.logger.log(\n                          ''\n                            .concat(prefix, 'loaded namespace ')\n                            .concat(ns, ' for language ')\n                            .concat(lng),\n                          data\n                        );\n\n                      _this5.loaded(name, err, data);\n                    });\n                  }\n                },\n                {\n                  key: 'saveMissing',\n                  value: function saveMissing(\n                    languages,\n                    namespace,\n                    key,\n                    fallbackValue,\n                    isUpdate\n                  ) {\n                    var options =\n                      arguments.length > 5 && arguments[5] !== undefined\n                        ? arguments[5]\n                        : {};\n\n                    if (\n                      this.services.utils &&\n                      this.services.utils.hasLoadedNamespace &&\n                      !this.services.utils.hasLoadedNamespace(namespace)\n                    ) {\n                      this.logger.warn(\n                        'did not save key \"'\n                          .concat(key, '\" for namespace \"')\n                          .concat(namespace, '\" as the namespace was not yet loaded'),\n                        'This means something IS WRONG in your application setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!'\n                      );\n                      return;\n                    } // ignore non valid keys\n\n                    if (key === undefined || key === null || key === '') return;\n\n                    if (this.backend && this.backend.create) {\n                      this.backend.create(\n                        languages,\n                        namespace,\n                        key,\n                        fallbackValue,\n                        null,\n                        /* unused callback */\n                        _objectSpread({}, options, {\n                          isUpdate: isUpdate\n                        })\n                      );\n                    } // write to store to avoid resending\n\n                    if (!languages || !languages[0]) return;\n                    this.store.addResource(languages[0], namespace, key, fallbackValue);\n                  }\n                }\n              ]);\n\n              return Connector;\n            })(EventEmitter);\n\n          function get() {\n            return {\n              debug: false,\n              initImmediate: true,\n              ns: ['translation'],\n              defaultNS: ['translation'],\n              fallbackLng: ['dev'],\n              fallbackNS: false,\n              // string or array of namespaces\n              whitelist: false,\n              // array with whitelisted languages\n              nonExplicitWhitelist: false,\n              load: 'all',\n              // | currentOnly | languageOnly\n              preload: false,\n              // array with preload languages\n              simplifyPluralSuffix: true,\n              keySeparator: '.',\n              nsSeparator: ':',\n              pluralSeparator: '_',\n              contextSeparator: '_',\n              partialBundledLanguages: false,\n              // allow bundling certain languages that are not remotely fetched\n              saveMissing: false,\n              // enable to send missing values\n              updateMissing: false,\n              // enable to update default values if different from translated value (only useful on initial development, or when keeping code as source of truth)\n              saveMissingTo: 'fallback',\n              // 'current' || 'all'\n              saveMissingPlurals: true,\n              // will save all forms not only singular key\n              missingKeyHandler: false,\n              // function(lng, ns, key, fallbackValue) -> override if prefer on handling\n              missingInterpolationHandler: false,\n              // function(str, match)\n              postProcess: false,\n              // string or array of postProcessor names\n              postProcessPassResolved: false,\n              // pass resolved object into 'options.i18nResolved' for postprocessor\n              returnNull: true,\n              // allows null value as valid translation\n              returnEmptyString: true,\n              // allows empty string value as valid translation\n              returnObjects: false,\n              joinArrays: false,\n              // or string to join array\n              returnedObjectHandler: false,\n              // function(key, value, options) triggered if key returns object but returnObjects is set to false\n              parseMissingKeyHandler: false,\n              // function(key) parsed a key that was not found in t() before returning\n              appendNamespaceToMissingKey: false,\n              appendNamespaceToCIMode: false,\n              overloadTranslationOptionHandler: function handle(args) {\n                var ret = {};\n                if (_typeof(args[1]) === 'object') ret = args[1];\n                if (typeof args[1] === 'string') ret.defaultValue = args[1];\n                if (typeof args[2] === 'string') ret.tDescription = args[2];\n\n                if (_typeof(args[2]) === 'object' || _typeof(args[3]) === 'object') {\n                  var options = args[3] || args[2];\n                  Object.keys(options).forEach(function(key) {\n                    ret[key] = options[key];\n                  });\n                }\n\n                return ret;\n              },\n              interpolation: {\n                escapeValue: true,\n                format: function format(value, _format, lng) {\n                  return value;\n                },\n                prefix: '{{',\n                suffix: '}}',\n                formatSeparator: ',',\n                // prefixEscaped: '{{',\n                // suffixEscaped: '}}',\n                // unescapeSuffix: '',\n                unescapePrefix: '-',\n                nestingPrefix: '$t(',\n                nestingSuffix: ')',\n                // nestingPrefixEscaped: '$t(',\n                // nestingSuffixEscaped: ')',\n                // defaultVariables: undefined // object that can have values to interpolate on - extends passed in interpolation data\n                maxReplaces: 1000 // max replaces to prevent endless loop\n              }\n            };\n          }\n          /* eslint no-param-reassign: 0 */\n\n          function transformOptions(options) {\n            // create namespace object if namespace is passed in as string\n            if (typeof options.ns === 'string') options.ns = [options.ns];\n            if (typeof options.fallbackLng === 'string')\n              options.fallbackLng = [options.fallbackLng];\n            if (typeof options.fallbackNS === 'string')\n              options.fallbackNS = [options.fallbackNS]; // extend whitelist with cimode\n\n            if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {\n              options.whitelist = options.whitelist.concat(['cimode']);\n            }\n\n            return options;\n          }\n\n          function noop() {}\n\n          var I18n =\n            /*#__PURE__*/\n            (function(_EventEmitter) {\n              _inherits(I18n, _EventEmitter);\n\n              function I18n() {\n                var _this;\n\n                var options =\n                  arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                var callback = arguments.length > 1 ? arguments[1] : undefined;\n\n                _classCallCheck(this, I18n);\n\n                _this = _possibleConstructorReturn(this, _getPrototypeOf(I18n).call(this));\n                EventEmitter.call(_assertThisInitialized(_this)); // <=IE10 fix (unable to call parent constructor)\n\n                _this.options = transformOptions(options);\n                _this.services = {};\n                _this.logger = baseLogger;\n                _this.modules = {\n                  external: []\n                };\n\n                if (callback && !_this.isInitialized && !options.isClone) {\n                  // https://github.com/i18next/i18next/issues/879\n                  if (!_this.options.initImmediate) {\n                    _this.init(options, callback);\n\n                    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));\n                  }\n\n                  setTimeout(function() {\n                    _this.init(options, callback);\n                  }, 0);\n                }\n\n                return _this;\n              }\n\n              _createClass(I18n, [\n                {\n                  key: 'init',\n                  value: function init() {\n                    var _this2 = this;\n\n                    var options =\n                      arguments.length > 0 && arguments[0] !== undefined\n                        ? arguments[0]\n                        : {};\n                    var callback = arguments.length > 1 ? arguments[1] : undefined;\n\n                    if (typeof options === 'function') {\n                      callback = options;\n                      options = {};\n                    }\n\n                    this.options = _objectSpread(\n                      {},\n                      get(),\n                      this.options,\n                      transformOptions(options)\n                    );\n                    this.format = this.options.interpolation.format;\n                    if (!callback) callback = noop;\n\n                    function createClassOnDemand(ClassOrObject) {\n                      if (!ClassOrObject) return null;\n                      if (typeof ClassOrObject === 'function') return new ClassOrObject();\n                      return ClassOrObject;\n                    } // init services\n\n                    if (!this.options.isClone) {\n                      if (this.modules.logger) {\n                        baseLogger.init(\n                          createClassOnDemand(this.modules.logger),\n                          this.options\n                        );\n                      } else {\n                        baseLogger.init(null, this.options);\n                      }\n\n                      var lu = new LanguageUtil(this.options);\n                      this.store = new ResourceStore(this.options.resources, this.options);\n                      var s = this.services;\n                      s.logger = baseLogger;\n                      s.resourceStore = this.store;\n                      s.languageUtils = lu;\n                      s.pluralResolver = new PluralResolver(lu, {\n                        prepend: this.options.pluralSeparator,\n                        compatibilityJSON: this.options.compatibilityJSON,\n                        simplifyPluralSuffix: this.options.simplifyPluralSuffix\n                      });\n                      s.interpolator = new Interpolator(this.options);\n                      s.utils = {\n                        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)\n                      };\n                      s.backendConnector = new Connector(\n                        createClassOnDemand(this.modules.backend),\n                        s.resourceStore,\n                        s,\n                        this.options\n                      ); // pipe events from backendConnector\n\n                      s.backendConnector.on('*', function(event) {\n                        for (\n                          var _len = arguments.length,\n                            args = new Array(_len > 1 ? _len - 1 : 0),\n                            _key = 1;\n                          _key < _len;\n                          _key++\n                        ) {\n                          args[_key - 1] = arguments[_key];\n                        }\n\n                        _this2.emit.apply(_this2, [event].concat(args));\n                      });\n\n                      if (this.modules.languageDetector) {\n                        s.languageDetector = createClassOnDemand(\n                          this.modules.languageDetector\n                        );\n                        s.languageDetector.init(s, this.options.detection, this.options);\n                      }\n\n                      if (this.modules.i18nFormat) {\n                        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);\n                        if (s.i18nFormat.init) s.i18nFormat.init(this);\n                      }\n\n                      this.translator = new Translator(this.services, this.options); // pipe events from translator\n\n                      this.translator.on('*', function(event) {\n                        for (\n                          var _len2 = arguments.length,\n                            args = new Array(_len2 > 1 ? _len2 - 1 : 0),\n                            _key2 = 1;\n                          _key2 < _len2;\n                          _key2++\n                        ) {\n                          args[_key2 - 1] = arguments[_key2];\n                        }\n\n                        _this2.emit.apply(_this2, [event].concat(args));\n                      });\n                      this.modules.external.forEach(function(m) {\n                        if (m.init) m.init(_this2);\n                      });\n                    } // append api\n\n                    var storeApi = [\n                      'getResource',\n                      'addResource',\n                      'addResources',\n                      'addResourceBundle',\n                      'removeResourceBundle',\n                      'hasResourceBundle',\n                      'getResourceBundle',\n                      'getDataByLanguage'\n                    ];\n                    storeApi.forEach(function(fcName) {\n                      _this2[fcName] = function() {\n                        var _this2$store;\n\n                        return (_this2$store = _this2.store)[fcName].apply(\n                          _this2$store,\n                          arguments\n                        );\n                      };\n                    });\n                    var deferred = defer();\n\n                    var load = function load() {\n                      _this2.changeLanguage(_this2.options.lng, function(err, t) {\n                        _this2.isInitialized = true;\n\n                        _this2.logger.log('initialized', _this2.options);\n\n                        _this2.emit('initialized', _this2.options);\n\n                        deferred.resolve(t); // not rejecting on err (as err is only a loading translation failed warning)\n\n                        callback(err, t);\n                      });\n                    };\n\n                    if (this.options.resources || !this.options.initImmediate) {\n                      load();\n                    } else {\n                      setTimeout(load, 0);\n                    }\n\n                    return deferred;\n                  }\n                  /* eslint consistent-return: 0 */\n                },\n                {\n                  key: 'loadResources',\n                  value: function loadResources(language) {\n                    var _this3 = this;\n\n                    var callback =\n                      arguments.length > 1 && arguments[1] !== undefined\n                        ? arguments[1]\n                        : noop;\n                    var usedCallback = callback;\n                    var usedLng = typeof language === 'string' ? language : this.language;\n                    if (typeof language === 'function') usedCallback = language;\n\n                    if (!this.options.resources || this.options.partialBundledLanguages) {\n                      if (usedLng && usedLng.toLowerCase() === 'cimode')\n                        return usedCallback(); // avoid loading resources for cimode\n\n                      var toLoad = [];\n\n                      var append = function append(lng) {\n                        if (!lng) return;\n\n                        var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);\n\n                        lngs.forEach(function(l) {\n                          if (toLoad.indexOf(l) < 0) toLoad.push(l);\n                        });\n                      };\n\n                      if (!usedLng) {\n                        // at least load fallbacks in this case\n                        var fallbacks = this.services.languageUtils.getFallbackCodes(\n                          this.options.fallbackLng\n                        );\n                        fallbacks.forEach(function(l) {\n                          return append(l);\n                        });\n                      } else {\n                        append(usedLng);\n                      }\n\n                      if (this.options.preload) {\n                        this.options.preload.forEach(function(l) {\n                          return append(l);\n                        });\n                      }\n\n                      this.services.backendConnector.load(\n                        toLoad,\n                        this.options.ns,\n                        usedCallback\n                      );\n                    } else {\n                      usedCallback(null);\n                    }\n                  }\n                },\n                {\n                  key: 'reloadResources',\n                  value: function reloadResources(lngs, ns, callback) {\n                    var deferred = defer();\n                    if (!lngs) lngs = this.languages;\n                    if (!ns) ns = this.options.ns;\n                    if (!callback) callback = noop;\n                    this.services.backendConnector.reload(lngs, ns, function(err) {\n                      deferred.resolve(); // not rejecting on err (as err is only a loading translation failed warning)\n\n                      callback(err);\n                    });\n                    return deferred;\n                  }\n                },\n                {\n                  key: 'use',\n                  value: function use(module) {\n                    if (module.type === 'backend') {\n                      this.modules.backend = module;\n                    }\n\n                    if (\n                      module.type === 'logger' ||\n                      (module.log && module.warn && module.error)\n                    ) {\n                      this.modules.logger = module;\n                    }\n\n                    if (module.type === 'languageDetector') {\n                      this.modules.languageDetector = module;\n                    }\n\n                    if (module.type === 'i18nFormat') {\n                      this.modules.i18nFormat = module;\n                    }\n\n                    if (module.type === 'postProcessor') {\n                      postProcessor.addPostProcessor(module);\n                    }\n\n                    if (module.type === '3rdParty') {\n                      this.modules.external.push(module);\n                    }\n\n                    return this;\n                  }\n                },\n                {\n                  key: 'changeLanguage',\n                  value: function changeLanguage(lng, callback) {\n                    var _this4 = this;\n\n                    this.isLanguageChangingTo = lng;\n                    var deferred = defer();\n                    this.emit('languageChanging', lng);\n\n                    var done = function done(err, l) {\n                      if (l) {\n                        _this4.language = l;\n                        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(\n                          l\n                        );\n\n                        _this4.translator.changeLanguage(l);\n\n                        _this4.isLanguageChangingTo = undefined;\n\n                        _this4.emit('languageChanged', l);\n\n                        _this4.logger.log('languageChanged', l);\n                      } else {\n                        _this4.isLanguageChangingTo = undefined;\n                      }\n\n                      deferred.resolve(function() {\n                        return _this4.t.apply(_this4, arguments);\n                      });\n                      if (callback)\n                        callback(err, function() {\n                          return _this4.t.apply(_this4, arguments);\n                        });\n                    };\n\n                    var setLng = function setLng(l) {\n                      if (l) {\n                        if (!_this4.language) {\n                          _this4.language = l;\n                          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(\n                            l\n                          );\n                        }\n\n                        if (!_this4.translator.language)\n                          _this4.translator.changeLanguage(l);\n                        if (_this4.services.languageDetector)\n                          _this4.services.languageDetector.cacheUserLanguage(l);\n                      }\n\n                      _this4.loadResources(l, function(err) {\n                        done(err, l);\n                      });\n                    };\n\n                    if (\n                      !lng &&\n                      this.services.languageDetector &&\n                      !this.services.languageDetector.async\n                    ) {\n                      setLng(this.services.languageDetector.detect());\n                    } else if (\n                      !lng &&\n                      this.services.languageDetector &&\n                      this.services.languageDetector.async\n                    ) {\n                      this.services.languageDetector.detect(setLng);\n                    } else {\n                      setLng(lng);\n                    }\n\n                    return deferred;\n                  }\n                },\n                {\n                  key: 'getFixedT',\n                  value: function getFixedT(lng, ns) {\n                    var _this5 = this;\n\n                    var fixedT = function fixedT(key, opts) {\n                      var options;\n\n                      if (_typeof(opts) !== 'object') {\n                        for (\n                          var _len3 = arguments.length,\n                            rest = new Array(_len3 > 2 ? _len3 - 2 : 0),\n                            _key3 = 2;\n                          _key3 < _len3;\n                          _key3++\n                        ) {\n                          rest[_key3 - 2] = arguments[_key3];\n                        }\n\n                        options = _this5.options.overloadTranslationOptionHandler(\n                          [key, opts].concat(rest)\n                        );\n                      } else {\n                        options = _objectSpread({}, opts);\n                      }\n\n                      options.lng = options.lng || fixedT.lng;\n                      options.lngs = options.lngs || fixedT.lngs;\n                      options.ns = options.ns || fixedT.ns;\n                      return _this5.t(key, options);\n                    };\n\n                    if (typeof lng === 'string') {\n                      fixedT.lng = lng;\n                    } else {\n                      fixedT.lngs = lng;\n                    }\n\n                    fixedT.ns = ns;\n                    return fixedT;\n                  }\n                },\n                {\n                  key: 't',\n                  value: function t() {\n                    var _this$translator;\n\n                    return (\n                      this.translator &&\n                      (_this$translator = this.translator).translate.apply(\n                        _this$translator,\n                        arguments\n                      )\n                    );\n                  }\n                },\n                {\n                  key: 'exists',\n                  value: function exists() {\n                    var _this$translator2;\n\n                    return (\n                      this.translator &&\n                      (_this$translator2 = this.translator).exists.apply(\n                        _this$translator2,\n                        arguments\n                      )\n                    );\n                  }\n                },\n                {\n                  key: 'setDefaultNamespace',\n                  value: function setDefaultNamespace(ns) {\n                    this.options.defaultNS = ns;\n                  }\n                },\n                {\n                  key: 'hasLoadedNamespace',\n                  value: function hasLoadedNamespace(ns) {\n                    var _this6 = this;\n\n                    if (!this.isInitialized) {\n                      this.logger.warn(\n                        'hasLoadedNamespace: i18next was not initialized',\n                        this.languages\n                      );\n                      return false;\n                    }\n\n                    if (!this.languages || !this.languages.length) {\n                      this.logger.warn(\n                        'hasLoadedNamespace: i18n.languages were undefined or empty',\n                        this.languages\n                      );\n                      return false;\n                    }\n\n                    var lng = this.languages[0];\n                    var fallbackLng = this.options ? this.options.fallbackLng : false;\n                    var lastLng = this.languages[this.languages.length - 1]; // we're in cimode so this shall pass\n\n                    if (lng.toLowerCase() === 'cimode') return true;\n\n                    var loadNotPending = function loadNotPending(l, n) {\n                      var loadState =\n                        _this6.services.backendConnector.state[''.concat(l, '|').concat(n)];\n\n                      return loadState === -1 || loadState === 2;\n                    }; // loaded -> SUCCESS\n\n                    if (this.hasResourceBundle(lng, ns)) return true; // were not loading at all -> SEMI SUCCESS\n\n                    if (!this.services.backendConnector.backend) return true; // failed loading ns - but at least fallback is not pending -> SEMI SUCCESS\n\n                    if (\n                      loadNotPending(lng, ns) &&\n                      (!fallbackLng || loadNotPending(lastLng, ns))\n                    )\n                      return true;\n                    return false;\n                  }\n                },\n                {\n                  key: 'loadNamespaces',\n                  value: function loadNamespaces(ns, callback) {\n                    var _this7 = this;\n\n                    var deferred = defer();\n\n                    if (!this.options.ns) {\n                      callback && callback();\n                      return Promise.resolve();\n                    }\n\n                    if (typeof ns === 'string') ns = [ns];\n                    ns.forEach(function(n) {\n                      if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);\n                    });\n                    this.loadResources(function(err) {\n                      deferred.resolve();\n                      if (callback) callback(err);\n                    });\n                    return deferred;\n                  }\n                },\n                {\n                  key: 'loadLanguages',\n                  value: function loadLanguages(lngs, callback) {\n                    var deferred = defer();\n                    if (typeof lngs === 'string') lngs = [lngs];\n                    var preloaded = this.options.preload || [];\n                    var newLngs = lngs.filter(function(lng) {\n                      return preloaded.indexOf(lng) < 0;\n                    }); // Exit early if all given languages are already preloaded\n\n                    if (!newLngs.length) {\n                      if (callback) callback();\n                      return Promise.resolve();\n                    }\n\n                    this.options.preload = preloaded.concat(newLngs);\n                    this.loadResources(function(err) {\n                      deferred.resolve();\n                      if (callback) callback(err);\n                    });\n                    return deferred;\n                  }\n                },\n                {\n                  key: 'dir',\n                  value: function dir(lng) {\n                    if (!lng)\n                      lng =\n                        this.languages && this.languages.length > 0\n                          ? this.languages[0]\n                          : this.language;\n                    if (!lng) return 'rtl';\n                    var rtlLngs = [\n                      'ar',\n                      'shu',\n                      'sqr',\n                      'ssh',\n                      'xaa',\n                      'yhd',\n                      'yud',\n                      'aao',\n                      'abh',\n                      'abv',\n                      'acm',\n                      'acq',\n                      'acw',\n                      'acx',\n                      'acy',\n                      'adf',\n                      'ads',\n                      'aeb',\n                      'aec',\n                      'afb',\n                      'ajp',\n                      'apc',\n                      'apd',\n                      'arb',\n                      'arq',\n                      'ars',\n                      'ary',\n                      'arz',\n                      'auz',\n                      'avl',\n                      'ayh',\n                      'ayl',\n                      'ayn',\n                      'ayp',\n                      'bbz',\n                      'pga',\n                      'he',\n                      'iw',\n                      'ps',\n                      'pbt',\n                      'pbu',\n                      'pst',\n                      'prp',\n                      'prd',\n                      'ur',\n                      'ydd',\n                      'yds',\n                      'yih',\n                      'ji',\n                      'yi',\n                      'hbo',\n                      'men',\n                      'xmn',\n                      'fa',\n                      'jpr',\n                      'peo',\n                      'pes',\n                      'prs',\n                      'dv',\n                      'sam'\n                    ];\n                    return rtlLngs.indexOf(\n                      this.services.languageUtils.getLanguagePartFromCode(lng)\n                    ) >= 0\n                      ? 'rtl'\n                      : 'ltr';\n                  }\n                  /* eslint class-methods-use-this: 0 */\n                },\n                {\n                  key: 'createInstance',\n                  value: function createInstance() {\n                    var options =\n                      arguments.length > 0 && arguments[0] !== undefined\n                        ? arguments[0]\n                        : {};\n                    var callback = arguments.length > 1 ? arguments[1] : undefined;\n                    return new I18n(options, callback);\n                  }\n                },\n                {\n                  key: 'cloneInstance',\n                  value: function cloneInstance() {\n                    var _this8 = this;\n\n                    var options =\n                      arguments.length > 0 && arguments[0] !== undefined\n                        ? arguments[0]\n                        : {};\n                    var callback =\n                      arguments.length > 1 && arguments[1] !== undefined\n                        ? arguments[1]\n                        : noop;\n\n                    var mergedOptions = _objectSpread({}, this.options, options, {\n                      isClone: true\n                    });\n\n                    var clone = new I18n(mergedOptions);\n                    var membersToCopy = ['store', 'services', 'language'];\n                    membersToCopy.forEach(function(m) {\n                      clone[m] = _this8[m];\n                    });\n                    clone.translator = new Translator(clone.services, clone.options);\n                    clone.translator.on('*', function(event) {\n                      for (\n                        var _len4 = arguments.length,\n                          args = new Array(_len4 > 1 ? _len4 - 1 : 0),\n                          _key4 = 1;\n                        _key4 < _len4;\n                        _key4++\n                      ) {\n                        args[_key4 - 1] = arguments[_key4];\n                      }\n\n                      clone.emit.apply(clone, [event].concat(args));\n                    });\n                    clone.init(mergedOptions, callback);\n                    clone.translator.options = clone.options; // sync options\n\n                    return clone;\n                  }\n                }\n              ]);\n\n              return I18n;\n            })(EventEmitter);\n\n          var i18next = new I18n();\n\n          module.exports = i18next;\n        },\n        {\n          '@babel/runtime/helpers/assertThisInitialized': 4,\n          '@babel/runtime/helpers/classCallCheck': 5,\n          '@babel/runtime/helpers/createClass': 6,\n          '@babel/runtime/helpers/getPrototypeOf': 8,\n          '@babel/runtime/helpers/inherits': 9,\n          '@babel/runtime/helpers/objectSpread': 14,\n          '@babel/runtime/helpers/possibleConstructorReturn': 15,\n          '@babel/runtime/helpers/slicedToArray': 17,\n          '@babel/runtime/helpers/toConsumableArray': 18,\n          '@babel/runtime/helpers/typeof': 19\n        }\n      ],\n      31: [\n        function(_dereq_, module, exports) {\n          exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n            var e, m;\n            var eLen = nBytes * 8 - mLen - 1;\n            var eMax = (1 << eLen) - 1;\n            var eBias = eMax >> 1;\n            var nBits = -7;\n            var i = isLE ? nBytes - 1 : 0;\n            var d = isLE ? -1 : 1;\n            var s = buffer[offset + i];\n\n            i += d;\n\n            e = s & ((1 << -nBits) - 1);\n            s >>= -nBits;\n            nBits += eLen;\n            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n            m = e & ((1 << -nBits) - 1);\n            e >>= -nBits;\n            nBits += mLen;\n            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n            if (e === 0) {\n              e = 1 - eBias;\n            } else if (e === eMax) {\n              return m ? NaN : (s ? -1 : 1) * Infinity;\n            } else {\n              m = m + Math.pow(2, mLen);\n              e = e - eBias;\n            }\n            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n          };\n\n          exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n            var e, m, c;\n            var eLen = nBytes * 8 - mLen - 1;\n            var eMax = (1 << eLen) - 1;\n            var eBias = eMax >> 1;\n            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n            var i = isLE ? 0 : nBytes - 1;\n            var d = isLE ? 1 : -1;\n            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n            value = Math.abs(value);\n\n            if (isNaN(value) || value === Infinity) {\n              m = isNaN(value) ? 1 : 0;\n              e = eMax;\n            } else {\n              e = Math.floor(Math.log(value) / Math.LN2);\n              if (value * (c = Math.pow(2, -e)) < 1) {\n                e--;\n                c *= 2;\n              }\n              if (e + eBias >= 1) {\n                value += rt / c;\n              } else {\n                value += rt * Math.pow(2, 1 - eBias);\n              }\n              if (value * c >= 2) {\n                e++;\n                c /= 2;\n              }\n\n              if (e + eBias >= eMax) {\n                m = 0;\n                e = eMax;\n              } else if (e + eBias >= 1) {\n                m = (value * c - 1) * Math.pow(2, mLen);\n                e = e + eBias;\n              } else {\n                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n                e = 0;\n              }\n            }\n\n            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n            e = (e << mLen) | m;\n            eLen += mLen;\n            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n            buffer[offset + i - d] |= s * 128;\n          };\n        },\n        {}\n      ],\n      32: [\n        function(_dereq_, module, exports) {\n          /*\n\n Copyright 2000, Silicon Graphics, Inc. All Rights Reserved.\n Copyright 2015, Google Inc. All Rights Reserved.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to\n deal in the Software without restriction, including without limitation the\n rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n sell copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice including the dates of first publication and\n either this permission notice or a reference to http://oss.sgi.com/projects/FreeB/\n shall be included in all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\n IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n Original Code. The Original Code is: OpenGL Sample Implementation,\n Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n Copyright in any portions created by third parties is as indicated\n elsewhere herein. All Rights Reserved.\n*/\n          'use strict';\n          var n;\n          function t(a, b) {\n            return a.b === b.b && a.a === b.a;\n          }\n          function u(a, b) {\n            return a.b < b.b || (a.b === b.b && a.a <= b.a);\n          }\n          function v(a, b, c) {\n            var d = b.b - a.b,\n              e = c.b - b.b;\n            return 0 < d + e\n              ? d < e\n                ? b.a - a.a + d / (d + e) * (a.a - c.a)\n                : b.a - c.a + e / (d + e) * (c.a - a.a)\n              : 0;\n          }\n          function x(a, b, c) {\n            var d = b.b - a.b,\n              e = c.b - b.b;\n            return 0 < d + e ? (b.a - c.a) * d + (b.a - a.a) * e : 0;\n          }\n          function z(a, b) {\n            return a.a < b.a || (a.a === b.a && a.b <= b.b);\n          }\n          function aa(a, b, c) {\n            var d = b.a - a.a,\n              e = c.a - b.a;\n            return 0 < d + e\n              ? d < e\n                ? b.b - a.b + d / (d + e) * (a.b - c.b)\n                : b.b - c.b + e / (d + e) * (c.b - a.b)\n              : 0;\n          }\n          function ba(a, b, c) {\n            var d = b.a - a.a,\n              e = c.a - b.a;\n            return 0 < d + e ? (b.b - c.b) * d + (b.b - a.b) * e : 0;\n          }\n          function ca(a) {\n            return u(a.b.a, a.a);\n          }\n          function da(a) {\n            return u(a.a, a.b.a);\n          }\n          function A(a, b, c, d) {\n            a = 0 > a ? 0 : a;\n            c = 0 > c ? 0 : c;\n            return a <= c\n              ? 0 === c ? (b + d) / 2 : b + a / (a + c) * (d - b)\n              : d + c / (a + c) * (b - d);\n          }\n          function ea(a) {\n            var b = B(a.b);\n            C(b, a.c);\n            C(b.b, a.c);\n            D(b, a.a);\n            return b;\n          }\n          function E(a, b) {\n            var c = !1,\n              d = !1;\n            a !== b &&\n              (b.a !== a.a && ((d = !0), F(b.a, a.a)),\n              b.d !== a.d && ((c = !0), G(b.d, a.d)),\n              H(b, a),\n              d || (C(b, a.a), (a.a.c = a)),\n              c || (D(b, a.d), (a.d.a = a)));\n          }\n          function I(a) {\n            var b = a.b,\n              c = !1;\n            a.d !== a.b.d && ((c = !0), G(a.d, a.b.d));\n            a.c === a\n              ? F(a.a, null)\n              : ((a.b.d.a = J(a)), (a.a.c = a.c), H(a, J(a)), c || D(a, a.d));\n            b.c === b\n              ? (F(b.a, null), G(b.d, null))\n              : ((a.d.a = J(b)), (b.a.c = b.c), H(b, J(b)));\n            fa(a);\n          }\n          function K(a) {\n            var b = B(a),\n              c = b.b;\n            H(b, a.e);\n            b.a = a.b.a;\n            C(c, b.a);\n            b.d = c.d = a.d;\n            b = b.b;\n            H(a.b, J(a.b));\n            H(a.b, b);\n            a.b.a = b.a;\n            b.b.a.c = b.b;\n            b.b.d = a.b.d;\n            b.f = a.f;\n            b.b.f = a.b.f;\n            return b;\n          }\n          function L(a, b) {\n            var c = !1,\n              d = B(a),\n              e = d.b;\n            b.d !== a.d && ((c = !0), G(b.d, a.d));\n            H(d, a.e);\n            H(e, b);\n            d.a = a.b.a;\n            e.a = b.a;\n            d.d = e.d = a.d;\n            a.d.a = e;\n            c || D(d, a.d);\n            return d;\n          }\n          function B(a) {\n            var b = new M(),\n              c = new M(),\n              d = a.b.h;\n            c.h = d;\n            d.b.h = b;\n            b.h = a;\n            a.b.h = c;\n            b.b = c;\n            b.c = b;\n            b.e = c;\n            c.b = b;\n            c.c = c;\n            return (c.e = b);\n          }\n          function H(a, b) {\n            var c = a.c,\n              d = b.c;\n            c.b.e = b;\n            d.b.e = a;\n            a.c = d;\n            b.c = c;\n          }\n          function C(a, b) {\n            var c = b.f,\n              d = new N(b, c);\n            c.e = d;\n            b.f = d;\n            c = d.c = a;\n            do (c.a = d), (c = c.c);\n            while (c !== a);\n          }\n          function D(a, b) {\n            var c = b.d,\n              d = new ga(b, c);\n            c.b = d;\n            b.d = d;\n            d.a = a;\n            d.c = b.c;\n            c = a;\n            do (c.d = d), (c = c.e);\n            while (c !== a);\n          }\n          function fa(a) {\n            var b = a.h;\n            a = a.b.h;\n            b.b.h = a;\n            a.b.h = b;\n          }\n          function F(a, b) {\n            var c = a.c,\n              d = c;\n            do (d.a = b), (d = d.c);\n            while (d !== c);\n            c = a.f;\n            d = a.e;\n            d.f = c;\n            c.e = d;\n          }\n          function G(a, b) {\n            var c = a.a,\n              d = c;\n            do (d.d = b), (d = d.e);\n            while (d !== c);\n            c = a.d;\n            d = a.b;\n            d.d = c;\n            c.b = d;\n          }\n          function ha(a) {\n            var b = 0;\n            Math.abs(a[1]) > Math.abs(a[0]) && (b = 1);\n            Math.abs(a[2]) > Math.abs(a[b]) && (b = 2);\n            return b;\n          }\n          var O = 4 * 1e150;\n          function P(a, b) {\n            a.f += b.f;\n            a.b.f += b.b.f;\n          }\n          function ia(a, b, c) {\n            a = a.a;\n            b = b.a;\n            c = c.a;\n            if (b.b.a === a)\n              return c.b.a === a\n                ? u(b.a, c.a) ? 0 >= x(c.b.a, b.a, c.a) : 0 <= x(b.b.a, c.a, b.a)\n                : 0 >= x(c.b.a, a, c.a);\n            if (c.b.a === a) return 0 <= x(b.b.a, a, b.a);\n            b = v(b.b.a, a, b.a);\n            a = v(c.b.a, a, c.a);\n            return b >= a;\n          }\n          function Q(a) {\n            a.a.i = null;\n            var b = a.e;\n            b.a.c = b.c;\n            b.c.a = b.a;\n            a.e = null;\n          }\n          function ja(a, b) {\n            I(a.a);\n            a.c = !1;\n            a.a = b;\n            b.i = a;\n          }\n          function ka(a) {\n            var b = a.a.a;\n            do a = R(a);\n            while (a.a.a === b);\n            a.c && ((b = L(S(a).a.b, a.a.e)), ja(a, b), (a = R(a)));\n            return a;\n          }\n          function la(a, b, c) {\n            var d = new ma();\n            d.a = c;\n            d.e = na(a.f, b.e, d);\n            return (c.i = d);\n          }\n          function oa(a, b) {\n            switch (a.s) {\n              case 100130:\n                return 0 !== (b & 1);\n              case 100131:\n                return 0 !== b;\n              case 100132:\n                return 0 < b;\n              case 100133:\n                return 0 > b;\n              case 100134:\n                return 2 <= b || -2 >= b;\n            }\n            return !1;\n          }\n          function pa(a) {\n            var b = a.a,\n              c = b.d;\n            c.c = a.d;\n            c.a = b;\n            Q(a);\n          }\n          function T(a, b, c) {\n            a = b;\n            for (b = b.a; a !== c; ) {\n              a.c = !1;\n              var d = S(a),\n                e = d.a;\n              if (e.a !== b.a) {\n                if (!d.c) {\n                  pa(a);\n                  break;\n                }\n                e = L(b.c.b, e.b);\n                ja(d, e);\n              }\n              b.c !== e && (E(J(e), e), E(b, e));\n              pa(a);\n              b = d.a;\n              a = d;\n            }\n            return b;\n          }\n          function U(a, b, c, d, e, f) {\n            var g = !0;\n            do la(a, b, c.b), (c = c.c);\n            while (c !== d);\n            for (null === e && (e = S(b).a.b.c); ; ) {\n              d = S(b);\n              c = d.a.b;\n              if (c.a !== e.a) break;\n              c.c !== e && (E(J(c), c), E(J(e), c));\n              d.f = b.f - c.f;\n              d.d = oa(a, d.f);\n              b.b = !0;\n              !g && qa(a, b) && (P(c, e), Q(b), I(e));\n              g = !1;\n              b = d;\n              e = c;\n            }\n            b.b = !0;\n            f && ra(a, b);\n          }\n          function sa(a, b, c, d, e) {\n            var f = [b.g[0], b.g[1], b.g[2]];\n            b.d = null;\n            b.d = a.o ? a.o(f, c, d, a.c) || null : null;\n            null === b.d && (e ? a.n || (V(a, 100156), (a.n = !0)) : (b.d = c[0]));\n          }\n          function ta(a, b, c) {\n            var d = [null, null, null, null];\n            d[0] = b.a.d;\n            d[1] = c.a.d;\n            sa(a, b.a, d, [0.5, 0.5, 0, 0], !1);\n            E(b, c);\n          }\n          function ua(a, b, c, d, e) {\n            var f = Math.abs(b.b - a.b) + Math.abs(b.a - a.a),\n              g = Math.abs(c.b - a.b) + Math.abs(c.a - a.a),\n              h = e + 1;\n            d[e] = 0.5 * g / (f + g);\n            d[h] = 0.5 * f / (f + g);\n            a.g[0] += d[e] * b.g[0] + d[h] * c.g[0];\n            a.g[1] += d[e] * b.g[1] + d[h] * c.g[1];\n            a.g[2] += d[e] * b.g[2] + d[h] * c.g[2];\n          }\n          function qa(a, b) {\n            var c = S(b),\n              d = b.a,\n              e = c.a;\n            if (u(d.a, e.a)) {\n              if (0 < x(e.b.a, d.a, e.a)) return !1;\n              if (!t(d.a, e.a)) K(e.b), E(d, J(e)), (b.b = c.b = !0);\n              else if (d.a !== e.a) {\n                var c = a.e,\n                  f = d.a.h;\n                if (0 <= f) {\n                  var c = c.b,\n                    g = c.d,\n                    h = c.e,\n                    k = c.c,\n                    l = k[f];\n                  g[l] = g[c.a];\n                  k[g[l]] = l;\n                  l <= --c.a &&\n                    (1 >= l ? W(c, l) : u(h[g[l >> 1]], h[g[l]]) ? W(c, l) : va(c, l));\n                  h[f] = null;\n                  k[f] = c.b;\n                  c.b = f;\n                } else\n                  for (c.c[-(f + 1)] = null; 0 < c.a && null === c.c[c.d[c.a - 1]]; ) --c.a;\n                ta(a, J(e), d);\n              }\n            } else {\n              if (0 > x(d.b.a, e.a, d.a)) return !1;\n              R(b).b = b.b = !0;\n              K(d.b);\n              E(J(e), d);\n            }\n            return !0;\n          }\n          function wa(a, b) {\n            var c = S(b),\n              d = b.a,\n              e = c.a,\n              f = d.a,\n              g = e.a,\n              h = d.b.a,\n              k = e.b.a,\n              l = new N();\n            x(h, a.a, f);\n            x(k, a.a, g);\n            if (f === g || Math.min(f.a, h.a) > Math.max(g.a, k.a)) return !1;\n            if (u(f, g)) {\n              if (0 < x(k, f, g)) return !1;\n            } else if (0 > x(h, g, f)) return !1;\n            var r = h,\n              p = f,\n              q = k,\n              y = g,\n              m,\n              w;\n            u(r, p) || ((m = r), (r = p), (p = m));\n            u(q, y) || ((m = q), (q = y), (y = m));\n            u(r, q) || ((m = r), (r = q), (q = m), (m = p), (p = y), (y = m));\n            u(q, p)\n              ? u(p, y)\n                ? ((m = v(r, q, p)),\n                  (w = v(q, p, y)),\n                  0 > m + w && ((m = -m), (w = -w)),\n                  (l.b = A(m, q.b, w, p.b)))\n                : ((m = x(r, q, p)),\n                  (w = -x(r, y, p)),\n                  0 > m + w && ((m = -m), (w = -w)),\n                  (l.b = A(m, q.b, w, y.b)))\n              : (l.b = (q.b + p.b) / 2);\n            z(r, p) || ((m = r), (r = p), (p = m));\n            z(q, y) || ((m = q), (q = y), (y = m));\n            z(r, q) || ((m = r), (r = q), (q = m), (m = p), (p = y), (y = m));\n            z(q, p)\n              ? z(p, y)\n                ? ((m = aa(r, q, p)),\n                  (w = aa(q, p, y)),\n                  0 > m + w && ((m = -m), (w = -w)),\n                  (l.a = A(m, q.a, w, p.a)))\n                : ((m = ba(r, q, p)),\n                  (w = -ba(r, y, p)),\n                  0 > m + w && ((m = -m), (w = -w)),\n                  (l.a = A(m, q.a, w, y.a)))\n              : (l.a = (q.a + p.a) / 2);\n            u(l, a.a) && ((l.b = a.a.b), (l.a = a.a.a));\n            r = u(f, g) ? f : g;\n            u(r, l) && ((l.b = r.b), (l.a = r.a));\n            if (t(l, f) || t(l, g)) return qa(a, b), !1;\n            if ((!t(h, a.a) && 0 <= x(h, a.a, l)) || (!t(k, a.a) && 0 >= x(k, a.a, l))) {\n              if (k === a.a)\n                return (\n                  K(d.b),\n                  E(e.b, d),\n                  (b = ka(b)),\n                  (d = S(b).a),\n                  T(a, S(b), c),\n                  U(a, b, J(d), d, d, !0),\n                  !0\n                );\n              if (h === a.a) {\n                K(e.b);\n                E(d.e, J(e));\n                f = c = b;\n                g = f.a.b.a;\n                do f = R(f);\n                while (f.a.b.a === g);\n                b = f;\n                f = S(b).a.b.c;\n                c.a = J(e);\n                e = T(a, c, null);\n                U(a, b, e.c, d.b.c, f, !0);\n                return !0;\n              }\n              0 <= x(h, a.a, l) &&\n                ((R(b).b = b.b = !0), K(d.b), (d.a.b = a.a.b), (d.a.a = a.a.a));\n              0 >= x(k, a.a, l) &&\n                ((b.b = c.b = !0), K(e.b), (e.a.b = a.a.b), (e.a.a = a.a.a));\n              return !1;\n            }\n            K(d.b);\n            K(e.b);\n            E(J(e), d);\n            d.a.b = l.b;\n            d.a.a = l.a;\n            d.a.h = xa(a.e, d.a);\n            d = d.a;\n            e = [0, 0, 0, 0];\n            l = [f.d, h.d, g.d, k.d];\n            d.g[0] = d.g[1] = d.g[2] = 0;\n            ua(d, f, h, e, 0);\n            ua(d, g, k, e, 2);\n            sa(a, d, l, e, !0);\n            R(b).b = b.b = c.b = !0;\n            return !1;\n          }\n          function ra(a, b) {\n            for (var c = S(b); ; ) {\n              for (; c.b; ) (b = c), (c = S(c));\n              if (!b.b && ((c = b), (b = R(b)), null === b || !b.b)) break;\n              b.b = !1;\n              var d = b.a,\n                e = c.a,\n                f;\n              if ((f = d.b.a !== e.b.a))\n                a: {\n                  f = b;\n                  var g = S(f),\n                    h = f.a,\n                    k = g.a,\n                    l = void 0;\n                  if (u(h.b.a, k.b.a)) {\n                    if (0 > x(h.b.a, k.b.a, h.a)) {\n                      f = !1;\n                      break a;\n                    }\n                    R(f).b = f.b = !0;\n                    l = K(h);\n                    E(k.b, l);\n                    l.d.c = f.d;\n                  } else {\n                    if (0 < x(k.b.a, h.b.a, k.a)) {\n                      f = !1;\n                      break a;\n                    }\n                    f.b = g.b = !0;\n                    l = K(k);\n                    E(h.e, k.b);\n                    l.b.d.c = f.d;\n                  }\n                  f = !0;\n                }\n              f &&\n                (c.c\n                  ? (Q(c), I(e), (c = S(b)), (e = c.a))\n                  : b.c && (Q(b), I(d), (b = R(c)), (d = b.a)));\n              if (d.a !== e.a)\n                if (d.b.a === e.b.a || b.c || c.c || (d.b.a !== a.a && e.b.a !== a.a))\n                  qa(a, b);\n                else if (wa(a, b)) break;\n              d.a === e.a && d.b.a === e.b.a && (P(e, d), Q(b), I(d), (b = R(c)));\n            }\n          }\n          function ya(a, b) {\n            a.a = b;\n            for (var c = b.c; null === c.i; )\n              if (((c = c.c), c === b.c)) {\n                var c = a,\n                  d = b,\n                  e = new ma();\n                e.a = d.c.b;\n                var f = c.f,\n                  g = f.a;\n                do g = g.a;\n                while (null !== g.b && !f.c(f.b, e, g.b));\n                var f = g.b,\n                  h = S(f),\n                  e = f.a,\n                  g = h.a;\n                if (0 === x(e.b.a, d, e.a))\n                  (e = f.a),\n                    t(e.a, d) ||\n                      t(e.b.a, d) ||\n                      (K(e.b), f.c && (I(e.c), (f.c = !1)), E(d.c, e), ya(c, d));\n                else {\n                  var k = u(g.b.a, e.b.a) ? f : h,\n                    h = void 0;\n                  f.d || k.c\n                    ? (k === f ? (h = L(d.c.b, e.e)) : (h = L(g.b.c.b, d.c).b),\n                      k.c\n                        ? ja(k, h)\n                        : ((e = c),\n                          (f = la(c, f, h)),\n                          (f.f = R(f).f + f.a.f),\n                          (f.d = oa(e, f.f))),\n                      ya(c, d))\n                    : U(c, f, d.c, d.c, null, !0);\n                }\n                return;\n              }\n            c = ka(c.i);\n            e = S(c);\n            f = e.a;\n            e = T(a, e, null);\n            if (e.c === f) {\n              var f = e,\n                e = f.c,\n                g = S(c),\n                h = c.a,\n                k = g.a,\n                l = !1;\n              h.b.a !== k.b.a && wa(a, c);\n              t(h.a, a.a) &&\n                (E(J(e), h), (c = ka(c)), (e = S(c).a), T(a, S(c), g), (l = !0));\n              t(k.a, a.a) && (E(f, J(k)), (f = T(a, g, null)), (l = !0));\n              l\n                ? U(a, c, f.c, e, e, !0)\n                : (u(k.a, h.a) ? (d = J(k)) : (d = h),\n                  (d = L(f.c.b, d)),\n                  U(a, c, d, d.c, d.c, !1),\n                  (d.b.i.c = !0),\n                  ra(a, c));\n            } else U(a, c, e.c, f, f, !0);\n          }\n          function za(a, b) {\n            var c = new ma(),\n              d = ea(a.b);\n            d.a.b = O;\n            d.a.a = b;\n            d.b.a.b = -O;\n            d.b.a.a = b;\n            a.a = d.b.a;\n            c.a = d;\n            c.f = 0;\n            c.d = !1;\n            c.c = !1;\n            c.h = !0;\n            c.b = !1;\n            d = a.f;\n            d = na(d, d.a, c);\n            c.e = d;\n          }\n          function Aa(a) {\n            this.a = new Ba();\n            this.b = a;\n            this.c = ia;\n          }\n          function na(a, b, c) {\n            do b = b.c;\n            while (null !== b.b && !a.c(a.b, b.b, c));\n            a = new Ba(c, b.a, b);\n            b.a.c = a;\n            return (b.a = a);\n          }\n          function Ba(a, b, c) {\n            this.b = a || null;\n            this.a = b || this;\n            this.c = c || this;\n          }\n          function X() {\n            this.d = Y;\n            this.p = this.b = this.q = null;\n            this.j = [0, 0, 0];\n            this.s = 100130;\n            this.n = !1;\n            this.o = this.a = this.e = this.f = null;\n            this.m = !1;\n            this.c = this.r = this.i = this.k = this.l = this.h = null;\n          }\n          var Y = 0;\n          n = X.prototype;\n          n.x = function() {\n            Z(this, Y);\n          };\n          n.B = function(a, b) {\n            switch (a) {\n              case 100142:\n                return;\n              case 100140:\n                switch (b) {\n                  case 100130:\n                  case 100131:\n                  case 100132:\n                  case 100133:\n                  case 100134:\n                    this.s = b;\n                    return;\n                }\n                break;\n              case 100141:\n                this.m = !!b;\n                return;\n              default:\n                V(this, 100900);\n                return;\n            }\n            V(this, 100901);\n          };\n          n.y = function(a) {\n            switch (a) {\n              case 100142:\n                return 0;\n              case 100140:\n                return this.s;\n              case 100141:\n                return this.m;\n              default:\n                V(this, 100900);\n            }\n            return !1;\n          };\n          n.A = function(a, b, c) {\n            this.j[0] = a;\n            this.j[1] = b;\n            this.j[2] = c;\n          };\n          n.z = function(a, b) {\n            var c = b ? b : null;\n            switch (a) {\n              case 100100:\n              case 100106:\n                this.h = c;\n                break;\n              case 100104:\n              case 100110:\n                this.l = c;\n                break;\n              case 100101:\n              case 100107:\n                this.k = c;\n                break;\n              case 100102:\n              case 100108:\n                this.i = c;\n                break;\n              case 100103:\n              case 100109:\n                this.p = c;\n                break;\n              case 100105:\n              case 100111:\n                this.o = c;\n                break;\n              case 100112:\n                this.r = c;\n                break;\n              default:\n                V(this, 100900);\n            }\n          };\n          n.C = function(a, b) {\n            var c = !1,\n              d = [0, 0, 0];\n            Z(this, 2);\n            for (var e = 0; 3 > e; ++e) {\n              var f = a[e];\n              -1e150 > f && ((f = -1e150), (c = !0));\n              1e150 < f && ((f = 1e150), (c = !0));\n              d[e] = f;\n            }\n            c && V(this, 100155);\n            c = this.q;\n            null === c ? ((c = ea(this.b)), E(c, c.b)) : (K(c), (c = c.e));\n            c.a.d = b;\n            c.a.g[0] = d[0];\n            c.a.g[1] = d[1];\n            c.a.g[2] = d[2];\n            c.f = 1;\n            c.b.f = -1;\n            this.q = c;\n          };\n          n.u = function(a) {\n            Z(this, Y);\n            this.d = 1;\n            this.b = new Ca();\n            this.c = a;\n          };\n          n.t = function() {\n            Z(this, 1);\n            this.d = 2;\n            this.q = null;\n          };\n          n.v = function() {\n            Z(this, 2);\n            this.d = 1;\n          };\n          n.w = function() {\n            Z(this, 1);\n            this.d = Y;\n            var a = this.j[0],\n              b = this.j[1],\n              c = this.j[2],\n              d = !1,\n              e = [a, b, c];\n            if (0 === a && 0 === b && 0 === c) {\n              for (\n                var b = [-2 * 1e150, -2 * 1e150, -2 * 1e150],\n                  f = [2 * 1e150, 2 * 1e150, 2 * 1e150],\n                  c = [],\n                  g = [],\n                  d = this.b.c,\n                  a = d.e;\n                a !== d;\n                a = a.e\n              )\n                for (var h = 0; 3 > h; ++h) {\n                  var k = a.g[h];\n                  k < f[h] && ((f[h] = k), (g[h] = a));\n                  k > b[h] && ((b[h] = k), (c[h] = a));\n                }\n              a = 0;\n              b[1] - f[1] > b[0] - f[0] && (a = 1);\n              b[2] - f[2] > b[a] - f[a] && (a = 2);\n              if (f[a] >= b[a]) (e[0] = 0), (e[1] = 0), (e[2] = 1);\n              else {\n                b = 0;\n                f = g[a];\n                c = c[a];\n                g = [0, 0, 0];\n                f = [f.g[0] - c.g[0], f.g[1] - c.g[1], f.g[2] - c.g[2]];\n                h = [0, 0, 0];\n                for (a = d.e; a !== d; a = a.e)\n                  (h[0] = a.g[0] - c.g[0]),\n                    (h[1] = a.g[1] - c.g[1]),\n                    (h[2] = a.g[2] - c.g[2]),\n                    (g[0] = f[1] * h[2] - f[2] * h[1]),\n                    (g[1] = f[2] * h[0] - f[0] * h[2]),\n                    (g[2] = f[0] * h[1] - f[1] * h[0]),\n                    (k = g[0] * g[0] + g[1] * g[1] + g[2] * g[2]),\n                    k > b && ((b = k), (e[0] = g[0]), (e[1] = g[1]), (e[2] = g[2]));\n                0 >= b && ((e[0] = e[1] = e[2] = 0), (e[ha(f)] = 1));\n              }\n              d = !0;\n            }\n            g = ha(e);\n            a = this.b.c;\n            b = (g + 1) % 3;\n            c = (g + 2) % 3;\n            g = 0 < e[g] ? 1 : -1;\n            for (e = a.e; e !== a; e = e.e) (e.b = e.g[b]), (e.a = g * e.g[c]);\n            if (d) {\n              e = 0;\n              d = this.b.a;\n              for (a = d.b; a !== d; a = a.b)\n                if (((b = a.a), !(0 >= b.f))) {\n                  do (e += (b.a.b - b.b.a.b) * (b.a.a + b.b.a.a)), (b = b.e);\n                  while (b !== a.a);\n                }\n              if (0 > e) for (e = this.b.c, d = e.e; d !== e; d = d.e) d.a = -d.a;\n            }\n            this.n = !1;\n            e = this.b.b;\n            for (a = e.h; a !== e; a = d)\n              if (\n                ((d = a.h),\n                (b = a.e),\n                t(a.a, a.b.a) && a.e.e !== a && (ta(this, b, a), I(a), (a = b), (b = a.e)),\n                b.e === a)\n              ) {\n                if (b !== a) {\n                  if (b === d || b === d.b) d = d.h;\n                  I(b);\n                }\n                if (a === d || a === d.b) d = d.h;\n                I(a);\n              }\n            this.e = e = new Da();\n            d = this.b.c;\n            for (a = d.e; a !== d; a = a.e) a.h = xa(e, a);\n            Ea(e);\n            this.f = new Aa(this);\n            za(this, -O);\n            for (za(this, O); null !== (e = Fa(this.e)); ) {\n              for (;;) {\n                a: if (((a = this.e), 0 === a.a)) d = Ga(a.b);\n                else if (\n                  ((d = a.c[a.d[a.a - 1]]), 0 !== a.b.a && ((a = Ga(a.b)), u(a, d)))\n                ) {\n                  d = a;\n                  break a;\n                }\n                if (null === d || !t(d, e)) break;\n                d = Fa(this.e);\n                ta(this, e.c, d.c);\n              }\n              ya(this, e);\n            }\n            this.a = this.f.a.a.b.a.a;\n            for (e = 0; null !== (d = this.f.a.a.b); ) d.h || ++e, Q(d);\n            this.f = null;\n            e = this.e;\n            e.b = null;\n            e.d = null;\n            this.e = e.c = null;\n            e = this.b;\n            for (a = e.a.b; a !== e.a; a = d)\n              (d = a.b), (a = a.a), a.e.e === a && (P(a.c, a), I(a));\n            if (!this.n) {\n              e = this.b;\n              if (this.m)\n                for (a = e.b.h; a !== e.b; a = d)\n                  (d = a.h), a.b.d.c !== a.d.c ? (a.f = a.d.c ? 1 : -1) : I(a);\n              else\n                for (a = e.a.b; a !== e.a; a = d)\n                  if (((d = a.b), a.c)) {\n                    for (a = a.a; u(a.b.a, a.a); a = a.c.b);\n                    for (; u(a.a, a.b.a); a = a.e);\n                    b = a.c.b;\n                    for (c = void 0; a.e !== b; )\n                      if (u(a.b.a, b.a)) {\n                        for (; b.e !== a && (ca(b.e) || 0 >= x(b.a, b.b.a, b.e.b.a)); )\n                          (c = L(b.e, b)), (b = c.b);\n                        b = b.c.b;\n                      } else {\n                        for (; b.e !== a && (da(a.c.b) || 0 <= x(a.b.a, a.a, a.c.b.a)); )\n                          (c = L(a, a.c.b)), (a = c.b);\n                        a = a.e;\n                      }\n                    for (; b.e.e !== a; ) (c = L(b.e, b)), (b = c.b);\n                  }\n              if (this.h || this.i || this.k || this.l)\n                if (this.m)\n                  for (e = this.b, d = e.a.b; d !== e.a; d = d.b) {\n                    if (d.c) {\n                      this.h && this.h(2, this.c);\n                      a = d.a;\n                      do this.k && this.k(a.a.d, this.c), (a = a.e);\n                      while (a !== d.a);\n                      this.i && this.i(this.c);\n                    }\n                  }\n                else {\n                  e = this.b;\n                  d = !!this.l;\n                  a = !1;\n                  b = -1;\n                  for (c = e.a.d; c !== e.a; c = c.d)\n                    if (c.c) {\n                      a || (this.h && this.h(4, this.c), (a = !0));\n                      g = c.a;\n                      do\n                        d &&\n                          ((f = g.b.d.c ? 0 : 1),\n                          b !== f && ((b = f), this.l && this.l(!!b, this.c))),\n                          this.k && this.k(g.a.d, this.c),\n                          (g = g.e);\n                      while (g !== c.a);\n                    }\n                  a && this.i && this.i(this.c);\n                }\n              if (this.r) {\n                e = this.b;\n                for (a = e.a.b; a !== e.a; a = d)\n                  if (((d = a.b), !a.c)) {\n                    b = a.a;\n                    c = b.e;\n                    g = void 0;\n                    do\n                      (g = c),\n                        (c = g.e),\n                        (g.d = null),\n                        null === g.b.d &&\n                          (g.c === g ? F(g.a, null) : ((g.a.c = g.c), H(g, J(g))),\n                          (f = g.b),\n                          f.c === f ? F(f.a, null) : ((f.a.c = f.c), H(f, J(f))),\n                          fa(g));\n                    while (g !== b);\n                    b = a.d;\n                    a = a.b;\n                    a.d = b;\n                    b.b = a;\n                  }\n                this.r(this.b);\n                this.c = this.b = null;\n                return;\n              }\n            }\n            this.b = this.c = null;\n          };\n          function Z(a, b) {\n            if (a.d !== b)\n              for (; a.d !== b; )\n                if (a.d < b)\n                  switch (a.d) {\n                    case Y:\n                      V(a, 100151);\n                      a.u(null);\n                      break;\n                    case 1:\n                      V(a, 100152), a.t();\n                  }\n                else\n                  switch (a.d) {\n                    case 2:\n                      V(a, 100154);\n                      a.v();\n                      break;\n                    case 1:\n                      V(a, 100153), a.w();\n                  }\n          }\n          function V(a, b) {\n            a.p && a.p(b, a.c);\n          }\n          function ga(a, b) {\n            this.b = a || this;\n            this.d = b || this;\n            this.a = null;\n            this.c = !1;\n          }\n          function M() {\n            this.h = this;\n            this.i = this.d = this.a = this.e = this.c = this.b = null;\n            this.f = 0;\n          }\n          function J(a) {\n            return a.b.e;\n          }\n          function Ca() {\n            this.c = new N();\n            this.a = new ga();\n            this.b = new M();\n            this.d = new M();\n            this.b.b = this.d;\n            this.d.b = this.b;\n          }\n          function N(a, b) {\n            this.e = a || this;\n            this.f = b || this;\n            this.d = this.c = null;\n            this.g = [0, 0, 0];\n            this.h = this.a = this.b = 0;\n          }\n          function Da() {\n            this.c = [];\n            this.d = null;\n            this.a = 0;\n            this.e = !1;\n            this.b = new Ha();\n          }\n          function Ea(a) {\n            a.d = [];\n            for (var b = 0; b < a.a; b++) a.d[b] = b;\n            a.d.sort(\n              (function(a) {\n                return function(b, e) {\n                  return u(a[b], a[e]) ? 1 : -1;\n                };\n              })(a.c)\n            );\n            a.e = !0;\n            Ia(a.b);\n          }\n          function xa(a, b) {\n            if (a.e) {\n              var c = a.b,\n                d = ++c.a;\n              2 * d > c.f && ((c.f *= 2), (c.c = Ja(c.c, c.f + 1)));\n              var e;\n              0 === c.b ? (e = d) : ((e = c.b), (c.b = c.c[c.b]));\n              c.e[e] = b;\n              c.c[e] = d;\n              c.d[d] = e;\n              c.h && va(c, d);\n              return e;\n            }\n            c = a.a++;\n            a.c[c] = b;\n            return -(c + 1);\n          }\n          function Fa(a) {\n            if (0 === a.a) return Ka(a.b);\n            var b = a.c[a.d[a.a - 1]];\n            if (0 !== a.b.a && u(Ga(a.b), b)) return Ka(a.b);\n            do --a.a;\n            while (0 < a.a && null === a.c[a.d[a.a - 1]]);\n            return b;\n          }\n          function Ha() {\n            this.d = Ja([0], 33);\n            this.e = [null, null];\n            this.c = [0, 0];\n            this.a = 0;\n            this.f = 32;\n            this.b = 0;\n            this.h = !1;\n            this.d[1] = 1;\n          }\n          function Ja(a, b) {\n            for (var c = Array(b), d = 0; d < a.length; d++) c[d] = a[d];\n            for (; d < b; d++) c[d] = 0;\n            return c;\n          }\n          function Ia(a) {\n            for (var b = a.a; 1 <= b; --b) W(a, b);\n            a.h = !0;\n          }\n          function Ga(a) {\n            return a.e[a.d[1]];\n          }\n          function Ka(a) {\n            var b = a.d,\n              c = a.e,\n              d = a.c,\n              e = b[1],\n              f = c[e];\n            0 < a.a &&\n              ((b[1] = b[a.a]),\n              (d[b[1]] = 1),\n              (c[e] = null),\n              (d[e] = a.b),\n              (a.b = e),\n              0 < --a.a && W(a, 1));\n            return f;\n          }\n          function W(a, b) {\n            for (var c = a.d, d = a.e, e = a.c, f = b, g = c[f]; ; ) {\n              var h = f << 1;\n              h < a.a && u(d[c[h + 1]], d[c[h]]) && (h += 1);\n              var k = c[h];\n              if (h > a.a || u(d[g], d[k])) {\n                c[f] = g;\n                e[g] = f;\n                break;\n              }\n              c[f] = k;\n              e[k] = f;\n              f = h;\n            }\n          }\n          function va(a, b) {\n            for (var c = a.d, d = a.e, e = a.c, f = b, g = c[f]; ; ) {\n              var h = f >> 1,\n                k = c[h];\n              if (0 === h || u(d[k], d[g])) {\n                c[f] = g;\n                e[g] = f;\n                break;\n              }\n              c[f] = k;\n              e[k] = f;\n              f = h;\n            }\n          }\n          function ma() {\n            this.e = this.a = null;\n            this.f = 0;\n            this.c = this.b = this.h = this.d = !1;\n          }\n          function S(a) {\n            return a.e.c.b;\n          }\n          function R(a) {\n            return a.e.a.b;\n          }\n          this.libtess = {\n            GluTesselator: X,\n            windingRule: {\n              GLU_TESS_WINDING_ODD: 100130,\n              GLU_TESS_WINDING_NONZERO: 100131,\n              GLU_TESS_WINDING_POSITIVE: 100132,\n              GLU_TESS_WINDING_NEGATIVE: 100133,\n              GLU_TESS_WINDING_ABS_GEQ_TWO: 100134\n            },\n            primitiveType: {\n              GL_LINE_LOOP: 2,\n              GL_TRIANGLES: 4,\n              GL_TRIANGLE_STRIP: 5,\n              GL_TRIANGLE_FAN: 6\n            },\n            errorType: {\n              GLU_TESS_MISSING_BEGIN_POLYGON: 100151,\n              GLU_TESS_MISSING_END_POLYGON: 100153,\n              GLU_TESS_MISSING_BEGIN_CONTOUR: 100152,\n              GLU_TESS_MISSING_END_CONTOUR: 100154,\n              GLU_TESS_COORD_TOO_LARGE: 100155,\n              GLU_TESS_NEED_COMBINE_CALLBACK: 100156\n            },\n            gluEnum: {\n              GLU_TESS_MESH: 100112,\n              GLU_TESS_TOLERANCE: 100142,\n              GLU_TESS_WINDING_RULE: 100140,\n              GLU_TESS_BOUNDARY_ONLY: 100141,\n              GLU_INVALID_ENUM: 100900,\n              GLU_INVALID_VALUE: 100901,\n              GLU_TESS_BEGIN: 100100,\n              GLU_TESS_VERTEX: 100101,\n              GLU_TESS_END: 100102,\n              GLU_TESS_ERROR: 100103,\n              GLU_TESS_EDGE_FLAG: 100104,\n              GLU_TESS_COMBINE: 100105,\n              GLU_TESS_BEGIN_DATA: 100106,\n              GLU_TESS_VERTEX_DATA: 100107,\n              GLU_TESS_END_DATA: 100108,\n              GLU_TESS_ERROR_DATA: 100109,\n              GLU_TESS_EDGE_FLAG_DATA: 100110,\n              GLU_TESS_COMBINE_DATA: 100111\n            }\n          };\n          X.prototype.gluDeleteTess = X.prototype.x;\n          X.prototype.gluTessProperty = X.prototype.B;\n          X.prototype.gluGetTessProperty = X.prototype.y;\n          X.prototype.gluTessNormal = X.prototype.A;\n          X.prototype.gluTessCallback = X.prototype.z;\n          X.prototype.gluTessVertex = X.prototype.C;\n          X.prototype.gluTessBeginPolygon = X.prototype.u;\n          X.prototype.gluTessBeginContour = X.prototype.t;\n          X.prototype.gluTessEndContour = X.prototype.v;\n          X.prototype.gluTessEndPolygon = X.prototype.w;\n          if (typeof module !== 'undefined') {\n            module.exports = this.libtess;\n          }\n        },\n        {}\n      ],\n      33: [\n        function(_dereq_, module, exports) {\n          // (c) Dean McNamee <dean@gmail.com>, 2013.\n          //\n          // https://github.com/deanm/omggif\n          //\n          // Permission is hereby granted, free of charge, to any person obtaining a copy\n          // of this software and associated documentation files (the \"Software\"), to\n          // deal in the Software without restriction, including without limitation the\n          // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n          // sell copies of the Software, and to permit persons to whom the Software is\n          // furnished to do so, subject to the following conditions:\n          //\n          // The above copyright notice and this permission notice shall be included in\n          // all copies or substantial portions of the Software.\n          //\n          // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n          // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n          // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n          // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n          // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n          // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n          // IN THE SOFTWARE.\n          //\n          // omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n          // including animation and compression.  It does not rely on any specific\n          // underlying system, so should run in the browser, Node, or Plask.\n\n          'use strict';\n\n          function GifWriter(buf, width, height, gopts) {\n            var p = 0;\n\n            var gopts = gopts === undefined ? {} : gopts;\n            var loop_count = gopts.loop === undefined ? null : gopts.loop;\n            var global_palette = gopts.palette === undefined ? null : gopts.palette;\n\n            if (width <= 0 || height <= 0 || width > 65535 || height > 65535)\n              throw new Error('Width/Height invalid.');\n\n            function check_palette_and_num_colors(palette) {\n              var num_colors = palette.length;\n              if (num_colors < 2 || num_colors > 256 || num_colors & (num_colors - 1)) {\n                throw new Error(\n                  'Invalid code/color length, must be power of 2 and 2 .. 256.'\n                );\n              }\n              return num_colors;\n            }\n\n            // - Header.\n            buf[p++] = 0x47;\n            buf[p++] = 0x49;\n            buf[p++] = 0x46; // GIF\n            buf[p++] = 0x38;\n            buf[p++] = 0x39;\n            buf[p++] = 0x61; // 89a\n\n            // Handling of Global Color Table (palette) and background index.\n            var gp_num_colors_pow2 = 0;\n            var background = 0;\n            if (global_palette !== null) {\n              var gp_num_colors = check_palette_and_num_colors(global_palette);\n              while ((gp_num_colors >>= 1)) ++gp_num_colors_pow2;\n              gp_num_colors = 1 << gp_num_colors_pow2;\n              --gp_num_colors_pow2;\n              if (gopts.background !== undefined) {\n                background = gopts.background;\n                if (background >= gp_num_colors)\n                  throw new Error('Background index out of range.');\n                // The GIF spec states that a background index of 0 should be ignored, so\n                // this is probably a mistake and you really want to set it to another\n                // slot in the palette.  But actually in the end most browsers, etc end\n                // up ignoring this almost completely (including for dispose background).\n                if (background === 0)\n                  throw new Error('Background index explicitly passed as 0.');\n              }\n            }\n\n            // - Logical Screen Descriptor.\n            // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n            buf[p++] = width & 0xff;\n            buf[p++] = (width >> 8) & 0xff;\n            buf[p++] = height & 0xff;\n            buf[p++] = (height >> 8) & 0xff;\n            // NOTE: Indicates 0-bpp original color resolution (unused?).\n            buf[p++] =\n              (global_palette !== null ? 0x80 : 0) | gp_num_colors_pow2; // Global Color Table Flag. // NOTE: No sort flag (unused?).\n            buf[p++] = background; // Background Color Index.\n            buf[p++] = 0; // Pixel aspect ratio (unused?).\n\n            // - Global Color Table\n            if (global_palette !== null) {\n              for (var i = 0, il = global_palette.length; i < il; ++i) {\n                var rgb = global_palette[i];\n                buf[p++] = (rgb >> 16) & 0xff;\n                buf[p++] = (rgb >> 8) & 0xff;\n                buf[p++] = rgb & 0xff;\n              }\n            }\n\n            if (loop_count !== null) {\n              // Netscape block for looping.\n              if (loop_count < 0 || loop_count > 65535)\n                throw new Error('Loop count invalid.');\n              // Extension code, label, and length.\n              buf[p++] = 0x21;\n              buf[p++] = 0xff;\n              buf[p++] = 0x0b;\n              // NETSCAPE2.0\n              buf[p++] = 0x4e;\n              buf[p++] = 0x45;\n              buf[p++] = 0x54;\n              buf[p++] = 0x53;\n              buf[p++] = 0x43;\n              buf[p++] = 0x41;\n              buf[p++] = 0x50;\n              buf[p++] = 0x45;\n              buf[p++] = 0x32;\n              buf[p++] = 0x2e;\n              buf[p++] = 0x30;\n              // Sub-block\n              buf[p++] = 0x03;\n              buf[p++] = 0x01;\n              buf[p++] = loop_count & 0xff;\n              buf[p++] = (loop_count >> 8) & 0xff;\n              buf[p++] = 0x00; // Terminator.\n            }\n\n            var ended = false;\n\n            this.addFrame = function(x, y, w, h, indexed_pixels, opts) {\n              if (ended === true) {\n                --p;\n                ended = false;\n              } // Un-end.\n\n              opts = opts === undefined ? {} : opts;\n\n              // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n              // canvas width/height, I imagine?\n              if (x < 0 || y < 0 || x > 65535 || y > 65535) throw new Error('x/y invalid.');\n\n              if (w <= 0 || h <= 0 || w > 65535 || h > 65535)\n                throw new Error('Width/Height invalid.');\n\n              if (indexed_pixels.length < w * h)\n                throw new Error('Not enough pixels for the frame size.');\n\n              var using_local_palette = true;\n              var palette = opts.palette;\n              if (palette === undefined || palette === null) {\n                using_local_palette = false;\n                palette = global_palette;\n              }\n\n              if (palette === undefined || palette === null)\n                throw new Error('Must supply either a local or global palette.');\n\n              var num_colors = check_palette_and_num_colors(palette);\n\n              // Compute the min_code_size (power of 2), destroying num_colors.\n              var min_code_size = 0;\n              while ((num_colors >>= 1)) ++min_code_size;\n              num_colors = 1 << min_code_size; // Now we can easily get it back.\n\n              var delay = opts.delay === undefined ? 0 : opts.delay;\n\n              // From the spec:\n              //     0 -   No disposal specified. The decoder is\n              //           not required to take any action.\n              //     1 -   Do not dispose. The graphic is to be left\n              //           in place.\n              //     2 -   Restore to background color. The area used by the\n              //           graphic must be restored to the background color.\n              //     3 -   Restore to previous. The decoder is required to\n              //           restore the area overwritten by the graphic with\n              //           what was there prior to rendering the graphic.\n              //  4-7 -    To be defined.\n              // NOTE(deanm): Dispose background doesn't really work, apparently most\n              // browsers ignore the background palette index and clear to transparency.\n              var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n              if (disposal < 0 || disposal > 3)\n                // 4-7 is reserved.\n                throw new Error('Disposal out of range.');\n\n              var use_transparency = false;\n              var transparent_index = 0;\n              if (opts.transparent !== undefined && opts.transparent !== null) {\n                use_transparency = true;\n                transparent_index = opts.transparent;\n                if (transparent_index < 0 || transparent_index >= num_colors)\n                  throw new Error('Transparent color index.');\n              }\n\n              if (disposal !== 0 || use_transparency || delay !== 0) {\n                // - Graphics Control Extension\n                buf[p++] = 0x21;\n                buf[p++] = 0xf9; // Extension / Label.\n                buf[p++] = 4; // Byte size.\n\n                buf[p++] = (disposal << 2) | (use_transparency === true ? 1 : 0);\n                buf[p++] = delay & 0xff;\n                buf[p++] = (delay >> 8) & 0xff;\n                buf[p++] = transparent_index; // Transparent color index.\n                buf[p++] = 0; // Block Terminator.\n              }\n\n              // - Image Descriptor\n              buf[p++] = 0x2c; // Image Seperator.\n              buf[p++] = x & 0xff;\n              buf[p++] = (x >> 8) & 0xff; // Left.\n              buf[p++] = y & 0xff;\n              buf[p++] = (y >> 8) & 0xff; // Top.\n              buf[p++] = w & 0xff;\n              buf[p++] = (w >> 8) & 0xff;\n              buf[p++] = h & 0xff;\n              buf[p++] = (h >> 8) & 0xff;\n              // NOTE: No sort flag (unused?).\n              // TODO(deanm): Support interlace.\n              buf[p++] = using_local_palette === true ? 0x80 | (min_code_size - 1) : 0;\n\n              // - Local Color Table\n              if (using_local_palette === true) {\n                for (var i = 0, il = palette.length; i < il; ++i) {\n                  var rgb = palette[i];\n                  buf[p++] = (rgb >> 16) & 0xff;\n                  buf[p++] = (rgb >> 8) & 0xff;\n                  buf[p++] = rgb & 0xff;\n                }\n              }\n\n              p = GifWriterOutputLZWCodeStream(\n                buf,\n                p,\n                min_code_size < 2 ? 2 : min_code_size,\n                indexed_pixels\n              );\n\n              return p;\n            };\n\n            this.end = function() {\n              if (ended === false) {\n                buf[p++] = 0x3b; // Trailer.\n                ended = true;\n              }\n              return p;\n            };\n\n            this.getOutputBuffer = function() {\n              return buf;\n            };\n            this.setOutputBuffer = function(v) {\n              buf = v;\n            };\n            this.getOutputBufferPosition = function() {\n              return p;\n            };\n            this.setOutputBufferPosition = function(v) {\n              p = v;\n            };\n          }\n\n          // Main compression routine, palette indexes -> LZW code stream.\n          // |index_stream| must have at least one entry.\n          function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n            buf[p++] = min_code_size;\n            var cur_subblock = p++; // Pointing at the length field.\n\n            var clear_code = 1 << min_code_size;\n            var code_mask = clear_code - 1;\n            var eoi_code = clear_code + 1;\n            var next_code = eoi_code + 1;\n\n            var cur_code_size = min_code_size + 1; // Number of bits per code.\n            var cur_shift = 0;\n            // We have at most 12-bit codes, so we should have to hold a max of 19\n            // bits here (and then we would write out).\n            var cur = 0;\n\n            function emit_bytes_to_buffer(bit_block_size) {\n              while (cur_shift >= bit_block_size) {\n                buf[p++] = cur & 0xff;\n                cur >>= 8;\n                cur_shift -= 8;\n                if (p === cur_subblock + 256) {\n                  // Finished a subblock.\n                  buf[cur_subblock] = 255;\n                  cur_subblock = p++;\n                }\n              }\n            }\n\n            function emit_code(c) {\n              cur |= c << cur_shift;\n              cur_shift += cur_code_size;\n              emit_bytes_to_buffer(8);\n            }\n\n            // I am not an expert on the topic, and I don't want to write a thesis.\n            // However, it is good to outline here the basic algorithm and the few data\n            // structures and optimizations here that make this implementation fast.\n            // The basic idea behind LZW is to build a table of previously seen runs\n            // addressed by a short id (herein called output code).  All data is\n            // referenced by a code, which represents one or more values from the\n            // original input stream.  All input bytes can be referenced as the same\n            // value as an output code.  So if you didn't want any compression, you\n            // could more or less just output the original bytes as codes (there are\n            // some details to this, but it is the idea).  In order to achieve\n            // compression, values greater then the input range (codes can be up to\n            // 12-bit while input only 8-bit) represent a sequence of previously seen\n            // inputs.  The decompressor is able to build the same mapping while\n            // decoding, so there is always a shared common knowledge between the\n            // encoding and decoder, which is also important for \"timing\" aspects like\n            // how to handle variable bit width code encoding.\n            //\n            // One obvious but very important consequence of the table system is there\n            // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n            // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n            // can be used for an effecient lookup strategy for the code mapping.  We\n            // need to know if a run has been seen before, and be able to map that run\n            // to the output code.  Since we start with known unique ids (input bytes),\n            // and then from those build more unique ids (table entries), we can\n            // continue this chain (almost like a linked list) to always have small\n            // integer values that represent the current byte chains in the encoder.\n            // This means instead of tracking the input bytes (AAAABCD) to know our\n            // current state, we can track the table entry for AAAABC (it is guaranteed\n            // to exist by the nature of the algorithm) and the next character D.\n            // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n            // unique.  This allows us to create a simple lookup key for mapping input\n            // sequences to codes (table indices) without having to store or search\n            // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n            // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n            // key.  This leads to a integer value at most 20-bits, which can always\n            // fit in an SMI value and be used as a fast sparse array / object key.\n\n            // Output code for the current contents of the index buffer.\n            var ib_code = index_stream[0] & code_mask; // Load first input index.\n            var code_table = {}; // Key'd on our 20-bit \"tuple\".\n\n            emit_code(clear_code); // Spec says first code should be a clear code.\n\n            // First index already loaded, process the rest of the stream.\n            for (var i = 1, il = index_stream.length; i < il; ++i) {\n              var k = index_stream[i] & code_mask;\n              var cur_key = (ib_code << 8) | k; // (prev, k) unique tuple.\n              var cur_code = code_table[cur_key]; // buffer + k.\n\n              // Check if we have to create a new code table entry.\n              if (cur_code === undefined) {\n                // We don't have buffer + k.\n                // Emit index buffer (without k).\n                // This is an inline version of emit_code, because this is the core\n                // writing routine of the compressor (and V8 cannot inline emit_code\n                // because it is a closure here in a different context).  Additionally\n                // we can call emit_byte_to_buffer less often, because we can have\n                // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n                // be 12-bits, so can safely have 18-bits there without overflow.\n                // emit_code(ib_code);\n                cur |= ib_code << cur_shift;\n                cur_shift += cur_code_size;\n                while (cur_shift >= 8) {\n                  buf[p++] = cur & 0xff;\n                  cur >>= 8;\n                  cur_shift -= 8;\n                  if (p === cur_subblock + 256) {\n                    // Finished a subblock.\n                    buf[cur_subblock] = 255;\n                    cur_subblock = p++;\n                  }\n                }\n\n                if (next_code === 4096) {\n                  // Table full, need a clear.\n                  emit_code(clear_code);\n                  next_code = eoi_code + 1;\n                  cur_code_size = min_code_size + 1;\n                  code_table = {};\n                } else {\n                  // Table not full, insert a new entry.\n                  // Increase our variable bit code sizes if necessary.  This is a bit\n                  // tricky as it is based on \"timing\" between the encoding and\n                  // decoder.  From the encoders perspective this should happen after\n                  // we've already emitted the index buffer and are about to create the\n                  // first table entry that would overflow our current code bit size.\n                  if (next_code >= 1 << cur_code_size) ++cur_code_size;\n                  code_table[cur_key] = next_code++; // Insert into code table.\n                }\n\n                ib_code = k; // Index buffer to single input k.\n              } else {\n                ib_code = cur_code; // Index buffer to sequence in code table.\n              }\n            }\n\n            emit_code(ib_code); // There will still be something in the index buffer.\n            emit_code(eoi_code); // End Of Information.\n\n            // Flush / finalize the sub-blocks stream to the buffer.\n            emit_bytes_to_buffer(1);\n\n            // Finish the sub-blocks, writing out any unfinished lengths and\n            // terminating with a sub-block of length 0.  If we have already started\n            // but not yet used a sub-block it can just become the terminator.\n            if (cur_subblock + 1 === p) {\n              // Started but unused.\n              buf[cur_subblock] = 0;\n            } else {\n              // Started and used, write length and additional terminator block.\n              buf[cur_subblock] = p - cur_subblock - 1;\n              buf[p++] = 0;\n            }\n            return p;\n          }\n\n          function GifReader(buf) {\n            var p = 0;\n\n            // - Header (GIF87a or GIF89a).\n            if (\n              buf[p++] !== 0x47 ||\n              buf[p++] !== 0x49 ||\n              buf[p++] !== 0x46 ||\n              buf[p++] !== 0x38 ||\n              ((buf[p++] + 1) & 0xfd) !== 0x38 ||\n              buf[p++] !== 0x61\n            ) {\n              throw new Error('Invalid GIF 87a/89a header.');\n            }\n\n            // - Logical Screen Descriptor.\n            var width = buf[p++] | (buf[p++] << 8);\n            var height = buf[p++] | (buf[p++] << 8);\n            var pf0 = buf[p++]; // <Packed Fields>.\n            var global_palette_flag = pf0 >> 7;\n            var num_global_colors_pow2 = pf0 & 0x7;\n            var num_global_colors = 1 << (num_global_colors_pow2 + 1);\n            var background = buf[p++];\n            buf[p++]; // Pixel aspect ratio (unused?).\n\n            var global_palette_offset = null;\n            var global_palette_size = null;\n\n            if (global_palette_flag) {\n              global_palette_offset = p;\n              global_palette_size = num_global_colors;\n              p += num_global_colors * 3; // Seek past palette.\n            }\n\n            var no_eof = true;\n\n            var frames = [];\n\n            var delay = 0;\n            var transparent_index = null;\n            var disposal = 0; // 0 - No disposal specified.\n            var loop_count = null;\n\n            this.width = width;\n            this.height = height;\n\n            while (no_eof && p < buf.length) {\n              switch (buf[p++]) {\n                case 0x21: // Graphics Control Extension Block\n                  switch (buf[p++]) {\n                    case 0xff: // Application specific block\n                      // Try if it's a Netscape block (with animation loop counter).\n                      if (\n                        buf[p] !== 0x0b || // 21 FF already read, check block size.\n                        // NETSCAPE2.0\n                        (buf[p + 1] == 0x4e &&\n                          buf[p + 2] == 0x45 &&\n                          buf[p + 3] == 0x54 &&\n                          buf[p + 4] == 0x53 &&\n                          buf[p + 5] == 0x43 &&\n                          buf[p + 6] == 0x41 &&\n                          buf[p + 7] == 0x50 &&\n                          buf[p + 8] == 0x45 &&\n                          buf[p + 9] == 0x32 &&\n                          buf[p + 10] == 0x2e &&\n                          buf[p + 11] == 0x30 &&\n                          // Sub-block\n                          buf[p + 12] == 0x03 &&\n                          buf[p + 13] == 0x01 &&\n                          buf[p + 16] == 0)\n                      ) {\n                        p += 14;\n                        loop_count = buf[p++] | (buf[p++] << 8);\n                        p++; // Skip terminator.\n                      } else {\n                        // We don't know what it is, just try to get past it.\n                        p += 12;\n                        while (true) {\n                          // Seek through subblocks.\n                          var block_size = buf[p++];\n                          // Bad block size (ex: undefined from an out of bounds read).\n                          if (!(block_size >= 0)) throw Error('Invalid block size');\n                          if (block_size === 0) break; // 0 size is terminator\n                          p += block_size;\n                        }\n                      }\n                      break;\n\n                    case 0xf9: // Graphics Control Extension\n                      if (buf[p++] !== 0x4 || buf[p + 4] !== 0)\n                        throw new Error('Invalid graphics extension block.');\n                      var pf1 = buf[p++];\n                      delay = buf[p++] | (buf[p++] << 8);\n                      transparent_index = buf[p++];\n                      if ((pf1 & 1) === 0) transparent_index = null;\n                      disposal = (pf1 >> 2) & 0x7;\n                      p++; // Skip terminator.\n                      break;\n\n                    case 0xfe: // Comment Extension.\n                      while (true) {\n                        // Seek through subblocks.\n                        var block_size = buf[p++];\n                        // Bad block size (ex: undefined from an out of bounds read).\n                        if (!(block_size >= 0)) throw Error('Invalid block size');\n                        if (block_size === 0) break; // 0 size is terminator\n                        // console.log(buf.slice(p, p+block_size).toString('ascii'));\n                        p += block_size;\n                      }\n                      break;\n\n                    default:\n                      throw new Error(\n                        'Unknown graphic control label: 0x' + buf[p - 1].toString(16)\n                      );\n                  }\n                  break;\n\n                case 0x2c: // Image Descriptor.\n                  var x = buf[p++] | (buf[p++] << 8);\n                  var y = buf[p++] | (buf[p++] << 8);\n                  var w = buf[p++] | (buf[p++] << 8);\n                  var h = buf[p++] | (buf[p++] << 8);\n                  var pf2 = buf[p++];\n                  var local_palette_flag = pf2 >> 7;\n                  var interlace_flag = (pf2 >> 6) & 1;\n                  var num_local_colors_pow2 = pf2 & 0x7;\n                  var num_local_colors = 1 << (num_local_colors_pow2 + 1);\n                  var palette_offset = global_palette_offset;\n                  var palette_size = global_palette_size;\n                  var has_local_palette = false;\n                  if (local_palette_flag) {\n                    var has_local_palette = true;\n                    palette_offset = p; // Override with local palette.\n                    palette_size = num_local_colors;\n                    p += num_local_colors * 3; // Seek past palette.\n                  }\n\n                  var data_offset = p;\n\n                  p++; // codesize\n                  while (true) {\n                    var block_size = buf[p++];\n                    // Bad block size (ex: undefined from an out of bounds read).\n                    if (!(block_size >= 0)) throw Error('Invalid block size');\n                    if (block_size === 0) break; // 0 size is terminator\n                    p += block_size;\n                  }\n\n                  frames.push({\n                    x: x,\n                    y: y,\n                    width: w,\n                    height: h,\n                    has_local_palette: has_local_palette,\n                    palette_offset: palette_offset,\n                    palette_size: palette_size,\n                    data_offset: data_offset,\n                    data_length: p - data_offset,\n                    transparent_index: transparent_index,\n                    interlaced: !!interlace_flag,\n                    delay: delay,\n                    disposal: disposal\n                  });\n                  break;\n\n                case 0x3b: // Trailer Marker (end of file).\n                  no_eof = false;\n                  break;\n\n                default:\n                  throw new Error('Unknown gif block: 0x' + buf[p - 1].toString(16));\n                  break;\n              }\n            }\n\n            this.numFrames = function() {\n              return frames.length;\n            };\n\n            this.loopCount = function() {\n              return loop_count;\n            };\n\n            this.frameInfo = function(frame_num) {\n              if (frame_num < 0 || frame_num >= frames.length)\n                throw new Error('Frame index out of range.');\n              return frames[frame_num];\n            };\n\n            this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {\n              var frame = this.frameInfo(frame_num);\n              var num_pixels = frame.width * frame.height;\n              var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.\n              GifReaderLZWOutputIndexStream(\n                buf,\n                frame.data_offset,\n                index_stream,\n                num_pixels\n              );\n              var palette_offset = frame.palette_offset;\n\n              // NOTE(deanm): It seems to be much faster to compare index to 256 than\n              // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n              // the profile, not sure if it's related to using a Uint8Array.\n              var trans = frame.transparent_index;\n              if (trans === null) trans = 256;\n\n              // We are possibly just blitting to a portion of the entire frame.\n              // That is a subrect within the framerect, so the additional pixels\n              // must be skipped over after we finished a scanline.\n              var framewidth = frame.width;\n              var framestride = width - framewidth;\n              var xleft = framewidth; // Number of subrect pixels left in scanline.\n\n              // Output indicies of the top left and bottom right corners of the subrect.\n              var opbeg = (frame.y * width + frame.x) * 4;\n              var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n              var op = opbeg;\n\n              var scanstride = framestride * 4;\n\n              // Use scanstride to skip past the rows when interlacing.  This is skipping\n              // 7 rows for the first two passes, then 3 then 1.\n              if (frame.interlaced === true) {\n                scanstride += width * 4 * 7; // Pass 1.\n              }\n\n              var interlaceskip = 8; // Tracking the row interval in the current pass.\n\n              for (var i = 0, il = index_stream.length; i < il; ++i) {\n                var index = index_stream[i];\n\n                if (xleft === 0) {\n                  // Beginning of new scan line\n                  op += scanstride;\n                  xleft = framewidth;\n                  if (op >= opend) {\n                    // Catch the wrap to switch passes when interlacing.\n                    scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);\n                    // interlaceskip / 2 * 4 is interlaceskip << 1.\n                    op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n                    interlaceskip >>= 1;\n                  }\n                }\n\n                if (index === trans) {\n                  op += 4;\n                } else {\n                  var r = buf[palette_offset + index * 3];\n                  var g = buf[palette_offset + index * 3 + 1];\n                  var b = buf[palette_offset + index * 3 + 2];\n                  pixels[op++] = b;\n                  pixels[op++] = g;\n                  pixels[op++] = r;\n                  pixels[op++] = 255;\n                }\n                --xleft;\n              }\n            };\n\n            // I will go to copy and paste hell one day...\n            this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {\n              var frame = this.frameInfo(frame_num);\n              var num_pixels = frame.width * frame.height;\n              var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.\n              GifReaderLZWOutputIndexStream(\n                buf,\n                frame.data_offset,\n                index_stream,\n                num_pixels\n              );\n              var palette_offset = frame.palette_offset;\n\n              // NOTE(deanm): It seems to be much faster to compare index to 256 than\n              // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n              // the profile, not sure if it's related to using a Uint8Array.\n              var trans = frame.transparent_index;\n              if (trans === null) trans = 256;\n\n              // We are possibly just blitting to a portion of the entire frame.\n              // That is a subrect within the framerect, so the additional pixels\n              // must be skipped over after we finished a scanline.\n              var framewidth = frame.width;\n              var framestride = width - framewidth;\n              var xleft = framewidth; // Number of subrect pixels left in scanline.\n\n              // Output indicies of the top left and bottom right corners of the subrect.\n              var opbeg = (frame.y * width + frame.x) * 4;\n              var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n              var op = opbeg;\n\n              var scanstride = framestride * 4;\n\n              // Use scanstride to skip past the rows when interlacing.  This is skipping\n              // 7 rows for the first two passes, then 3 then 1.\n              if (frame.interlaced === true) {\n                scanstride += width * 4 * 7; // Pass 1.\n              }\n\n              var interlaceskip = 8; // Tracking the row interval in the current pass.\n\n              for (var i = 0, il = index_stream.length; i < il; ++i) {\n                var index = index_stream[i];\n\n                if (xleft === 0) {\n                  // Beginning of new scan line\n                  op += scanstride;\n                  xleft = framewidth;\n                  if (op >= opend) {\n                    // Catch the wrap to switch passes when interlacing.\n                    scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);\n                    // interlaceskip / 2 * 4 is interlaceskip << 1.\n                    op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n                    interlaceskip >>= 1;\n                  }\n                }\n\n                if (index === trans) {\n                  op += 4;\n                } else {\n                  var r = buf[palette_offset + index * 3];\n                  var g = buf[palette_offset + index * 3 + 1];\n                  var b = buf[palette_offset + index * 3 + 2];\n                  pixels[op++] = r;\n                  pixels[op++] = g;\n                  pixels[op++] = b;\n                  pixels[op++] = 255;\n                }\n                --xleft;\n              }\n            };\n          }\n\n          function GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n            var min_code_size = code_stream[p++];\n\n            var clear_code = 1 << min_code_size;\n            var eoi_code = clear_code + 1;\n            var next_code = eoi_code + 1;\n\n            var cur_code_size = min_code_size + 1; // Number of bits per code.\n            // NOTE: This shares the same name as the encoder, but has a different\n            // meaning here.  Here this masks each code coming from the code stream.\n            var code_mask = (1 << cur_code_size) - 1;\n            var cur_shift = 0;\n            var cur = 0;\n\n            var op = 0; // Output pointer.\n\n            var subblock_size = code_stream[p++];\n\n            // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n            // solve the fast mode / backing store uncertainty.\n            // var code_table = Array(4096);\n            var code_table = new Int32Array(4096); // Can be signed, we only use 20 bits.\n\n            var prev_code = null; // Track code-1.\n\n            while (true) {\n              // Read up to two bytes, making sure we always 12-bits for max sized code.\n              while (cur_shift < 16) {\n                if (subblock_size === 0) break; // No more data to be read.\n\n                cur |= code_stream[p++] << cur_shift;\n                cur_shift += 8;\n\n                if (subblock_size === 1) {\n                  // Never let it get to 0 to hold logic above.\n                  subblock_size = code_stream[p++]; // Next subblock.\n                } else {\n                  --subblock_size;\n                }\n              }\n\n              // TODO(deanm): We should never really get here, we should have received\n              // and EOI.\n              if (cur_shift < cur_code_size) break;\n\n              var code = cur & code_mask;\n              cur >>= cur_code_size;\n              cur_shift -= cur_code_size;\n\n              // TODO(deanm): Maybe should check that the first code was a clear code,\n              // at least this is what you're supposed to do.  But actually our encoder\n              // now doesn't emit a clear code first anyway.\n              if (code === clear_code) {\n                // We don't actually have to clear the table.  This could be a good idea\n                // for greater error checking, but we don't really do any anyway.  We\n                // will just track it with next_code and overwrite old entries.\n\n                next_code = eoi_code + 1;\n                cur_code_size = min_code_size + 1;\n                code_mask = (1 << cur_code_size) - 1;\n\n                // Don't update prev_code ?\n                prev_code = null;\n                continue;\n              } else if (code === eoi_code) {\n                break;\n              }\n\n              // We have a similar situation as the decoder, where we want to store\n              // variable length entries (code table entries), but we want to do in a\n              // faster manner than an array of arrays.  The code below stores sort of a\n              // linked list within the code table, and then \"chases\" through it to\n              // construct the dictionary entries.  When a new entry is created, just the\n              // last byte is stored, and the rest (prefix) of the entry is only\n              // referenced by its table entry.  Then the code chases through the\n              // prefixes until it reaches a single byte code.  We have to chase twice,\n              // first to compute the length, and then to actually copy the data to the\n              // output (backwards, since we know the length).  The alternative would be\n              // storing something in an intermediate stack, but that doesn't make any\n              // more sense.  I implemented an approach where it also stored the length\n              // in the code table, although it's a bit tricky because you run out of\n              // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n              // entries are generally not the long).  Even when I created benchmarks for\n              // very long table entries the complexity did not seem worth it.\n              // The code table stores the prefix entry in 12 bits and then the suffix\n              // byte in 8 bits, so each entry is 20 bits.\n\n              var chase_code = code < next_code ? code : prev_code;\n\n              // Chase what we will output, either {CODE} or {CODE-1}.\n              var chase_length = 0;\n              var chase = chase_code;\n              while (chase > clear_code) {\n                chase = code_table[chase] >> 8;\n                ++chase_length;\n              }\n\n              var k = chase;\n\n              var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n              if (op_end > output_length) {\n                console.log('Warning, gif stream longer than expected.');\n                return;\n              }\n\n              // Already have the first byte from the chase, might as well write it fast.\n              output[op++] = k;\n\n              op += chase_length;\n              var b = op; // Track pointer, writing backwards.\n\n              if (chase_code !== code)\n                // The case of emitting {CODE-1} + k.\n                output[op++] = k;\n\n              chase = chase_code;\n              while (chase_length--) {\n                chase = code_table[chase];\n                output[--b] = chase & 0xff; // Write backwards.\n                chase >>= 8; // Pull down to the prefix code.\n              }\n\n              if (prev_code !== null && next_code < 4096) {\n                code_table[next_code++] = (prev_code << 8) | k;\n                // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n                // have an feeling that it should just happen somewhere else, for now it\n                // is awkward between when we grow past the max and then hit a clear code.\n                // For now just check if we hit the max 12-bits (then a clear code should\n                // follow, also of course encoded in 12-bits).\n                if (next_code >= code_mask + 1 && cur_code_size < 12) {\n                  ++cur_code_size;\n                  code_mask = (code_mask << 1) | 1;\n                }\n              }\n\n              prev_code = code;\n            }\n\n            if (op !== output_length) {\n              console.log('Warning, gif stream shorter than expected.');\n            }\n\n            return output;\n          }\n\n          // CommonJS.\n          try {\n            exports.GifWriter = GifWriter;\n            exports.GifReader = GifReader;\n          } catch (e) {}\n        },\n        {}\n      ],\n      34: [\n        function(_dereq_, module, exports) {\n          (function(Buffer) {\n            /**\n             * https://opentype.js.org v0.9.0 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens\n             */\n\n            (function(global, factory) {\n              typeof exports === 'object' && typeof module !== 'undefined'\n                ? factory(exports)\n                : typeof define === 'function' && define.amd\n                  ? define(['exports'], factory)\n                  : factory((global.opentype = {}));\n            })(this, function(exports) {\n              'use strict';\n\n              /*! https://mths.be/codepointat v0.2.0 by @mathias */\n              if (!String.prototype.codePointAt) {\n                (function() {\n                  var defineProperty = (function() {\n                    // IE 8 only supports `Object.defineProperty` on DOM elements\n                    try {\n                      var object = {};\n                      var $defineProperty = Object.defineProperty;\n                      var result =\n                        $defineProperty(object, object, object) && $defineProperty;\n                    } catch (error) {}\n                    return result;\n                  })();\n                  var codePointAt = function(position) {\n                    if (this == null) {\n                      throw TypeError();\n                    }\n                    var string = String(this);\n                    var size = string.length;\n                    // `ToInteger`\n                    var index = position ? Number(position) : 0;\n                    if (index != index) {\n                      // better `isNaN`\n                      index = 0;\n                    }\n                    // Account for out-of-bounds indices:\n                    if (index < 0 || index >= size) {\n                      return undefined;\n                    }\n                    // Get the first code unit\n                    var first = string.charCodeAt(index);\n                    var second;\n                    if (\n                      // check if it’s the start of a surrogate pair\n                      first >= 0xd800 &&\n                      first <= 0xdbff && // high surrogate\n                      size > index + 1 // there is a next code unit\n                    ) {\n                      second = string.charCodeAt(index + 1);\n                      if (second >= 0xdc00 && second <= 0xdfff) {\n                        // low surrogate\n                        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;\n                      }\n                    }\n                    return first;\n                  };\n                  if (defineProperty) {\n                    defineProperty(String.prototype, 'codePointAt', {\n                      value: codePointAt,\n                      configurable: true,\n                      writable: true\n                    });\n                  } else {\n                    String.prototype.codePointAt = codePointAt;\n                  }\n                })();\n              }\n\n              var TINF_OK = 0;\n              var TINF_DATA_ERROR = -3;\n\n              function Tree() {\n                this.table = new Uint16Array(16); /* table of code length counts */\n                this.trans = new Uint16Array(288); /* code -> symbol translation table */\n              }\n\n              function Data(source, dest) {\n                this.source = source;\n                this.sourceIndex = 0;\n                this.tag = 0;\n                this.bitcount = 0;\n\n                this.dest = dest;\n                this.destLen = 0;\n\n                this.ltree = new Tree(); /* dynamic length/symbol tree */\n                this.dtree = new Tree(); /* dynamic distance tree */\n              }\n\n              /* --------------------------------------------------- *\n\t * -- uninitialized global data (static structures) -- *\n\t * --------------------------------------------------- */\n\n              var sltree = new Tree();\n              var sdtree = new Tree();\n\n              /* extra bits and base tables for length codes */\n              var length_bits = new Uint8Array(30);\n              var length_base = new Uint16Array(30);\n\n              /* extra bits and base tables for distance codes */\n              var dist_bits = new Uint8Array(30);\n              var dist_base = new Uint16Array(30);\n\n              /* special ordering of code length codes */\n              var clcidx = new Uint8Array([\n                16,\n                17,\n                18,\n                0,\n                8,\n                7,\n                9,\n                6,\n                10,\n                5,\n                11,\n                4,\n                12,\n                3,\n                13,\n                2,\n                14,\n                1,\n                15\n              ]);\n\n              /* used by tinf_decode_trees, avoids allocations every call */\n              var code_tree = new Tree();\n              var lengths = new Uint8Array(288 + 32);\n\n              /* ----------------------- *\n\t * -- utility functions -- *\n\t * ----------------------- */\n\n              /* build extra bits and base tables */\n              function tinf_build_bits_base(bits, base, delta, first) {\n                var i, sum;\n\n                /* build bits table */\n                for (i = 0; i < delta; ++i) {\n                  bits[i] = 0;\n                }\n                for (i = 0; i < 30 - delta; ++i) {\n                  bits[i + delta] = (i / delta) | 0;\n                }\n\n                /* build base table */\n                for (sum = first, i = 0; i < 30; ++i) {\n                  base[i] = sum;\n                  sum += 1 << bits[i];\n                }\n              }\n\n              /* build the fixed huffman trees */\n              function tinf_build_fixed_trees(lt, dt) {\n                var i;\n\n                /* build fixed length tree */\n                for (i = 0; i < 7; ++i) {\n                  lt.table[i] = 0;\n                }\n\n                lt.table[7] = 24;\n                lt.table[8] = 152;\n                lt.table[9] = 112;\n\n                for (i = 0; i < 24; ++i) {\n                  lt.trans[i] = 256 + i;\n                }\n                for (i = 0; i < 144; ++i) {\n                  lt.trans[24 + i] = i;\n                }\n                for (i = 0; i < 8; ++i) {\n                  lt.trans[24 + 144 + i] = 280 + i;\n                }\n                for (i = 0; i < 112; ++i) {\n                  lt.trans[24 + 144 + 8 + i] = 144 + i;\n                }\n\n                /* build fixed distance tree */\n                for (i = 0; i < 5; ++i) {\n                  dt.table[i] = 0;\n                }\n\n                dt.table[5] = 32;\n\n                for (i = 0; i < 32; ++i) {\n                  dt.trans[i] = i;\n                }\n              }\n\n              /* given an array of code lengths, build a tree */\n              var offs = new Uint16Array(16);\n\n              function tinf_build_tree(t, lengths, off, num) {\n                var i, sum;\n\n                /* clear code length count table */\n                for (i = 0; i < 16; ++i) {\n                  t.table[i] = 0;\n                }\n\n                /* scan symbol lengths, and sum code length counts */\n                for (i = 0; i < num; ++i) {\n                  t.table[lengths[off + i]]++;\n                }\n\n                t.table[0] = 0;\n\n                /* compute offset table for distribution sort */\n                for (sum = 0, i = 0; i < 16; ++i) {\n                  offs[i] = sum;\n                  sum += t.table[i];\n                }\n\n                /* create code->symbol translation table (symbols sorted by code) */\n                for (i = 0; i < num; ++i) {\n                  if (lengths[off + i]) {\n                    t.trans[offs[lengths[off + i]]++] = i;\n                  }\n                }\n              }\n\n              /* ---------------------- *\n\t * -- decode functions -- *\n\t * ---------------------- */\n\n              /* get one bit from source stream */\n              function tinf_getbit(d) {\n                /* check if tag is empty */\n                if (!d.bitcount--) {\n                  /* load next tag */\n                  d.tag = d.source[d.sourceIndex++];\n                  d.bitcount = 7;\n                }\n\n                /* shift bit out of tag */\n                var bit = d.tag & 1;\n                d.tag >>>= 1;\n\n                return bit;\n              }\n\n              /* read a num bit value from a stream and add base */\n              function tinf_read_bits(d, num, base) {\n                if (!num) {\n                  return base;\n                }\n\n                while (d.bitcount < 24) {\n                  d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n                  d.bitcount += 8;\n                }\n\n                var val = d.tag & (0xffff >>> (16 - num));\n                d.tag >>>= num;\n                d.bitcount -= num;\n                return val + base;\n              }\n\n              /* given a data stream and a tree, decode a symbol */\n              function tinf_decode_symbol(d, t) {\n                while (d.bitcount < 24) {\n                  d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n                  d.bitcount += 8;\n                }\n\n                var sum = 0,\n                  cur = 0,\n                  len = 0;\n                var tag = d.tag;\n\n                /* get more bits while code value is above sum */\n                do {\n                  cur = 2 * cur + (tag & 1);\n                  tag >>>= 1;\n                  ++len;\n\n                  sum += t.table[len];\n                  cur -= t.table[len];\n                } while (cur >= 0);\n\n                d.tag = tag;\n                d.bitcount -= len;\n\n                return t.trans[sum + cur];\n              }\n\n              /* given a data stream, decode dynamic trees from it */\n              function tinf_decode_trees(d, lt, dt) {\n                var hlit, hdist, hclen;\n                var i, num, length;\n\n                /* get 5 bits HLIT (257-286) */\n                hlit = tinf_read_bits(d, 5, 257);\n\n                /* get 5 bits HDIST (1-32) */\n                hdist = tinf_read_bits(d, 5, 1);\n\n                /* get 4 bits HCLEN (4-19) */\n                hclen = tinf_read_bits(d, 4, 4);\n\n                for (i = 0; i < 19; ++i) {\n                  lengths[i] = 0;\n                }\n\n                /* read code lengths for code length alphabet */\n                for (i = 0; i < hclen; ++i) {\n                  /* get 3 bits code length (0-7) */\n                  var clen = tinf_read_bits(d, 3, 0);\n                  lengths[clcidx[i]] = clen;\n                }\n\n                /* build code length tree */\n                tinf_build_tree(code_tree, lengths, 0, 19);\n\n                /* decode code lengths for the dynamic trees */\n                for (num = 0; num < hlit + hdist; ) {\n                  var sym = tinf_decode_symbol(d, code_tree);\n\n                  switch (sym) {\n                    case 16:\n                      /* copy previous code length 3-6 times (read 2 bits) */\n                      var prev = lengths[num - 1];\n                      for (length = tinf_read_bits(d, 2, 3); length; --length) {\n                        lengths[num++] = prev;\n                      }\n                      break;\n                    case 17:\n                      /* repeat code length 0 for 3-10 times (read 3 bits) */\n                      for (length = tinf_read_bits(d, 3, 3); length; --length) {\n                        lengths[num++] = 0;\n                      }\n                      break;\n                    case 18:\n                      /* repeat code length 0 for 11-138 times (read 7 bits) */\n                      for (length = tinf_read_bits(d, 7, 11); length; --length) {\n                        lengths[num++] = 0;\n                      }\n                      break;\n                    default:\n                      /* values 0-15 represent the actual code lengths */\n                      lengths[num++] = sym;\n                      break;\n                  }\n                }\n\n                /* build dynamic trees */\n                tinf_build_tree(lt, lengths, 0, hlit);\n                tinf_build_tree(dt, lengths, hlit, hdist);\n              }\n\n              /* ----------------------------- *\n\t * -- block inflate functions -- *\n\t * ----------------------------- */\n\n              /* given a stream and two trees, inflate a block of data */\n              function tinf_inflate_block_data(d, lt, dt) {\n                while (1) {\n                  var sym = tinf_decode_symbol(d, lt);\n\n                  /* check for end of block */\n                  if (sym === 256) {\n                    return TINF_OK;\n                  }\n\n                  if (sym < 256) {\n                    d.dest[d.destLen++] = sym;\n                  } else {\n                    var length, dist, offs;\n                    var i;\n\n                    sym -= 257;\n\n                    /* possibly get more bits from length code */\n                    length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n                    dist = tinf_decode_symbol(d, dt);\n\n                    /* possibly get more bits from distance code */\n                    offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n                    /* copy match */\n                    for (i = offs; i < offs + length; ++i) {\n                      d.dest[d.destLen++] = d.dest[i];\n                    }\n                  }\n                }\n              }\n\n              /* inflate an uncompressed block of data */\n              function tinf_inflate_uncompressed_block(d) {\n                var length, invlength;\n                var i;\n\n                /* unread from bitbuffer */\n                while (d.bitcount > 8) {\n                  d.sourceIndex--;\n                  d.bitcount -= 8;\n                }\n\n                /* get length */\n                length = d.source[d.sourceIndex + 1];\n                length = 256 * length + d.source[d.sourceIndex];\n\n                /* get one's complement of length */\n                invlength = d.source[d.sourceIndex + 3];\n                invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n                /* check length */\n                if (length !== (~invlength & 0x0000ffff)) {\n                  return TINF_DATA_ERROR;\n                }\n\n                d.sourceIndex += 4;\n\n                /* copy block */\n                for (i = length; i; --i) {\n                  d.dest[d.destLen++] = d.source[d.sourceIndex++];\n                }\n\n                /* make sure we start next block on a byte boundary */\n                d.bitcount = 0;\n\n                return TINF_OK;\n              }\n\n              /* inflate stream from source to dest */\n              function tinf_uncompress(source, dest) {\n                var d = new Data(source, dest);\n                var bfinal, btype, res;\n\n                do {\n                  /* read final block flag */\n                  bfinal = tinf_getbit(d);\n\n                  /* read block type (2 bits) */\n                  btype = tinf_read_bits(d, 2, 0);\n\n                  /* decompress block */\n                  switch (btype) {\n                    case 0:\n                      /* decompress uncompressed block */\n                      res = tinf_inflate_uncompressed_block(d);\n                      break;\n                    case 1:\n                      /* decompress block with fixed huffman trees */\n                      res = tinf_inflate_block_data(d, sltree, sdtree);\n                      break;\n                    case 2:\n                      /* decompress block with dynamic huffman trees */\n                      tinf_decode_trees(d, d.ltree, d.dtree);\n                      res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n                      break;\n                    default:\n                      res = TINF_DATA_ERROR;\n                  }\n\n                  if (res !== TINF_OK) {\n                    throw new Error('Data error');\n                  }\n                } while (!bfinal);\n\n                if (d.destLen < d.dest.length) {\n                  if (typeof d.dest.slice === 'function') {\n                    return d.dest.slice(0, d.destLen);\n                  } else {\n                    return d.dest.subarray(0, d.destLen);\n                  }\n                }\n\n                return d.dest;\n              }\n\n              /* -------------------- *\n\t * -- initialization -- *\n\t * -------------------- */\n\n              /* build fixed huffman trees */\n              tinf_build_fixed_trees(sltree, sdtree);\n\n              /* build extra bits and base tables */\n              tinf_build_bits_base(length_bits, length_base, 4, 3);\n              tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n              /* fix a special case */\n              length_bits[28] = 0;\n              length_base[28] = 258;\n\n              var tinyInflate = tinf_uncompress;\n\n              // The Bounding Box object\n\n              function derive(v0, v1, v2, v3, t) {\n                return (\n                  Math.pow(1 - t, 3) * v0 +\n                  3 * Math.pow(1 - t, 2) * t * v1 +\n                  3 * (1 - t) * Math.pow(t, 2) * v2 +\n                  Math.pow(t, 3) * v3\n                );\n              }\n              /**\n               * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n               * It is used to calculate the bounding box of a glyph or text path.\n               *\n               * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n               *\n               * @exports opentype.BoundingBox\n               * @class\n               * @constructor\n               */\n              function BoundingBox() {\n                this.x1 = Number.NaN;\n                this.y1 = Number.NaN;\n                this.x2 = Number.NaN;\n                this.y2 = Number.NaN;\n              }\n\n              /**\n               * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n               */\n              BoundingBox.prototype.isEmpty = function() {\n                return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n              };\n\n              /**\n               * Add the point to the bounding box.\n               * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n               * @param {number} x - The X coordinate of the point.\n               * @param {number} y - The Y coordinate of the point.\n               */\n              BoundingBox.prototype.addPoint = function(x, y) {\n                if (typeof x === 'number') {\n                  if (isNaN(this.x1) || isNaN(this.x2)) {\n                    this.x1 = x;\n                    this.x2 = x;\n                  }\n                  if (x < this.x1) {\n                    this.x1 = x;\n                  }\n                  if (x > this.x2) {\n                    this.x2 = x;\n                  }\n                }\n                if (typeof y === 'number') {\n                  if (isNaN(this.y1) || isNaN(this.y2)) {\n                    this.y1 = y;\n                    this.y2 = y;\n                  }\n                  if (y < this.y1) {\n                    this.y1 = y;\n                  }\n                  if (y > this.y2) {\n                    this.y2 = y;\n                  }\n                }\n              };\n\n              /**\n               * Add a X coordinate to the bounding box.\n               * This extends the bounding box to include the X coordinate.\n               * This function is used internally inside of addBezier.\n               * @param {number} x - The X coordinate of the point.\n               */\n              BoundingBox.prototype.addX = function(x) {\n                this.addPoint(x, null);\n              };\n\n              /**\n               * Add a Y coordinate to the bounding box.\n               * This extends the bounding box to include the Y coordinate.\n               * This function is used internally inside of addBezier.\n               * @param {number} y - The Y coordinate of the point.\n               */\n              BoundingBox.prototype.addY = function(y) {\n                this.addPoint(null, y);\n              };\n\n              /**\n               * Add a Bézier curve to the bounding box.\n               * This extends the bounding box to include the entire Bézier.\n               * @param {number} x0 - The starting X coordinate.\n               * @param {number} y0 - The starting Y coordinate.\n               * @param {number} x1 - The X coordinate of the first control point.\n               * @param {number} y1 - The Y coordinate of the first control point.\n               * @param {number} x2 - The X coordinate of the second control point.\n               * @param {number} y2 - The Y coordinate of the second control point.\n               * @param {number} x - The ending X coordinate.\n               * @param {number} y - The ending Y coordinate.\n               */\n              BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {\n                var this$1 = this;\n\n                // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n                // and https://github.com/icons8/svg-path-bounding-box\n\n                var p0 = [x0, y0];\n                var p1 = [x1, y1];\n                var p2 = [x2, y2];\n                var p3 = [x, y];\n\n                this.addPoint(x0, y0);\n                this.addPoint(x, y);\n\n                for (var i = 0; i <= 1; i++) {\n                  var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n                  var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n                  var c = 3 * p1[i] - 3 * p0[i];\n\n                  if (a === 0) {\n                    if (b === 0) {\n                      continue;\n                    }\n                    var t = -c / b;\n                    if (0 < t && t < 1) {\n                      if (i === 0) {\n                        this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t));\n                      }\n                      if (i === 1) {\n                        this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t));\n                      }\n                    }\n                    continue;\n                  }\n\n                  var b2ac = Math.pow(b, 2) - 4 * c * a;\n                  if (b2ac < 0) {\n                    continue;\n                  }\n                  var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n                  if (0 < t1 && t1 < 1) {\n                    if (i === 0) {\n                      this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));\n                    }\n                    if (i === 1) {\n                      this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));\n                    }\n                  }\n                  var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n                  if (0 < t2 && t2 < 1) {\n                    if (i === 0) {\n                      this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));\n                    }\n                    if (i === 1) {\n                      this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));\n                    }\n                  }\n                }\n              };\n\n              /**\n               * Add a quadratic curve to the bounding box.\n               * This extends the bounding box to include the entire quadratic curve.\n               * @param {number} x0 - The starting X coordinate.\n               * @param {number} y0 - The starting Y coordinate.\n               * @param {number} x1 - The X coordinate of the control point.\n               * @param {number} y1 - The Y coordinate of the control point.\n               * @param {number} x - The ending X coordinate.\n               * @param {number} y - The ending Y coordinate.\n               */\n              BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {\n                var cp1x = x0 + 2 / 3 * (x1 - x0);\n                var cp1y = y0 + 2 / 3 * (y1 - y0);\n                var cp2x = cp1x + 1 / 3 * (x - x0);\n                var cp2y = cp1y + 1 / 3 * (y - y0);\n                this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n              };\n\n              // Geometric objects\n\n              /**\n               * A bézier path containing a set of path commands similar to a SVG path.\n               * Paths can be drawn on a context using `draw`.\n               * @exports opentype.Path\n               * @class\n               * @constructor\n               */\n              function Path() {\n                this.commands = [];\n                this.fill = 'black';\n                this.stroke = null;\n                this.strokeWidth = 1;\n              }\n\n              /**\n               * @param  {number} x\n               * @param  {number} y\n               */\n              Path.prototype.moveTo = function(x, y) {\n                this.commands.push({\n                  type: 'M',\n                  x: x,\n                  y: y\n                });\n              };\n\n              /**\n               * @param  {number} x\n               * @param  {number} y\n               */\n              Path.prototype.lineTo = function(x, y) {\n                this.commands.push({\n                  type: 'L',\n                  x: x,\n                  y: y\n                });\n              };\n\n              /**\n               * Draws cubic curve\n               * @function\n               * curveTo\n               * @memberof opentype.Path.prototype\n               * @param  {number} x1 - x of control 1\n               * @param  {number} y1 - y of control 1\n               * @param  {number} x2 - x of control 2\n               * @param  {number} y2 - y of control 2\n               * @param  {number} x - x of path point\n               * @param  {number} y - y of path point\n               */\n\n              /**\n               * Draws cubic curve\n               * @function\n               * bezierCurveTo\n               * @memberof opentype.Path.prototype\n               * @param  {number} x1 - x of control 1\n               * @param  {number} y1 - y of control 1\n               * @param  {number} x2 - x of control 2\n               * @param  {number} y2 - y of control 2\n               * @param  {number} x - x of path point\n               * @param  {number} y - y of path point\n               * @see curveTo\n               */\n              Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(\n                x1,\n                y1,\n                x2,\n                y2,\n                x,\n                y\n              ) {\n                this.commands.push({\n                  type: 'C',\n                  x1: x1,\n                  y1: y1,\n                  x2: x2,\n                  y2: y2,\n                  x: x,\n                  y: y\n                });\n              };\n\n              /**\n               * Draws quadratic curve\n               * @function\n               * quadraticCurveTo\n               * @memberof opentype.Path.prototype\n               * @param  {number} x1 - x of control\n               * @param  {number} y1 - y of control\n               * @param  {number} x - x of path point\n               * @param  {number} y - y of path point\n               */\n\n              /**\n               * Draws quadratic curve\n               * @function\n               * quadTo\n               * @memberof opentype.Path.prototype\n               * @param  {number} x1 - x of control\n               * @param  {number} y1 - y of control\n               * @param  {number} x - x of path point\n               * @param  {number} y - y of path point\n               */\n              Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(\n                x1,\n                y1,\n                x,\n                y\n              ) {\n                this.commands.push({\n                  type: 'Q',\n                  x1: x1,\n                  y1: y1,\n                  x: x,\n                  y: y\n                });\n              };\n\n              /**\n               * Closes the path\n               * @function closePath\n               * @memberof opentype.Path.prototype\n               */\n\n              /**\n               * Close the path\n               * @function close\n               * @memberof opentype.Path.prototype\n               */\n              Path.prototype.close = Path.prototype.closePath = function() {\n                this.commands.push({\n                  type: 'Z'\n                });\n              };\n\n              /**\n               * Add the given path or list of commands to the commands of this path.\n               * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n               */\n              Path.prototype.extend = function(pathOrCommands) {\n                if (pathOrCommands.commands) {\n                  pathOrCommands = pathOrCommands.commands;\n                } else if (pathOrCommands instanceof BoundingBox) {\n                  var box = pathOrCommands;\n                  this.moveTo(box.x1, box.y1);\n                  this.lineTo(box.x2, box.y1);\n                  this.lineTo(box.x2, box.y2);\n                  this.lineTo(box.x1, box.y2);\n                  this.close();\n                  return;\n                }\n\n                Array.prototype.push.apply(this.commands, pathOrCommands);\n              };\n\n              /**\n               * Calculate the bounding box of the path.\n               * @returns {opentype.BoundingBox}\n               */\n              Path.prototype.getBoundingBox = function() {\n                var this$1 = this;\n\n                var box = new BoundingBox();\n\n                var startX = 0;\n                var startY = 0;\n                var prevX = 0;\n                var prevY = 0;\n                for (var i = 0; i < this.commands.length; i++) {\n                  var cmd = this$1.commands[i];\n                  switch (cmd.type) {\n                    case 'M':\n                      box.addPoint(cmd.x, cmd.y);\n                      startX = prevX = cmd.x;\n                      startY = prevY = cmd.y;\n                      break;\n                    case 'L':\n                      box.addPoint(cmd.x, cmd.y);\n                      prevX = cmd.x;\n                      prevY = cmd.y;\n                      break;\n                    case 'Q':\n                      box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);\n                      prevX = cmd.x;\n                      prevY = cmd.y;\n                      break;\n                    case 'C':\n                      box.addBezier(\n                        prevX,\n                        prevY,\n                        cmd.x1,\n                        cmd.y1,\n                        cmd.x2,\n                        cmd.y2,\n                        cmd.x,\n                        cmd.y\n                      );\n                      prevX = cmd.x;\n                      prevY = cmd.y;\n                      break;\n                    case 'Z':\n                      prevX = startX;\n                      prevY = startY;\n                      break;\n                    default:\n                      throw new Error('Unexpected path command ' + cmd.type);\n                  }\n                }\n                if (box.isEmpty()) {\n                  box.addPoint(0, 0);\n                }\n                return box;\n              };\n\n              /**\n               * Draw the path to a 2D context.\n               * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n               */\n              Path.prototype.draw = function(ctx) {\n                var this$1 = this;\n\n                ctx.beginPath();\n                for (var i = 0; i < this.commands.length; i += 1) {\n                  var cmd = this$1.commands[i];\n                  if (cmd.type === 'M') {\n                    ctx.moveTo(cmd.x, cmd.y);\n                  } else if (cmd.type === 'L') {\n                    ctx.lineTo(cmd.x, cmd.y);\n                  } else if (cmd.type === 'C') {\n                    ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                  } else if (cmd.type === 'Q') {\n                    ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n                  } else if (cmd.type === 'Z') {\n                    ctx.closePath();\n                  }\n                }\n\n                if (this.fill) {\n                  ctx.fillStyle = this.fill;\n                  ctx.fill();\n                }\n\n                if (this.stroke) {\n                  ctx.strokeStyle = this.stroke;\n                  ctx.lineWidth = this.strokeWidth;\n                  ctx.stroke();\n                }\n              };\n\n              /**\n               * Convert the Path to a string of path data instructions\n               * See http://www.w3.org/TR/SVG/paths.html#PathData\n               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n               * @return {string}\n               */\n              Path.prototype.toPathData = function(decimalPlaces) {\n                var this$1 = this;\n\n                decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n                function floatToString(v) {\n                  if (Math.round(v) === v) {\n                    return '' + Math.round(v);\n                  } else {\n                    return v.toFixed(decimalPlaces);\n                  }\n                }\n\n                function packValues() {\n                  var arguments$1 = arguments;\n\n                  var s = '';\n                  for (var i = 0; i < arguments.length; i += 1) {\n                    var v = arguments$1[i];\n                    if (v >= 0 && i > 0) {\n                      s += ' ';\n                    }\n\n                    s += floatToString(v);\n                  }\n\n                  return s;\n                }\n\n                var d = '';\n                for (var i = 0; i < this.commands.length; i += 1) {\n                  var cmd = this$1.commands[i];\n                  if (cmd.type === 'M') {\n                    d += 'M' + packValues(cmd.x, cmd.y);\n                  } else if (cmd.type === 'L') {\n                    d += 'L' + packValues(cmd.x, cmd.y);\n                  } else if (cmd.type === 'C') {\n                    d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                  } else if (cmd.type === 'Q') {\n                    d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n                  } else if (cmd.type === 'Z') {\n                    d += 'Z';\n                  }\n                }\n\n                return d;\n              };\n\n              /**\n               * Convert the path to an SVG <path> element, as a string.\n               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n               * @return {string}\n               */\n              Path.prototype.toSVG = function(decimalPlaces) {\n                var svg = '<path d=\"';\n                svg += this.toPathData(decimalPlaces);\n                svg += '\"';\n                if (this.fill && this.fill !== 'black') {\n                  if (this.fill === null) {\n                    svg += ' fill=\"none\"';\n                  } else {\n                    svg += ' fill=\"' + this.fill + '\"';\n                  }\n                }\n\n                if (this.stroke) {\n                  svg +=\n                    ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n                }\n\n                svg += '/>';\n                return svg;\n              };\n\n              /**\n               * Convert the path to a DOM element.\n               * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n               * @return {SVGPathElement}\n               */\n              Path.prototype.toDOMElement = function(decimalPlaces) {\n                var temporaryPath = this.toPathData(decimalPlaces);\n                var newPath = document.createElementNS(\n                  'http://www.w3.org/2000/svg',\n                  'path'\n                );\n\n                newPath.setAttribute('d', temporaryPath);\n\n                return newPath;\n              };\n\n              // Run-time checking of preconditions.\n\n              function fail(message) {\n                throw new Error(message);\n              }\n\n              // Precondition function that checks if the given predicate is true.\n              // If not, it will throw an error.\n              function argument(predicate, message) {\n                if (!predicate) {\n                  fail(message);\n                }\n              }\n              var check = { fail: fail, argument: argument, assert: argument };\n\n              // Data types used in the OpenType font file.\n\n              var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\n              var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\n              /**\n               * @exports opentype.decode\n               * @class\n               */\n              var decode = {};\n              /**\n               * @exports opentype.encode\n               * @class\n               */\n              var encode = {};\n              /**\n               * @exports opentype.sizeOf\n               * @class\n               */\n              var sizeOf = {};\n\n              // Return a function that always returns the same value.\n              function constant(v) {\n                return function() {\n                  return v;\n                };\n              }\n\n              // OpenType data types //////////////////////////////////////////////////////\n\n              /**\n               * Convert an 8-bit unsigned integer to a list of 1 byte.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.BYTE = function(v) {\n                check.argument(\n                  v >= 0 && v <= 255,\n                  'Byte value should be between 0 and 255.'\n                );\n                return [v];\n              };\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.BYTE = constant(1);\n\n              /**\n               * Convert a 8-bit signed integer to a list of 1 byte.\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.CHAR = function(v) {\n                return [v.charCodeAt(0)];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.CHAR = constant(1);\n\n              /**\n               * Convert an ASCII string to a list of bytes.\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.CHARARRAY = function(v) {\n                var b = [];\n                for (var i = 0; i < v.length; i += 1) {\n                  b[i] = v.charCodeAt(i);\n                }\n\n                return b;\n              };\n\n              /**\n               * @param {Array}\n               * @returns {number}\n               */\n              sizeOf.CHARARRAY = function(v) {\n                return v.length;\n              };\n\n              /**\n               * Convert a 16-bit unsigned integer to a list of 2 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.USHORT = function(v) {\n                return [(v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.USHORT = constant(2);\n\n              /**\n               * Convert a 16-bit signed integer to a list of 2 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.SHORT = function(v) {\n                // Two's complement\n                if (v >= LIMIT16) {\n                  v = -(2 * LIMIT16 - v);\n                }\n\n                return [(v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.SHORT = constant(2);\n\n              /**\n               * Convert a 24-bit unsigned integer to a list of 3 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.UINT24 = function(v) {\n                return [(v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.UINT24 = constant(3);\n\n              /**\n               * Convert a 32-bit unsigned integer to a list of 4 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.ULONG = function(v) {\n                return [(v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.ULONG = constant(4);\n\n              /**\n               * Convert a 32-bit unsigned integer to a list of 4 bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.LONG = function(v) {\n                // Two's complement\n                if (v >= LIMIT32) {\n                  v = -(2 * LIMIT32 - v);\n                }\n\n                return [(v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.LONG = constant(4);\n\n              encode.FIXED = encode.ULONG;\n              sizeOf.FIXED = sizeOf.ULONG;\n\n              encode.FWORD = encode.SHORT;\n              sizeOf.FWORD = sizeOf.SHORT;\n\n              encode.UFWORD = encode.USHORT;\n              sizeOf.UFWORD = sizeOf.USHORT;\n\n              /**\n               * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.LONGDATETIME = function(v) {\n                return [\n                  0,\n                  0,\n                  0,\n                  0,\n                  (v >> 24) & 0xff,\n                  (v >> 16) & 0xff,\n                  (v >> 8) & 0xff,\n                  v & 0xff\n                ];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.LONGDATETIME = constant(8);\n\n              /**\n               * Convert a 4-char tag to a list of 4 bytes.\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.TAG = function(v) {\n                check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n                return [v.charCodeAt(0), v.charCodeAt(1), v.charCodeAt(2), v.charCodeAt(3)];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.TAG = constant(4);\n\n              // CFF data types ///////////////////////////////////////////////////////////\n\n              encode.Card8 = encode.BYTE;\n              sizeOf.Card8 = sizeOf.BYTE;\n\n              encode.Card16 = encode.USHORT;\n              sizeOf.Card16 = sizeOf.USHORT;\n\n              encode.OffSize = encode.BYTE;\n              sizeOf.OffSize = sizeOf.BYTE;\n\n              encode.SID = encode.USHORT;\n              sizeOf.SID = sizeOf.USHORT;\n\n              // Convert a numeric operand or charstring number to a variable-size list of bytes.\n              /**\n               * Convert a numeric operand or charstring number to a variable-size list of bytes.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.NUMBER = function(v) {\n                if (v >= -107 && v <= 107) {\n                  return [v + 139];\n                } else if (v >= 108 && v <= 1131) {\n                  v = v - 108;\n                  return [(v >> 8) + 247, v & 0xff];\n                } else if (v >= -1131 && v <= -108) {\n                  v = -v - 108;\n                  return [(v >> 8) + 251, v & 0xff];\n                } else if (v >= -32768 && v <= 32767) {\n                  return encode.NUMBER16(v);\n                } else {\n                  return encode.NUMBER32(v);\n                }\n              };\n\n              /**\n               * @param {number}\n               * @returns {number}\n               */\n              sizeOf.NUMBER = function(v) {\n                return encode.NUMBER(v).length;\n              };\n\n              /**\n               * Convert a signed number between -32768 and +32767 to a three-byte value.\n               * This ensures we always use three bytes, but is not the most compact format.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.NUMBER16 = function(v) {\n                return [28, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.NUMBER16 = constant(3);\n\n              /**\n               * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n               * This is useful if you want to be sure you always use four bytes,\n               * at the expense of wasting a few bytes for smaller numbers.\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.NUMBER32 = function(v) {\n                return [29, (v >> 24) & 0xff, (v >> 16) & 0xff, (v >> 8) & 0xff, v & 0xff];\n              };\n\n              /**\n               * @constant\n               * @type {number}\n               */\n              sizeOf.NUMBER32 = constant(5);\n\n              /**\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.REAL = function(v) {\n                var value = v.toString();\n\n                // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n                // This code converts it back to a number without the epsilon.\n                var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n                if (m) {\n                  var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n                  value = (Math.round(v * epsilon) / epsilon).toString();\n                }\n\n                var nibbles = '';\n                for (var i = 0, ii = value.length; i < ii; i += 1) {\n                  var c = value[i];\n                  if (c === 'e') {\n                    nibbles += value[++i] === '-' ? 'c' : 'b';\n                  } else if (c === '.') {\n                    nibbles += 'a';\n                  } else if (c === '-') {\n                    nibbles += 'e';\n                  } else {\n                    nibbles += c;\n                  }\n                }\n\n                nibbles += nibbles.length & 1 ? 'f' : 'ff';\n                var out = [30];\n                for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {\n                  out.push(parseInt(nibbles.substr(i$1, 2), 16));\n                }\n\n                return out;\n              };\n\n              /**\n               * @param {number}\n               * @returns {number}\n               */\n              sizeOf.REAL = function(v) {\n                return encode.REAL(v).length;\n              };\n\n              encode.NAME = encode.CHARARRAY;\n              sizeOf.NAME = sizeOf.CHARARRAY;\n\n              encode.STRING = encode.CHARARRAY;\n              sizeOf.STRING = sizeOf.CHARARRAY;\n\n              /**\n               * @param {DataView} data\n               * @param {number} offset\n               * @param {number} numBytes\n               * @returns {string}\n               */\n              decode.UTF8 = function(data, offset, numBytes) {\n                var codePoints = [];\n                var numChars = numBytes;\n                for (var j = 0; j < numChars; j++, offset += 1) {\n                  codePoints[j] = data.getUint8(offset);\n                }\n\n                return String.fromCharCode.apply(null, codePoints);\n              };\n\n              /**\n               * @param {DataView} data\n               * @param {number} offset\n               * @param {number} numBytes\n               * @returns {string}\n               */\n              decode.UTF16 = function(data, offset, numBytes) {\n                var codePoints = [];\n                var numChars = numBytes / 2;\n                for (var j = 0; j < numChars; j++, offset += 2) {\n                  codePoints[j] = data.getUint16(offset);\n                }\n\n                return String.fromCharCode.apply(null, codePoints);\n              };\n\n              /**\n               * Convert a JavaScript string to UTF16-BE.\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.UTF16 = function(v) {\n                var b = [];\n                for (var i = 0; i < v.length; i += 1) {\n                  var codepoint = v.charCodeAt(i);\n                  b[b.length] = (codepoint >> 8) & 0xff;\n                  b[b.length] = codepoint & 0xff;\n                }\n\n                return b;\n              };\n\n              /**\n               * @param {string}\n               * @returns {number}\n               */\n              sizeOf.UTF16 = function(v) {\n                return v.length * 2;\n              };\n\n              // Data for converting old eight-bit Macintosh encodings to Unicode.\n              // This representation is optimized for decoding; encoding is slower\n              // and needs more memory. The assumption is that all opentype.js users\n              // want to open fonts, but saving a font will be comparatively rare\n              // so it can be more expensive. Keyed by IANA character set name.\n              //\n              // Python script for generating these strings:\n              //\n              //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n              //     print(s.encode('utf-8'))\n              /**\n               * @private\n               */\n              var eightBitMacEncodings = {\n                // Python: 'mac_croatian'\n                'x-mac-croatian':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n                  '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n                // Python: 'mac_cyrillic'\n                'x-mac-cyrillic':\n                  'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n                  'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n                // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n                'x-mac-gaelic':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n                  'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n                // Python: 'mac_greek'\n                'x-mac-greek':\n                  'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n                  'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n                // Python: 'mac_iceland'\n                'x-mac-icelandic':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n                // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n                'x-mac-inuit':\n                  'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n                  'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n                // Python: 'mac_latin2'\n                'x-mac-ce':\n                  'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n                  'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n                // Python: 'mac_roman'\n                macintosh:\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n                // Python: 'mac_romanian'\n                'x-mac-romanian':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n                // Python: 'mac_turkish'\n                'x-mac-turkish':\n                  'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n                  '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n              };\n\n              /**\n               * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n               * string, or 'undefined' if the encoding is unsupported. For example, we do\n               * not support Chinese, Japanese or Korean because these would need large\n               * mapping tables.\n               * @param {DataView} dataView\n               * @param {number} offset\n               * @param {number} dataLength\n               * @param {string} encoding\n               * @returns {string}\n               */\n              decode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n                var table = eightBitMacEncodings[encoding];\n                if (table === undefined) {\n                  return undefined;\n                }\n\n                var result = '';\n                for (var i = 0; i < dataLength; i++) {\n                  var c = dataView.getUint8(offset + i);\n                  // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n                  // mapped to U+0000..U+007F; we only need to look up the others.\n                  if (c <= 0x7f) {\n                    result += String.fromCharCode(c);\n                  } else {\n                    result += table[c & 0x7f];\n                  }\n                }\n\n                return result;\n              };\n\n              // Helper function for encode.MACSTRING. Returns a dictionary for mapping\n              // Unicode character codes to their 8-bit MacOS equivalent. This table\n              // is not exactly a super cheap data structure, but we do not care because\n              // encoding Macintosh strings is only rarely needed in typical applications.\n              var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\n              var macEncodingCacheKeys;\n              var getMacEncodingTable = function(encoding) {\n                // Since we use encoding as a cache key for WeakMap, it has to be\n                // a String object and not a literal. And at least on NodeJS 2.10.1,\n                // WeakMap requires that the same String instance is passed for cache hits.\n                if (!macEncodingCacheKeys) {\n                  macEncodingCacheKeys = {};\n                  for (var e in eightBitMacEncodings) {\n                    /*jshint -W053 */ // Suppress \"Do not use String as a constructor.\"\n                    macEncodingCacheKeys[e] = new String(e);\n                  }\n                }\n\n                var cacheKey = macEncodingCacheKeys[encoding];\n                if (cacheKey === undefined) {\n                  return undefined;\n                }\n\n                // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n                // since garbage collection may run at any time, it could also kick in\n                // between the calls to cache.has() and cache.get(). In that case,\n                // we would return 'undefined' even though we do support the encoding.\n                if (macEncodingTableCache) {\n                  var cachedTable = macEncodingTableCache.get(cacheKey);\n                  if (cachedTable !== undefined) {\n                    return cachedTable;\n                  }\n                }\n\n                var decodingTable = eightBitMacEncodings[encoding];\n                if (decodingTable === undefined) {\n                  return undefined;\n                }\n\n                var encodingTable = {};\n                for (var i = 0; i < decodingTable.length; i++) {\n                  encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n                }\n\n                if (macEncodingTableCache) {\n                  macEncodingTableCache.set(cacheKey, encodingTable);\n                }\n\n                return encodingTable;\n              };\n\n              /**\n               * Encodes an old-style Macintosh string. Returns a byte array upon success.\n               * If the requested encoding is unsupported, or if the input string contains\n               * a character that cannot be expressed in the encoding, the function returns\n               * 'undefined'.\n               * @param {string} str\n               * @param {string} encoding\n               * @returns {Array}\n               */\n              encode.MACSTRING = function(str, encoding) {\n                var table = getMacEncodingTable(encoding);\n                if (table === undefined) {\n                  return undefined;\n                }\n\n                var result = [];\n                for (var i = 0; i < str.length; i++) {\n                  var c = str.charCodeAt(i);\n\n                  // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n                  // mapped to U+0000..U+007F; we only need to look up the others.\n                  if (c >= 0x80) {\n                    c = table[c];\n                    if (c === undefined) {\n                      // str contains a Unicode character that cannot be encoded\n                      // in the requested encoding.\n                      return undefined;\n                    }\n                  }\n                  result[i] = c;\n                  // result.push(c);\n                }\n\n                return result;\n              };\n\n              /**\n               * @param {string} str\n               * @param {string} encoding\n               * @returns {number}\n               */\n              sizeOf.MACSTRING = function(str, encoding) {\n                var b = encode.MACSTRING(str, encoding);\n                if (b !== undefined) {\n                  return b.length;\n                } else {\n                  return 0;\n                }\n              };\n\n              // Helper for encode.VARDELTAS\n              function isByteEncodable(value) {\n                return value >= -128 && value <= 127;\n              }\n\n              // Helper for encode.VARDELTAS\n              function encodeVarDeltaRunAsZeroes(deltas, pos, result) {\n                var runLength = 0;\n                var numDeltas = deltas.length;\n                while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {\n                  ++pos;\n                  ++runLength;\n                }\n                result.push(0x80 | (runLength - 1));\n                return pos;\n              }\n\n              // Helper for encode.VARDELTAS\n              function encodeVarDeltaRunAsBytes(deltas, offset, result) {\n                var runLength = 0;\n                var numDeltas = deltas.length;\n                var pos = offset;\n                while (pos < numDeltas && runLength < 64) {\n                  var value = deltas[pos];\n                  if (!isByteEncodable(value)) {\n                    break;\n                  }\n\n                  // Within a byte-encoded run of deltas, a single zero is best\n                  // stored literally as 0x00 value. However, if we have two or\n                  // more zeroes in a sequence, it is better to start a new run.\n                  // Fore example, the sequence of deltas [15, 15, 0, 15, 15]\n                  // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero\n                  // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)\n                  // when starting a new run.\n                  if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {\n                    break;\n                  }\n\n                  ++pos;\n                  ++runLength;\n                }\n                result.push(runLength - 1);\n                for (var i = offset; i < pos; ++i) {\n                  result.push((deltas[i] + 256) & 0xff);\n                }\n                return pos;\n              }\n\n              // Helper for encode.VARDELTAS\n              function encodeVarDeltaRunAsWords(deltas, offset, result) {\n                var runLength = 0;\n                var numDeltas = deltas.length;\n                var pos = offset;\n                while (pos < numDeltas && runLength < 64) {\n                  var value = deltas[pos];\n\n                  // Within a word-encoded run of deltas, it is easiest to start\n                  // a new run (with a different encoding) whenever we encounter\n                  // a zero value. For example, the sequence [0x6666, 0, 0x7777]\n                  // needs 7 bytes when storing the zero inside the current run\n                  // (42 66 66 00 00 77 77), and equally 7 bytes when starting a\n                  // new run (40 66 66 80 40 77 77).\n                  if (value === 0) {\n                    break;\n                  }\n\n                  // Within a word-encoded run of deltas, a single value in the\n                  // range (-128..127) should be encoded within the current run\n                  // because it is more compact. For example, the sequence\n                  // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value\n                  // literally (42 66 66 00 02 77 77), but 8 bytes when starting\n                  // a new run (40 66 66 00 02 40 77 77).\n                  if (\n                    isByteEncodable(value) &&\n                    pos + 1 < numDeltas &&\n                    isByteEncodable(deltas[pos + 1])\n                  ) {\n                    break;\n                  }\n\n                  ++pos;\n                  ++runLength;\n                }\n                result.push(0x40 | (runLength - 1));\n                for (var i = offset; i < pos; ++i) {\n                  var val = deltas[i];\n                  result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);\n                }\n                return pos;\n              }\n\n              /**\n               * Encode a list of variation adjustment deltas.\n               *\n               * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\n               * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\n               * when generating instances of variation fonts.\n               *\n               * @see https://www.microsoft.com/typography/otspec/gvar.htm\n               * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html\n               * @param {Array}\n               * @return {Array}\n               */\n              encode.VARDELTAS = function(deltas) {\n                var pos = 0;\n                var result = [];\n                while (pos < deltas.length) {\n                  var value = deltas[pos];\n                  if (value === 0) {\n                    pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);\n                  } else if (value >= -128 && value <= 127) {\n                    pos = encodeVarDeltaRunAsBytes(deltas, pos, result);\n                  } else {\n                    pos = encodeVarDeltaRunAsWords(deltas, pos, result);\n                  }\n                }\n                return result;\n              };\n\n              // Convert a list of values to a CFF INDEX structure.\n              // The values should be objects containing name / type / value.\n              /**\n               * @param {Array} l\n               * @returns {Array}\n               */\n              encode.INDEX = function(l) {\n                //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n                //    i, v;\n                // Because we have to know which data type to use to encode the offsets,\n                // we have to go through the values twice: once to encode the data and\n                // calculate the offsets, then again to encode the offsets using the fitting data type.\n                var offset = 1; // First offset is always 1.\n                var offsets = [offset];\n                var data = [];\n                for (var i = 0; i < l.length; i += 1) {\n                  var v = encode.OBJECT(l[i]);\n                  Array.prototype.push.apply(data, v);\n                  offset += v.length;\n                  offsets.push(offset);\n                }\n\n                if (data.length === 0) {\n                  return [0, 0];\n                }\n\n                var encodedOffsets = [];\n                var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;\n                var offsetEncoder = [\n                  undefined,\n                  encode.BYTE,\n                  encode.USHORT,\n                  encode.UINT24,\n                  encode.ULONG\n                ][offSize];\n                for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {\n                  var encodedOffset = offsetEncoder(offsets[i$1]);\n                  Array.prototype.push.apply(encodedOffsets, encodedOffset);\n                }\n\n                return Array.prototype.concat(\n                  encode.Card16(l.length),\n                  encode.OffSize(offSize),\n                  encodedOffsets,\n                  data\n                );\n              };\n\n              /**\n               * @param {Array}\n               * @returns {number}\n               */\n              sizeOf.INDEX = function(v) {\n                return encode.INDEX(v).length;\n              };\n\n              /**\n               * Convert an object to a CFF DICT structure.\n               * The keys should be numeric.\n               * The values should be objects containing name / type / value.\n               * @param {Object} m\n               * @returns {Array}\n               */\n              encode.DICT = function(m) {\n                var d = [];\n                var keys = Object.keys(m);\n                var length = keys.length;\n\n                for (var i = 0; i < length; i += 1) {\n                  // Object.keys() return string keys, but our keys are always numeric.\n                  var k = parseInt(keys[i], 0);\n                  var v = m[k];\n                  // Value comes before the key.\n                  d = d.concat(encode.OPERAND(v.value, v.type));\n                  d = d.concat(encode.OPERATOR(k));\n                }\n\n                return d;\n              };\n\n              /**\n               * @param {Object}\n               * @returns {number}\n               */\n              sizeOf.DICT = function(m) {\n                return encode.DICT(m).length;\n              };\n\n              /**\n               * @param {number}\n               * @returns {Array}\n               */\n              encode.OPERATOR = function(v) {\n                if (v < 1200) {\n                  return [v];\n                } else {\n                  return [12, v - 1200];\n                }\n              };\n\n              /**\n               * @param {Array} v\n               * @param {string}\n               * @returns {Array}\n               */\n              encode.OPERAND = function(v, type) {\n                var d = [];\n                if (Array.isArray(type)) {\n                  for (var i = 0; i < type.length; i += 1) {\n                    check.argument(\n                      v.length === type.length,\n                      'Not enough arguments given for type' + type\n                    );\n                    d = d.concat(encode.OPERAND(v[i], type[i]));\n                  }\n                } else {\n                  if (type === 'SID') {\n                    d = d.concat(encode.NUMBER(v));\n                  } else if (type === 'offset') {\n                    // We make it easy for ourselves and always encode offsets as\n                    // 4 bytes. This makes offset calculation for the top dict easier.\n                    d = d.concat(encode.NUMBER32(v));\n                  } else if (type === 'number') {\n                    d = d.concat(encode.NUMBER(v));\n                  } else if (type === 'real') {\n                    d = d.concat(encode.REAL(v));\n                  } else {\n                    throw new Error('Unknown operand type ' + type);\n                    // FIXME Add support for booleans\n                  }\n                }\n\n                return d;\n              };\n\n              encode.OP = encode.BYTE;\n              sizeOf.OP = sizeOf.BYTE;\n\n              // memoize charstring encoding using WeakMap if available\n              var wmm = typeof WeakMap === 'function' && new WeakMap();\n\n              /**\n               * Convert a list of CharString operations to bytes.\n               * @param {Array}\n               * @returns {Array}\n               */\n              encode.CHARSTRING = function(ops) {\n                // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n                if (wmm) {\n                  var cachedValue = wmm.get(ops);\n                  if (cachedValue !== undefined) {\n                    return cachedValue;\n                  }\n                }\n\n                var d = [];\n                var length = ops.length;\n\n                for (var i = 0; i < length; i += 1) {\n                  var op = ops[i];\n                  d = d.concat(encode[op.type](op.value));\n                }\n\n                if (wmm) {\n                  wmm.set(ops, d);\n                }\n\n                return d;\n              };\n\n              /**\n               * @param {Array}\n               * @returns {number}\n               */\n              sizeOf.CHARSTRING = function(ops) {\n                return encode.CHARSTRING(ops).length;\n              };\n\n              // Utility functions ////////////////////////////////////////////////////////\n\n              /**\n               * Convert an object containing name / type / value to bytes.\n               * @param {Object}\n               * @returns {Array}\n               */\n              encode.OBJECT = function(v) {\n                var encodingFunction = encode[v.type];\n                check.argument(\n                  encodingFunction !== undefined,\n                  'No encoding function for type ' + v.type\n                );\n                return encodingFunction(v.value);\n              };\n\n              /**\n               * @param {Object}\n               * @returns {number}\n               */\n              sizeOf.OBJECT = function(v) {\n                var sizeOfFunction = sizeOf[v.type];\n                check.argument(\n                  sizeOfFunction !== undefined,\n                  'No sizeOf function for type ' + v.type\n                );\n                return sizeOfFunction(v.value);\n              };\n\n              /**\n               * Convert a table object to bytes.\n               * A table contains a list of fields containing the metadata (name, type and default value).\n               * The table itself has the field values set as attributes.\n               * @param {opentype.Table}\n               * @returns {Array}\n               */\n              encode.TABLE = function(table) {\n                var d = [];\n                var length = table.fields.length;\n                var subtables = [];\n                var subtableOffsets = [];\n\n                for (var i = 0; i < length; i += 1) {\n                  var field = table.fields[i];\n                  var encodingFunction = encode[field.type];\n                  check.argument(\n                    encodingFunction !== undefined,\n                    'No encoding function for field type ' +\n                      field.type +\n                      ' (' +\n                      field.name +\n                      ')'\n                  );\n                  var value = table[field.name];\n                  if (value === undefined) {\n                    value = field.value;\n                  }\n\n                  var bytes = encodingFunction(value);\n\n                  if (field.type === 'TABLE') {\n                    subtableOffsets.push(d.length);\n                    d = d.concat([0, 0]);\n                    subtables.push(bytes);\n                  } else {\n                    d = d.concat(bytes);\n                  }\n                }\n\n                for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {\n                  var o = subtableOffsets[i$1];\n                  var offset = d.length;\n                  check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n                  d[o] = offset >> 8;\n                  d[o + 1] = offset & 0xff;\n                  d = d.concat(subtables[i$1]);\n                }\n\n                return d;\n              };\n\n              /**\n               * @param {opentype.Table}\n               * @returns {number}\n               */\n              sizeOf.TABLE = function(table) {\n                var numBytes = 0;\n                var length = table.fields.length;\n\n                for (var i = 0; i < length; i += 1) {\n                  var field = table.fields[i];\n                  var sizeOfFunction = sizeOf[field.type];\n                  check.argument(\n                    sizeOfFunction !== undefined,\n                    'No sizeOf function for field type ' +\n                      field.type +\n                      ' (' +\n                      field.name +\n                      ')'\n                  );\n                  var value = table[field.name];\n                  if (value === undefined) {\n                    value = field.value;\n                  }\n\n                  numBytes += sizeOfFunction(value);\n\n                  // Subtables take 2 more bytes for offsets.\n                  if (field.type === 'TABLE') {\n                    numBytes += 2;\n                  }\n                }\n\n                return numBytes;\n              };\n\n              encode.RECORD = encode.TABLE;\n              sizeOf.RECORD = sizeOf.TABLE;\n\n              // Merge in a list of bytes.\n              encode.LITERAL = function(v) {\n                return v;\n              };\n\n              sizeOf.LITERAL = function(v) {\n                return v.length;\n              };\n\n              // Table metadata\n\n              /**\n               * @exports opentype.Table\n               * @class\n               * @param {string} tableName\n               * @param {Array} fields\n               * @param {Object} options\n               * @constructor\n               */\n              function Table(tableName, fields, options) {\n                var this$1 = this;\n\n                for (var i = 0; i < fields.length; i += 1) {\n                  var field = fields[i];\n                  this$1[field.name] = field.value;\n                }\n\n                this.tableName = tableName;\n                this.fields = fields;\n                if (options) {\n                  var optionKeys = Object.keys(options);\n                  for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {\n                    var k = optionKeys[i$1];\n                    var v = options[k];\n                    if (this$1[k] !== undefined) {\n                      this$1[k] = v;\n                    }\n                  }\n                }\n              }\n\n              /**\n               * Encodes the table and returns an array of bytes\n               * @return {Array}\n               */\n              Table.prototype.encode = function() {\n                return encode.TABLE(this);\n              };\n\n              /**\n               * Get the size of the table.\n               * @return {number}\n               */\n              Table.prototype.sizeOf = function() {\n                return sizeOf.TABLE(this);\n              };\n\n              /**\n               * @private\n               */\n              function ushortList(itemName, list, count) {\n                if (count === undefined) {\n                  count = list.length;\n                }\n                var fields = new Array(list.length + 1);\n                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n                for (var i = 0; i < list.length; i++) {\n                  fields[i + 1] = { name: itemName + i, type: 'USHORT', value: list[i] };\n                }\n                return fields;\n              }\n\n              /**\n               * @private\n               */\n              function tableList(itemName, records, itemCallback) {\n                var count = records.length;\n                var fields = new Array(count + 1);\n                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n                for (var i = 0; i < count; i++) {\n                  fields[i + 1] = {\n                    name: itemName + i,\n                    type: 'TABLE',\n                    value: itemCallback(records[i], i)\n                  };\n                }\n                return fields;\n              }\n\n              /**\n               * @private\n               */\n              function recordList(itemName, records, itemCallback) {\n                var count = records.length;\n                var fields = [];\n                fields[0] = { name: itemName + 'Count', type: 'USHORT', value: count };\n                for (var i = 0; i < count; i++) {\n                  fields = fields.concat(itemCallback(records[i], i));\n                }\n                return fields;\n              }\n\n              // Common Layout Tables\n\n              /**\n               * @exports opentype.Coverage\n               * @class\n               * @param {opentype.Table}\n               * @constructor\n               * @extends opentype.Table\n               */\n              function Coverage(coverageTable) {\n                if (coverageTable.format === 1) {\n                  Table.call(\n                    this,\n                    'coverageTable',\n                    [{ name: 'coverageFormat', type: 'USHORT', value: 1 }].concat(\n                      ushortList('glyph', coverageTable.glyphs)\n                    )\n                  );\n                } else {\n                  check.assert(false, \"Can't create coverage table format 2 yet.\");\n                }\n              }\n              Coverage.prototype = Object.create(Table.prototype);\n              Coverage.prototype.constructor = Coverage;\n\n              function ScriptList(scriptListTable) {\n                Table.call(\n                  this,\n                  'scriptListTable',\n                  recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {\n                    var script = scriptRecord.script;\n                    var defaultLangSys = script.defaultLangSys;\n                    check.assert(\n                      !!defaultLangSys,\n                      'Unable to write GSUB: script ' +\n                        scriptRecord.tag +\n                        ' has no default language system.'\n                    );\n                    return [\n                      { name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag },\n                      {\n                        name: 'script' + i,\n                        type: 'TABLE',\n                        value: new Table(\n                          'scriptTable',\n                          [\n                            {\n                              name: 'defaultLangSys',\n                              type: 'TABLE',\n                              value: new Table(\n                                'defaultLangSys',\n                                [\n                                  { name: 'lookupOrder', type: 'USHORT', value: 0 },\n                                  {\n                                    name: 'reqFeatureIndex',\n                                    type: 'USHORT',\n                                    value: defaultLangSys.reqFeatureIndex\n                                  }\n                                ].concat(\n                                  ushortList('featureIndex', defaultLangSys.featureIndexes)\n                                )\n                              )\n                            }\n                          ].concat(\n                            recordList('langSys', script.langSysRecords, function(\n                              langSysRecord,\n                              i\n                            ) {\n                              var langSys = langSysRecord.langSys;\n                              return [\n                                {\n                                  name: 'langSysTag' + i,\n                                  type: 'TAG',\n                                  value: langSysRecord.tag\n                                },\n                                {\n                                  name: 'langSys' + i,\n                                  type: 'TABLE',\n                                  value: new Table(\n                                    'langSys',\n                                    [\n                                      { name: 'lookupOrder', type: 'USHORT', value: 0 },\n                                      {\n                                        name: 'reqFeatureIndex',\n                                        type: 'USHORT',\n                                        value: langSys.reqFeatureIndex\n                                      }\n                                    ].concat(\n                                      ushortList('featureIndex', langSys.featureIndexes)\n                                    )\n                                  )\n                                }\n                              ];\n                            })\n                          )\n                        )\n                      }\n                    ];\n                  })\n                );\n              }\n              ScriptList.prototype = Object.create(Table.prototype);\n              ScriptList.prototype.constructor = ScriptList;\n\n              /**\n               * @exports opentype.FeatureList\n               * @class\n               * @param {opentype.Table}\n               * @constructor\n               * @extends opentype.Table\n               */\n              function FeatureList(featureListTable) {\n                Table.call(\n                  this,\n                  'featureListTable',\n                  recordList('featureRecord', featureListTable, function(featureRecord, i) {\n                    var feature = featureRecord.feature;\n                    return [\n                      { name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag },\n                      {\n                        name: 'feature' + i,\n                        type: 'TABLE',\n                        value: new Table(\n                          'featureTable',\n                          [\n                            {\n                              name: 'featureParams',\n                              type: 'USHORT',\n                              value: feature.featureParams\n                            }\n                          ].concat(ushortList('lookupListIndex', feature.lookupListIndexes))\n                        )\n                      }\n                    ];\n                  })\n                );\n              }\n              FeatureList.prototype = Object.create(Table.prototype);\n              FeatureList.prototype.constructor = FeatureList;\n\n              /**\n               * @exports opentype.LookupList\n               * @class\n               * @param {opentype.Table}\n               * @param {Object}\n               * @constructor\n               * @extends opentype.Table\n               */\n              function LookupList(lookupListTable, subtableMakers) {\n                Table.call(\n                  this,\n                  'lookupListTable',\n                  tableList('lookup', lookupListTable, function(lookupTable) {\n                    var subtableCallback = subtableMakers[lookupTable.lookupType];\n                    check.assert(\n                      !!subtableCallback,\n                      'Unable to write GSUB lookup type ' +\n                        lookupTable.lookupType +\n                        ' tables.'\n                    );\n                    return new Table(\n                      'lookupTable',\n                      [\n                        {\n                          name: 'lookupType',\n                          type: 'USHORT',\n                          value: lookupTable.lookupType\n                        },\n                        {\n                          name: 'lookupFlag',\n                          type: 'USHORT',\n                          value: lookupTable.lookupFlag\n                        }\n                      ].concat(\n                        tableList('subtable', lookupTable.subtables, subtableCallback)\n                      )\n                    );\n                  })\n                );\n              }\n              LookupList.prototype = Object.create(Table.prototype);\n              LookupList.prototype.constructor = LookupList;\n\n              // Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n              // Don't use offsets inside Records (probable bug), only in Tables.\n              var table = {\n                Table: Table,\n                Record: Table,\n                Coverage: Coverage,\n                ScriptList: ScriptList,\n                FeatureList: FeatureList,\n                LookupList: LookupList,\n                ushortList: ushortList,\n                tableList: tableList,\n                recordList: recordList\n              };\n\n              // Parsing utility functions\n\n              // Retrieve an unsigned byte from the DataView.\n              function getByte(dataView, offset) {\n                return dataView.getUint8(offset);\n              }\n\n              // Retrieve an unsigned 16-bit short from the DataView.\n              // The value is stored in big endian.\n              function getUShort(dataView, offset) {\n                return dataView.getUint16(offset, false);\n              }\n\n              // Retrieve a signed 16-bit short from the DataView.\n              // The value is stored in big endian.\n              function getShort(dataView, offset) {\n                return dataView.getInt16(offset, false);\n              }\n\n              // Retrieve an unsigned 32-bit long from the DataView.\n              // The value is stored in big endian.\n              function getULong(dataView, offset) {\n                return dataView.getUint32(offset, false);\n              }\n\n              // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n              // The value is stored in big endian.\n              function getFixed(dataView, offset) {\n                var decimal = dataView.getInt16(offset, false);\n                var fraction = dataView.getUint16(offset + 2, false);\n                return decimal + fraction / 65535;\n              }\n\n              // Retrieve a 4-character tag from the DataView.\n              // Tags are used to identify tables.\n              function getTag(dataView, offset) {\n                var tag = '';\n                for (var i = offset; i < offset + 4; i += 1) {\n                  tag += String.fromCharCode(dataView.getInt8(i));\n                }\n\n                return tag;\n              }\n\n              // Retrieve an offset from the DataView.\n              // Offsets are 1 to 4 bytes in length, depending on the offSize argument.\n              function getOffset(dataView, offset, offSize) {\n                var v = 0;\n                for (var i = 0; i < offSize; i += 1) {\n                  v <<= 8;\n                  v += dataView.getUint8(offset + i);\n                }\n\n                return v;\n              }\n\n              // Retrieve a number of bytes from start offset to the end offset from the DataView.\n              function getBytes(dataView, startOffset, endOffset) {\n                var bytes = [];\n                for (var i = startOffset; i < endOffset; i += 1) {\n                  bytes.push(dataView.getUint8(i));\n                }\n\n                return bytes;\n              }\n\n              // Convert the list of bytes to a string.\n              function bytesToString(bytes) {\n                var s = '';\n                for (var i = 0; i < bytes.length; i += 1) {\n                  s += String.fromCharCode(bytes[i]);\n                }\n\n                return s;\n              }\n\n              var typeOffsets = {\n                byte: 1,\n                uShort: 2,\n                short: 2,\n                uLong: 4,\n                fixed: 4,\n                longDateTime: 8,\n                tag: 4\n              };\n\n              // A stateful parser that changes the offset whenever a value is retrieved.\n              // The data is a DataView.\n              function Parser(data, offset) {\n                this.data = data;\n                this.offset = offset;\n                this.relativeOffset = 0;\n              }\n\n              Parser.prototype.parseByte = function() {\n                var v = this.data.getUint8(this.offset + this.relativeOffset);\n                this.relativeOffset += 1;\n                return v;\n              };\n\n              Parser.prototype.parseChar = function() {\n                var v = this.data.getInt8(this.offset + this.relativeOffset);\n                this.relativeOffset += 1;\n                return v;\n              };\n\n              Parser.prototype.parseCard8 = Parser.prototype.parseByte;\n\n              Parser.prototype.parseUShort = function() {\n                var v = this.data.getUint16(this.offset + this.relativeOffset);\n                this.relativeOffset += 2;\n                return v;\n              };\n\n              Parser.prototype.parseCard16 = Parser.prototype.parseUShort;\n              Parser.prototype.parseSID = Parser.prototype.parseUShort;\n              Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\n              Parser.prototype.parseShort = function() {\n                var v = this.data.getInt16(this.offset + this.relativeOffset);\n                this.relativeOffset += 2;\n                return v;\n              };\n\n              Parser.prototype.parseF2Dot14 = function() {\n                var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n                this.relativeOffset += 2;\n                return v;\n              };\n\n              Parser.prototype.parseULong = function() {\n                var v = getULong(this.data, this.offset + this.relativeOffset);\n                this.relativeOffset += 4;\n                return v;\n              };\n\n              Parser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\n              Parser.prototype.parseFixed = function() {\n                var v = getFixed(this.data, this.offset + this.relativeOffset);\n                this.relativeOffset += 4;\n                return v;\n              };\n\n              Parser.prototype.parseString = function(length) {\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                var string = '';\n                this.relativeOffset += length;\n                for (var i = 0; i < length; i++) {\n                  string += String.fromCharCode(dataView.getUint8(offset + i));\n                }\n\n                return string;\n              };\n\n              Parser.prototype.parseTag = function() {\n                return this.parseString(4);\n              };\n\n              // LONGDATETIME is a 64-bit integer.\n              // JavaScript and unix timestamps traditionally use 32 bits, so we\n              // only take the last 32 bits.\n              // + Since until 2038 those bits will be filled by zeros we can ignore them.\n              Parser.prototype.parseLongDateTime = function() {\n                var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n                // Subtract seconds between 01/01/1904 and 01/01/1970\n                // to convert Apple Mac timestamp to Standard Unix timestamp\n                v -= 2082844800;\n                this.relativeOffset += 8;\n                return v;\n              };\n\n              Parser.prototype.parseVersion = function(minorBase) {\n                var major = getUShort(this.data, this.offset + this.relativeOffset);\n\n                // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n                // Default returns the correct number if minor = 0xN000 where N is 0-9\n                // Set minorBase to 1 for tables that use minor = N where N is 0-9\n                var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n                this.relativeOffset += 4;\n                if (minorBase === undefined) {\n                  minorBase = 0x1000;\n                }\n                return major + minor / minorBase / 10;\n              };\n\n              Parser.prototype.skip = function(type, amount) {\n                if (amount === undefined) {\n                  amount = 1;\n                }\n\n                this.relativeOffset += typeOffsets[type] * amount;\n              };\n\n              ///// Parsing lists and records ///////////////////////////////\n\n              // Parse a list of 32 bit unsigned integers.\n              Parser.prototype.parseULongList = function(count) {\n                if (count === undefined) {\n                  count = this.parseULong();\n                }\n                var offsets = new Array(count);\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                for (var i = 0; i < count; i++) {\n                  offsets[i] = dataView.getUint32(offset);\n                  offset += 4;\n                }\n\n                this.relativeOffset += count * 4;\n                return offsets;\n              };\n\n              // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n              // or provided as an argument.\n              Parser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function(\n                count\n              ) {\n                if (count === undefined) {\n                  count = this.parseUShort();\n                }\n                var offsets = new Array(count);\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                for (var i = 0; i < count; i++) {\n                  offsets[i] = dataView.getUint16(offset);\n                  offset += 2;\n                }\n\n                this.relativeOffset += count * 2;\n                return offsets;\n              };\n\n              // Parses a list of 16 bit signed integers.\n              Parser.prototype.parseShortList = function(count) {\n                var list = new Array(count);\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                for (var i = 0; i < count; i++) {\n                  list[i] = dataView.getInt16(offset);\n                  offset += 2;\n                }\n\n                this.relativeOffset += count * 2;\n                return list;\n              };\n\n              // Parses a list of bytes.\n              Parser.prototype.parseByteList = function(count) {\n                var list = new Array(count);\n                var dataView = this.data;\n                var offset = this.offset + this.relativeOffset;\n                for (var i = 0; i < count; i++) {\n                  list[i] = dataView.getUint8(offset++);\n                }\n\n                this.relativeOffset += count;\n                return list;\n              };\n\n              /**\n               * Parse a list of items.\n               * Record count is optional, if omitted it is read from the stream.\n               * itemCallback is one of the Parser methods.\n               */\n              Parser.prototype.parseList = function(count, itemCallback) {\n                var this$1 = this;\n\n                if (!itemCallback) {\n                  itemCallback = count;\n                  count = this.parseUShort();\n                }\n                var list = new Array(count);\n                for (var i = 0; i < count; i++) {\n                  list[i] = itemCallback.call(this$1);\n                }\n                return list;\n              };\n\n              Parser.prototype.parseList32 = function(count, itemCallback) {\n                var this$1 = this;\n\n                if (!itemCallback) {\n                  itemCallback = count;\n                  count = this.parseULong();\n                }\n                var list = new Array(count);\n                for (var i = 0; i < count; i++) {\n                  list[i] = itemCallback.call(this$1);\n                }\n                return list;\n              };\n\n              /**\n               * Parse a list of records.\n               * Record count is optional, if omitted it is read from the stream.\n               * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n               */\n              Parser.prototype.parseRecordList = function(count, recordDescription) {\n                var this$1 = this;\n\n                // If the count argument is absent, read it in the stream.\n                if (!recordDescription) {\n                  recordDescription = count;\n                  count = this.parseUShort();\n                }\n                var records = new Array(count);\n                var fields = Object.keys(recordDescription);\n                for (var i = 0; i < count; i++) {\n                  var rec = {};\n                  for (var j = 0; j < fields.length; j++) {\n                    var fieldName = fields[j];\n                    var fieldType = recordDescription[fieldName];\n                    rec[fieldName] = fieldType.call(this$1);\n                  }\n                  records[i] = rec;\n                }\n                return records;\n              };\n\n              Parser.prototype.parseRecordList32 = function(count, recordDescription) {\n                var this$1 = this;\n\n                // If the count argument is absent, read it in the stream.\n                if (!recordDescription) {\n                  recordDescription = count;\n                  count = this.parseULong();\n                }\n                var records = new Array(count);\n                var fields = Object.keys(recordDescription);\n                for (var i = 0; i < count; i++) {\n                  var rec = {};\n                  for (var j = 0; j < fields.length; j++) {\n                    var fieldName = fields[j];\n                    var fieldType = recordDescription[fieldName];\n                    rec[fieldName] = fieldType.call(this$1);\n                  }\n                  records[i] = rec;\n                }\n                return records;\n              };\n\n              // Parse a data structure into an object\n              // Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n              Parser.prototype.parseStruct = function(description) {\n                var this$1 = this;\n\n                if (typeof description === 'function') {\n                  return description.call(this);\n                } else {\n                  var fields = Object.keys(description);\n                  var struct = {};\n                  for (var j = 0; j < fields.length; j++) {\n                    var fieldName = fields[j];\n                    var fieldType = description[fieldName];\n                    struct[fieldName] = fieldType.call(this$1);\n                  }\n                  return struct;\n                }\n              };\n\n              /**\n               * Parse a GPOS valueRecord\n               * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n               * valueFormat is optional, if omitted it is read from the stream.\n               */\n              Parser.prototype.parseValueRecord = function(valueFormat) {\n                if (valueFormat === undefined) {\n                  valueFormat = this.parseUShort();\n                }\n                if (valueFormat === 0) {\n                  // valueFormat2 in kerning pairs is most often 0\n                  // in this case return undefined instead of an empty object, to save space\n                  return;\n                }\n                var valueRecord = {};\n\n                if (valueFormat & 0x0001) {\n                  valueRecord.xPlacement = this.parseShort();\n                }\n                if (valueFormat & 0x0002) {\n                  valueRecord.yPlacement = this.parseShort();\n                }\n                if (valueFormat & 0x0004) {\n                  valueRecord.xAdvance = this.parseShort();\n                }\n                if (valueFormat & 0x0008) {\n                  valueRecord.yAdvance = this.parseShort();\n                }\n\n                // Device table (non-variable font) / VariationIndex table (variable font) not supported\n                // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n                if (valueFormat & 0x0010) {\n                  valueRecord.xPlaDevice = undefined;\n                  this.parseShort();\n                }\n                if (valueFormat & 0x0020) {\n                  valueRecord.yPlaDevice = undefined;\n                  this.parseShort();\n                }\n                if (valueFormat & 0x0040) {\n                  valueRecord.xAdvDevice = undefined;\n                  this.parseShort();\n                }\n                if (valueFormat & 0x0080) {\n                  valueRecord.yAdvDevice = undefined;\n                  this.parseShort();\n                }\n\n                return valueRecord;\n              };\n\n              /**\n               * Parse a list of GPOS valueRecords\n               * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n               * valueFormat and valueCount are read from the stream.\n               */\n              Parser.prototype.parseValueRecordList = function() {\n                var this$1 = this;\n\n                var valueFormat = this.parseUShort();\n                var valueCount = this.parseUShort();\n                var values = new Array(valueCount);\n                for (var i = 0; i < valueCount; i++) {\n                  values[i] = this$1.parseValueRecord(valueFormat);\n                }\n                return values;\n              };\n\n              Parser.prototype.parsePointer = function(description) {\n                var structOffset = this.parseOffset16();\n                if (structOffset > 0) {\n                  // NULL offset => return undefined\n                  return new Parser(this.data, this.offset + structOffset).parseStruct(\n                    description\n                  );\n                }\n                return undefined;\n              };\n\n              Parser.prototype.parsePointer32 = function(description) {\n                var structOffset = this.parseOffset32();\n                if (structOffset > 0) {\n                  // NULL offset => return undefined\n                  return new Parser(this.data, this.offset + structOffset).parseStruct(\n                    description\n                  );\n                }\n                return undefined;\n              };\n\n              /**\n               * Parse a list of offsets to lists of 16-bit integers,\n               * or a list of offsets to lists of offsets to any kind of items.\n               * If itemCallback is not provided, a list of list of UShort is assumed.\n               * If provided, itemCallback is called on each item and must parse the item.\n               * See examples in tables/gsub.js\n               */\n              Parser.prototype.parseListOfLists = function(itemCallback) {\n                var this$1 = this;\n\n                var offsets = this.parseOffset16List();\n                var count = offsets.length;\n                var relativeOffset = this.relativeOffset;\n                var list = new Array(count);\n                for (var i = 0; i < count; i++) {\n                  var start = offsets[i];\n                  if (start === 0) {\n                    // NULL offset\n                    // Add i as owned property to list. Convenient with assert.\n                    list[i] = undefined;\n                    continue;\n                  }\n                  this$1.relativeOffset = start;\n                  if (itemCallback) {\n                    var subOffsets = this$1.parseOffset16List();\n                    var subList = new Array(subOffsets.length);\n                    for (var j = 0; j < subOffsets.length; j++) {\n                      this$1.relativeOffset = start + subOffsets[j];\n                      subList[j] = itemCallback.call(this$1);\n                    }\n                    list[i] = subList;\n                  } else {\n                    list[i] = this$1.parseUShortList();\n                  }\n                }\n                this.relativeOffset = relativeOffset;\n                return list;\n              };\n\n              ///// Complex tables parsing //////////////////////////////////\n\n              // Parse a coverage table in a GSUB, GPOS or GDEF table.\n              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n              // parser.offset must point to the start of the table containing the coverage.\n              Parser.prototype.parseCoverage = function() {\n                var this$1 = this;\n\n                var startOffset = this.offset + this.relativeOffset;\n                var format = this.parseUShort();\n                var count = this.parseUShort();\n                if (format === 1) {\n                  return {\n                    format: 1,\n                    glyphs: this.parseUShortList(count)\n                  };\n                } else if (format === 2) {\n                  var ranges = new Array(count);\n                  for (var i = 0; i < count; i++) {\n                    ranges[i] = {\n                      start: this$1.parseUShort(),\n                      end: this$1.parseUShort(),\n                      index: this$1.parseUShort()\n                    };\n                  }\n                  return {\n                    format: 2,\n                    ranges: ranges\n                  };\n                }\n                throw new Error(\n                  '0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.'\n                );\n              };\n\n              // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n              Parser.prototype.parseClassDef = function() {\n                var startOffset = this.offset + this.relativeOffset;\n                var format = this.parseUShort();\n                if (format === 1) {\n                  return {\n                    format: 1,\n                    startGlyph: this.parseUShort(),\n                    classes: this.parseUShortList()\n                  };\n                } else if (format === 2) {\n                  return {\n                    format: 2,\n                    ranges: this.parseRecordList({\n                      start: Parser.uShort,\n                      end: Parser.uShort,\n                      classId: Parser.uShort\n                    })\n                  };\n                }\n                throw new Error(\n                  '0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.'\n                );\n              };\n\n              ///// Static methods ///////////////////////////////////\n              // These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\n              Parser.list = function(count, itemCallback) {\n                return function() {\n                  return this.parseList(count, itemCallback);\n                };\n              };\n\n              Parser.list32 = function(count, itemCallback) {\n                return function() {\n                  return this.parseList32(count, itemCallback);\n                };\n              };\n\n              Parser.recordList = function(count, recordDescription) {\n                return function() {\n                  return this.parseRecordList(count, recordDescription);\n                };\n              };\n\n              Parser.recordList32 = function(count, recordDescription) {\n                return function() {\n                  return this.parseRecordList32(count, recordDescription);\n                };\n              };\n\n              Parser.pointer = function(description) {\n                return function() {\n                  return this.parsePointer(description);\n                };\n              };\n\n              Parser.pointer32 = function(description) {\n                return function() {\n                  return this.parsePointer32(description);\n                };\n              };\n\n              Parser.tag = Parser.prototype.parseTag;\n              Parser.byte = Parser.prototype.parseByte;\n              Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\n              Parser.uShortList = Parser.prototype.parseUShortList;\n              Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;\n              Parser.uLongList = Parser.prototype.parseULongList;\n              Parser.struct = Parser.prototype.parseStruct;\n              Parser.coverage = Parser.prototype.parseCoverage;\n              Parser.classDef = Parser.prototype.parseClassDef;\n\n              ///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n              // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\n              var langSysTable = {\n                reserved: Parser.uShort,\n                reqFeatureIndex: Parser.uShort,\n                featureIndexes: Parser.uShortList\n              };\n\n              Parser.prototype.parseScriptList = function() {\n                return (\n                  this.parsePointer(\n                    Parser.recordList({\n                      tag: Parser.tag,\n                      script: Parser.pointer({\n                        defaultLangSys: Parser.pointer(langSysTable),\n                        langSysRecords: Parser.recordList({\n                          tag: Parser.tag,\n                          langSys: Parser.pointer(langSysTable)\n                        })\n                      })\n                    })\n                  ) || []\n                );\n              };\n\n              Parser.prototype.parseFeatureList = function() {\n                return (\n                  this.parsePointer(\n                    Parser.recordList({\n                      tag: Parser.tag,\n                      feature: Parser.pointer({\n                        featureParams: Parser.offset16,\n                        lookupListIndexes: Parser.uShortList\n                      })\n                    })\n                  ) || []\n                );\n              };\n\n              Parser.prototype.parseLookupList = function(lookupTableParsers) {\n                return (\n                  this.parsePointer(\n                    Parser.list(\n                      Parser.pointer(function() {\n                        var lookupType = this.parseUShort();\n                        check.argument(\n                          1 <= lookupType && lookupType <= 9,\n                          'GPOS/GSUB lookup type ' + lookupType + ' unknown.'\n                        );\n                        var lookupFlag = this.parseUShort();\n                        var useMarkFilteringSet = lookupFlag & 0x10;\n                        return {\n                          lookupType: lookupType,\n                          lookupFlag: lookupFlag,\n                          subtables: this.parseList(\n                            Parser.pointer(lookupTableParsers[lookupType])\n                          ),\n                          markFilteringSet: useMarkFilteringSet\n                            ? this.parseUShort()\n                            : undefined\n                        };\n                      })\n                    )\n                  ) || []\n                );\n              };\n\n              Parser.prototype.parseFeatureVariationsList = function() {\n                return (\n                  this.parsePointer32(function() {\n                    var majorVersion = this.parseUShort();\n                    var minorVersion = this.parseUShort();\n                    check.argument(\n                      majorVersion === 1 && minorVersion < 1,\n                      'GPOS/GSUB feature variations table unknown.'\n                    );\n                    var featureVariations = this.parseRecordList32({\n                      conditionSetOffset: Parser.offset32,\n                      featureTableSubstitutionOffset: Parser.offset32\n                    });\n                    return featureVariations;\n                  }) || []\n                );\n              };\n\n              var parse = {\n                getByte: getByte,\n                getCard8: getByte,\n                getUShort: getUShort,\n                getCard16: getUShort,\n                getShort: getShort,\n                getULong: getULong,\n                getFixed: getFixed,\n                getTag: getTag,\n                getOffset: getOffset,\n                getBytes: getBytes,\n                bytesToString: bytesToString,\n                Parser: Parser\n              };\n\n              // The `cmap` table stores the mappings from characters to glyphs.\n\n              function parseCmapTableFormat12(cmap, p) {\n                //Skip reserved.\n                p.parseUShort();\n\n                // Length in bytes of the sub-tables.\n                cmap.length = p.parseULong();\n                cmap.language = p.parseULong();\n\n                var groupCount;\n                cmap.groupCount = groupCount = p.parseULong();\n                cmap.glyphIndexMap = {};\n\n                for (var i = 0; i < groupCount; i += 1) {\n                  var startCharCode = p.parseULong();\n                  var endCharCode = p.parseULong();\n                  var startGlyphId = p.parseULong();\n\n                  for (var c = startCharCode; c <= endCharCode; c += 1) {\n                    cmap.glyphIndexMap[c] = startGlyphId;\n                    startGlyphId++;\n                  }\n                }\n              }\n\n              function parseCmapTableFormat4(cmap, p, data, start, offset) {\n                // Length in bytes of the sub-tables.\n                cmap.length = p.parseUShort();\n                cmap.language = p.parseUShort();\n\n                // segCount is stored x 2.\n                var segCount;\n                cmap.segCount = segCount = p.parseUShort() >> 1;\n\n                // Skip searchRange, entrySelector, rangeShift.\n                p.skip('uShort', 3);\n\n                // The \"unrolled\" mapping from character codes to glyph indices.\n                cmap.glyphIndexMap = {};\n                var endCountParser = new parse.Parser(data, start + offset + 14);\n                var startCountParser = new parse.Parser(\n                  data,\n                  start + offset + 16 + segCount * 2\n                );\n                var idDeltaParser = new parse.Parser(\n                  data,\n                  start + offset + 16 + segCount * 4\n                );\n                var idRangeOffsetParser = new parse.Parser(\n                  data,\n                  start + offset + 16 + segCount * 6\n                );\n                var glyphIndexOffset = start + offset + 16 + segCount * 8;\n                for (var i = 0; i < segCount - 1; i += 1) {\n                  var glyphIndex = void 0;\n                  var endCount = endCountParser.parseUShort();\n                  var startCount = startCountParser.parseUShort();\n                  var idDelta = idDeltaParser.parseShort();\n                  var idRangeOffset = idRangeOffsetParser.parseUShort();\n                  for (var c = startCount; c <= endCount; c += 1) {\n                    if (idRangeOffset !== 0) {\n                      // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                      // Take the current offset in the idRangeOffset array.\n                      glyphIndexOffset =\n                        idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;\n\n                      // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                      glyphIndexOffset += idRangeOffset;\n\n                      // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                      glyphIndexOffset += (c - startCount) * 2;\n                      glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                      if (glyphIndex !== 0) {\n                        glyphIndex = (glyphIndex + idDelta) & 0xffff;\n                      }\n                    } else {\n                      glyphIndex = (c + idDelta) & 0xffff;\n                    }\n\n                    cmap.glyphIndexMap[c] = glyphIndex;\n                  }\n                }\n              }\n\n              // Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n              // There are many available formats, but we only support the Windows format 4 and 12.\n              // This function returns a `CmapEncoding` object or null if no supported format could be found.\n              function parseCmapTable(data, start) {\n                var cmap = {};\n                cmap.version = parse.getUShort(data, start);\n                check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n                // The cmap table can contain many sub-tables, each with their own format.\n                // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n                cmap.numTables = parse.getUShort(data, start + 2);\n                var offset = -1;\n                for (var i = cmap.numTables - 1; i >= 0; i -= 1) {\n                  var platformId = parse.getUShort(data, start + 4 + i * 8);\n                  var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);\n                  if (\n                    (platformId === 3 &&\n                      (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n                    (platformId === 0 &&\n                      (encodingId === 0 ||\n                        encodingId === 1 ||\n                        encodingId === 2 ||\n                        encodingId === 3 ||\n                        encodingId === 4))\n                  ) {\n                    offset = parse.getULong(data, start + 4 + i * 8 + 4);\n                    break;\n                  }\n                }\n\n                if (offset === -1) {\n                  // There is no cmap table in the font that we support.\n                  throw new Error('No valid cmap sub-tables found.');\n                }\n\n                var p = new parse.Parser(data, start + offset);\n                cmap.format = p.parseUShort();\n\n                if (cmap.format === 12) {\n                  parseCmapTableFormat12(cmap, p);\n                } else if (cmap.format === 4) {\n                  parseCmapTableFormat4(cmap, p, data, start, offset);\n                } else {\n                  throw new Error(\n                    'Only format 4 and 12 cmap tables are supported (found format ' +\n                      cmap.format +\n                      ').'\n                  );\n                }\n\n                return cmap;\n              }\n\n              function addSegment(t, code, glyphIndex) {\n                t.segments.push({\n                  end: code,\n                  start: code,\n                  delta: -(code - glyphIndex),\n                  offset: 0,\n                  glyphIndex: glyphIndex\n                });\n              }\n\n              function addTerminatorSegment(t) {\n                t.segments.push({\n                  end: 0xffff,\n                  start: 0xffff,\n                  delta: 1,\n                  offset: 0\n                });\n              }\n\n              // Make cmap table, format 4 by default, 12 if needed only\n              function makeCmapTable(glyphs) {\n                // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)\n                var isPlan0Only = true;\n                var i;\n\n                // Check if we need to add cmap format 12 or if format 4 only is fine\n                for (i = glyphs.length - 1; i > 0; i -= 1) {\n                  var g = glyphs.get(i);\n                  if (g.unicode > 65535) {\n                    console.log('Adding CMAP format 12 (needed!)');\n                    isPlan0Only = false;\n                    break;\n                  }\n                }\n\n                var cmapTable = [\n                  { name: 'version', type: 'USHORT', value: 0 },\n                  { name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2 },\n\n                  // CMAP 4 header\n                  { name: 'platformID', type: 'USHORT', value: 3 },\n                  { name: 'encodingID', type: 'USHORT', value: 1 },\n                  { name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : 12 + 8 }\n                ];\n\n                if (!isPlan0Only) {\n                  cmapTable = cmapTable.concat([\n                    // CMAP 12 header\n                    { name: 'cmap12PlatformID', type: 'USHORT', value: 3 }, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere\n                    { name: 'cmap12EncodingID', type: 'USHORT', value: 10 },\n                    { name: 'cmap12Offset', type: 'ULONG', value: 0 }\n                  ]);\n                }\n\n                cmapTable = cmapTable.concat([\n                  // CMAP 4 Subtable\n                  { name: 'format', type: 'USHORT', value: 4 },\n                  { name: 'cmap4Length', type: 'USHORT', value: 0 },\n                  { name: 'language', type: 'USHORT', value: 0 },\n                  { name: 'segCountX2', type: 'USHORT', value: 0 },\n                  { name: 'searchRange', type: 'USHORT', value: 0 },\n                  { name: 'entrySelector', type: 'USHORT', value: 0 },\n                  { name: 'rangeShift', type: 'USHORT', value: 0 }\n                ]);\n\n                var t = new table.Table('cmap', cmapTable);\n\n                t.segments = [];\n                for (i = 0; i < glyphs.length; i += 1) {\n                  var glyph = glyphs.get(i);\n                  for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                    addSegment(t, glyph.unicodes[j], i);\n                  }\n\n                  t.segments = t.segments.sort(function(a, b) {\n                    return a.start - b.start;\n                  });\n                }\n\n                addTerminatorSegment(t);\n\n                var segCount = t.segments.length;\n                var segCountToRemove = 0;\n\n                // CMAP 4\n                // Set up parallel segment arrays.\n                var endCounts = [];\n                var startCounts = [];\n                var idDeltas = [];\n                var idRangeOffsets = [];\n                var glyphIds = [];\n\n                // CMAP 12\n                var cmap12Groups = [];\n\n                // Reminder this loop is not following the specification at 100%\n                // The specification -> find suites of characters and make a group\n                // Here we're doing one group for each letter\n                // Doing as the spec can save 8 times (or more) space\n                for (i = 0; i < segCount; i += 1) {\n                  var segment = t.segments[i];\n\n                  // CMAP 4\n                  if (segment.end <= 65535 && segment.start <= 65535) {\n                    endCounts = endCounts.concat({\n                      name: 'end_' + i,\n                      type: 'USHORT',\n                      value: segment.end\n                    });\n                    startCounts = startCounts.concat({\n                      name: 'start_' + i,\n                      type: 'USHORT',\n                      value: segment.start\n                    });\n                    idDeltas = idDeltas.concat({\n                      name: 'idDelta_' + i,\n                      type: 'SHORT',\n                      value: segment.delta\n                    });\n                    idRangeOffsets = idRangeOffsets.concat({\n                      name: 'idRangeOffset_' + i,\n                      type: 'USHORT',\n                      value: segment.offset\n                    });\n                    if (segment.glyphId !== undefined) {\n                      glyphIds = glyphIds.concat({\n                        name: 'glyph_' + i,\n                        type: 'USHORT',\n                        value: segment.glyphId\n                      });\n                    }\n                  } else {\n                    // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12\n                    segCountToRemove += 1;\n                  }\n\n                  // CMAP 12\n                  // Skip Terminator Segment\n                  if (!isPlan0Only && segment.glyphIndex !== undefined) {\n                    cmap12Groups = cmap12Groups.concat({\n                      name: 'cmap12Start_' + i,\n                      type: 'ULONG',\n                      value: segment.start\n                    });\n                    cmap12Groups = cmap12Groups.concat({\n                      name: 'cmap12End_' + i,\n                      type: 'ULONG',\n                      value: segment.end\n                    });\n                    cmap12Groups = cmap12Groups.concat({\n                      name: 'cmap12Glyph_' + i,\n                      type: 'ULONG',\n                      value: segment.glyphIndex\n                    });\n                  }\n                }\n\n                // CMAP 4 Subtable\n                t.segCountX2 = (segCount - segCountToRemove) * 2;\n                t.searchRange =\n                  Math.pow(\n                    2,\n                    Math.floor(Math.log(segCount - segCountToRemove) / Math.log(2))\n                  ) * 2;\n                t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n                t.rangeShift = t.segCountX2 - t.searchRange;\n\n                t.fields = t.fields.concat(endCounts);\n                t.fields.push({ name: 'reservedPad', type: 'USHORT', value: 0 });\n                t.fields = t.fields.concat(startCounts);\n                t.fields = t.fields.concat(idDeltas);\n                t.fields = t.fields.concat(idRangeOffsets);\n                t.fields = t.fields.concat(glyphIds);\n\n                t.cmap4Length =\n                  14 + // Subtable header\n                  endCounts.length * 2 +\n                  2 + // reservedPad\n                  startCounts.length * 2 +\n                  idDeltas.length * 2 +\n                  idRangeOffsets.length * 2 +\n                  glyphIds.length * 2;\n\n                if (!isPlan0Only) {\n                  // CMAP 12 Subtable\n                  var cmap12Length =\n                    16 + // Subtable header\n                    cmap12Groups.length * 4;\n\n                  t.cmap12Offset = 12 + 2 * 2 + 4 + t.cmap4Length;\n                  t.fields = t.fields.concat([\n                    { name: 'cmap12Format', type: 'USHORT', value: 12 },\n                    { name: 'cmap12Reserved', type: 'USHORT', value: 0 },\n                    { name: 'cmap12Length', type: 'ULONG', value: cmap12Length },\n                    { name: 'cmap12Language', type: 'ULONG', value: 0 },\n                    { name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3 }\n                  ]);\n\n                  t.fields = t.fields.concat(cmap12Groups);\n                }\n\n                return t;\n              }\n\n              var cmap = { parse: parseCmapTable, make: makeCmapTable };\n\n              // Glyph encoding\n\n              var cffStandardStrings = [\n                '.notdef',\n                'space',\n                'exclam',\n                'quotedbl',\n                'numbersign',\n                'dollar',\n                'percent',\n                'ampersand',\n                'quoteright',\n                'parenleft',\n                'parenright',\n                'asterisk',\n                'plus',\n                'comma',\n                'hyphen',\n                'period',\n                'slash',\n                'zero',\n                'one',\n                'two',\n                'three',\n                'four',\n                'five',\n                'six',\n                'seven',\n                'eight',\n                'nine',\n                'colon',\n                'semicolon',\n                'less',\n                'equal',\n                'greater',\n                'question',\n                'at',\n                'A',\n                'B',\n                'C',\n                'D',\n                'E',\n                'F',\n                'G',\n                'H',\n                'I',\n                'J',\n                'K',\n                'L',\n                'M',\n                'N',\n                'O',\n                'P',\n                'Q',\n                'R',\n                'S',\n                'T',\n                'U',\n                'V',\n                'W',\n                'X',\n                'Y',\n                'Z',\n                'bracketleft',\n                'backslash',\n                'bracketright',\n                'asciicircum',\n                'underscore',\n                'quoteleft',\n                'a',\n                'b',\n                'c',\n                'd',\n                'e',\n                'f',\n                'g',\n                'h',\n                'i',\n                'j',\n                'k',\n                'l',\n                'm',\n                'n',\n                'o',\n                'p',\n                'q',\n                'r',\n                's',\n                't',\n                'u',\n                'v',\n                'w',\n                'x',\n                'y',\n                'z',\n                'braceleft',\n                'bar',\n                'braceright',\n                'asciitilde',\n                'exclamdown',\n                'cent',\n                'sterling',\n                'fraction',\n                'yen',\n                'florin',\n                'section',\n                'currency',\n                'quotesingle',\n                'quotedblleft',\n                'guillemotleft',\n                'guilsinglleft',\n                'guilsinglright',\n                'fi',\n                'fl',\n                'endash',\n                'dagger',\n                'daggerdbl',\n                'periodcentered',\n                'paragraph',\n                'bullet',\n                'quotesinglbase',\n                'quotedblbase',\n                'quotedblright',\n                'guillemotright',\n                'ellipsis',\n                'perthousand',\n                'questiondown',\n                'grave',\n                'acute',\n                'circumflex',\n                'tilde',\n                'macron',\n                'breve',\n                'dotaccent',\n                'dieresis',\n                'ring',\n                'cedilla',\n                'hungarumlaut',\n                'ogonek',\n                'caron',\n                'emdash',\n                'AE',\n                'ordfeminine',\n                'Lslash',\n                'Oslash',\n                'OE',\n                'ordmasculine',\n                'ae',\n                'dotlessi',\n                'lslash',\n                'oslash',\n                'oe',\n                'germandbls',\n                'onesuperior',\n                'logicalnot',\n                'mu',\n                'trademark',\n                'Eth',\n                'onehalf',\n                'plusminus',\n                'Thorn',\n                'onequarter',\n                'divide',\n                'brokenbar',\n                'degree',\n                'thorn',\n                'threequarters',\n                'twosuperior',\n                'registered',\n                'minus',\n                'eth',\n                'multiply',\n                'threesuperior',\n                'copyright',\n                'Aacute',\n                'Acircumflex',\n                'Adieresis',\n                'Agrave',\n                'Aring',\n                'Atilde',\n                'Ccedilla',\n                'Eacute',\n                'Ecircumflex',\n                'Edieresis',\n                'Egrave',\n                'Iacute',\n                'Icircumflex',\n                'Idieresis',\n                'Igrave',\n                'Ntilde',\n                'Oacute',\n                'Ocircumflex',\n                'Odieresis',\n                'Ograve',\n                'Otilde',\n                'Scaron',\n                'Uacute',\n                'Ucircumflex',\n                'Udieresis',\n                'Ugrave',\n                'Yacute',\n                'Ydieresis',\n                'Zcaron',\n                'aacute',\n                'acircumflex',\n                'adieresis',\n                'agrave',\n                'aring',\n                'atilde',\n                'ccedilla',\n                'eacute',\n                'ecircumflex',\n                'edieresis',\n                'egrave',\n                'iacute',\n                'icircumflex',\n                'idieresis',\n                'igrave',\n                'ntilde',\n                'oacute',\n                'ocircumflex',\n                'odieresis',\n                'ograve',\n                'otilde',\n                'scaron',\n                'uacute',\n                'ucircumflex',\n                'udieresis',\n                'ugrave',\n                'yacute',\n                'ydieresis',\n                'zcaron',\n                'exclamsmall',\n                'Hungarumlautsmall',\n                'dollaroldstyle',\n                'dollarsuperior',\n                'ampersandsmall',\n                'Acutesmall',\n                'parenleftsuperior',\n                'parenrightsuperior',\n                '266 ff',\n                'onedotenleader',\n                'zerooldstyle',\n                'oneoldstyle',\n                'twooldstyle',\n                'threeoldstyle',\n                'fouroldstyle',\n                'fiveoldstyle',\n                'sixoldstyle',\n                'sevenoldstyle',\n                'eightoldstyle',\n                'nineoldstyle',\n                'commasuperior',\n                'threequartersemdash',\n                'periodsuperior',\n                'questionsmall',\n                'asuperior',\n                'bsuperior',\n                'centsuperior',\n                'dsuperior',\n                'esuperior',\n                'isuperior',\n                'lsuperior',\n                'msuperior',\n                'nsuperior',\n                'osuperior',\n                'rsuperior',\n                'ssuperior',\n                'tsuperior',\n                'ff',\n                'ffi',\n                'ffl',\n                'parenleftinferior',\n                'parenrightinferior',\n                'Circumflexsmall',\n                'hyphensuperior',\n                'Gravesmall',\n                'Asmall',\n                'Bsmall',\n                'Csmall',\n                'Dsmall',\n                'Esmall',\n                'Fsmall',\n                'Gsmall',\n                'Hsmall',\n                'Ismall',\n                'Jsmall',\n                'Ksmall',\n                'Lsmall',\n                'Msmall',\n                'Nsmall',\n                'Osmall',\n                'Psmall',\n                'Qsmall',\n                'Rsmall',\n                'Ssmall',\n                'Tsmall',\n                'Usmall',\n                'Vsmall',\n                'Wsmall',\n                'Xsmall',\n                'Ysmall',\n                'Zsmall',\n                'colonmonetary',\n                'onefitted',\n                'rupiah',\n                'Tildesmall',\n                'exclamdownsmall',\n                'centoldstyle',\n                'Lslashsmall',\n                'Scaronsmall',\n                'Zcaronsmall',\n                'Dieresissmall',\n                'Brevesmall',\n                'Caronsmall',\n                'Dotaccentsmall',\n                'Macronsmall',\n                'figuredash',\n                'hypheninferior',\n                'Ogoneksmall',\n                'Ringsmall',\n                'Cedillasmall',\n                'questiondownsmall',\n                'oneeighth',\n                'threeeighths',\n                'fiveeighths',\n                'seveneighths',\n                'onethird',\n                'twothirds',\n                'zerosuperior',\n                'foursuperior',\n                'fivesuperior',\n                'sixsuperior',\n                'sevensuperior',\n                'eightsuperior',\n                'ninesuperior',\n                'zeroinferior',\n                'oneinferior',\n                'twoinferior',\n                'threeinferior',\n                'fourinferior',\n                'fiveinferior',\n                'sixinferior',\n                'seveninferior',\n                'eightinferior',\n                'nineinferior',\n                'centinferior',\n                'dollarinferior',\n                'periodinferior',\n                'commainferior',\n                'Agravesmall',\n                'Aacutesmall',\n                'Acircumflexsmall',\n                'Atildesmall',\n                'Adieresissmall',\n                'Aringsmall',\n                'AEsmall',\n                'Ccedillasmall',\n                'Egravesmall',\n                'Eacutesmall',\n                'Ecircumflexsmall',\n                'Edieresissmall',\n                'Igravesmall',\n                'Iacutesmall',\n                'Icircumflexsmall',\n                'Idieresissmall',\n                'Ethsmall',\n                'Ntildesmall',\n                'Ogravesmall',\n                'Oacutesmall',\n                'Ocircumflexsmall',\n                'Otildesmall',\n                'Odieresissmall',\n                'OEsmall',\n                'Oslashsmall',\n                'Ugravesmall',\n                'Uacutesmall',\n                'Ucircumflexsmall',\n                'Udieresissmall',\n                'Yacutesmall',\n                'Thornsmall',\n                'Ydieresissmall',\n                '001.000',\n                '001.001',\n                '001.002',\n                '001.003',\n                'Black',\n                'Bold',\n                'Book',\n                'Light',\n                'Medium',\n                'Regular',\n                'Roman',\n                'Semibold'\n              ];\n\n              var cffStandardEncoding = [\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'space',\n                'exclam',\n                'quotedbl',\n                'numbersign',\n                'dollar',\n                'percent',\n                'ampersand',\n                'quoteright',\n                'parenleft',\n                'parenright',\n                'asterisk',\n                'plus',\n                'comma',\n                'hyphen',\n                'period',\n                'slash',\n                'zero',\n                'one',\n                'two',\n                'three',\n                'four',\n                'five',\n                'six',\n                'seven',\n                'eight',\n                'nine',\n                'colon',\n                'semicolon',\n                'less',\n                'equal',\n                'greater',\n                'question',\n                'at',\n                'A',\n                'B',\n                'C',\n                'D',\n                'E',\n                'F',\n                'G',\n                'H',\n                'I',\n                'J',\n                'K',\n                'L',\n                'M',\n                'N',\n                'O',\n                'P',\n                'Q',\n                'R',\n                'S',\n                'T',\n                'U',\n                'V',\n                'W',\n                'X',\n                'Y',\n                'Z',\n                'bracketleft',\n                'backslash',\n                'bracketright',\n                'asciicircum',\n                'underscore',\n                'quoteleft',\n                'a',\n                'b',\n                'c',\n                'd',\n                'e',\n                'f',\n                'g',\n                'h',\n                'i',\n                'j',\n                'k',\n                'l',\n                'm',\n                'n',\n                'o',\n                'p',\n                'q',\n                'r',\n                's',\n                't',\n                'u',\n                'v',\n                'w',\n                'x',\n                'y',\n                'z',\n                'braceleft',\n                'bar',\n                'braceright',\n                'asciitilde',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'exclamdown',\n                'cent',\n                'sterling',\n                'fraction',\n                'yen',\n                'florin',\n                'section',\n                'currency',\n                'quotesingle',\n                'quotedblleft',\n                'guillemotleft',\n                'guilsinglleft',\n                'guilsinglright',\n                'fi',\n                'fl',\n                '',\n                'endash',\n                'dagger',\n                'daggerdbl',\n                'periodcentered',\n                '',\n                'paragraph',\n                'bullet',\n                'quotesinglbase',\n                'quotedblbase',\n                'quotedblright',\n                'guillemotright',\n                'ellipsis',\n                'perthousand',\n                '',\n                'questiondown',\n                '',\n                'grave',\n                'acute',\n                'circumflex',\n                'tilde',\n                'macron',\n                'breve',\n                'dotaccent',\n                'dieresis',\n                '',\n                'ring',\n                'cedilla',\n                '',\n                'hungarumlaut',\n                'ogonek',\n                'caron',\n                'emdash',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'AE',\n                '',\n                'ordfeminine',\n                '',\n                '',\n                '',\n                '',\n                'Lslash',\n                'Oslash',\n                'OE',\n                'ordmasculine',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'ae',\n                '',\n                '',\n                '',\n                'dotlessi',\n                '',\n                '',\n                'lslash',\n                'oslash',\n                'oe',\n                'germandbls'\n              ];\n\n              var cffExpertEncoding = [\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'space',\n                'exclamsmall',\n                'Hungarumlautsmall',\n                '',\n                'dollaroldstyle',\n                'dollarsuperior',\n                'ampersandsmall',\n                'Acutesmall',\n                'parenleftsuperior',\n                'parenrightsuperior',\n                'twodotenleader',\n                'onedotenleader',\n                'comma',\n                'hyphen',\n                'period',\n                'fraction',\n                'zerooldstyle',\n                'oneoldstyle',\n                'twooldstyle',\n                'threeoldstyle',\n                'fouroldstyle',\n                'fiveoldstyle',\n                'sixoldstyle',\n                'sevenoldstyle',\n                'eightoldstyle',\n                'nineoldstyle',\n                'colon',\n                'semicolon',\n                'commasuperior',\n                'threequartersemdash',\n                'periodsuperior',\n                'questionsmall',\n                '',\n                'asuperior',\n                'bsuperior',\n                'centsuperior',\n                'dsuperior',\n                'esuperior',\n                '',\n                '',\n                'isuperior',\n                '',\n                '',\n                'lsuperior',\n                'msuperior',\n                'nsuperior',\n                'osuperior',\n                '',\n                '',\n                'rsuperior',\n                'ssuperior',\n                'tsuperior',\n                '',\n                'ff',\n                'fi',\n                'fl',\n                'ffi',\n                'ffl',\n                'parenleftinferior',\n                '',\n                'parenrightinferior',\n                'Circumflexsmall',\n                'hyphensuperior',\n                'Gravesmall',\n                'Asmall',\n                'Bsmall',\n                'Csmall',\n                'Dsmall',\n                'Esmall',\n                'Fsmall',\n                'Gsmall',\n                'Hsmall',\n                'Ismall',\n                'Jsmall',\n                'Ksmall',\n                'Lsmall',\n                'Msmall',\n                'Nsmall',\n                'Osmall',\n                'Psmall',\n                'Qsmall',\n                'Rsmall',\n                'Ssmall',\n                'Tsmall',\n                'Usmall',\n                'Vsmall',\n                'Wsmall',\n                'Xsmall',\n                'Ysmall',\n                'Zsmall',\n                'colonmonetary',\n                'onefitted',\n                'rupiah',\n                'Tildesmall',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                'exclamdownsmall',\n                'centoldstyle',\n                'Lslashsmall',\n                '',\n                '',\n                'Scaronsmall',\n                'Zcaronsmall',\n                'Dieresissmall',\n                'Brevesmall',\n                'Caronsmall',\n                '',\n                'Dotaccentsmall',\n                '',\n                '',\n                'Macronsmall',\n                '',\n                '',\n                'figuredash',\n                'hypheninferior',\n                '',\n                '',\n                'Ogoneksmall',\n                'Ringsmall',\n                'Cedillasmall',\n                '',\n                '',\n                '',\n                'onequarter',\n                'onehalf',\n                'threequarters',\n                'questiondownsmall',\n                'oneeighth',\n                'threeeighths',\n                'fiveeighths',\n                'seveneighths',\n                'onethird',\n                'twothirds',\n                '',\n                '',\n                'zerosuperior',\n                'onesuperior',\n                'twosuperior',\n                'threesuperior',\n                'foursuperior',\n                'fivesuperior',\n                'sixsuperior',\n                'sevensuperior',\n                'eightsuperior',\n                'ninesuperior',\n                'zeroinferior',\n                'oneinferior',\n                'twoinferior',\n                'threeinferior',\n                'fourinferior',\n                'fiveinferior',\n                'sixinferior',\n                'seveninferior',\n                'eightinferior',\n                'nineinferior',\n                'centinferior',\n                'dollarinferior',\n                'periodinferior',\n                'commainferior',\n                'Agravesmall',\n                'Aacutesmall',\n                'Acircumflexsmall',\n                'Atildesmall',\n                'Adieresissmall',\n                'Aringsmall',\n                'AEsmall',\n                'Ccedillasmall',\n                'Egravesmall',\n                'Eacutesmall',\n                'Ecircumflexsmall',\n                'Edieresissmall',\n                'Igravesmall',\n                'Iacutesmall',\n                'Icircumflexsmall',\n                'Idieresissmall',\n                'Ethsmall',\n                'Ntildesmall',\n                'Ogravesmall',\n                'Oacutesmall',\n                'Ocircumflexsmall',\n                'Otildesmall',\n                'Odieresissmall',\n                'OEsmall',\n                'Oslashsmall',\n                'Ugravesmall',\n                'Uacutesmall',\n                'Ucircumflexsmall',\n                'Udieresissmall',\n                'Yacutesmall',\n                'Thornsmall',\n                'Ydieresissmall'\n              ];\n\n              var standardNames = [\n                '.notdef',\n                '.null',\n                'nonmarkingreturn',\n                'space',\n                'exclam',\n                'quotedbl',\n                'numbersign',\n                'dollar',\n                'percent',\n                'ampersand',\n                'quotesingle',\n                'parenleft',\n                'parenright',\n                'asterisk',\n                'plus',\n                'comma',\n                'hyphen',\n                'period',\n                'slash',\n                'zero',\n                'one',\n                'two',\n                'three',\n                'four',\n                'five',\n                'six',\n                'seven',\n                'eight',\n                'nine',\n                'colon',\n                'semicolon',\n                'less',\n                'equal',\n                'greater',\n                'question',\n                'at',\n                'A',\n                'B',\n                'C',\n                'D',\n                'E',\n                'F',\n                'G',\n                'H',\n                'I',\n                'J',\n                'K',\n                'L',\n                'M',\n                'N',\n                'O',\n                'P',\n                'Q',\n                'R',\n                'S',\n                'T',\n                'U',\n                'V',\n                'W',\n                'X',\n                'Y',\n                'Z',\n                'bracketleft',\n                'backslash',\n                'bracketright',\n                'asciicircum',\n                'underscore',\n                'grave',\n                'a',\n                'b',\n                'c',\n                'd',\n                'e',\n                'f',\n                'g',\n                'h',\n                'i',\n                'j',\n                'k',\n                'l',\n                'm',\n                'n',\n                'o',\n                'p',\n                'q',\n                'r',\n                's',\n                't',\n                'u',\n                'v',\n                'w',\n                'x',\n                'y',\n                'z',\n                'braceleft',\n                'bar',\n                'braceright',\n                'asciitilde',\n                'Adieresis',\n                'Aring',\n                'Ccedilla',\n                'Eacute',\n                'Ntilde',\n                'Odieresis',\n                'Udieresis',\n                'aacute',\n                'agrave',\n                'acircumflex',\n                'adieresis',\n                'atilde',\n                'aring',\n                'ccedilla',\n                'eacute',\n                'egrave',\n                'ecircumflex',\n                'edieresis',\n                'iacute',\n                'igrave',\n                'icircumflex',\n                'idieresis',\n                'ntilde',\n                'oacute',\n                'ograve',\n                'ocircumflex',\n                'odieresis',\n                'otilde',\n                'uacute',\n                'ugrave',\n                'ucircumflex',\n                'udieresis',\n                'dagger',\n                'degree',\n                'cent',\n                'sterling',\n                'section',\n                'bullet',\n                'paragraph',\n                'germandbls',\n                'registered',\n                'copyright',\n                'trademark',\n                'acute',\n                'dieresis',\n                'notequal',\n                'AE',\n                'Oslash',\n                'infinity',\n                'plusminus',\n                'lessequal',\n                'greaterequal',\n                'yen',\n                'mu',\n                'partialdiff',\n                'summation',\n                'product',\n                'pi',\n                'integral',\n                'ordfeminine',\n                'ordmasculine',\n                'Omega',\n                'ae',\n                'oslash',\n                'questiondown',\n                'exclamdown',\n                'logicalnot',\n                'radical',\n                'florin',\n                'approxequal',\n                'Delta',\n                'guillemotleft',\n                'guillemotright',\n                'ellipsis',\n                'nonbreakingspace',\n                'Agrave',\n                'Atilde',\n                'Otilde',\n                'OE',\n                'oe',\n                'endash',\n                'emdash',\n                'quotedblleft',\n                'quotedblright',\n                'quoteleft',\n                'quoteright',\n                'divide',\n                'lozenge',\n                'ydieresis',\n                'Ydieresis',\n                'fraction',\n                'currency',\n                'guilsinglleft',\n                'guilsinglright',\n                'fi',\n                'fl',\n                'daggerdbl',\n                'periodcentered',\n                'quotesinglbase',\n                'quotedblbase',\n                'perthousand',\n                'Acircumflex',\n                'Ecircumflex',\n                'Aacute',\n                'Edieresis',\n                'Egrave',\n                'Iacute',\n                'Icircumflex',\n                'Idieresis',\n                'Igrave',\n                'Oacute',\n                'Ocircumflex',\n                'apple',\n                'Ograve',\n                'Uacute',\n                'Ucircumflex',\n                'Ugrave',\n                'dotlessi',\n                'circumflex',\n                'tilde',\n                'macron',\n                'breve',\n                'dotaccent',\n                'ring',\n                'cedilla',\n                'hungarumlaut',\n                'ogonek',\n                'caron',\n                'Lslash',\n                'lslash',\n                'Scaron',\n                'scaron',\n                'Zcaron',\n                'zcaron',\n                'brokenbar',\n                'Eth',\n                'eth',\n                'Yacute',\n                'yacute',\n                'Thorn',\n                'thorn',\n                'minus',\n                'multiply',\n                'onesuperior',\n                'twosuperior',\n                'threesuperior',\n                'onehalf',\n                'onequarter',\n                'threequarters',\n                'franc',\n                'Gbreve',\n                'gbreve',\n                'Idotaccent',\n                'Scedilla',\n                'scedilla',\n                'Cacute',\n                'cacute',\n                'Ccaron',\n                'ccaron',\n                'dcroat'\n              ];\n\n              /**\n               * This is the encoding used for fonts created from scratch.\n               * It loops through all glyphs and finds the appropriate unicode value.\n               * Since it's linear time, other encodings will be faster.\n               * @exports opentype.DefaultEncoding\n               * @class\n               * @constructor\n               * @param {opentype.Font}\n               */\n              function DefaultEncoding(font) {\n                this.font = font;\n              }\n\n              DefaultEncoding.prototype.charToGlyphIndex = function(c) {\n                var code = c.codePointAt(0);\n                var glyphs = this.font.glyphs;\n                if (glyphs) {\n                  for (var i = 0; i < glyphs.length; i += 1) {\n                    var glyph = glyphs.get(i);\n                    for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                      if (glyph.unicodes[j] === code) {\n                        return i;\n                      }\n                    }\n                  }\n                }\n                return null;\n              };\n\n              /**\n               * @exports opentype.CmapEncoding\n               * @class\n               * @constructor\n               * @param {Object} cmap - a object with the cmap encoded data\n               */\n              function CmapEncoding(cmap) {\n                this.cmap = cmap;\n              }\n\n              /**\n               * @param  {string} c - the character\n               * @return {number} The glyph index.\n               */\n              CmapEncoding.prototype.charToGlyphIndex = function(c) {\n                return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n              };\n\n              /**\n               * @exports opentype.CffEncoding\n               * @class\n               * @constructor\n               * @param {string} encoding - The encoding\n               * @param {Array} charset - The character set.\n               */\n              function CffEncoding(encoding, charset) {\n                this.encoding = encoding;\n                this.charset = charset;\n              }\n\n              /**\n               * @param  {string} s - The character\n               * @return {number} The index.\n               */\n              CffEncoding.prototype.charToGlyphIndex = function(s) {\n                var code = s.codePointAt(0);\n                var charName = this.encoding[code];\n                return this.charset.indexOf(charName);\n              };\n\n              /**\n               * @exports opentype.GlyphNames\n               * @class\n               * @constructor\n               * @param {Object} post\n               */\n              function GlyphNames(post) {\n                var this$1 = this;\n\n                switch (post.version) {\n                  case 1:\n                    this.names = standardNames.slice();\n                    break;\n                  case 2:\n                    this.names = new Array(post.numberOfGlyphs);\n                    for (var i = 0; i < post.numberOfGlyphs; i++) {\n                      if (post.glyphNameIndex[i] < standardNames.length) {\n                        this$1.names[i] = standardNames[post.glyphNameIndex[i]];\n                      } else {\n                        this$1.names[i] =\n                          post.names[post.glyphNameIndex[i] - standardNames.length];\n                      }\n                    }\n\n                    break;\n                  case 2.5:\n                    this.names = new Array(post.numberOfGlyphs);\n                    for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                      this$1.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];\n                    }\n\n                    break;\n                  case 3:\n                    this.names = [];\n                    break;\n                  default:\n                    this.names = [];\n                    break;\n                }\n              }\n\n              /**\n               * Gets the index of a glyph by name.\n               * @param  {string} name - The glyph name\n               * @return {number} The index\n               */\n              GlyphNames.prototype.nameToGlyphIndex = function(name) {\n                return this.names.indexOf(name);\n              };\n\n              /**\n               * @param  {number} gid\n               * @return {string}\n               */\n              GlyphNames.prototype.glyphIndexToName = function(gid) {\n                return this.names[gid];\n              };\n\n              /**\n               * @alias opentype.addGlyphNames\n               * @param {opentype.Font}\n               */\n              function addGlyphNames(font) {\n                var glyph;\n                var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n                var charCodes = Object.keys(glyphIndexMap);\n\n                for (var i = 0; i < charCodes.length; i += 1) {\n                  var c = charCodes[i];\n                  var glyphIndex = glyphIndexMap[c];\n                  glyph = font.glyphs.get(glyphIndex);\n                  glyph.addUnicode(parseInt(c));\n                }\n\n                for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {\n                  glyph = font.glyphs.get(i$1);\n                  if (font.cffEncoding) {\n                    if (font.isCIDFont) {\n                      glyph.name = 'gid' + i$1;\n                    } else {\n                      glyph.name = font.cffEncoding.charset[i$1];\n                    }\n                  } else if (font.glyphNames.names) {\n                    glyph.name = font.glyphNames.glyphIndexToName(i$1);\n                  }\n                }\n              }\n\n              // Drawing utility functions.\n\n              // Draw a line on the given context from point `x1,y1` to point `x2,y2`.\n              function line(ctx, x1, y1, x2, y2) {\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n              }\n\n              var draw = { line: line };\n\n              // The Glyph object\n              // import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\n              function getPathDefinition(glyph, path) {\n                var _path = path || new Path();\n                return {\n                  configurable: true,\n\n                  get: function() {\n                    if (typeof _path === 'function') {\n                      _path = _path();\n                    }\n\n                    return _path;\n                  },\n\n                  set: function(p) {\n                    _path = p;\n                  }\n                };\n              }\n              /**\n               * @typedef GlyphOptions\n               * @type Object\n               * @property {string} [name] - The glyph name\n               * @property {number} [unicode]\n               * @property {Array} [unicodes]\n               * @property {number} [xMin]\n               * @property {number} [yMin]\n               * @property {number} [xMax]\n               * @property {number} [yMax]\n               * @property {number} [advanceWidth]\n               */\n\n              // A Glyph is an individual mark that often corresponds to a character.\n              // Some glyphs, such as ligatures, are a combination of many characters.\n              // Glyphs are the basic building blocks of a font.\n              //\n              // The `Glyph` class contains utility methods for drawing the path and its points.\n              /**\n               * @exports opentype.Glyph\n               * @class\n               * @param {GlyphOptions}\n               * @constructor\n               */\n              function Glyph(options) {\n                // By putting all the code on a prototype function (which is only declared once)\n                // we reduce the memory requirements for larger fonts by some 2%\n                this.bindConstructorValues(options);\n              }\n\n              /**\n               * @param  {GlyphOptions}\n               */\n              Glyph.prototype.bindConstructorValues = function(options) {\n                this.index = options.index || 0;\n\n                // These three values cannot be deferred for memory optimization:\n                this.name = options.name || null;\n                this.unicode = options.unicode || undefined;\n                this.unicodes =\n                  options.unicodes || options.unicode !== undefined\n                    ? [options.unicode]\n                    : [];\n\n                // But by binding these values only when necessary, we reduce can\n                // the memory requirements by almost 3% for larger fonts.\n                if (options.xMin) {\n                  this.xMin = options.xMin;\n                }\n\n                if (options.yMin) {\n                  this.yMin = options.yMin;\n                }\n\n                if (options.xMax) {\n                  this.xMax = options.xMax;\n                }\n\n                if (options.yMax) {\n                  this.yMax = options.yMax;\n                }\n\n                if (options.advanceWidth) {\n                  this.advanceWidth = options.advanceWidth;\n                }\n\n                // The path for a glyph is the most memory intensive, and is bound as a value\n                // with a getter/setter to ensure we actually do path parsing only once the\n                // path is actually needed by anything.\n                Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n              };\n\n              /**\n               * @param {number}\n               */\n              Glyph.prototype.addUnicode = function(unicode) {\n                if (this.unicodes.length === 0) {\n                  this.unicode = unicode;\n                }\n\n                this.unicodes.push(unicode);\n              };\n\n              /**\n               * Calculate the minimum bounding box for this glyph.\n               * @return {opentype.BoundingBox}\n               */\n              Glyph.prototype.getBoundingBox = function() {\n                return this.path.getBoundingBox();\n              };\n\n              /**\n               * Convert the glyph to a Path we can draw on a drawing context.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {Object=} options - xScale, yScale to stretch the glyph.\n               * @param  {opentype.Font} if hinting is to be used, the font\n               * @return {opentype.Path}\n               */\n              Glyph.prototype.getPath = function(x, y, fontSize, options, font) {\n                x = x !== undefined ? x : 0;\n                y = y !== undefined ? y : 0;\n                fontSize = fontSize !== undefined ? fontSize : 72;\n                var commands;\n                var hPoints;\n                if (!options) {\n                  options = {};\n                }\n                var xScale = options.xScale;\n                var yScale = options.yScale;\n\n                if (options.hinting && font && font.hinting) {\n                  // in case of hinting, the hinting engine takes care\n                  // of scaling the points (not the path) before hinting.\n                  hPoints = this.path && font.hinting.exec(this, fontSize);\n                  // in case the hinting engine failed hPoints is undefined\n                  // and thus reverts to plain rending\n                }\n\n                if (hPoints) {\n                  // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n                  commands = font.hinting.getCommands(hPoints);\n                  x = Math.round(x);\n                  y = Math.round(y);\n                  // TODO in case of hinting xyScaling is not yet supported\n                  xScale = yScale = 1;\n                } else {\n                  commands = this.path.commands;\n                  var scale = 1 / this.path.unitsPerEm * fontSize;\n                  if (xScale === undefined) {\n                    xScale = scale;\n                  }\n                  if (yScale === undefined) {\n                    yScale = scale;\n                  }\n                }\n\n                var p = new Path();\n                for (var i = 0; i < commands.length; i += 1) {\n                  var cmd = commands[i];\n                  if (cmd.type === 'M') {\n                    p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n                  } else if (cmd.type === 'L') {\n                    p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n                  } else if (cmd.type === 'Q') {\n                    p.quadraticCurveTo(\n                      x + cmd.x1 * xScale,\n                      y + -cmd.y1 * yScale,\n                      x + cmd.x * xScale,\n                      y + -cmd.y * yScale\n                    );\n                  } else if (cmd.type === 'C') {\n                    p.curveTo(\n                      x + cmd.x1 * xScale,\n                      y + -cmd.y1 * yScale,\n                      x + cmd.x2 * xScale,\n                      y + -cmd.y2 * yScale,\n                      x + cmd.x * xScale,\n                      y + -cmd.y * yScale\n                    );\n                  } else if (cmd.type === 'Z') {\n                    p.closePath();\n                  }\n                }\n\n                return p;\n              };\n\n              /**\n               * Split the glyph into contours.\n               * This function is here for backwards compatibility, and to\n               * provide raw access to the TrueType glyph outlines.\n               * @return {Array}\n               */\n              Glyph.prototype.getContours = function() {\n                var this$1 = this;\n\n                if (this.points === undefined) {\n                  return [];\n                }\n\n                var contours = [];\n                var currentContour = [];\n                for (var i = 0; i < this.points.length; i += 1) {\n                  var pt = this$1.points[i];\n                  currentContour.push(pt);\n                  if (pt.lastPointOfContour) {\n                    contours.push(currentContour);\n                    currentContour = [];\n                  }\n                }\n\n                check.argument(\n                  currentContour.length === 0,\n                  'There are still points left in the current contour.'\n                );\n                return contours;\n              };\n\n              /**\n               * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n               * @return {Object}\n               */\n              Glyph.prototype.getMetrics = function() {\n                var commands = this.path.commands;\n                var xCoords = [];\n                var yCoords = [];\n                for (var i = 0; i < commands.length; i += 1) {\n                  var cmd = commands[i];\n                  if (cmd.type !== 'Z') {\n                    xCoords.push(cmd.x);\n                    yCoords.push(cmd.y);\n                  }\n\n                  if (cmd.type === 'Q' || cmd.type === 'C') {\n                    xCoords.push(cmd.x1);\n                    yCoords.push(cmd.y1);\n                  }\n\n                  if (cmd.type === 'C') {\n                    xCoords.push(cmd.x2);\n                    yCoords.push(cmd.y2);\n                  }\n                }\n\n                var metrics = {\n                  xMin: Math.min.apply(null, xCoords),\n                  yMin: Math.min.apply(null, yCoords),\n                  xMax: Math.max.apply(null, xCoords),\n                  yMax: Math.max.apply(null, yCoords),\n                  leftSideBearing: this.leftSideBearing\n                };\n\n                if (!isFinite(metrics.xMin)) {\n                  metrics.xMin = 0;\n                }\n\n                if (!isFinite(metrics.xMax)) {\n                  metrics.xMax = this.advanceWidth;\n                }\n\n                if (!isFinite(metrics.yMin)) {\n                  metrics.yMin = 0;\n                }\n\n                if (!isFinite(metrics.yMax)) {\n                  metrics.yMax = 0;\n                }\n\n                metrics.rightSideBearing =\n                  this.advanceWidth -\n                  metrics.leftSideBearing -\n                  (metrics.xMax - metrics.xMin);\n                return metrics;\n              };\n\n              /**\n               * Draw the glyph on the given context.\n               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {Object=} options - xScale, yScale to stretch the glyph.\n               */\n              Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n                this.getPath(x, y, fontSize, options).draw(ctx);\n              };\n\n              /**\n               * Draw the points of the glyph.\n               * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               */\n              Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n                function drawCircles(l, x, y, scale) {\n                  var PI_SQ = Math.PI * 2;\n                  ctx.beginPath();\n                  for (var j = 0; j < l.length; j += 1) {\n                    ctx.moveTo(x + l[j].x * scale, y + l[j].y * scale);\n                    ctx.arc(x + l[j].x * scale, y + l[j].y * scale, 2, 0, PI_SQ, false);\n                  }\n\n                  ctx.closePath();\n                  ctx.fill();\n                }\n\n                x = x !== undefined ? x : 0;\n                y = y !== undefined ? y : 0;\n                fontSize = fontSize !== undefined ? fontSize : 24;\n                var scale = 1 / this.path.unitsPerEm * fontSize;\n\n                var blueCircles = [];\n                var redCircles = [];\n                var path = this.path;\n                for (var i = 0; i < path.commands.length; i += 1) {\n                  var cmd = path.commands[i];\n                  if (cmd.x !== undefined) {\n                    blueCircles.push({ x: cmd.x, y: -cmd.y });\n                  }\n\n                  if (cmd.x1 !== undefined) {\n                    redCircles.push({ x: cmd.x1, y: -cmd.y1 });\n                  }\n\n                  if (cmd.x2 !== undefined) {\n                    redCircles.push({ x: cmd.x2, y: -cmd.y2 });\n                  }\n                }\n\n                ctx.fillStyle = 'blue';\n                drawCircles(blueCircles, x, y, scale);\n                ctx.fillStyle = 'red';\n                drawCircles(redCircles, x, y, scale);\n              };\n\n              /**\n               * Draw lines indicating important font measurements.\n               * Black lines indicate the origin of the coordinate system (point 0,0).\n               * Blue lines indicate the glyph bounding box.\n               * Green line indicates the advance width of the glyph.\n               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               */\n              Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n                var scale;\n                x = x !== undefined ? x : 0;\n                y = y !== undefined ? y : 0;\n                fontSize = fontSize !== undefined ? fontSize : 24;\n                scale = 1 / this.path.unitsPerEm * fontSize;\n                ctx.lineWidth = 1;\n\n                // Draw the origin\n                ctx.strokeStyle = 'black';\n                draw.line(ctx, x, -10000, x, 10000);\n                draw.line(ctx, -10000, y, 10000, y);\n\n                // This code is here due to memory optimization: by not using\n                // defaults in the constructor, we save a notable amount of memory.\n                var xMin = this.xMin || 0;\n                var yMin = this.yMin || 0;\n                var xMax = this.xMax || 0;\n                var yMax = this.yMax || 0;\n                var advanceWidth = this.advanceWidth || 0;\n\n                // Draw the glyph box\n                ctx.strokeStyle = 'blue';\n                draw.line(ctx, x + xMin * scale, -10000, x + xMin * scale, 10000);\n                draw.line(ctx, x + xMax * scale, -10000, x + xMax * scale, 10000);\n                draw.line(ctx, -10000, y + -yMin * scale, 10000, y + -yMin * scale);\n                draw.line(ctx, -10000, y + -yMax * scale, 10000, y + -yMax * scale);\n\n                // Draw the advance width\n                ctx.strokeStyle = 'green';\n                draw.line(\n                  ctx,\n                  x + advanceWidth * scale,\n                  -10000,\n                  x + advanceWidth * scale,\n                  10000\n                );\n              };\n\n              // The GlyphSet object\n\n              // Define a property on the glyph that depends on the path being loaded.\n              function defineDependentProperty(glyph, externalName, internalName) {\n                Object.defineProperty(glyph, externalName, {\n                  get: function() {\n                    // Request the path property to make sure the path is loaded.\n                    glyph.path; // jshint ignore:line\n                    return glyph[internalName];\n                  },\n                  set: function(newValue) {\n                    glyph[internalName] = newValue;\n                  },\n                  enumerable: true,\n                  configurable: true\n                });\n              }\n\n              /**\n               * A GlyphSet represents all glyphs available in the font, but modelled using\n               * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n               * necessary, to keep the memory footprint down.\n               * @exports opentype.GlyphSet\n               * @class\n               * @param {opentype.Font}\n               * @param {Array}\n               */\n              function GlyphSet(font, glyphs) {\n                var this$1 = this;\n\n                this.font = font;\n                this.glyphs = {};\n                if (Array.isArray(glyphs)) {\n                  for (var i = 0; i < glyphs.length; i++) {\n                    this$1.glyphs[i] = glyphs[i];\n                  }\n                }\n\n                this.length = (glyphs && glyphs.length) || 0;\n              }\n\n              /**\n               * @param  {number} index\n               * @return {opentype.Glyph}\n               */\n              GlyphSet.prototype.get = function(index) {\n                if (typeof this.glyphs[index] === 'function') {\n                  this.glyphs[index] = this.glyphs[index]();\n                }\n\n                return this.glyphs[index];\n              };\n\n              /**\n               * @param  {number} index\n               * @param  {Object}\n               */\n              GlyphSet.prototype.push = function(index, loader) {\n                this.glyphs[index] = loader;\n                this.length++;\n              };\n\n              /**\n               * @alias opentype.glyphLoader\n               * @param  {opentype.Font} font\n               * @param  {number} index\n               * @return {opentype.Glyph}\n               */\n              function glyphLoader(font, index) {\n                return new Glyph({ index: index, font: font });\n              }\n\n              /**\n               * Generate a stub glyph that can be filled with all metadata *except*\n               * the \"points\" and \"path\" properties, which must be loaded only once\n               * the glyph's path is actually requested for text shaping.\n               * @alias opentype.ttfGlyphLoader\n               * @param  {opentype.Font} font\n               * @param  {number} index\n               * @param  {Function} parseGlyph\n               * @param  {Object} data\n               * @param  {number} position\n               * @param  {Function} buildPath\n               * @return {opentype.Glyph}\n               */\n              function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n                return function() {\n                  var glyph = new Glyph({ index: index, font: font });\n\n                  glyph.path = function() {\n                    parseGlyph(glyph, data, position);\n                    var path = buildPath(font.glyphs, glyph);\n                    path.unitsPerEm = font.unitsPerEm;\n                    return path;\n                  };\n\n                  defineDependentProperty(glyph, 'xMin', '_xMin');\n                  defineDependentProperty(glyph, 'xMax', '_xMax');\n                  defineDependentProperty(glyph, 'yMin', '_yMin');\n                  defineDependentProperty(glyph, 'yMax', '_yMax');\n\n                  return glyph;\n                };\n              }\n              /**\n               * @alias opentype.cffGlyphLoader\n               * @param  {opentype.Font} font\n               * @param  {number} index\n               * @param  {Function} parseCFFCharstring\n               * @param  {string} charstring\n               * @return {opentype.Glyph}\n               */\n              function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n                return function() {\n                  var glyph = new Glyph({ index: index, font: font });\n\n                  glyph.path = function() {\n                    var path = parseCFFCharstring(font, glyph, charstring);\n                    path.unitsPerEm = font.unitsPerEm;\n                    return path;\n                  };\n\n                  return glyph;\n                };\n              }\n\n              var glyphset = {\n                GlyphSet: GlyphSet,\n                glyphLoader: glyphLoader,\n                ttfGlyphLoader: ttfGlyphLoader,\n                cffGlyphLoader: cffGlyphLoader\n              };\n\n              // The `CFF` table contains the glyph outlines in PostScript format.\n\n              // Custom equals function that can also check lists.\n              function equals(a, b) {\n                if (a === b) {\n                  return true;\n                } else if (Array.isArray(a) && Array.isArray(b)) {\n                  if (a.length !== b.length) {\n                    return false;\n                  }\n\n                  for (var i = 0; i < a.length; i += 1) {\n                    if (!equals(a[i], b[i])) {\n                      return false;\n                    }\n                  }\n\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n\n              // Subroutines are encoded using the negative half of the number space.\n              // See type 2 chapter 4.7 \"Subroutine operators\".\n              function calcCFFSubroutineBias(subrs) {\n                var bias;\n                if (subrs.length < 1240) {\n                  bias = 107;\n                } else if (subrs.length < 33900) {\n                  bias = 1131;\n                } else {\n                  bias = 32768;\n                }\n\n                return bias;\n              }\n\n              // Parse a `CFF` INDEX array.\n              // An index array consists of a list of offsets, then a list of objects at those offsets.\n              function parseCFFIndex(data, start, conversionFn) {\n                var offsets = [];\n                var objects = [];\n                var count = parse.getCard16(data, start);\n                var objectOffset;\n                var endOffset;\n                if (count !== 0) {\n                  var offsetSize = parse.getByte(data, start + 2);\n                  objectOffset = start + (count + 1) * offsetSize + 2;\n                  var pos = start + 3;\n                  for (var i = 0; i < count + 1; i += 1) {\n                    offsets.push(parse.getOffset(data, pos, offsetSize));\n                    pos += offsetSize;\n                  }\n\n                  // The total size of the index array is 4 header bytes + the value of the last offset.\n                  endOffset = objectOffset + offsets[count];\n                } else {\n                  endOffset = start + 2;\n                }\n\n                for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n                  var value = parse.getBytes(\n                    data,\n                    objectOffset + offsets[i$1],\n                    objectOffset + offsets[i$1 + 1]\n                  );\n                  if (conversionFn) {\n                    value = conversionFn(value);\n                  }\n\n                  objects.push(value);\n                }\n\n                return { objects: objects, startOffset: start, endOffset: endOffset };\n              }\n\n              // Parse a `CFF` DICT real value.\n              function parseFloatOperand(parser) {\n                var s = '';\n                var eof = 15;\n                var lookup = [\n                  '0',\n                  '1',\n                  '2',\n                  '3',\n                  '4',\n                  '5',\n                  '6',\n                  '7',\n                  '8',\n                  '9',\n                  '.',\n                  'E',\n                  'E-',\n                  null,\n                  '-'\n                ];\n                while (true) {\n                  var b = parser.parseByte();\n                  var n1 = b >> 4;\n                  var n2 = b & 15;\n\n                  if (n1 === eof) {\n                    break;\n                  }\n\n                  s += lookup[n1];\n\n                  if (n2 === eof) {\n                    break;\n                  }\n\n                  s += lookup[n2];\n                }\n\n                return parseFloat(s);\n              }\n\n              // Parse a `CFF` DICT operand.\n              function parseOperand(parser, b0) {\n                var b1;\n                var b2;\n                var b3;\n                var b4;\n                if (b0 === 28) {\n                  b1 = parser.parseByte();\n                  b2 = parser.parseByte();\n                  return (b1 << 8) | b2;\n                }\n\n                if (b0 === 29) {\n                  b1 = parser.parseByte();\n                  b2 = parser.parseByte();\n                  b3 = parser.parseByte();\n                  b4 = parser.parseByte();\n                  return (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;\n                }\n\n                if (b0 === 30) {\n                  return parseFloatOperand(parser);\n                }\n\n                if (b0 >= 32 && b0 <= 246) {\n                  return b0 - 139;\n                }\n\n                if (b0 >= 247 && b0 <= 250) {\n                  b1 = parser.parseByte();\n                  return (b0 - 247) * 256 + b1 + 108;\n                }\n\n                if (b0 >= 251 && b0 <= 254) {\n                  b1 = parser.parseByte();\n                  return -(b0 - 251) * 256 - b1 - 108;\n                }\n\n                throw new Error('Invalid b0 ' + b0);\n              }\n\n              // Convert the entries returned by `parseDict` to a proper dictionary.\n              // If a value is a list of one, it is unpacked.\n              function entriesToObject(entries) {\n                var o = {};\n                for (var i = 0; i < entries.length; i += 1) {\n                  var key = entries[i][0];\n                  var values = entries[i][1];\n                  var value = void 0;\n                  if (values.length === 1) {\n                    value = values[0];\n                  } else {\n                    value = values;\n                  }\n\n                  if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n                    throw new Error('Object ' + o + ' already has key ' + key);\n                  }\n\n                  o[key] = value;\n                }\n\n                return o;\n              }\n\n              // Parse a `CFF` DICT object.\n              // A dictionary contains key-value pairs in a compact tokenized format.\n              function parseCFFDict(data, start, size) {\n                start = start !== undefined ? start : 0;\n                var parser = new parse.Parser(data, start);\n                var entries = [];\n                var operands = [];\n                size = size !== undefined ? size : data.length;\n\n                while (parser.relativeOffset < size) {\n                  var op = parser.parseByte();\n\n                  // The first byte for each dict item distinguishes between operator (key) and operand (value).\n                  // Values <= 21 are operators.\n                  if (op <= 21) {\n                    // Two-byte operators have an initial escape byte of 12.\n                    if (op === 12) {\n                      op = 1200 + parser.parseByte();\n                    }\n\n                    entries.push([op, operands]);\n                    operands = [];\n                  } else {\n                    // Since the operands (values) come before the operators (keys), we store all operands in a list\n                    // until we encounter an operator.\n                    operands.push(parseOperand(parser, op));\n                  }\n                }\n\n                return entriesToObject(entries);\n              }\n\n              // Given a String Index (SID), return the value of the string.\n              // Strings below index 392 are standard CFF strings and are not encoded in the font.\n              function getCFFString(strings, index) {\n                if (index <= 390) {\n                  index = cffStandardStrings[index];\n                } else {\n                  index = strings[index - 391];\n                }\n\n                return index;\n              }\n\n              // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n              // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\n              function interpretDict(dict, meta, strings) {\n                var newDict = {};\n                var value;\n\n                // Because we also want to include missing values, we start out from the meta list\n                // and lookup values in the dict.\n                for (var i = 0; i < meta.length; i += 1) {\n                  var m = meta[i];\n\n                  if (Array.isArray(m.type)) {\n                    var values = [];\n                    values.length = m.type.length;\n                    for (var j = 0; j < m.type.length; j++) {\n                      value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n                      if (value === undefined) {\n                        value =\n                          m.value !== undefined && m.value[j] !== undefined\n                            ? m.value[j]\n                            : null;\n                      }\n                      if (m.type[j] === 'SID') {\n                        value = getCFFString(strings, value);\n                      }\n                      values[j] = value;\n                    }\n                    newDict[m.name] = values;\n                  } else {\n                    value = dict[m.op];\n                    if (value === undefined) {\n                      value = m.value !== undefined ? m.value : null;\n                    }\n\n                    if (m.type === 'SID') {\n                      value = getCFFString(strings, value);\n                    }\n                    newDict[m.name] = value;\n                  }\n                }\n\n                return newDict;\n              }\n\n              // Parse the CFF header.\n              function parseCFFHeader(data, start) {\n                var header = {};\n                header.formatMajor = parse.getCard8(data, start);\n                header.formatMinor = parse.getCard8(data, start + 1);\n                header.size = parse.getCard8(data, start + 2);\n                header.offsetSize = parse.getCard8(data, start + 3);\n                header.startOffset = start;\n                header.endOffset = start + 4;\n                return header;\n              }\n\n              var TOP_DICT_META = [\n                { name: 'version', op: 0, type: 'SID' },\n                { name: 'notice', op: 1, type: 'SID' },\n                { name: 'copyright', op: 1200, type: 'SID' },\n                { name: 'fullName', op: 2, type: 'SID' },\n                { name: 'familyName', op: 3, type: 'SID' },\n                { name: 'weight', op: 4, type: 'SID' },\n                { name: 'isFixedPitch', op: 1201, type: 'number', value: 0 },\n                { name: 'italicAngle', op: 1202, type: 'number', value: 0 },\n                { name: 'underlinePosition', op: 1203, type: 'number', value: -100 },\n                { name: 'underlineThickness', op: 1204, type: 'number', value: 50 },\n                { name: 'paintType', op: 1205, type: 'number', value: 0 },\n                { name: 'charstringType', op: 1206, type: 'number', value: 2 },\n                {\n                  name: 'fontMatrix',\n                  op: 1207,\n                  type: ['real', 'real', 'real', 'real', 'real', 'real'],\n                  value: [0.001, 0, 0, 0.001, 0, 0]\n                },\n                { name: 'uniqueId', op: 13, type: 'number' },\n                {\n                  name: 'fontBBox',\n                  op: 5,\n                  type: ['number', 'number', 'number', 'number'],\n                  value: [0, 0, 0, 0]\n                },\n                { name: 'strokeWidth', op: 1208, type: 'number', value: 0 },\n                { name: 'xuid', op: 14, type: [], value: null },\n                { name: 'charset', op: 15, type: 'offset', value: 0 },\n                { name: 'encoding', op: 16, type: 'offset', value: 0 },\n                { name: 'charStrings', op: 17, type: 'offset', value: 0 },\n                { name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0] },\n                { name: 'ros', op: 1230, type: ['SID', 'SID', 'number'] },\n                { name: 'cidFontVersion', op: 1231, type: 'number', value: 0 },\n                { name: 'cidFontRevision', op: 1232, type: 'number', value: 0 },\n                { name: 'cidFontType', op: 1233, type: 'number', value: 0 },\n                { name: 'cidCount', op: 1234, type: 'number', value: 8720 },\n                { name: 'uidBase', op: 1235, type: 'number' },\n                { name: 'fdArray', op: 1236, type: 'offset' },\n                { name: 'fdSelect', op: 1237, type: 'offset' },\n                { name: 'fontName', op: 1238, type: 'SID' }\n              ];\n\n              var PRIVATE_DICT_META = [\n                { name: 'subrs', op: 19, type: 'offset', value: 0 },\n                { name: 'defaultWidthX', op: 20, type: 'number', value: 0 },\n                { name: 'nominalWidthX', op: 21, type: 'number', value: 0 }\n              ];\n\n              // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n              // The top dictionary contains the essential metadata for the font, together with the private dictionary.\n              function parseCFFTopDict(data, strings) {\n                var dict = parseCFFDict(data, 0, data.byteLength);\n                return interpretDict(dict, TOP_DICT_META, strings);\n              }\n\n              // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\n              function parseCFFPrivateDict(data, start, size, strings) {\n                var dict = parseCFFDict(data, start, size);\n                return interpretDict(dict, PRIVATE_DICT_META, strings);\n              }\n\n              // Returns a list of \"Top DICT\"s found using an INDEX list.\n              // Used to read both the usual high-level Top DICTs and also the FDArray\n              // discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n              // a Private DICT that is read and saved into the Top DICT.\n              //\n              // In addition to the expected/optional values as outlined in TOP_DICT_META\n              // the following values might be saved into the Top DICT.\n              //\n              //    _subrs []        array of local CFF subroutines from Private DICT\n              //    _subrsBias       bias value computed from number of subroutines\n              //                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n              //    _defaultWidthX   default widths for CFF characters\n              //    _nominalWidthX   bias added to width embedded within glyph description\n              //\n              //    _privateDict     saved copy of parsed Private DICT from Top DICT\n              function gatherCFFTopDicts(data, start, cffIndex, strings) {\n                var topDictArray = [];\n                for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n                  var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n                  var topDict = parseCFFTopDict(topDictData, strings);\n                  topDict._subrs = [];\n                  topDict._subrsBias = 0;\n                  var privateSize = topDict.private[0];\n                  var privateOffset = topDict.private[1];\n                  if (privateSize !== 0 && privateOffset !== 0) {\n                    var privateDict = parseCFFPrivateDict(\n                      data,\n                      privateOffset + start,\n                      privateSize,\n                      strings\n                    );\n                    topDict._defaultWidthX = privateDict.defaultWidthX;\n                    topDict._nominalWidthX = privateDict.nominalWidthX;\n                    if (privateDict.subrs !== 0) {\n                      var subrOffset = privateOffset + privateDict.subrs;\n                      var subrIndex = parseCFFIndex(data, subrOffset + start);\n                      topDict._subrs = subrIndex.objects;\n                      topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n                    }\n                    topDict._privateDict = privateDict;\n                  }\n                  topDictArray.push(topDict);\n                }\n                return topDictArray;\n              }\n\n              // Parse the CFF charset table, which contains internal names for all the glyphs.\n              // This function will return a list of glyph names.\n              // See Adobe TN #5176 chapter 13, \"Charsets\".\n              function parseCFFCharset(data, start, nGlyphs, strings) {\n                var sid;\n                var count;\n                var parser = new parse.Parser(data, start);\n\n                // The .notdef glyph is not included, so subtract 1.\n                nGlyphs -= 1;\n                var charset = ['.notdef'];\n\n                var format = parser.parseCard8();\n                if (format === 0) {\n                  for (var i = 0; i < nGlyphs; i += 1) {\n                    sid = parser.parseSID();\n                    charset.push(getCFFString(strings, sid));\n                  }\n                } else if (format === 1) {\n                  while (charset.length <= nGlyphs) {\n                    sid = parser.parseSID();\n                    count = parser.parseCard8();\n                    for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n                      charset.push(getCFFString(strings, sid));\n                      sid += 1;\n                    }\n                  }\n                } else if (format === 2) {\n                  while (charset.length <= nGlyphs) {\n                    sid = parser.parseSID();\n                    count = parser.parseCard16();\n                    for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n                      charset.push(getCFFString(strings, sid));\n                      sid += 1;\n                    }\n                  }\n                } else {\n                  throw new Error('Unknown charset format ' + format);\n                }\n\n                return charset;\n              }\n\n              // Parse the CFF encoding data. Only one encoding can be specified per font.\n              // See Adobe TN #5176 chapter 12, \"Encodings\".\n              function parseCFFEncoding(data, start, charset) {\n                var code;\n                var enc = {};\n                var parser = new parse.Parser(data, start);\n                var format = parser.parseCard8();\n                if (format === 0) {\n                  var nCodes = parser.parseCard8();\n                  for (var i = 0; i < nCodes; i += 1) {\n                    code = parser.parseCard8();\n                    enc[code] = i;\n                  }\n                } else if (format === 1) {\n                  var nRanges = parser.parseCard8();\n                  code = 1;\n                  for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n                    var first = parser.parseCard8();\n                    var nLeft = parser.parseCard8();\n                    for (var j = first; j <= first + nLeft; j += 1) {\n                      enc[j] = code;\n                      code += 1;\n                    }\n                  }\n                } else {\n                  throw new Error('Unknown encoding format ' + format);\n                }\n\n                return new CffEncoding(enc, charset);\n              }\n\n              // Take in charstring code and return a Glyph object.\n              // The encoding is described in the Type 2 Charstring Format\n              // https://www.microsoft.com/typography/OTSPEC/charstr2.htm\n              function parseCFFCharstring(font, glyph, code) {\n                var c1x;\n                var c1y;\n                var c2x;\n                var c2y;\n                var p = new Path();\n                var stack = [];\n                var nStems = 0;\n                var haveWidth = false;\n                var open = false;\n                var x = 0;\n                var y = 0;\n                var subrs;\n                var subrsBias;\n                var defaultWidthX;\n                var nominalWidthX;\n                if (font.isCIDFont) {\n                  var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n                  var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n                  subrs = fdDict._subrs;\n                  subrsBias = fdDict._subrsBias;\n                  defaultWidthX = fdDict._defaultWidthX;\n                  nominalWidthX = fdDict._nominalWidthX;\n                } else {\n                  subrs = font.tables.cff.topDict._subrs;\n                  subrsBias = font.tables.cff.topDict._subrsBias;\n                  defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n                  nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n                }\n                var width = defaultWidthX;\n\n                function newContour(x, y) {\n                  if (open) {\n                    p.closePath();\n                  }\n\n                  p.moveTo(x, y);\n                  open = true;\n                }\n\n                function parseStems() {\n                  var hasWidthArg;\n\n                  // The number of stem operators on the stack is always even.\n                  // If the value is uneven, that means a width is specified.\n                  hasWidthArg = stack.length % 2 !== 0;\n                  if (hasWidthArg && !haveWidth) {\n                    width = stack.shift() + nominalWidthX;\n                  }\n\n                  nStems += stack.length >> 1;\n                  stack.length = 0;\n                  haveWidth = true;\n                }\n\n                function parse$$1(code) {\n                  var b1;\n                  var b2;\n                  var b3;\n                  var b4;\n                  var codeIndex;\n                  var subrCode;\n                  var jpx;\n                  var jpy;\n                  var c3x;\n                  var c3y;\n                  var c4x;\n                  var c4y;\n\n                  var i = 0;\n                  while (i < code.length) {\n                    var v = code[i];\n                    i += 1;\n                    switch (v) {\n                      case 1: // hstem\n                        parseStems();\n                        break;\n                      case 3: // vstem\n                        parseStems();\n                        break;\n                      case 4: // vmoveto\n                        if (stack.length > 1 && !haveWidth) {\n                          width = stack.shift() + nominalWidthX;\n                          haveWidth = true;\n                        }\n\n                        y += stack.pop();\n                        newContour(x, y);\n                        break;\n                      case 5: // rlineto\n                        while (stack.length > 0) {\n                          x += stack.shift();\n                          y += stack.shift();\n                          p.lineTo(x, y);\n                        }\n\n                        break;\n                      case 6: // hlineto\n                        while (stack.length > 0) {\n                          x += stack.shift();\n                          p.lineTo(x, y);\n                          if (stack.length === 0) {\n                            break;\n                          }\n\n                          y += stack.shift();\n                          p.lineTo(x, y);\n                        }\n\n                        break;\n                      case 7: // vlineto\n                        while (stack.length > 0) {\n                          y += stack.shift();\n                          p.lineTo(x, y);\n                          if (stack.length === 0) {\n                            break;\n                          }\n\n                          x += stack.shift();\n                          p.lineTo(x, y);\n                        }\n\n                        break;\n                      case 8: // rrcurveto\n                        while (stack.length > 0) {\n                          c1x = x + stack.shift();\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y + stack.shift();\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      case 10: // callsubr\n                        codeIndex = stack.pop() + subrsBias;\n                        subrCode = subrs[codeIndex];\n                        if (subrCode) {\n                          parse$$1(subrCode);\n                        }\n\n                        break;\n                      case 11: // return\n                        return;\n                      case 12: // flex operators\n                        v = code[i];\n                        i += 1;\n                        switch (v) {\n                          case 35: // flex\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y + stack.shift(); // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = jpy + stack.shift(); // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            x = c4x + stack.shift(); // dx6\n                            y = c4y + stack.shift(); // dy6\n                            stack.shift(); // flex depth\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                          case 34: // hflex\n                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y; // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y; // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = c2y; // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = y; // dy5\n                            x = c4x + stack.shift(); // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                          case 36: // hflex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y; // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = c2y; // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            x = c4x + stack.shift(); // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                          case 37: // flex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y + stack.shift(); // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = jpy + stack.shift(); // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                              x = c4x + stack.shift();\n                            } else {\n                              y = c4y + stack.shift();\n                            }\n\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                          default:\n                            console.log(\n                              'Glyph ' + glyph.index + ': unknown operator ' + 1200 + v\n                            );\n                            stack.length = 0;\n                        }\n                        break;\n                      case 14: // endchar\n                        if (stack.length > 0 && !haveWidth) {\n                          width = stack.shift() + nominalWidthX;\n                          haveWidth = true;\n                        }\n\n                        if (open) {\n                          p.closePath();\n                          open = false;\n                        }\n\n                        break;\n                      case 18: // hstemhm\n                        parseStems();\n                        break;\n                      case 19: // hintmask\n                      case 20: // cntrmask\n                        parseStems();\n                        i += (nStems + 7) >> 3;\n                        break;\n                      case 21: // rmoveto\n                        if (stack.length > 2 && !haveWidth) {\n                          width = stack.shift() + nominalWidthX;\n                          haveWidth = true;\n                        }\n\n                        y += stack.pop();\n                        x += stack.pop();\n                        newContour(x, y);\n                        break;\n                      case 22: // hmoveto\n                        if (stack.length > 1 && !haveWidth) {\n                          width = stack.shift() + nominalWidthX;\n                          haveWidth = true;\n                        }\n\n                        x += stack.pop();\n                        newContour(x, y);\n                        break;\n                      case 23: // vstemhm\n                        parseStems();\n                        break;\n                      case 24: // rcurveline\n                        while (stack.length > 2) {\n                          c1x = x + stack.shift();\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y + stack.shift();\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        break;\n                      case 25: // rlinecurve\n                        while (stack.length > 6) {\n                          x += stack.shift();\n                          y += stack.shift();\n                          p.lineTo(x, y);\n                        }\n\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        break;\n                      case 26: // vvcurveto\n                        if (stack.length % 2) {\n                          x += stack.shift();\n                        }\n\n                        while (stack.length > 0) {\n                          c1x = x;\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x;\n                          y = c2y + stack.shift();\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      case 27: // hhcurveto\n                        if (stack.length % 2) {\n                          y += stack.shift();\n                        }\n\n                        while (stack.length > 0) {\n                          c1x = x + stack.shift();\n                          c1y = y;\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y;\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      case 28: // shortint\n                        b1 = code[i];\n                        b2 = code[i + 1];\n                        stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n                        i += 2;\n                        break;\n                      case 29: // callgsubr\n                        codeIndex = stack.pop() + font.gsubrsBias;\n                        subrCode = font.gsubrs[codeIndex];\n                        if (subrCode) {\n                          parse$$1(subrCode);\n                        }\n\n                        break;\n                      case 30: // vhcurveto\n                        while (stack.length > 0) {\n                          c1x = x;\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                          if (stack.length === 0) {\n                            break;\n                          }\n\n                          c1x = x + stack.shift();\n                          c1y = y;\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          y = c2y + stack.shift();\n                          x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      case 31: // hvcurveto\n                        while (stack.length > 0) {\n                          c1x = x + stack.shift();\n                          c1y = y;\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          y = c2y + stack.shift();\n                          x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                          if (stack.length === 0) {\n                            break;\n                          }\n\n                          c1x = x;\n                          c1y = y + stack.shift();\n                          c2x = c1x + stack.shift();\n                          c2y = c1y + stack.shift();\n                          x = c2x + stack.shift();\n                          y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        }\n\n                        break;\n                      default:\n                        if (v < 32) {\n                          console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n                        } else if (v < 247) {\n                          stack.push(v - 139);\n                        } else if (v < 251) {\n                          b1 = code[i];\n                          i += 1;\n                          stack.push((v - 247) * 256 + b1 + 108);\n                        } else if (v < 255) {\n                          b1 = code[i];\n                          i += 1;\n                          stack.push(-(v - 251) * 256 - b1 - 108);\n                        } else {\n                          b1 = code[i];\n                          b2 = code[i + 1];\n                          b3 = code[i + 2];\n                          b4 = code[i + 3];\n                          i += 4;\n                          stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n                        }\n                    }\n                  }\n                }\n\n                parse$$1(code);\n\n                glyph.advanceWidth = width;\n                return p;\n              }\n\n              function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n                var fdSelect = [];\n                var fdIndex;\n                var parser = new parse.Parser(data, start);\n                var format = parser.parseCard8();\n                if (format === 0) {\n                  // Simple list of nGlyphs elements\n                  for (var iGid = 0; iGid < nGlyphs; iGid++) {\n                    fdIndex = parser.parseCard8();\n                    if (fdIndex >= fdArrayCount) {\n                      throw new Error(\n                        'CFF table CID Font FDSelect has bad FD index value ' +\n                          fdIndex +\n                          ' (FD count ' +\n                          fdArrayCount +\n                          ')'\n                      );\n                    }\n                    fdSelect.push(fdIndex);\n                  }\n                } else if (format === 3) {\n                  // Ranges\n                  var nRanges = parser.parseCard16();\n                  var first = parser.parseCard16();\n                  if (first !== 0) {\n                    throw new Error(\n                      'CFF Table CID Font FDSelect format 3 range has bad initial GID ' +\n                        first\n                    );\n                  }\n                  var next;\n                  for (var iRange = 0; iRange < nRanges; iRange++) {\n                    fdIndex = parser.parseCard8();\n                    next = parser.parseCard16();\n                    if (fdIndex >= fdArrayCount) {\n                      throw new Error(\n                        'CFF table CID Font FDSelect has bad FD index value ' +\n                          fdIndex +\n                          ' (FD count ' +\n                          fdArrayCount +\n                          ')'\n                      );\n                    }\n                    if (next > nGlyphs) {\n                      throw new Error(\n                        'CFF Table CID Font FDSelect format 3 range has bad GID ' + next\n                      );\n                    }\n                    for (; first < next; first++) {\n                      fdSelect.push(fdIndex);\n                    }\n                    first = next;\n                  }\n                  if (next !== nGlyphs) {\n                    throw new Error(\n                      'CFF Table CID Font FDSelect format 3 range has bad final GID ' + next\n                    );\n                  }\n                } else {\n                  throw new Error(\n                    'CFF Table CID Font FDSelect table has unsupported format ' + format\n                  );\n                }\n                return fdSelect;\n              }\n\n              // Parse the `CFF` table, which contains the glyph outlines in PostScript format.\n              function parseCFFTable(data, start, font) {\n                font.tables.cff = {};\n                var header = parseCFFHeader(data, start);\n                var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n                var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n                var stringIndex = parseCFFIndex(\n                  data,\n                  topDictIndex.endOffset,\n                  parse.bytesToString\n                );\n                var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n                font.gsubrs = globalSubrIndex.objects;\n                font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n                var topDictArray = gatherCFFTopDicts(\n                  data,\n                  start,\n                  topDictIndex.objects,\n                  stringIndex.objects\n                );\n                if (topDictArray.length !== 1) {\n                  throw new Error(\n                    \"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" +\n                      topDictArray.length\n                  );\n                }\n\n                var topDict = topDictArray[0];\n                font.tables.cff.topDict = topDict;\n\n                if (topDict._privateDict) {\n                  font.defaultWidthX = topDict._privateDict.defaultWidthX;\n                  font.nominalWidthX = topDict._privateDict.nominalWidthX;\n                }\n\n                if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n                  font.isCIDFont = true;\n                }\n\n                if (font.isCIDFont) {\n                  var fdArrayOffset = topDict.fdArray;\n                  var fdSelectOffset = topDict.fdSelect;\n                  if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n                    throw new Error(\n                      'Font is marked as a CID font, but FDArray and/or FDSelect information is missing'\n                    );\n                  }\n                  fdArrayOffset += start;\n                  var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n                  var fdArray = gatherCFFTopDicts(\n                    data,\n                    start,\n                    fdArrayIndex.objects,\n                    stringIndex.objects\n                  );\n                  topDict._fdArray = fdArray;\n                  fdSelectOffset += start;\n                  topDict._fdSelect = parseCFFFDSelect(\n                    data,\n                    fdSelectOffset,\n                    font.numGlyphs,\n                    fdArray.length\n                  );\n                }\n\n                var privateDictOffset = start + topDict.private[1];\n                var privateDict = parseCFFPrivateDict(\n                  data,\n                  privateDictOffset,\n                  topDict.private[0],\n                  stringIndex.objects\n                );\n                font.defaultWidthX = privateDict.defaultWidthX;\n                font.nominalWidthX = privateDict.nominalWidthX;\n\n                if (privateDict.subrs !== 0) {\n                  var subrOffset = privateDictOffset + privateDict.subrs;\n                  var subrIndex = parseCFFIndex(data, subrOffset);\n                  font.subrs = subrIndex.objects;\n                  font.subrsBias = calcCFFSubroutineBias(font.subrs);\n                } else {\n                  font.subrs = [];\n                  font.subrsBias = 0;\n                }\n\n                // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n                var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n                font.nGlyphs = charStringsIndex.objects.length;\n\n                var charset = parseCFFCharset(\n                  data,\n                  start + topDict.charset,\n                  font.nGlyphs,\n                  stringIndex.objects\n                );\n                if (topDict.encoding === 0) {\n                  // Standard encoding\n                  font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n                } else if (topDict.encoding === 1) {\n                  // Expert encoding\n                  font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n                } else {\n                  font.cffEncoding = parseCFFEncoding(\n                    data,\n                    start + topDict.encoding,\n                    charset\n                  );\n                }\n\n                // Prefer the CMAP encoding to the CFF encoding.\n                font.encoding = font.encoding || font.cffEncoding;\n\n                font.glyphs = new glyphset.GlyphSet(font);\n                for (var i = 0; i < font.nGlyphs; i += 1) {\n                  var charString = charStringsIndex.objects[i];\n                  font.glyphs.push(\n                    i,\n                    glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString)\n                  );\n                }\n              }\n\n              // Convert a string to a String ID (SID).\n              // The list of strings is modified in place.\n              function encodeString(s, strings) {\n                var sid;\n\n                // Is the string in the CFF standard strings?\n                var i = cffStandardStrings.indexOf(s);\n                if (i >= 0) {\n                  sid = i;\n                }\n\n                // Is the string already in the string index?\n                i = strings.indexOf(s);\n                if (i >= 0) {\n                  sid = i + cffStandardStrings.length;\n                } else {\n                  sid = cffStandardStrings.length + strings.length;\n                  strings.push(s);\n                }\n\n                return sid;\n              }\n\n              function makeHeader() {\n                return new table.Record('Header', [\n                  { name: 'major', type: 'Card8', value: 1 },\n                  { name: 'minor', type: 'Card8', value: 0 },\n                  { name: 'hdrSize', type: 'Card8', value: 4 },\n                  { name: 'major', type: 'Card8', value: 1 }\n                ]);\n              }\n\n              function makeNameIndex(fontNames) {\n                var t = new table.Record('Name INDEX', [\n                  { name: 'names', type: 'INDEX', value: [] }\n                ]);\n                t.names = [];\n                for (var i = 0; i < fontNames.length; i += 1) {\n                  t.names.push({ name: 'name_' + i, type: 'NAME', value: fontNames[i] });\n                }\n\n                return t;\n              }\n\n              // Given a dictionary's metadata, create a DICT structure.\n              function makeDict(meta, attrs, strings) {\n                var m = {};\n                for (var i = 0; i < meta.length; i += 1) {\n                  var entry = meta[i];\n                  var value = attrs[entry.name];\n                  if (value !== undefined && !equals(value, entry.value)) {\n                    if (entry.type === 'SID') {\n                      value = encodeString(value, strings);\n                    }\n\n                    m[entry.op] = { name: entry.name, type: entry.type, value: value };\n                  }\n                }\n\n                return m;\n              }\n\n              // The Top DICT houses the global font attributes.\n              function makeTopDict(attrs, strings) {\n                var t = new table.Record('Top DICT', [\n                  { name: 'dict', type: 'DICT', value: {} }\n                ]);\n                t.dict = makeDict(TOP_DICT_META, attrs, strings);\n                return t;\n              }\n\n              function makeTopDictIndex(topDict) {\n                var t = new table.Record('Top DICT INDEX', [\n                  { name: 'topDicts', type: 'INDEX', value: [] }\n                ]);\n                t.topDicts = [{ name: 'topDict_0', type: 'TABLE', value: topDict }];\n                return t;\n              }\n\n              function makeStringIndex(strings) {\n                var t = new table.Record('String INDEX', [\n                  { name: 'strings', type: 'INDEX', value: [] }\n                ]);\n                t.strings = [];\n                for (var i = 0; i < strings.length; i += 1) {\n                  t.strings.push({\n                    name: 'string_' + i,\n                    type: 'STRING',\n                    value: strings[i]\n                  });\n                }\n\n                return t;\n              }\n\n              function makeGlobalSubrIndex() {\n                // Currently we don't use subroutines.\n                return new table.Record('Global Subr INDEX', [\n                  { name: 'subrs', type: 'INDEX', value: [] }\n                ]);\n              }\n\n              function makeCharsets(glyphNames, strings) {\n                var t = new table.Record('Charsets', [\n                  { name: 'format', type: 'Card8', value: 0 }\n                ]);\n                for (var i = 0; i < glyphNames.length; i += 1) {\n                  var glyphName = glyphNames[i];\n                  var glyphSID = encodeString(glyphName, strings);\n                  t.fields.push({ name: 'glyph_' + i, type: 'SID', value: glyphSID });\n                }\n\n                return t;\n              }\n\n              function glyphToOps(glyph) {\n                var ops = [];\n                var path = glyph.path;\n                ops.push({ name: 'width', type: 'NUMBER', value: glyph.advanceWidth });\n                var x = 0;\n                var y = 0;\n                for (var i = 0; i < path.commands.length; i += 1) {\n                  var dx = void 0;\n                  var dy = void 0;\n                  var cmd = path.commands[i];\n                  if (cmd.type === 'Q') {\n                    // CFF only supports bézier curves, so convert the quad to a bézier.\n                    var _13 = 1 / 3;\n                    var _23 = 2 / 3;\n\n                    // We're going to create a new command so we don't change the original path.\n                    cmd = {\n                      type: 'C',\n                      x: cmd.x,\n                      y: cmd.y,\n                      x1: _13 * x + _23 * cmd.x1,\n                      y1: _13 * y + _23 * cmd.y1,\n                      x2: _13 * cmd.x + _23 * cmd.x1,\n                      y2: _13 * cmd.y + _23 * cmd.y1\n                    };\n                  }\n\n                  if (cmd.type === 'M') {\n                    dx = Math.round(cmd.x - x);\n                    dy = Math.round(cmd.y - y);\n                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                    ops.push({ name: 'rmoveto', type: 'OP', value: 21 });\n                    x = Math.round(cmd.x);\n                    y = Math.round(cmd.y);\n                  } else if (cmd.type === 'L') {\n                    dx = Math.round(cmd.x - x);\n                    dy = Math.round(cmd.y - y);\n                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                    ops.push({ name: 'rlineto', type: 'OP', value: 5 });\n                    x = Math.round(cmd.x);\n                    y = Math.round(cmd.y);\n                  } else if (cmd.type === 'C') {\n                    var dx1 = Math.round(cmd.x1 - x);\n                    var dy1 = Math.round(cmd.y1 - y);\n                    var dx2 = Math.round(cmd.x2 - cmd.x1);\n                    var dy2 = Math.round(cmd.y2 - cmd.y1);\n                    dx = Math.round(cmd.x - cmd.x2);\n                    dy = Math.round(cmd.y - cmd.y2);\n                    ops.push({ name: 'dx1', type: 'NUMBER', value: dx1 });\n                    ops.push({ name: 'dy1', type: 'NUMBER', value: dy1 });\n                    ops.push({ name: 'dx2', type: 'NUMBER', value: dx2 });\n                    ops.push({ name: 'dy2', type: 'NUMBER', value: dy2 });\n                    ops.push({ name: 'dx', type: 'NUMBER', value: dx });\n                    ops.push({ name: 'dy', type: 'NUMBER', value: dy });\n                    ops.push({ name: 'rrcurveto', type: 'OP', value: 8 });\n                    x = Math.round(cmd.x);\n                    y = Math.round(cmd.y);\n                  }\n\n                  // Contours are closed automatically.\n                }\n\n                ops.push({ name: 'endchar', type: 'OP', value: 14 });\n                return ops;\n              }\n\n              function makeCharStringsIndex(glyphs) {\n                var t = new table.Record('CharStrings INDEX', [\n                  { name: 'charStrings', type: 'INDEX', value: [] }\n                ]);\n\n                for (var i = 0; i < glyphs.length; i += 1) {\n                  var glyph = glyphs.get(i);\n                  var ops = glyphToOps(glyph);\n                  t.charStrings.push({ name: glyph.name, type: 'CHARSTRING', value: ops });\n                }\n\n                return t;\n              }\n\n              function makePrivateDict(attrs, strings) {\n                var t = new table.Record('Private DICT', [\n                  { name: 'dict', type: 'DICT', value: {} }\n                ]);\n                t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n                return t;\n              }\n\n              function makeCFFTable(glyphs, options) {\n                var t = new table.Table('CFF ', [\n                  { name: 'header', type: 'RECORD' },\n                  { name: 'nameIndex', type: 'RECORD' },\n                  { name: 'topDictIndex', type: 'RECORD' },\n                  { name: 'stringIndex', type: 'RECORD' },\n                  { name: 'globalSubrIndex', type: 'RECORD' },\n                  { name: 'charsets', type: 'RECORD' },\n                  { name: 'charStringsIndex', type: 'RECORD' },\n                  { name: 'privateDict', type: 'RECORD' }\n                ]);\n\n                var fontScale = 1 / options.unitsPerEm;\n                // We use non-zero values for the offsets so that the DICT encodes them.\n                // This is important because the size of the Top DICT plays a role in offset calculation,\n                // and the size shouldn't change after we've written correct offsets.\n                var attrs = {\n                  version: options.version,\n                  fullName: options.fullName,\n                  familyName: options.familyName,\n                  weight: options.weightName,\n                  fontBBox: options.fontBBox || [0, 0, 0, 0],\n                  fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n                  charset: 999,\n                  encoding: 0,\n                  charStrings: 999,\n                  private: [0, 999]\n                };\n\n                var privateAttrs = {};\n\n                var glyphNames = [];\n                var glyph;\n\n                // Skip first glyph (.notdef)\n                for (var i = 1; i < glyphs.length; i += 1) {\n                  glyph = glyphs.get(i);\n                  glyphNames.push(glyph.name);\n                }\n\n                var strings = [];\n\n                t.header = makeHeader();\n                t.nameIndex = makeNameIndex([options.postScriptName]);\n                var topDict = makeTopDict(attrs, strings);\n                t.topDictIndex = makeTopDictIndex(topDict);\n                t.globalSubrIndex = makeGlobalSubrIndex();\n                t.charsets = makeCharsets(glyphNames, strings);\n                t.charStringsIndex = makeCharStringsIndex(glyphs);\n                t.privateDict = makePrivateDict(privateAttrs, strings);\n\n                // Needs to come at the end, to encode all custom strings used in the font.\n                t.stringIndex = makeStringIndex(strings);\n\n                var startOffset =\n                  t.header.sizeOf() +\n                  t.nameIndex.sizeOf() +\n                  t.topDictIndex.sizeOf() +\n                  t.stringIndex.sizeOf() +\n                  t.globalSubrIndex.sizeOf();\n                attrs.charset = startOffset;\n\n                // We use the CFF standard encoding; proper encoding will be handled in cmap.\n                attrs.encoding = 0;\n                attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n                attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n                // Recreate the Top DICT INDEX with the correct offsets.\n                topDict = makeTopDict(attrs, strings);\n                t.topDictIndex = makeTopDictIndex(topDict);\n\n                return t;\n              }\n\n              var cff = { parse: parseCFFTable, make: makeCFFTable };\n\n              // The `head` table contains global information about the font.\n\n              // Parse the header `head` table\n              function parseHeadTable(data, start) {\n                var head = {};\n                var p = new parse.Parser(data, start);\n                head.version = p.parseVersion();\n                head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n                head.checkSumAdjustment = p.parseULong();\n                head.magicNumber = p.parseULong();\n                check.argument(\n                  head.magicNumber === 0x5f0f3cf5,\n                  'Font header has wrong magic number.'\n                );\n                head.flags = p.parseUShort();\n                head.unitsPerEm = p.parseUShort();\n                head.created = p.parseLongDateTime();\n                head.modified = p.parseLongDateTime();\n                head.xMin = p.parseShort();\n                head.yMin = p.parseShort();\n                head.xMax = p.parseShort();\n                head.yMax = p.parseShort();\n                head.macStyle = p.parseUShort();\n                head.lowestRecPPEM = p.parseUShort();\n                head.fontDirectionHint = p.parseShort();\n                head.indexToLocFormat = p.parseShort();\n                head.glyphDataFormat = p.parseShort();\n                return head;\n              }\n\n              function makeHeadTable(options) {\n                // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n                var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n                var createdTimestamp = timestamp;\n\n                if (options.createdTimestamp) {\n                  createdTimestamp = options.createdTimestamp + 2082844800;\n                }\n\n                return new table.Table(\n                  'head',\n                  [\n                    { name: 'version', type: 'FIXED', value: 0x00010000 },\n                    { name: 'fontRevision', type: 'FIXED', value: 0x00010000 },\n                    { name: 'checkSumAdjustment', type: 'ULONG', value: 0 },\n                    { name: 'magicNumber', type: 'ULONG', value: 0x5f0f3cf5 },\n                    { name: 'flags', type: 'USHORT', value: 0 },\n                    { name: 'unitsPerEm', type: 'USHORT', value: 1000 },\n                    { name: 'created', type: 'LONGDATETIME', value: createdTimestamp },\n                    { name: 'modified', type: 'LONGDATETIME', value: timestamp },\n                    { name: 'xMin', type: 'SHORT', value: 0 },\n                    { name: 'yMin', type: 'SHORT', value: 0 },\n                    { name: 'xMax', type: 'SHORT', value: 0 },\n                    { name: 'yMax', type: 'SHORT', value: 0 },\n                    { name: 'macStyle', type: 'USHORT', value: 0 },\n                    { name: 'lowestRecPPEM', type: 'USHORT', value: 0 },\n                    { name: 'fontDirectionHint', type: 'SHORT', value: 2 },\n                    { name: 'indexToLocFormat', type: 'SHORT', value: 0 },\n                    { name: 'glyphDataFormat', type: 'SHORT', value: 0 }\n                  ],\n                  options\n                );\n              }\n\n              var head = { parse: parseHeadTable, make: makeHeadTable };\n\n              // The `hhea` table contains information for horizontal layout.\n\n              // Parse the horizontal header `hhea` table\n              function parseHheaTable(data, start) {\n                var hhea = {};\n                var p = new parse.Parser(data, start);\n                hhea.version = p.parseVersion();\n                hhea.ascender = p.parseShort();\n                hhea.descender = p.parseShort();\n                hhea.lineGap = p.parseShort();\n                hhea.advanceWidthMax = p.parseUShort();\n                hhea.minLeftSideBearing = p.parseShort();\n                hhea.minRightSideBearing = p.parseShort();\n                hhea.xMaxExtent = p.parseShort();\n                hhea.caretSlopeRise = p.parseShort();\n                hhea.caretSlopeRun = p.parseShort();\n                hhea.caretOffset = p.parseShort();\n                p.relativeOffset += 8;\n                hhea.metricDataFormat = p.parseShort();\n                hhea.numberOfHMetrics = p.parseUShort();\n                return hhea;\n              }\n\n              function makeHheaTable(options) {\n                return new table.Table(\n                  'hhea',\n                  [\n                    { name: 'version', type: 'FIXED', value: 0x00010000 },\n                    { name: 'ascender', type: 'FWORD', value: 0 },\n                    { name: 'descender', type: 'FWORD', value: 0 },\n                    { name: 'lineGap', type: 'FWORD', value: 0 },\n                    { name: 'advanceWidthMax', type: 'UFWORD', value: 0 },\n                    { name: 'minLeftSideBearing', type: 'FWORD', value: 0 },\n                    { name: 'minRightSideBearing', type: 'FWORD', value: 0 },\n                    { name: 'xMaxExtent', type: 'FWORD', value: 0 },\n                    { name: 'caretSlopeRise', type: 'SHORT', value: 1 },\n                    { name: 'caretSlopeRun', type: 'SHORT', value: 0 },\n                    { name: 'caretOffset', type: 'SHORT', value: 0 },\n                    { name: 'reserved1', type: 'SHORT', value: 0 },\n                    { name: 'reserved2', type: 'SHORT', value: 0 },\n                    { name: 'reserved3', type: 'SHORT', value: 0 },\n                    { name: 'reserved4', type: 'SHORT', value: 0 },\n                    { name: 'metricDataFormat', type: 'SHORT', value: 0 },\n                    { name: 'numberOfHMetrics', type: 'USHORT', value: 0 }\n                  ],\n                  options\n                );\n              }\n\n              var hhea = { parse: parseHheaTable, make: makeHheaTable };\n\n              // The `hmtx` table contains the horizontal metrics for all glyphs.\n\n              // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n              // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\n              function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {\n                var advanceWidth;\n                var leftSideBearing;\n                var p = new parse.Parser(data, start);\n                for (var i = 0; i < numGlyphs; i += 1) {\n                  // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n                  if (i < numMetrics) {\n                    advanceWidth = p.parseUShort();\n                    leftSideBearing = p.parseShort();\n                  }\n\n                  var glyph = glyphs.get(i);\n                  glyph.advanceWidth = advanceWidth;\n                  glyph.leftSideBearing = leftSideBearing;\n                }\n              }\n\n              function makeHmtxTable(glyphs) {\n                var t = new table.Table('hmtx', []);\n                for (var i = 0; i < glyphs.length; i += 1) {\n                  var glyph = glyphs.get(i);\n                  var advanceWidth = glyph.advanceWidth || 0;\n                  var leftSideBearing = glyph.leftSideBearing || 0;\n                  t.fields.push({\n                    name: 'advanceWidth_' + i,\n                    type: 'USHORT',\n                    value: advanceWidth\n                  });\n                  t.fields.push({\n                    name: 'leftSideBearing_' + i,\n                    type: 'SHORT',\n                    value: leftSideBearing\n                  });\n                }\n\n                return t;\n              }\n\n              var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };\n\n              // The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n\n              function makeLtagTable(tags) {\n                var result = new table.Table('ltag', [\n                  { name: 'version', type: 'ULONG', value: 1 },\n                  { name: 'flags', type: 'ULONG', value: 0 },\n                  { name: 'numTags', type: 'ULONG', value: tags.length }\n                ]);\n\n                var stringPool = '';\n                var stringPoolOffset = 12 + tags.length * 4;\n                for (var i = 0; i < tags.length; ++i) {\n                  var pos = stringPool.indexOf(tags[i]);\n                  if (pos < 0) {\n                    pos = stringPool.length;\n                    stringPool += tags[i];\n                  }\n\n                  result.fields.push({\n                    name: 'offset ' + i,\n                    type: 'USHORT',\n                    value: stringPoolOffset + pos\n                  });\n                  result.fields.push({\n                    name: 'length ' + i,\n                    type: 'USHORT',\n                    value: tags[i].length\n                  });\n                }\n\n                result.fields.push({\n                  name: 'stringPool',\n                  type: 'CHARARRAY',\n                  value: stringPool\n                });\n                return result;\n              }\n\n              function parseLtagTable(data, start) {\n                var p = new parse.Parser(data, start);\n                var tableVersion = p.parseULong();\n                check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n                // The 'ltag' specification does not define any flags; skip the field.\n                p.skip('uLong', 1);\n                var numTags = p.parseULong();\n\n                var tags = [];\n                for (var i = 0; i < numTags; i++) {\n                  var tag = '';\n                  var offset = start + p.parseUShort();\n                  var length = p.parseUShort();\n                  for (var j = offset; j < offset + length; ++j) {\n                    tag += String.fromCharCode(data.getInt8(j));\n                  }\n\n                  tags.push(tag);\n                }\n\n                return tags;\n              }\n\n              var ltag = { make: makeLtagTable, parse: parseLtagTable };\n\n              // The `maxp` table establishes the memory requirements for the font.\n\n              // Parse the maximum profile `maxp` table.\n              function parseMaxpTable(data, start) {\n                var maxp = {};\n                var p = new parse.Parser(data, start);\n                maxp.version = p.parseVersion();\n                maxp.numGlyphs = p.parseUShort();\n                if (maxp.version === 1.0) {\n                  maxp.maxPoints = p.parseUShort();\n                  maxp.maxContours = p.parseUShort();\n                  maxp.maxCompositePoints = p.parseUShort();\n                  maxp.maxCompositeContours = p.parseUShort();\n                  maxp.maxZones = p.parseUShort();\n                  maxp.maxTwilightPoints = p.parseUShort();\n                  maxp.maxStorage = p.parseUShort();\n                  maxp.maxFunctionDefs = p.parseUShort();\n                  maxp.maxInstructionDefs = p.parseUShort();\n                  maxp.maxStackElements = p.parseUShort();\n                  maxp.maxSizeOfInstructions = p.parseUShort();\n                  maxp.maxComponentElements = p.parseUShort();\n                  maxp.maxComponentDepth = p.parseUShort();\n                }\n\n                return maxp;\n              }\n\n              function makeMaxpTable(numGlyphs) {\n                return new table.Table('maxp', [\n                  { name: 'version', type: 'FIXED', value: 0x00005000 },\n                  { name: 'numGlyphs', type: 'USHORT', value: numGlyphs }\n                ]);\n              }\n\n              var maxp = { parse: parseMaxpTable, make: makeMaxpTable };\n\n              // The `name` naming table.\n\n              // NameIDs for the name table.\n              var nameTableNames = [\n                'copyright', // 0\n                'fontFamily', // 1\n                'fontSubfamily', // 2\n                'uniqueID', // 3\n                'fullName', // 4\n                'version', // 5\n                'postScriptName', // 6\n                'trademark', // 7\n                'manufacturer', // 8\n                'designer', // 9\n                'description', // 10\n                'manufacturerURL', // 11\n                'designerURL', // 12\n                'license', // 13\n                'licenseURL', // 14\n                'reserved', // 15\n                'preferredFamily', // 16\n                'preferredSubfamily', // 17\n                'compatibleFullName', // 18\n                'sampleText', // 19\n                'postScriptFindFontName', // 20\n                'wwsFamily', // 21\n                'wwsSubfamily' // 22\n              ];\n\n              var macLanguages = {\n                0: 'en',\n                1: 'fr',\n                2: 'de',\n                3: 'it',\n                4: 'nl',\n                5: 'sv',\n                6: 'es',\n                7: 'da',\n                8: 'pt',\n                9: 'no',\n                10: 'he',\n                11: 'ja',\n                12: 'ar',\n                13: 'fi',\n                14: 'el',\n                15: 'is',\n                16: 'mt',\n                17: 'tr',\n                18: 'hr',\n                19: 'zh-Hant',\n                20: 'ur',\n                21: 'hi',\n                22: 'th',\n                23: 'ko',\n                24: 'lt',\n                25: 'pl',\n                26: 'hu',\n                27: 'es',\n                28: 'lv',\n                29: 'se',\n                30: 'fo',\n                31: 'fa',\n                32: 'ru',\n                33: 'zh',\n                34: 'nl-BE',\n                35: 'ga',\n                36: 'sq',\n                37: 'ro',\n                38: 'cz',\n                39: 'sk',\n                40: 'si',\n                41: 'yi',\n                42: 'sr',\n                43: 'mk',\n                44: 'bg',\n                45: 'uk',\n                46: 'be',\n                47: 'uz',\n                48: 'kk',\n                49: 'az-Cyrl',\n                50: 'az-Arab',\n                51: 'hy',\n                52: 'ka',\n                53: 'mo',\n                54: 'ky',\n                55: 'tg',\n                56: 'tk',\n                57: 'mn-CN',\n                58: 'mn',\n                59: 'ps',\n                60: 'ks',\n                61: 'ku',\n                62: 'sd',\n                63: 'bo',\n                64: 'ne',\n                65: 'sa',\n                66: 'mr',\n                67: 'bn',\n                68: 'as',\n                69: 'gu',\n                70: 'pa',\n                71: 'or',\n                72: 'ml',\n                73: 'kn',\n                74: 'ta',\n                75: 'te',\n                76: 'si',\n                77: 'my',\n                78: 'km',\n                79: 'lo',\n                80: 'vi',\n                81: 'id',\n                82: 'tl',\n                83: 'ms',\n                84: 'ms-Arab',\n                85: 'am',\n                86: 'ti',\n                87: 'om',\n                88: 'so',\n                89: 'sw',\n                90: 'rw',\n                91: 'rn',\n                92: 'ny',\n                93: 'mg',\n                94: 'eo',\n                128: 'cy',\n                129: 'eu',\n                130: 'ca',\n                131: 'la',\n                132: 'qu',\n                133: 'gn',\n                134: 'ay',\n                135: 'tt',\n                136: 'ug',\n                137: 'dz',\n                138: 'jv',\n                139: 'su',\n                140: 'gl',\n                141: 'af',\n                142: 'br',\n                143: 'iu',\n                144: 'gd',\n                145: 'gv',\n                146: 'ga',\n                147: 'to',\n                148: 'el-polyton',\n                149: 'kl',\n                150: 'az',\n                151: 'nn'\n              };\n\n              // MacOS language ID → MacOS script ID\n              //\n              // Note that the script ID is not sufficient to determine what encoding\n              // to use in TrueType files. For some languages, MacOS used a modification\n              // of a mainstream script. For example, an Icelandic name would be stored\n              // with smRoman in the TrueType naming table, but the actual encoding\n              // is a special Icelandic version of the normal Macintosh Roman encoding.\n              // As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n              // Syllables but MacOS had run out of available script codes, so this was\n              // done as a (pretty radical) \"modification\" of Ethiopic.\n              //\n              // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n              var macLanguageToScript = {\n                0: 0, // langEnglish → smRoman\n                1: 0, // langFrench → smRoman\n                2: 0, // langGerman → smRoman\n                3: 0, // langItalian → smRoman\n                4: 0, // langDutch → smRoman\n                5: 0, // langSwedish → smRoman\n                6: 0, // langSpanish → smRoman\n                7: 0, // langDanish → smRoman\n                8: 0, // langPortuguese → smRoman\n                9: 0, // langNorwegian → smRoman\n                10: 5, // langHebrew → smHebrew\n                11: 1, // langJapanese → smJapanese\n                12: 4, // langArabic → smArabic\n                13: 0, // langFinnish → smRoman\n                14: 6, // langGreek → smGreek\n                15: 0, // langIcelandic → smRoman (modified)\n                16: 0, // langMaltese → smRoman\n                17: 0, // langTurkish → smRoman (modified)\n                18: 0, // langCroatian → smRoman (modified)\n                19: 2, // langTradChinese → smTradChinese\n                20: 4, // langUrdu → smArabic\n                21: 9, // langHindi → smDevanagari\n                22: 21, // langThai → smThai\n                23: 3, // langKorean → smKorean\n                24: 29, // langLithuanian → smCentralEuroRoman\n                25: 29, // langPolish → smCentralEuroRoman\n                26: 29, // langHungarian → smCentralEuroRoman\n                27: 29, // langEstonian → smCentralEuroRoman\n                28: 29, // langLatvian → smCentralEuroRoman\n                29: 0, // langSami → smRoman\n                30: 0, // langFaroese → smRoman (modified)\n                31: 4, // langFarsi → smArabic (modified)\n                32: 7, // langRussian → smCyrillic\n                33: 25, // langSimpChinese → smSimpChinese\n                34: 0, // langFlemish → smRoman\n                35: 0, // langIrishGaelic → smRoman (modified)\n                36: 0, // langAlbanian → smRoman\n                37: 0, // langRomanian → smRoman (modified)\n                38: 29, // langCzech → smCentralEuroRoman\n                39: 29, // langSlovak → smCentralEuroRoman\n                40: 0, // langSlovenian → smRoman (modified)\n                41: 5, // langYiddish → smHebrew\n                42: 7, // langSerbian → smCyrillic\n                43: 7, // langMacedonian → smCyrillic\n                44: 7, // langBulgarian → smCyrillic\n                45: 7, // langUkrainian → smCyrillic (modified)\n                46: 7, // langByelorussian → smCyrillic\n                47: 7, // langUzbek → smCyrillic\n                48: 7, // langKazakh → smCyrillic\n                49: 7, // langAzerbaijani → smCyrillic\n                50: 4, // langAzerbaijanAr → smArabic\n                51: 24, // langArmenian → smArmenian\n                52: 23, // langGeorgian → smGeorgian\n                53: 7, // langMoldavian → smCyrillic\n                54: 7, // langKirghiz → smCyrillic\n                55: 7, // langTajiki → smCyrillic\n                56: 7, // langTurkmen → smCyrillic\n                57: 27, // langMongolian → smMongolian\n                58: 7, // langMongolianCyr → smCyrillic\n                59: 4, // langPashto → smArabic\n                60: 4, // langKurdish → smArabic\n                61: 4, // langKashmiri → smArabic\n                62: 4, // langSindhi → smArabic\n                63: 26, // langTibetan → smTibetan\n                64: 9, // langNepali → smDevanagari\n                65: 9, // langSanskrit → smDevanagari\n                66: 9, // langMarathi → smDevanagari\n                67: 13, // langBengali → smBengali\n                68: 13, // langAssamese → smBengali\n                69: 11, // langGujarati → smGujarati\n                70: 10, // langPunjabi → smGurmukhi\n                71: 12, // langOriya → smOriya\n                72: 17, // langMalayalam → smMalayalam\n                73: 16, // langKannada → smKannada\n                74: 14, // langTamil → smTamil\n                75: 15, // langTelugu → smTelugu\n                76: 18, // langSinhalese → smSinhalese\n                77: 19, // langBurmese → smBurmese\n                78: 20, // langKhmer → smKhmer\n                79: 22, // langLao → smLao\n                80: 30, // langVietnamese → smVietnamese\n                81: 0, // langIndonesian → smRoman\n                82: 0, // langTagalog → smRoman\n                83: 0, // langMalayRoman → smRoman\n                84: 4, // langMalayArabic → smArabic\n                85: 28, // langAmharic → smEthiopic\n                86: 28, // langTigrinya → smEthiopic\n                87: 28, // langOromo → smEthiopic\n                88: 0, // langSomali → smRoman\n                89: 0, // langSwahili → smRoman\n                90: 0, // langKinyarwanda → smRoman\n                91: 0, // langRundi → smRoman\n                92: 0, // langNyanja → smRoman\n                93: 0, // langMalagasy → smRoman\n                94: 0, // langEsperanto → smRoman\n                128: 0, // langWelsh → smRoman (modified)\n                129: 0, // langBasque → smRoman\n                130: 0, // langCatalan → smRoman\n                131: 0, // langLatin → smRoman\n                132: 0, // langQuechua → smRoman\n                133: 0, // langGuarani → smRoman\n                134: 0, // langAymara → smRoman\n                135: 7, // langTatar → smCyrillic\n                136: 4, // langUighur → smArabic\n                137: 26, // langDzongkha → smTibetan\n                138: 0, // langJavaneseRom → smRoman\n                139: 0, // langSundaneseRom → smRoman\n                140: 0, // langGalician → smRoman\n                141: 0, // langAfrikaans → smRoman\n                142: 0, // langBreton → smRoman (modified)\n                143: 28, // langInuktitut → smEthiopic (modified)\n                144: 0, // langScottishGaelic → smRoman (modified)\n                145: 0, // langManxGaelic → smRoman (modified)\n                146: 0, // langIrishGaelicScript → smRoman (modified)\n                147: 0, // langTongan → smRoman\n                148: 6, // langGreekAncient → smRoman\n                149: 0, // langGreenlandic → smRoman\n                150: 0, // langAzerbaijanRoman → smRoman\n                151: 0 // langNynorsk → smRoman\n              };\n\n              // While Microsoft indicates a region/country for all its language\n              // IDs, we omit the region code if it's equal to the \"most likely\n              // region subtag\" according to Unicode CLDR. For scripts, we omit\n              // the subtag if it is equal to the Suppress-Script entry in the\n              // IANA language subtag registry for IETF BCP 47.\n              //\n              // For example, Microsoft states that its language code 0x041A is\n              // Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n              // and not 'hr-HR' because Croatia is the default country for Croatian,\n              // according to Unicode CLDR. As another example, Microsoft states\n              // that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n              // this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n              // for the Croatian language, according to IANA.\n              //\n              // http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n              // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n              var windowsLanguages = {\n                0x0436: 'af',\n                0x041c: 'sq',\n                0x0484: 'gsw',\n                0x045e: 'am',\n                0x1401: 'ar-DZ',\n                0x3c01: 'ar-BH',\n                0x0c01: 'ar',\n                0x0801: 'ar-IQ',\n                0x2c01: 'ar-JO',\n                0x3401: 'ar-KW',\n                0x3001: 'ar-LB',\n                0x1001: 'ar-LY',\n                0x1801: 'ary',\n                0x2001: 'ar-OM',\n                0x4001: 'ar-QA',\n                0x0401: 'ar-SA',\n                0x2801: 'ar-SY',\n                0x1c01: 'aeb',\n                0x3801: 'ar-AE',\n                0x2401: 'ar-YE',\n                0x042b: 'hy',\n                0x044d: 'as',\n                0x082c: 'az-Cyrl',\n                0x042c: 'az',\n                0x046d: 'ba',\n                0x042d: 'eu',\n                0x0423: 'be',\n                0x0845: 'bn',\n                0x0445: 'bn-IN',\n                0x201a: 'bs-Cyrl',\n                0x141a: 'bs',\n                0x047e: 'br',\n                0x0402: 'bg',\n                0x0403: 'ca',\n                0x0c04: 'zh-HK',\n                0x1404: 'zh-MO',\n                0x0804: 'zh',\n                0x1004: 'zh-SG',\n                0x0404: 'zh-TW',\n                0x0483: 'co',\n                0x041a: 'hr',\n                0x101a: 'hr-BA',\n                0x0405: 'cs',\n                0x0406: 'da',\n                0x048c: 'prs',\n                0x0465: 'dv',\n                0x0813: 'nl-BE',\n                0x0413: 'nl',\n                0x0c09: 'en-AU',\n                0x2809: 'en-BZ',\n                0x1009: 'en-CA',\n                0x2409: 'en-029',\n                0x4009: 'en-IN',\n                0x1809: 'en-IE',\n                0x2009: 'en-JM',\n                0x4409: 'en-MY',\n                0x1409: 'en-NZ',\n                0x3409: 'en-PH',\n                0x4809: 'en-SG',\n                0x1c09: 'en-ZA',\n                0x2c09: 'en-TT',\n                0x0809: 'en-GB',\n                0x0409: 'en',\n                0x3009: 'en-ZW',\n                0x0425: 'et',\n                0x0438: 'fo',\n                0x0464: 'fil',\n                0x040b: 'fi',\n                0x080c: 'fr-BE',\n                0x0c0c: 'fr-CA',\n                0x040c: 'fr',\n                0x140c: 'fr-LU',\n                0x180c: 'fr-MC',\n                0x100c: 'fr-CH',\n                0x0462: 'fy',\n                0x0456: 'gl',\n                0x0437: 'ka',\n                0x0c07: 'de-AT',\n                0x0407: 'de',\n                0x1407: 'de-LI',\n                0x1007: 'de-LU',\n                0x0807: 'de-CH',\n                0x0408: 'el',\n                0x046f: 'kl',\n                0x0447: 'gu',\n                0x0468: 'ha',\n                0x040d: 'he',\n                0x0439: 'hi',\n                0x040e: 'hu',\n                0x040f: 'is',\n                0x0470: 'ig',\n                0x0421: 'id',\n                0x045d: 'iu',\n                0x085d: 'iu-Latn',\n                0x083c: 'ga',\n                0x0434: 'xh',\n                0x0435: 'zu',\n                0x0410: 'it',\n                0x0810: 'it-CH',\n                0x0411: 'ja',\n                0x044b: 'kn',\n                0x043f: 'kk',\n                0x0453: 'km',\n                0x0486: 'quc',\n                0x0487: 'rw',\n                0x0441: 'sw',\n                0x0457: 'kok',\n                0x0412: 'ko',\n                0x0440: 'ky',\n                0x0454: 'lo',\n                0x0426: 'lv',\n                0x0427: 'lt',\n                0x082e: 'dsb',\n                0x046e: 'lb',\n                0x042f: 'mk',\n                0x083e: 'ms-BN',\n                0x043e: 'ms',\n                0x044c: 'ml',\n                0x043a: 'mt',\n                0x0481: 'mi',\n                0x047a: 'arn',\n                0x044e: 'mr',\n                0x047c: 'moh',\n                0x0450: 'mn',\n                0x0850: 'mn-CN',\n                0x0461: 'ne',\n                0x0414: 'nb',\n                0x0814: 'nn',\n                0x0482: 'oc',\n                0x0448: 'or',\n                0x0463: 'ps',\n                0x0415: 'pl',\n                0x0416: 'pt',\n                0x0816: 'pt-PT',\n                0x0446: 'pa',\n                0x046b: 'qu-BO',\n                0x086b: 'qu-EC',\n                0x0c6b: 'qu',\n                0x0418: 'ro',\n                0x0417: 'rm',\n                0x0419: 'ru',\n                0x243b: 'smn',\n                0x103b: 'smj-NO',\n                0x143b: 'smj',\n                0x0c3b: 'se-FI',\n                0x043b: 'se',\n                0x083b: 'se-SE',\n                0x203b: 'sms',\n                0x183b: 'sma-NO',\n                0x1c3b: 'sms',\n                0x044f: 'sa',\n                0x1c1a: 'sr-Cyrl-BA',\n                0x0c1a: 'sr',\n                0x181a: 'sr-Latn-BA',\n                0x081a: 'sr-Latn',\n                0x046c: 'nso',\n                0x0432: 'tn',\n                0x045b: 'si',\n                0x041b: 'sk',\n                0x0424: 'sl',\n                0x2c0a: 'es-AR',\n                0x400a: 'es-BO',\n                0x340a: 'es-CL',\n                0x240a: 'es-CO',\n                0x140a: 'es-CR',\n                0x1c0a: 'es-DO',\n                0x300a: 'es-EC',\n                0x440a: 'es-SV',\n                0x100a: 'es-GT',\n                0x480a: 'es-HN',\n                0x080a: 'es-MX',\n                0x4c0a: 'es-NI',\n                0x180a: 'es-PA',\n                0x3c0a: 'es-PY',\n                0x280a: 'es-PE',\n                0x500a: 'es-PR',\n\n                // Microsoft has defined two different language codes for\n                // “Spanish with modern sorting” and “Spanish with traditional\n                // sorting”. This makes sense for collation APIs, and it would be\n                // possible to express this in BCP 47 language tags via Unicode\n                // extensions (eg., es-u-co-trad is Spanish with traditional\n                // sorting). However, for storing names in fonts, the distinction\n                // does not make sense, so we give “es” in both cases.\n                0x0c0a: 'es',\n                0x040a: 'es',\n\n                0x540a: 'es-US',\n                0x380a: 'es-UY',\n                0x200a: 'es-VE',\n                0x081d: 'sv-FI',\n                0x041d: 'sv',\n                0x045a: 'syr',\n                0x0428: 'tg',\n                0x085f: 'tzm',\n                0x0449: 'ta',\n                0x0444: 'tt',\n                0x044a: 'te',\n                0x041e: 'th',\n                0x0451: 'bo',\n                0x041f: 'tr',\n                0x0442: 'tk',\n                0x0480: 'ug',\n                0x0422: 'uk',\n                0x042e: 'hsb',\n                0x0420: 'ur',\n                0x0843: 'uz-Cyrl',\n                0x0443: 'uz',\n                0x042a: 'vi',\n                0x0452: 'cy',\n                0x0488: 'wo',\n                0x0485: 'sah',\n                0x0478: 'ii',\n                0x046a: 'yo'\n              };\n\n              // Returns a IETF BCP 47 language code, for example 'zh-Hant'\n              // for 'Chinese in the traditional script'.\n              function getLanguageCode(platformID, languageID, ltag) {\n                switch (platformID) {\n                  case 0: // Unicode\n                    if (languageID === 0xffff) {\n                      return 'und';\n                    } else if (ltag) {\n                      return ltag[languageID];\n                    }\n\n                    break;\n\n                  case 1: // Macintosh\n                    return macLanguages[languageID];\n\n                  case 3: // Windows\n                    return windowsLanguages[languageID];\n                }\n\n                return undefined;\n              }\n\n              var utf16 = 'utf-16';\n\n              // MacOS script ID → encoding. This table stores the default case,\n              // which can be overridden by macLanguageEncodings.\n              var macScriptEncodings = {\n                0: 'macintosh', // smRoman\n                1: 'x-mac-japanese', // smJapanese\n                2: 'x-mac-chinesetrad', // smTradChinese\n                3: 'x-mac-korean', // smKorean\n                6: 'x-mac-greek', // smGreek\n                7: 'x-mac-cyrillic', // smCyrillic\n                9: 'x-mac-devanagai', // smDevanagari\n                10: 'x-mac-gurmukhi', // smGurmukhi\n                11: 'x-mac-gujarati', // smGujarati\n                12: 'x-mac-oriya', // smOriya\n                13: 'x-mac-bengali', // smBengali\n                14: 'x-mac-tamil', // smTamil\n                15: 'x-mac-telugu', // smTelugu\n                16: 'x-mac-kannada', // smKannada\n                17: 'x-mac-malayalam', // smMalayalam\n                18: 'x-mac-sinhalese', // smSinhalese\n                19: 'x-mac-burmese', // smBurmese\n                20: 'x-mac-khmer', // smKhmer\n                21: 'x-mac-thai', // smThai\n                22: 'x-mac-lao', // smLao\n                23: 'x-mac-georgian', // smGeorgian\n                24: 'x-mac-armenian', // smArmenian\n                25: 'x-mac-chinesesimp', // smSimpChinese\n                26: 'x-mac-tibetan', // smTibetan\n                27: 'x-mac-mongolian', // smMongolian\n                28: 'x-mac-ethiopic', // smEthiopic\n                29: 'x-mac-ce', // smCentralEuroRoman\n                30: 'x-mac-vietnamese', // smVietnamese\n                31: 'x-mac-extarabic' // smExtArabic\n              };\n\n              // MacOS language ID → encoding. This table stores the exceptional\n              // cases, which override macScriptEncodings. For writing MacOS naming\n              // tables, we need to emit a MacOS script ID. Therefore, we cannot\n              // merge macScriptEncodings into macLanguageEncodings.\n              //\n              // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n              var macLanguageEncodings = {\n                15: 'x-mac-icelandic', // langIcelandic\n                17: 'x-mac-turkish', // langTurkish\n                18: 'x-mac-croatian', // langCroatian\n                24: 'x-mac-ce', // langLithuanian\n                25: 'x-mac-ce', // langPolish\n                26: 'x-mac-ce', // langHungarian\n                27: 'x-mac-ce', // langEstonian\n                28: 'x-mac-ce', // langLatvian\n                30: 'x-mac-icelandic', // langFaroese\n                37: 'x-mac-romanian', // langRomanian\n                38: 'x-mac-ce', // langCzech\n                39: 'x-mac-ce', // langSlovak\n                40: 'x-mac-ce', // langSlovenian\n                143: 'x-mac-inuit', // langInuktitut\n                146: 'x-mac-gaelic' // langIrishGaelicScript\n              };\n\n              function getEncoding(platformID, encodingID, languageID) {\n                switch (platformID) {\n                  case 0: // Unicode\n                    return utf16;\n\n                  case 1: // Apple Macintosh\n                    return (\n                      macLanguageEncodings[languageID] || macScriptEncodings[encodingID]\n                    );\n\n                  case 3: // Microsoft Windows\n                    if (encodingID === 1 || encodingID === 10) {\n                      return utf16;\n                    }\n\n                    break;\n                }\n\n                return undefined;\n              }\n\n              // Parse the naming `name` table.\n              // FIXME: Format 1 additional fields are not supported yet.\n              // ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\n              function parseNameTable(data, start, ltag) {\n                var name = {};\n                var p = new parse.Parser(data, start);\n                var format = p.parseUShort();\n                var count = p.parseUShort();\n                var stringOffset = p.offset + p.parseUShort();\n                for (var i = 0; i < count; i++) {\n                  var platformID = p.parseUShort();\n                  var encodingID = p.parseUShort();\n                  var languageID = p.parseUShort();\n                  var nameID = p.parseUShort();\n                  var property = nameTableNames[nameID] || nameID;\n                  var byteLength = p.parseUShort();\n                  var offset = p.parseUShort();\n                  var language = getLanguageCode(platformID, languageID, ltag);\n                  var encoding = getEncoding(platformID, encodingID, languageID);\n                  if (encoding !== undefined && language !== undefined) {\n                    var text = void 0;\n                    if (encoding === utf16) {\n                      text = decode.UTF16(data, stringOffset + offset, byteLength);\n                    } else {\n                      text = decode.MACSTRING(\n                        data,\n                        stringOffset + offset,\n                        byteLength,\n                        encoding\n                      );\n                    }\n\n                    if (text) {\n                      var translations = name[property];\n                      if (translations === undefined) {\n                        translations = name[property] = {};\n                      }\n\n                      translations[language] = text;\n                    }\n                  }\n                }\n\n                var langTagCount = 0;\n                if (format === 1) {\n                  // FIXME: Also handle Microsoft's 'name' table 1.\n                  langTagCount = p.parseUShort();\n                }\n\n                return name;\n              }\n\n              // {23: 'foo'} → {'foo': 23}\n              // ['bar', 'baz'] → {'bar': 0, 'baz': 1}\n              function reverseDict(dict) {\n                var result = {};\n                for (var key in dict) {\n                  result[dict[key]] = parseInt(key);\n                }\n\n                return result;\n              }\n\n              function makeNameRecord(\n                platformID,\n                encodingID,\n                languageID,\n                nameID,\n                length,\n                offset\n              ) {\n                return new table.Record('NameRecord', [\n                  { name: 'platformID', type: 'USHORT', value: platformID },\n                  { name: 'encodingID', type: 'USHORT', value: encodingID },\n                  { name: 'languageID', type: 'USHORT', value: languageID },\n                  { name: 'nameID', type: 'USHORT', value: nameID },\n                  { name: 'length', type: 'USHORT', value: length },\n                  { name: 'offset', type: 'USHORT', value: offset }\n                ]);\n              }\n\n              // Finds the position of needle in haystack, or -1 if not there.\n              // Like String.indexOf(), but for arrays.\n              function findSubArray(needle, haystack) {\n                var needleLength = needle.length;\n                var limit = haystack.length - needleLength + 1;\n\n                loop: for (var pos = 0; pos < limit; pos++) {\n                  for (; pos < limit; pos++) {\n                    for (var k = 0; k < needleLength; k++) {\n                      if (haystack[pos + k] !== needle[k]) {\n                        continue loop;\n                      }\n                    }\n\n                    return pos;\n                  }\n                }\n\n                return -1;\n              }\n\n              function addStringToPool(s, pool) {\n                var offset = findSubArray(s, pool);\n                if (offset < 0) {\n                  offset = pool.length;\n                  var i = 0;\n                  var len = s.length;\n                  for (; i < len; ++i) {\n                    pool.push(s[i]);\n                  }\n                }\n\n                return offset;\n              }\n\n              function makeNameTable(names, ltag) {\n                var nameID;\n                var nameIDs = [];\n\n                var namesWithNumericKeys = {};\n                var nameTableIds = reverseDict(nameTableNames);\n                for (var key in names) {\n                  var id = nameTableIds[key];\n                  if (id === undefined) {\n                    id = key;\n                  }\n\n                  nameID = parseInt(id);\n\n                  if (isNaN(nameID)) {\n                    throw new Error(\n                      'Name table entry \"' +\n                        key +\n                        '\" does not exist, see nameTableNames for complete list.'\n                    );\n                  }\n\n                  namesWithNumericKeys[nameID] = names[key];\n                  nameIDs.push(nameID);\n                }\n\n                var macLanguageIds = reverseDict(macLanguages);\n                var windowsLanguageIds = reverseDict(windowsLanguages);\n\n                var nameRecords = [];\n                var stringPool = [];\n\n                for (var i = 0; i < nameIDs.length; i++) {\n                  nameID = nameIDs[i];\n                  var translations = namesWithNumericKeys[nameID];\n                  for (var lang in translations) {\n                    var text = translations[lang];\n\n                    // For MacOS, we try to emit the name in the form that was introduced\n                    // in the initial version of the TrueType spec (in the late 1980s).\n                    // However, this can fail for various reasons: the requested BCP 47\n                    // language code might not have an old-style Mac equivalent;\n                    // we might not have a codec for the needed character encoding;\n                    // or the name might contain characters that cannot be expressed\n                    // in the old-style Macintosh encoding. In case of failure, we emit\n                    // the name in a more modern fashion (Unicode encoding with BCP 47\n                    // language tags) that is recognized by MacOS 10.5, released in 2009.\n                    // If fonts were only read by operating systems, we could simply\n                    // emit all names in the modern form; this would be much easier.\n                    // However, there are many applications and libraries that read\n                    // 'name' tables directly, and these will usually only recognize\n                    // the ancient form (silently skipping the unrecognized names).\n                    var macPlatform = 1; // Macintosh\n                    var macLanguage = macLanguageIds[lang];\n                    var macScript = macLanguageToScript[macLanguage];\n                    var macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n                    var macName = encode.MACSTRING(text, macEncoding);\n                    if (macName === undefined) {\n                      macPlatform = 0; // Unicode\n                      macLanguage = ltag.indexOf(lang);\n                      if (macLanguage < 0) {\n                        macLanguage = ltag.length;\n                        ltag.push(lang);\n                      }\n\n                      macScript = 4; // Unicode 2.0 and later\n                      macName = encode.UTF16(text);\n                    }\n\n                    var macNameOffset = addStringToPool(macName, stringPool);\n                    nameRecords.push(\n                      makeNameRecord(\n                        macPlatform,\n                        macScript,\n                        macLanguage,\n                        nameID,\n                        macName.length,\n                        macNameOffset\n                      )\n                    );\n\n                    var winLanguage = windowsLanguageIds[lang];\n                    if (winLanguage !== undefined) {\n                      var winName = encode.UTF16(text);\n                      var winNameOffset = addStringToPool(winName, stringPool);\n                      nameRecords.push(\n                        makeNameRecord(\n                          3,\n                          1,\n                          winLanguage,\n                          nameID,\n                          winName.length,\n                          winNameOffset\n                        )\n                      );\n                    }\n                  }\n                }\n\n                nameRecords.sort(function(a, b) {\n                  return (\n                    a.platformID - b.platformID ||\n                    a.encodingID - b.encodingID ||\n                    a.languageID - b.languageID ||\n                    a.nameID - b.nameID\n                  );\n                });\n\n                var t = new table.Table('name', [\n                  { name: 'format', type: 'USHORT', value: 0 },\n                  { name: 'count', type: 'USHORT', value: nameRecords.length },\n                  {\n                    name: 'stringOffset',\n                    type: 'USHORT',\n                    value: 6 + nameRecords.length * 12\n                  }\n                ]);\n\n                for (var r = 0; r < nameRecords.length; r++) {\n                  t.fields.push({\n                    name: 'record_' + r,\n                    type: 'RECORD',\n                    value: nameRecords[r]\n                  });\n                }\n\n                t.fields.push({ name: 'strings', type: 'LITERAL', value: stringPool });\n                return t;\n              }\n\n              var _name = { parse: parseNameTable, make: makeNameTable };\n\n              // The `OS/2` table contains metrics required in OpenType fonts.\n\n              var unicodeRanges = [\n                { begin: 0x0000, end: 0x007f }, // Basic Latin\n                { begin: 0x0080, end: 0x00ff }, // Latin-1 Supplement\n                { begin: 0x0100, end: 0x017f }, // Latin Extended-A\n                { begin: 0x0180, end: 0x024f }, // Latin Extended-B\n                { begin: 0x0250, end: 0x02af }, // IPA Extensions\n                { begin: 0x02b0, end: 0x02ff }, // Spacing Modifier Letters\n                { begin: 0x0300, end: 0x036f }, // Combining Diacritical Marks\n                { begin: 0x0370, end: 0x03ff }, // Greek and Coptic\n                { begin: 0x2c80, end: 0x2cff }, // Coptic\n                { begin: 0x0400, end: 0x04ff }, // Cyrillic\n                { begin: 0x0530, end: 0x058f }, // Armenian\n                { begin: 0x0590, end: 0x05ff }, // Hebrew\n                { begin: 0xa500, end: 0xa63f }, // Vai\n                { begin: 0x0600, end: 0x06ff }, // Arabic\n                { begin: 0x07c0, end: 0x07ff }, // NKo\n                { begin: 0x0900, end: 0x097f }, // Devanagari\n                { begin: 0x0980, end: 0x09ff }, // Bengali\n                { begin: 0x0a00, end: 0x0a7f }, // Gurmukhi\n                { begin: 0x0a80, end: 0x0aff }, // Gujarati\n                { begin: 0x0b00, end: 0x0b7f }, // Oriya\n                { begin: 0x0b80, end: 0x0bff }, // Tamil\n                { begin: 0x0c00, end: 0x0c7f }, // Telugu\n                { begin: 0x0c80, end: 0x0cff }, // Kannada\n                { begin: 0x0d00, end: 0x0d7f }, // Malayalam\n                { begin: 0x0e00, end: 0x0e7f }, // Thai\n                { begin: 0x0e80, end: 0x0eff }, // Lao\n                { begin: 0x10a0, end: 0x10ff }, // Georgian\n                { begin: 0x1b00, end: 0x1b7f }, // Balinese\n                { begin: 0x1100, end: 0x11ff }, // Hangul Jamo\n                { begin: 0x1e00, end: 0x1eff }, // Latin Extended Additional\n                { begin: 0x1f00, end: 0x1fff }, // Greek Extended\n                { begin: 0x2000, end: 0x206f }, // General Punctuation\n                { begin: 0x2070, end: 0x209f }, // Superscripts And Subscripts\n                { begin: 0x20a0, end: 0x20cf }, // Currency Symbol\n                { begin: 0x20d0, end: 0x20ff }, // Combining Diacritical Marks For Symbols\n                { begin: 0x2100, end: 0x214f }, // Letterlike Symbols\n                { begin: 0x2150, end: 0x218f }, // Number Forms\n                { begin: 0x2190, end: 0x21ff }, // Arrows\n                { begin: 0x2200, end: 0x22ff }, // Mathematical Operators\n                { begin: 0x2300, end: 0x23ff }, // Miscellaneous Technical\n                { begin: 0x2400, end: 0x243f }, // Control Pictures\n                { begin: 0x2440, end: 0x245f }, // Optical Character Recognition\n                { begin: 0x2460, end: 0x24ff }, // Enclosed Alphanumerics\n                { begin: 0x2500, end: 0x257f }, // Box Drawing\n                { begin: 0x2580, end: 0x259f }, // Block Elements\n                { begin: 0x25a0, end: 0x25ff }, // Geometric Shapes\n                { begin: 0x2600, end: 0x26ff }, // Miscellaneous Symbols\n                { begin: 0x2700, end: 0x27bf }, // Dingbats\n                { begin: 0x3000, end: 0x303f }, // CJK Symbols And Punctuation\n                { begin: 0x3040, end: 0x309f }, // Hiragana\n                { begin: 0x30a0, end: 0x30ff }, // Katakana\n                { begin: 0x3100, end: 0x312f }, // Bopomofo\n                { begin: 0x3130, end: 0x318f }, // Hangul Compatibility Jamo\n                { begin: 0xa840, end: 0xa87f }, // Phags-pa\n                { begin: 0x3200, end: 0x32ff }, // Enclosed CJK Letters And Months\n                { begin: 0x3300, end: 0x33ff }, // CJK Compatibility\n                { begin: 0xac00, end: 0xd7af }, // Hangul Syllables\n                { begin: 0xd800, end: 0xdfff }, // Non-Plane 0 *\n                { begin: 0x10900, end: 0x1091f }, // Phoenicia\n                { begin: 0x4e00, end: 0x9fff }, // CJK Unified Ideographs\n                { begin: 0xe000, end: 0xf8ff }, // Private Use Area (plane 0)\n                { begin: 0x31c0, end: 0x31ef }, // CJK Strokes\n                { begin: 0xfb00, end: 0xfb4f }, // Alphabetic Presentation Forms\n                { begin: 0xfb50, end: 0xfdff }, // Arabic Presentation Forms-A\n                { begin: 0xfe20, end: 0xfe2f }, // Combining Half Marks\n                { begin: 0xfe10, end: 0xfe1f }, // Vertical Forms\n                { begin: 0xfe50, end: 0xfe6f }, // Small Form Variants\n                { begin: 0xfe70, end: 0xfeff }, // Arabic Presentation Forms-B\n                { begin: 0xff00, end: 0xffef }, // Halfwidth And Fullwidth Forms\n                { begin: 0xfff0, end: 0xffff }, // Specials\n                { begin: 0x0f00, end: 0x0fff }, // Tibetan\n                { begin: 0x0700, end: 0x074f }, // Syriac\n                { begin: 0x0780, end: 0x07bf }, // Thaana\n                { begin: 0x0d80, end: 0x0dff }, // Sinhala\n                { begin: 0x1000, end: 0x109f }, // Myanmar\n                { begin: 0x1200, end: 0x137f }, // Ethiopic\n                { begin: 0x13a0, end: 0x13ff }, // Cherokee\n                { begin: 0x1400, end: 0x167f }, // Unified Canadian Aboriginal Syllabics\n                { begin: 0x1680, end: 0x169f }, // Ogham\n                { begin: 0x16a0, end: 0x16ff }, // Runic\n                { begin: 0x1780, end: 0x17ff }, // Khmer\n                { begin: 0x1800, end: 0x18af }, // Mongolian\n                { begin: 0x2800, end: 0x28ff }, // Braille Patterns\n                { begin: 0xa000, end: 0xa48f }, // Yi Syllables\n                { begin: 0x1700, end: 0x171f }, // Tagalog\n                { begin: 0x10300, end: 0x1032f }, // Old Italic\n                { begin: 0x10330, end: 0x1034f }, // Gothic\n                { begin: 0x10400, end: 0x1044f }, // Deseret\n                { begin: 0x1d000, end: 0x1d0ff }, // Byzantine Musical Symbols\n                { begin: 0x1d400, end: 0x1d7ff }, // Mathematical Alphanumeric Symbols\n                { begin: 0xff000, end: 0xffffd }, // Private Use (plane 15)\n                { begin: 0xfe00, end: 0xfe0f }, // Variation Selectors\n                { begin: 0xe0000, end: 0xe007f }, // Tags\n                { begin: 0x1900, end: 0x194f }, // Limbu\n                { begin: 0x1950, end: 0x197f }, // Tai Le\n                { begin: 0x1980, end: 0x19df }, // New Tai Lue\n                { begin: 0x1a00, end: 0x1a1f }, // Buginese\n                { begin: 0x2c00, end: 0x2c5f }, // Glagolitic\n                { begin: 0x2d30, end: 0x2d7f }, // Tifinagh\n                { begin: 0x4dc0, end: 0x4dff }, // Yijing Hexagram Symbols\n                { begin: 0xa800, end: 0xa82f }, // Syloti Nagri\n                { begin: 0x10000, end: 0x1007f }, // Linear B Syllabary\n                { begin: 0x10140, end: 0x1018f }, // Ancient Greek Numbers\n                { begin: 0x10380, end: 0x1039f }, // Ugaritic\n                { begin: 0x103a0, end: 0x103df }, // Old Persian\n                { begin: 0x10450, end: 0x1047f }, // Shavian\n                { begin: 0x10480, end: 0x104af }, // Osmanya\n                { begin: 0x10800, end: 0x1083f }, // Cypriot Syllabary\n                { begin: 0x10a00, end: 0x10a5f }, // Kharoshthi\n                { begin: 0x1d300, end: 0x1d35f }, // Tai Xuan Jing Symbols\n                { begin: 0x12000, end: 0x123ff }, // Cuneiform\n                { begin: 0x1d360, end: 0x1d37f }, // Counting Rod Numerals\n                { begin: 0x1b80, end: 0x1bbf }, // Sundanese\n                { begin: 0x1c00, end: 0x1c4f }, // Lepcha\n                { begin: 0x1c50, end: 0x1c7f }, // Ol Chiki\n                { begin: 0xa880, end: 0xa8df }, // Saurashtra\n                { begin: 0xa900, end: 0xa92f }, // Kayah Li\n                { begin: 0xa930, end: 0xa95f }, // Rejang\n                { begin: 0xaa00, end: 0xaa5f }, // Cham\n                { begin: 0x10190, end: 0x101cf }, // Ancient Symbols\n                { begin: 0x101d0, end: 0x101ff }, // Phaistos Disc\n                { begin: 0x102a0, end: 0x102df }, // Carian\n                { begin: 0x1f030, end: 0x1f09f } // Domino Tiles\n              ];\n\n              function getUnicodeRange(unicode) {\n                for (var i = 0; i < unicodeRanges.length; i += 1) {\n                  var range = unicodeRanges[i];\n                  if (unicode >= range.begin && unicode < range.end) {\n                    return i;\n                  }\n                }\n\n                return -1;\n              }\n\n              // Parse the OS/2 and Windows metrics `OS/2` table\n              function parseOS2Table(data, start) {\n                var os2 = {};\n                var p = new parse.Parser(data, start);\n                os2.version = p.parseUShort();\n                os2.xAvgCharWidth = p.parseShort();\n                os2.usWeightClass = p.parseUShort();\n                os2.usWidthClass = p.parseUShort();\n                os2.fsType = p.parseUShort();\n                os2.ySubscriptXSize = p.parseShort();\n                os2.ySubscriptYSize = p.parseShort();\n                os2.ySubscriptXOffset = p.parseShort();\n                os2.ySubscriptYOffset = p.parseShort();\n                os2.ySuperscriptXSize = p.parseShort();\n                os2.ySuperscriptYSize = p.parseShort();\n                os2.ySuperscriptXOffset = p.parseShort();\n                os2.ySuperscriptYOffset = p.parseShort();\n                os2.yStrikeoutSize = p.parseShort();\n                os2.yStrikeoutPosition = p.parseShort();\n                os2.sFamilyClass = p.parseShort();\n                os2.panose = [];\n                for (var i = 0; i < 10; i++) {\n                  os2.panose[i] = p.parseByte();\n                }\n\n                os2.ulUnicodeRange1 = p.parseULong();\n                os2.ulUnicodeRange2 = p.parseULong();\n                os2.ulUnicodeRange3 = p.parseULong();\n                os2.ulUnicodeRange4 = p.parseULong();\n                os2.achVendID = String.fromCharCode(\n                  p.parseByte(),\n                  p.parseByte(),\n                  p.parseByte(),\n                  p.parseByte()\n                );\n                os2.fsSelection = p.parseUShort();\n                os2.usFirstCharIndex = p.parseUShort();\n                os2.usLastCharIndex = p.parseUShort();\n                os2.sTypoAscender = p.parseShort();\n                os2.sTypoDescender = p.parseShort();\n                os2.sTypoLineGap = p.parseShort();\n                os2.usWinAscent = p.parseUShort();\n                os2.usWinDescent = p.parseUShort();\n                if (os2.version >= 1) {\n                  os2.ulCodePageRange1 = p.parseULong();\n                  os2.ulCodePageRange2 = p.parseULong();\n                }\n\n                if (os2.version >= 2) {\n                  os2.sxHeight = p.parseShort();\n                  os2.sCapHeight = p.parseShort();\n                  os2.usDefaultChar = p.parseUShort();\n                  os2.usBreakChar = p.parseUShort();\n                  os2.usMaxContent = p.parseUShort();\n                }\n\n                return os2;\n              }\n\n              function makeOS2Table(options) {\n                return new table.Table(\n                  'OS/2',\n                  [\n                    { name: 'version', type: 'USHORT', value: 0x0003 },\n                    { name: 'xAvgCharWidth', type: 'SHORT', value: 0 },\n                    { name: 'usWeightClass', type: 'USHORT', value: 0 },\n                    { name: 'usWidthClass', type: 'USHORT', value: 0 },\n                    { name: 'fsType', type: 'USHORT', value: 0 },\n                    { name: 'ySubscriptXSize', type: 'SHORT', value: 650 },\n                    { name: 'ySubscriptYSize', type: 'SHORT', value: 699 },\n                    { name: 'ySubscriptXOffset', type: 'SHORT', value: 0 },\n                    { name: 'ySubscriptYOffset', type: 'SHORT', value: 140 },\n                    { name: 'ySuperscriptXSize', type: 'SHORT', value: 650 },\n                    { name: 'ySuperscriptYSize', type: 'SHORT', value: 699 },\n                    { name: 'ySuperscriptXOffset', type: 'SHORT', value: 0 },\n                    { name: 'ySuperscriptYOffset', type: 'SHORT', value: 479 },\n                    { name: 'yStrikeoutSize', type: 'SHORT', value: 49 },\n                    { name: 'yStrikeoutPosition', type: 'SHORT', value: 258 },\n                    { name: 'sFamilyClass', type: 'SHORT', value: 0 },\n                    { name: 'bFamilyType', type: 'BYTE', value: 0 },\n                    { name: 'bSerifStyle', type: 'BYTE', value: 0 },\n                    { name: 'bWeight', type: 'BYTE', value: 0 },\n                    { name: 'bProportion', type: 'BYTE', value: 0 },\n                    { name: 'bContrast', type: 'BYTE', value: 0 },\n                    { name: 'bStrokeVariation', type: 'BYTE', value: 0 },\n                    { name: 'bArmStyle', type: 'BYTE', value: 0 },\n                    { name: 'bLetterform', type: 'BYTE', value: 0 },\n                    { name: 'bMidline', type: 'BYTE', value: 0 },\n                    { name: 'bXHeight', type: 'BYTE', value: 0 },\n                    { name: 'ulUnicodeRange1', type: 'ULONG', value: 0 },\n                    { name: 'ulUnicodeRange2', type: 'ULONG', value: 0 },\n                    { name: 'ulUnicodeRange3', type: 'ULONG', value: 0 },\n                    { name: 'ulUnicodeRange4', type: 'ULONG', value: 0 },\n                    { name: 'achVendID', type: 'CHARARRAY', value: 'XXXX' },\n                    { name: 'fsSelection', type: 'USHORT', value: 0 },\n                    { name: 'usFirstCharIndex', type: 'USHORT', value: 0 },\n                    { name: 'usLastCharIndex', type: 'USHORT', value: 0 },\n                    { name: 'sTypoAscender', type: 'SHORT', value: 0 },\n                    { name: 'sTypoDescender', type: 'SHORT', value: 0 },\n                    { name: 'sTypoLineGap', type: 'SHORT', value: 0 },\n                    { name: 'usWinAscent', type: 'USHORT', value: 0 },\n                    { name: 'usWinDescent', type: 'USHORT', value: 0 },\n                    { name: 'ulCodePageRange1', type: 'ULONG', value: 0 },\n                    { name: 'ulCodePageRange2', type: 'ULONG', value: 0 },\n                    { name: 'sxHeight', type: 'SHORT', value: 0 },\n                    { name: 'sCapHeight', type: 'SHORT', value: 0 },\n                    { name: 'usDefaultChar', type: 'USHORT', value: 0 },\n                    { name: 'usBreakChar', type: 'USHORT', value: 0 },\n                    { name: 'usMaxContext', type: 'USHORT', value: 0 }\n                  ],\n                  options\n                );\n              }\n\n              var os2 = {\n                parse: parseOS2Table,\n                make: makeOS2Table,\n                unicodeRanges: unicodeRanges,\n                getUnicodeRange: getUnicodeRange\n              };\n\n              // The `post` table stores additional PostScript information, such as glyph names.\n\n              // Parse the PostScript `post` table\n              function parsePostTable(data, start) {\n                var post = {};\n                var p = new parse.Parser(data, start);\n                post.version = p.parseVersion();\n                post.italicAngle = p.parseFixed();\n                post.underlinePosition = p.parseShort();\n                post.underlineThickness = p.parseShort();\n                post.isFixedPitch = p.parseULong();\n                post.minMemType42 = p.parseULong();\n                post.maxMemType42 = p.parseULong();\n                post.minMemType1 = p.parseULong();\n                post.maxMemType1 = p.parseULong();\n                switch (post.version) {\n                  case 1:\n                    post.names = standardNames.slice();\n                    break;\n                  case 2:\n                    post.numberOfGlyphs = p.parseUShort();\n                    post.glyphNameIndex = new Array(post.numberOfGlyphs);\n                    for (var i = 0; i < post.numberOfGlyphs; i++) {\n                      post.glyphNameIndex[i] = p.parseUShort();\n                    }\n\n                    post.names = [];\n                    for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                      if (post.glyphNameIndex[i$1] >= standardNames.length) {\n                        var nameLength = p.parseChar();\n                        post.names.push(p.parseString(nameLength));\n                      }\n                    }\n\n                    break;\n                  case 2.5:\n                    post.numberOfGlyphs = p.parseUShort();\n                    post.offset = new Array(post.numberOfGlyphs);\n                    for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {\n                      post.offset[i$2] = p.parseChar();\n                    }\n\n                    break;\n                }\n                return post;\n              }\n\n              function makePostTable() {\n                return new table.Table('post', [\n                  { name: 'version', type: 'FIXED', value: 0x00030000 },\n                  { name: 'italicAngle', type: 'FIXED', value: 0 },\n                  { name: 'underlinePosition', type: 'FWORD', value: 0 },\n                  { name: 'underlineThickness', type: 'FWORD', value: 0 },\n                  { name: 'isFixedPitch', type: 'ULONG', value: 0 },\n                  { name: 'minMemType42', type: 'ULONG', value: 0 },\n                  { name: 'maxMemType42', type: 'ULONG', value: 0 },\n                  { name: 'minMemType1', type: 'ULONG', value: 0 },\n                  { name: 'maxMemType1', type: 'ULONG', value: 0 }\n                ]);\n              }\n\n              var post = { parse: parsePostTable, make: makePostTable };\n\n              // The `GSUB` table contains ligatures, among other things.\n\n              var subtableParsers = new Array(9); // subtableParsers[0] is unused\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\n              subtableParsers[1] = function parseLookup1() {\n                var start = this.offset + this.relativeOffset;\n                var substFormat = this.parseUShort();\n                if (substFormat === 1) {\n                  return {\n                    substFormat: 1,\n                    coverage: this.parsePointer(Parser.coverage),\n                    deltaGlyphId: this.parseUShort()\n                  };\n                } else if (substFormat === 2) {\n                  return {\n                    substFormat: 2,\n                    coverage: this.parsePointer(Parser.coverage),\n                    substitute: this.parseOffset16List()\n                  };\n                }\n                check.assert(\n                  false,\n                  '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.'\n                );\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\n              subtableParsers[2] = function parseLookup2() {\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB Multiple Substitution Subtable identifier-format must be 1'\n                );\n                return {\n                  substFormat: substFormat,\n                  coverage: this.parsePointer(Parser.coverage),\n                  sequences: this.parseListOfLists()\n                };\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\n              subtableParsers[3] = function parseLookup3() {\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB Alternate Substitution Subtable identifier-format must be 1'\n                );\n                return {\n                  substFormat: substFormat,\n                  coverage: this.parsePointer(Parser.coverage),\n                  alternateSets: this.parseListOfLists()\n                };\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\n              subtableParsers[4] = function parseLookup4() {\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB ligature table identifier-format must be 1'\n                );\n                return {\n                  substFormat: substFormat,\n                  coverage: this.parsePointer(Parser.coverage),\n                  ligatureSets: this.parseListOfLists(function() {\n                    return {\n                      ligGlyph: this.parseUShort(),\n                      components: this.parseUShortList(this.parseUShort() - 1)\n                    };\n                  })\n                };\n              };\n\n              var lookupRecordDesc = {\n                sequenceIndex: Parser.uShort,\n                lookupListIndex: Parser.uShort\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\n              subtableParsers[5] = function parseLookup5() {\n                var start = this.offset + this.relativeOffset;\n                var substFormat = this.parseUShort();\n\n                if (substFormat === 1) {\n                  return {\n                    substFormat: substFormat,\n                    coverage: this.parsePointer(Parser.coverage),\n                    ruleSets: this.parseListOfLists(function() {\n                      var glyphCount = this.parseUShort();\n                      var substCount = this.parseUShort();\n                      return {\n                        input: this.parseUShortList(glyphCount - 1),\n                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                      };\n                    })\n                  };\n                } else if (substFormat === 2) {\n                  return {\n                    substFormat: substFormat,\n                    coverage: this.parsePointer(Parser.coverage),\n                    classDef: this.parsePointer(Parser.classDef),\n                    classSets: this.parseListOfLists(function() {\n                      var glyphCount = this.parseUShort();\n                      var substCount = this.parseUShort();\n                      return {\n                        classes: this.parseUShortList(glyphCount - 1),\n                        lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                      };\n                    })\n                  };\n                } else if (substFormat === 3) {\n                  var glyphCount = this.parseUShort();\n                  var substCount = this.parseUShort();\n                  return {\n                    substFormat: substFormat,\n                    coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                  };\n                }\n                check.assert(\n                  false,\n                  '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.'\n                );\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\n              subtableParsers[6] = function parseLookup6() {\n                var start = this.offset + this.relativeOffset;\n                var substFormat = this.parseUShort();\n                if (substFormat === 1) {\n                  return {\n                    substFormat: 1,\n                    coverage: this.parsePointer(Parser.coverage),\n                    chainRuleSets: this.parseListOfLists(function() {\n                      return {\n                        backtrack: this.parseUShortList(),\n                        input: this.parseUShortList(this.parseShort() - 1),\n                        lookahead: this.parseUShortList(),\n                        lookupRecords: this.parseRecordList(lookupRecordDesc)\n                      };\n                    })\n                  };\n                } else if (substFormat === 2) {\n                  return {\n                    substFormat: 2,\n                    coverage: this.parsePointer(Parser.coverage),\n                    backtrackClassDef: this.parsePointer(Parser.classDef),\n                    inputClassDef: this.parsePointer(Parser.classDef),\n                    lookaheadClassDef: this.parsePointer(Parser.classDef),\n                    chainClassSet: this.parseListOfLists(function() {\n                      return {\n                        backtrack: this.parseUShortList(),\n                        input: this.parseUShortList(this.parseShort() - 1),\n                        lookahead: this.parseUShortList(),\n                        lookupRecords: this.parseRecordList(lookupRecordDesc)\n                      };\n                    })\n                  };\n                } else if (substFormat === 3) {\n                  return {\n                    substFormat: 3,\n                    backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                    inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                    lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                  };\n                }\n                check.assert(\n                  false,\n                  '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.'\n                );\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\n              subtableParsers[7] = function parseLookup7() {\n                // Extension Substitution subtable\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB Extension Substitution subtable identifier-format must be 1'\n                );\n                var extensionLookupType = this.parseUShort();\n                var extensionParser = new Parser(\n                  this.data,\n                  this.offset + this.parseULong()\n                );\n                return {\n                  substFormat: 1,\n                  lookupType: extensionLookupType,\n                  extension: subtableParsers[extensionLookupType].call(extensionParser)\n                };\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\n              subtableParsers[8] = function parseLookup8() {\n                var substFormat = this.parseUShort();\n                check.argument(\n                  substFormat === 1,\n                  'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1'\n                );\n                return {\n                  substFormat: substFormat,\n                  coverage: this.parsePointer(Parser.coverage),\n                  backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                  lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n                  substitutes: this.parseUShortList()\n                };\n              };\n\n              // https://www.microsoft.com/typography/OTSPEC/gsub.htm\n              function parseGsubTable(data, start) {\n                start = start || 0;\n                var p = new Parser(data, start);\n                var tableVersion = p.parseVersion(1);\n                check.argument(\n                  tableVersion === 1 || tableVersion === 1.1,\n                  'Unsupported GSUB table version.'\n                );\n                if (tableVersion === 1) {\n                  return {\n                    version: tableVersion,\n                    scripts: p.parseScriptList(),\n                    features: p.parseFeatureList(),\n                    lookups: p.parseLookupList(subtableParsers)\n                  };\n                } else {\n                  return {\n                    version: tableVersion,\n                    scripts: p.parseScriptList(),\n                    features: p.parseFeatureList(),\n                    lookups: p.parseLookupList(subtableParsers),\n                    variations: p.parseFeatureVariationsList()\n                  };\n                }\n              }\n\n              // GSUB Writing //////////////////////////////////////////////\n              var subtableMakers = new Array(9);\n\n              subtableMakers[1] = function makeLookup1(subtable) {\n                if (subtable.substFormat === 1) {\n                  return new table.Table('substitutionTable', [\n                    { name: 'substFormat', type: 'USHORT', value: 1 },\n                    {\n                      name: 'coverage',\n                      type: 'TABLE',\n                      value: new table.Coverage(subtable.coverage)\n                    },\n                    { name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId }\n                  ]);\n                } else {\n                  return new table.Table(\n                    'substitutionTable',\n                    [\n                      { name: 'substFormat', type: 'USHORT', value: 2 },\n                      {\n                        name: 'coverage',\n                        type: 'TABLE',\n                        value: new table.Coverage(subtable.coverage)\n                      }\n                    ].concat(table.ushortList('substitute', subtable.substitute))\n                  );\n                }\n                check.fail('Lookup type 1 substFormat must be 1 or 2.');\n              };\n\n              subtableMakers[3] = function makeLookup3(subtable) {\n                check.assert(\n                  subtable.substFormat === 1,\n                  'Lookup type 3 substFormat must be 1.'\n                );\n                return new table.Table(\n                  'substitutionTable',\n                  [\n                    { name: 'substFormat', type: 'USHORT', value: 1 },\n                    {\n                      name: 'coverage',\n                      type: 'TABLE',\n                      value: new table.Coverage(subtable.coverage)\n                    }\n                  ].concat(\n                    table.tableList('altSet', subtable.alternateSets, function(\n                      alternateSet\n                    ) {\n                      return new table.Table(\n                        'alternateSetTable',\n                        table.ushortList('alternate', alternateSet)\n                      );\n                    })\n                  )\n                );\n              };\n\n              subtableMakers[4] = function makeLookup4(subtable) {\n                check.assert(\n                  subtable.substFormat === 1,\n                  'Lookup type 4 substFormat must be 1.'\n                );\n                return new table.Table(\n                  'substitutionTable',\n                  [\n                    { name: 'substFormat', type: 'USHORT', value: 1 },\n                    {\n                      name: 'coverage',\n                      type: 'TABLE',\n                      value: new table.Coverage(subtable.coverage)\n                    }\n                  ].concat(\n                    table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n                      return new table.Table(\n                        'ligatureSetTable',\n                        table.tableList('ligature', ligatureSet, function(ligature) {\n                          return new table.Table(\n                            'ligatureTable',\n                            [\n                              { name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph }\n                            ].concat(\n                              table.ushortList(\n                                'component',\n                                ligature.components,\n                                ligature.components.length + 1\n                              )\n                            )\n                          );\n                        })\n                      );\n                    })\n                  )\n                );\n              };\n\n              function makeGsubTable(gsub) {\n                return new table.Table('GSUB', [\n                  { name: 'version', type: 'ULONG', value: 0x10000 },\n                  {\n                    name: 'scripts',\n                    type: 'TABLE',\n                    value: new table.ScriptList(gsub.scripts)\n                  },\n                  {\n                    name: 'features',\n                    type: 'TABLE',\n                    value: new table.FeatureList(gsub.features)\n                  },\n                  {\n                    name: 'lookups',\n                    type: 'TABLE',\n                    value: new table.LookupList(gsub.lookups, subtableMakers)\n                  }\n                ]);\n              }\n\n              var gsub = { parse: parseGsubTable, make: makeGsubTable };\n\n              // The `GPOS` table contains kerning pairs, among other things.\n\n              // Parse the metadata `meta` table.\n              // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\n              function parseMetaTable(data, start) {\n                var p = new parse.Parser(data, start);\n                var tableVersion = p.parseULong();\n                check.argument(tableVersion === 1, 'Unsupported META table version.');\n                p.parseULong(); // flags - currently unused and set to 0\n                p.parseULong(); // tableOffset\n                var numDataMaps = p.parseULong();\n\n                var tags = {};\n                for (var i = 0; i < numDataMaps; i++) {\n                  var tag = p.parseTag();\n                  var dataOffset = p.parseULong();\n                  var dataLength = p.parseULong();\n                  var text = decode.UTF8(data, start + dataOffset, dataLength);\n\n                  tags[tag] = text;\n                }\n                return tags;\n              }\n\n              function makeMetaTable(tags) {\n                var numTags = Object.keys(tags).length;\n                var stringPool = '';\n                var stringPoolOffset = 16 + numTags * 12;\n\n                var result = new table.Table('meta', [\n                  { name: 'version', type: 'ULONG', value: 1 },\n                  { name: 'flags', type: 'ULONG', value: 0 },\n                  { name: 'offset', type: 'ULONG', value: stringPoolOffset },\n                  { name: 'numTags', type: 'ULONG', value: numTags }\n                ]);\n\n                for (var tag in tags) {\n                  var pos = stringPool.length;\n                  stringPool += tags[tag];\n\n                  result.fields.push({ name: 'tag ' + tag, type: 'TAG', value: tag });\n                  result.fields.push({\n                    name: 'offset ' + tag,\n                    type: 'ULONG',\n                    value: stringPoolOffset + pos\n                  });\n                  result.fields.push({\n                    name: 'length ' + tag,\n                    type: 'ULONG',\n                    value: tags[tag].length\n                  });\n                }\n\n                result.fields.push({\n                  name: 'stringPool',\n                  type: 'CHARARRAY',\n                  value: stringPool\n                });\n\n                return result;\n              }\n\n              var meta = { parse: parseMetaTable, make: makeMetaTable };\n\n              // The `sfnt` wrapper provides organization for the tables in the font.\n\n              function log2(v) {\n                return (Math.log(v) / Math.log(2)) | 0;\n              }\n\n              function computeCheckSum(bytes) {\n                while (bytes.length % 4 !== 0) {\n                  bytes.push(0);\n                }\n\n                var sum = 0;\n                for (var i = 0; i < bytes.length; i += 4) {\n                  sum +=\n                    (bytes[i] << 24) +\n                    (bytes[i + 1] << 16) +\n                    (bytes[i + 2] << 8) +\n                    bytes[i + 3];\n                }\n\n                sum %= Math.pow(2, 32);\n                return sum;\n              }\n\n              function makeTableRecord(tag, checkSum, offset, length) {\n                return new table.Record('Table Record', [\n                  { name: 'tag', type: 'TAG', value: tag !== undefined ? tag : '' },\n                  {\n                    name: 'checkSum',\n                    type: 'ULONG',\n                    value: checkSum !== undefined ? checkSum : 0\n                  },\n                  {\n                    name: 'offset',\n                    type: 'ULONG',\n                    value: offset !== undefined ? offset : 0\n                  },\n                  {\n                    name: 'length',\n                    type: 'ULONG',\n                    value: length !== undefined ? length : 0\n                  }\n                ]);\n              }\n\n              function makeSfntTable(tables) {\n                var sfnt = new table.Table('sfnt', [\n                  { name: 'version', type: 'TAG', value: 'OTTO' },\n                  { name: 'numTables', type: 'USHORT', value: 0 },\n                  { name: 'searchRange', type: 'USHORT', value: 0 },\n                  { name: 'entrySelector', type: 'USHORT', value: 0 },\n                  { name: 'rangeShift', type: 'USHORT', value: 0 }\n                ]);\n                sfnt.tables = tables;\n                sfnt.numTables = tables.length;\n                var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n                sfnt.searchRange = 16 * highestPowerOf2;\n                sfnt.entrySelector = log2(highestPowerOf2);\n                sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n                var recordFields = [];\n                var tableFields = [];\n\n                var offset = sfnt.sizeOf() + makeTableRecord().sizeOf() * sfnt.numTables;\n                while (offset % 4 !== 0) {\n                  offset += 1;\n                  tableFields.push({ name: 'padding', type: 'BYTE', value: 0 });\n                }\n\n                for (var i = 0; i < tables.length; i += 1) {\n                  var t = tables[i];\n                  check.argument(\n                    t.tableName.length === 4,\n                    'Table name' + t.tableName + ' is invalid.'\n                  );\n                  var tableLength = t.sizeOf();\n                  var tableRecord = makeTableRecord(\n                    t.tableName,\n                    computeCheckSum(t.encode()),\n                    offset,\n                    tableLength\n                  );\n                  recordFields.push({\n                    name: tableRecord.tag + ' Table Record',\n                    type: 'RECORD',\n                    value: tableRecord\n                  });\n                  tableFields.push({\n                    name: t.tableName + ' table',\n                    type: 'RECORD',\n                    value: t\n                  });\n                  offset += tableLength;\n                  check.argument(\n                    !isNaN(offset),\n                    'Something went wrong calculating the offset.'\n                  );\n                  while (offset % 4 !== 0) {\n                    offset += 1;\n                    tableFields.push({ name: 'padding', type: 'BYTE', value: 0 });\n                  }\n                }\n\n                // Table records need to be sorted alphabetically.\n                recordFields.sort(function(r1, r2) {\n                  if (r1.value.tag > r2.value.tag) {\n                    return 1;\n                  } else {\n                    return -1;\n                  }\n                });\n\n                sfnt.fields = sfnt.fields.concat(recordFields);\n                sfnt.fields = sfnt.fields.concat(tableFields);\n                return sfnt;\n              }\n\n              // Get the metrics for a character. If the string has more than one character\n              // this function returns metrics for the first available character.\n              // You can provide optional fallback metrics if no characters are available.\n              function metricsForChar(font, chars, notFoundMetrics) {\n                for (var i = 0; i < chars.length; i += 1) {\n                  var glyphIndex = font.charToGlyphIndex(chars[i]);\n                  if (glyphIndex > 0) {\n                    var glyph = font.glyphs.get(glyphIndex);\n                    return glyph.getMetrics();\n                  }\n                }\n\n                return notFoundMetrics;\n              }\n\n              function average(vs) {\n                var sum = 0;\n                for (var i = 0; i < vs.length; i += 1) {\n                  sum += vs[i];\n                }\n\n                return sum / vs.length;\n              }\n\n              // Convert the font object to a SFNT data structure.\n              // This structure contains all the necessary tables and metadata to create a binary OTF file.\n              function fontToSfntTable(font) {\n                var xMins = [];\n                var yMins = [];\n                var xMaxs = [];\n                var yMaxs = [];\n                var advanceWidths = [];\n                var leftSideBearings = [];\n                var rightSideBearings = [];\n                var firstCharIndex;\n                var lastCharIndex = 0;\n                var ulUnicodeRange1 = 0;\n                var ulUnicodeRange2 = 0;\n                var ulUnicodeRange3 = 0;\n                var ulUnicodeRange4 = 0;\n\n                for (var i = 0; i < font.glyphs.length; i += 1) {\n                  var glyph = font.glyphs.get(i);\n                  var unicode = glyph.unicode | 0;\n\n                  if (isNaN(glyph.advanceWidth)) {\n                    throw new Error(\n                      'Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.'\n                    );\n                  }\n\n                  if (firstCharIndex > unicode || firstCharIndex === undefined) {\n                    // ignore .notdef char\n                    if (unicode > 0) {\n                      firstCharIndex = unicode;\n                    }\n                  }\n\n                  if (lastCharIndex < unicode) {\n                    lastCharIndex = unicode;\n                  }\n\n                  var position = os2.getUnicodeRange(unicode);\n                  if (position < 32) {\n                    ulUnicodeRange1 |= 1 << position;\n                  } else if (position < 64) {\n                    ulUnicodeRange2 |= 1 << (position - 32);\n                  } else if (position < 96) {\n                    ulUnicodeRange3 |= 1 << (position - 64);\n                  } else if (position < 123) {\n                    ulUnicodeRange4 |= 1 << (position - 96);\n                  } else {\n                    throw new Error(\n                      'Unicode ranges bits > 123 are reserved for internal usage'\n                    );\n                  }\n                  // Skip non-important characters.\n                  if (glyph.name === '.notdef') {\n                    continue;\n                  }\n                  var metrics = glyph.getMetrics();\n                  xMins.push(metrics.xMin);\n                  yMins.push(metrics.yMin);\n                  xMaxs.push(metrics.xMax);\n                  yMaxs.push(metrics.yMax);\n                  leftSideBearings.push(metrics.leftSideBearing);\n                  rightSideBearings.push(metrics.rightSideBearing);\n                  advanceWidths.push(glyph.advanceWidth);\n                }\n\n                var globals = {\n                  xMin: Math.min.apply(null, xMins),\n                  yMin: Math.min.apply(null, yMins),\n                  xMax: Math.max.apply(null, xMaxs),\n                  yMax: Math.max.apply(null, yMaxs),\n                  advanceWidthMax: Math.max.apply(null, advanceWidths),\n                  advanceWidthAvg: average(advanceWidths),\n                  minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n                  maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n                  minRightSideBearing: Math.min.apply(null, rightSideBearings)\n                };\n                globals.ascender = font.ascender;\n                globals.descender = font.descender;\n\n                var headTable = head.make({\n                  flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n                  unitsPerEm: font.unitsPerEm,\n                  xMin: globals.xMin,\n                  yMin: globals.yMin,\n                  xMax: globals.xMax,\n                  yMax: globals.yMax,\n                  lowestRecPPEM: 3,\n                  createdTimestamp: font.createdTimestamp\n                });\n\n                var hheaTable = hhea.make({\n                  ascender: globals.ascender,\n                  descender: globals.descender,\n                  advanceWidthMax: globals.advanceWidthMax,\n                  minLeftSideBearing: globals.minLeftSideBearing,\n                  minRightSideBearing: globals.minRightSideBearing,\n                  xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n                  numberOfHMetrics: font.glyphs.length\n                });\n\n                var maxpTable = maxp.make(font.glyphs.length);\n\n                var os2Table = os2.make({\n                  xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n                  usWeightClass: font.tables.os2.usWeightClass,\n                  usWidthClass: font.tables.os2.usWidthClass,\n                  usFirstCharIndex: firstCharIndex,\n                  usLastCharIndex: lastCharIndex,\n                  ulUnicodeRange1: ulUnicodeRange1,\n                  ulUnicodeRange2: ulUnicodeRange2,\n                  ulUnicodeRange3: ulUnicodeRange3,\n                  ulUnicodeRange4: ulUnicodeRange4,\n                  fsSelection: font.tables.os2.fsSelection, // REGULAR\n                  // See http://typophile.com/node/13081 for more info on vertical metrics.\n                  // We get metrics for typical characters (such as \"x\" for xHeight).\n                  // We provide some fallback characters if characters are unavailable: their\n                  // ordering was chosen experimentally.\n                  sTypoAscender: globals.ascender,\n                  sTypoDescender: globals.descender,\n                  sTypoLineGap: 0,\n                  usWinAscent: globals.yMax,\n                  usWinDescent: Math.abs(globals.yMin),\n                  ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n                  sxHeight: metricsForChar(font, 'xyvw', {\n                    yMax: Math.round(globals.ascender / 2)\n                  }).yMax,\n                  sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals)\n                    .yMax,\n                  usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n                  usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n                });\n\n                var hmtxTable = hmtx.make(font.glyphs);\n                var cmapTable = cmap.make(font.glyphs);\n\n                var englishFamilyName = font.getEnglishName('fontFamily');\n                var englishStyleName = font.getEnglishName('fontSubfamily');\n                var englishFullName = englishFamilyName + ' ' + englishStyleName;\n                var postScriptName = font.getEnglishName('postScriptName');\n                if (!postScriptName) {\n                  postScriptName =\n                    englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n                }\n\n                var names = {};\n                for (var n in font.names) {\n                  names[n] = font.names[n];\n                }\n\n                if (!names.uniqueID) {\n                  names.uniqueID = {\n                    en: font.getEnglishName('manufacturer') + ':' + englishFullName\n                  };\n                }\n\n                if (!names.postScriptName) {\n                  names.postScriptName = { en: postScriptName };\n                }\n\n                if (!names.preferredFamily) {\n                  names.preferredFamily = font.names.fontFamily;\n                }\n\n                if (!names.preferredSubfamily) {\n                  names.preferredSubfamily = font.names.fontSubfamily;\n                }\n\n                var languageTags = [];\n                var nameTable = _name.make(names, languageTags);\n                var ltagTable =\n                  languageTags.length > 0 ? ltag.make(languageTags) : undefined;\n\n                var postTable = post.make();\n                var cffTable = cff.make(font.glyphs, {\n                  version: font.getEnglishName('version'),\n                  fullName: englishFullName,\n                  familyName: englishFamilyName,\n                  weightName: englishStyleName,\n                  postScriptName: postScriptName,\n                  unitsPerEm: font.unitsPerEm,\n                  fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n                });\n\n                var metaTable =\n                  font.metas && Object.keys(font.metas).length > 0\n                    ? meta.make(font.metas)\n                    : undefined;\n\n                // The order does not matter because makeSfntTable() will sort them.\n                var tables = [\n                  headTable,\n                  hheaTable,\n                  maxpTable,\n                  os2Table,\n                  nameTable,\n                  cmapTable,\n                  postTable,\n                  cffTable,\n                  hmtxTable\n                ];\n                if (ltagTable) {\n                  tables.push(ltagTable);\n                }\n                // Optional tables\n                if (font.tables.gsub) {\n                  tables.push(gsub.make(font.tables.gsub));\n                }\n                if (metaTable) {\n                  tables.push(metaTable);\n                }\n\n                var sfntTable = makeSfntTable(tables);\n\n                // Compute the font's checkSum and store it in head.checkSumAdjustment.\n                var bytes = sfntTable.encode();\n                var checkSum = computeCheckSum(bytes);\n                var tableFields = sfntTable.fields;\n                var checkSumAdjusted = false;\n                for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {\n                  if (tableFields[i$1].name === 'head table') {\n                    tableFields[i$1].value.checkSumAdjustment = 0xb1b0afba - checkSum;\n                    checkSumAdjusted = true;\n                    break;\n                  }\n                }\n\n                if (!checkSumAdjusted) {\n                  throw new Error('Could not find head table with checkSum to adjust.');\n                }\n\n                return sfntTable;\n              }\n\n              var sfnt = {\n                make: makeSfntTable,\n                fontToTable: fontToSfntTable,\n                computeCheckSum: computeCheckSum\n              };\n\n              // The Layout object is the prototype of Substitution objects, and provides\n\n              function searchTag(arr, tag) {\n                /* jshint bitwise: false */\n                var imin = 0;\n                var imax = arr.length - 1;\n                while (imin <= imax) {\n                  var imid = (imin + imax) >>> 1;\n                  var val = arr[imid].tag;\n                  if (val === tag) {\n                    return imid;\n                  } else if (val < tag) {\n                    imin = imid + 1;\n                  } else {\n                    imax = imid - 1;\n                  }\n                }\n                // Not found: return -1-insertion point\n                return -imin - 1;\n              }\n\n              function binSearch(arr, value) {\n                /* jshint bitwise: false */\n                var imin = 0;\n                var imax = arr.length - 1;\n                while (imin <= imax) {\n                  var imid = (imin + imax) >>> 1;\n                  var val = arr[imid];\n                  if (val === value) {\n                    return imid;\n                  } else if (val < value) {\n                    imin = imid + 1;\n                  } else {\n                    imax = imid - 1;\n                  }\n                }\n                // Not found: return -1-insertion point\n                return -imin - 1;\n              }\n\n              // binary search in a list of ranges (coverage, class definition)\n              function searchRange(ranges, value) {\n                // jshint bitwise: false\n                var range;\n                var imin = 0;\n                var imax = ranges.length - 1;\n                while (imin <= imax) {\n                  var imid = (imin + imax) >>> 1;\n                  range = ranges[imid];\n                  var start = range.start;\n                  if (start === value) {\n                    return range;\n                  } else if (start < value) {\n                    imin = imid + 1;\n                  } else {\n                    imax = imid - 1;\n                  }\n                }\n                if (imin > 0) {\n                  range = ranges[imin - 1];\n                  if (value > range.end) {\n                    return 0;\n                  }\n                  return range;\n                }\n              }\n\n              /**\n               * @exports opentype.Layout\n               * @class\n               */\n              function Layout(font, tableName) {\n                this.font = font;\n                this.tableName = tableName;\n              }\n\n              Layout.prototype = {\n                /**\n                 * Binary search an object by \"tag\" property\n                 * @instance\n                 * @function searchTag\n                 * @memberof opentype.Layout\n                 * @param  {Array} arr\n                 * @param  {string} tag\n                 * @return {number}\n                 */\n                searchTag: searchTag,\n\n                /**\n                 * Binary search in a list of numbers\n                 * @instance\n                 * @function binSearch\n                 * @memberof opentype.Layout\n                 * @param  {Array} arr\n                 * @param  {number} value\n                 * @return {number}\n                 */\n                binSearch: binSearch,\n\n                /**\n                 * Get or create the Layout table (GSUB, GPOS etc).\n                 * @param  {boolean} create - Whether to create a new one.\n                 * @return {Object} The GSUB or GPOS table.\n                 */\n                getTable: function(create) {\n                  var layout = this.font.tables[this.tableName];\n                  if (!layout && create) {\n                    layout = this.font.tables[this.tableName] = this.createDefaultTable();\n                  }\n                  return layout;\n                },\n\n                /**\n                 * Returns all scripts in the substitution table.\n                 * @instance\n                 * @return {Array}\n                 */\n                getScriptNames: function() {\n                  var layout = this.getTable();\n                  if (!layout) {\n                    return [];\n                  }\n                  return layout.scripts.map(function(script) {\n                    return script.tag;\n                  });\n                },\n\n                /**\n                 * Returns the best bet for a script name.\n                 * Returns 'DFLT' if it exists.\n                 * If not, returns 'latn' if it exists.\n                 * If neither exist, returns undefined.\n                 */\n                getDefaultScriptName: function() {\n                  var layout = this.getTable();\n                  if (!layout) {\n                    return;\n                  }\n                  var hasLatn = false;\n                  for (var i = 0; i < layout.scripts.length; i++) {\n                    var name = layout.scripts[i].tag;\n                    if (name === 'DFLT') {\n                      return name;\n                    }\n                    if (name === 'latn') {\n                      hasLatn = true;\n                    }\n                  }\n                  if (hasLatn) {\n                    return 'latn';\n                  }\n                },\n\n                /**\n                 * Returns all LangSysRecords in the given script.\n                 * @instance\n                 * @param {string} [script='DFLT']\n                 * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n                 * @return {Object} An object with tag and script properties.\n                 */\n                getScriptTable: function(script, create) {\n                  var layout = this.getTable(create);\n                  if (layout) {\n                    script = script || 'DFLT';\n                    var scripts = layout.scripts;\n                    var pos = searchTag(layout.scripts, script);\n                    if (pos >= 0) {\n                      return scripts[pos].script;\n                    } else if (create) {\n                      var scr = {\n                        tag: script,\n                        script: {\n                          defaultLangSys: {\n                            reserved: 0,\n                            reqFeatureIndex: 0xffff,\n                            featureIndexes: []\n                          },\n                          langSysRecords: []\n                        }\n                      };\n                      scripts.splice(-1 - pos, 0, scr);\n                      return scr.script;\n                    }\n                  }\n                },\n\n                /**\n                 * Returns a language system table\n                 * @instance\n                 * @param {string} [script='DFLT']\n                 * @param {string} [language='dlft']\n                 * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n                 * @return {Object}\n                 */\n                getLangSysTable: function(script, language, create) {\n                  var scriptTable = this.getScriptTable(script, create);\n                  if (scriptTable) {\n                    if (!language || language === 'dflt' || language === 'DFLT') {\n                      return scriptTable.defaultLangSys;\n                    }\n                    var pos = searchTag(scriptTable.langSysRecords, language);\n                    if (pos >= 0) {\n                      return scriptTable.langSysRecords[pos].langSys;\n                    } else if (create) {\n                      var langSysRecord = {\n                        tag: language,\n                        langSys: {\n                          reserved: 0,\n                          reqFeatureIndex: 0xffff,\n                          featureIndexes: []\n                        }\n                      };\n                      scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                      return langSysRecord.langSys;\n                    }\n                  }\n                },\n\n                /**\n                 * Get a specific feature table.\n                 * @instance\n                 * @param {string} [script='DFLT']\n                 * @param {string} [language='dlft']\n                 * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n                 * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n                 * @return {Object}\n                 */\n                getFeatureTable: function(script, language, feature, create) {\n                  var langSysTable = this.getLangSysTable(script, language, create);\n                  if (langSysTable) {\n                    var featureRecord;\n                    var featIndexes = langSysTable.featureIndexes;\n                    var allFeatures = this.font.tables[this.tableName].features;\n                    // The FeatureIndex array of indices is in arbitrary order,\n                    // even if allFeatures is sorted alphabetically by feature tag.\n                    for (var i = 0; i < featIndexes.length; i++) {\n                      featureRecord = allFeatures[featIndexes[i]];\n                      if (featureRecord.tag === feature) {\n                        return featureRecord.feature;\n                      }\n                    }\n                    if (create) {\n                      var index = allFeatures.length;\n                      // Automatic ordering of features would require to shift feature indexes in the script list.\n                      check.assert(\n                        index === 0 || feature >= allFeatures[index - 1].tag,\n                        'Features must be added in alphabetical order.'\n                      );\n                      featureRecord = {\n                        tag: feature,\n                        feature: { params: 0, lookupListIndexes: [] }\n                      };\n                      allFeatures.push(featureRecord);\n                      featIndexes.push(index);\n                      return featureRecord.feature;\n                    }\n                  }\n                },\n\n                /**\n                 * Get the lookup tables of a given type for a script/language/feature.\n                 * @instance\n                 * @param {string} [script='DFLT']\n                 * @param {string} [language='dlft']\n                 * @param {string} feature - 4-letter feature code\n                 * @param {number} lookupType - 1 to 9\n                 * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n                 * @return {Object[]}\n                 */\n                getLookupTables: function(script, language, feature, lookupType, create) {\n                  var featureTable = this.getFeatureTable(\n                    script,\n                    language,\n                    feature,\n                    create\n                  );\n                  var tables = [];\n                  if (featureTable) {\n                    var lookupTable;\n                    var lookupListIndexes = featureTable.lookupListIndexes;\n                    var allLookups = this.font.tables[this.tableName].lookups;\n                    // lookupListIndexes are in no particular order, so use naive search.\n                    for (var i = 0; i < lookupListIndexes.length; i++) {\n                      lookupTable = allLookups[lookupListIndexes[i]];\n                      if (lookupTable.lookupType === lookupType) {\n                        tables.push(lookupTable);\n                      }\n                    }\n                    if (tables.length === 0 && create) {\n                      lookupTable = {\n                        lookupType: lookupType,\n                        lookupFlag: 0,\n                        subtables: [],\n                        markFilteringSet: undefined\n                      };\n                      var index = allLookups.length;\n                      allLookups.push(lookupTable);\n                      lookupListIndexes.push(index);\n                      return [lookupTable];\n                    }\n                  }\n                  return tables;\n                },\n\n                /**\n                 * Find a glyph in a class definition table\n                 * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n                 * @param {object} classDefTable - an OpenType Layout class definition table\n                 * @param {number} glyphIndex - the index of the glyph to find\n                 * @returns {number} -1 if not found\n                 */\n                getGlyphClass: function(classDefTable, glyphIndex) {\n                  switch (classDefTable.format) {\n                    case 1:\n                      if (\n                        classDefTable.startGlyph <= glyphIndex &&\n                        glyphIndex < classDefTable.startGlyph + classDefTable.classes.length\n                      ) {\n                        return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n                      }\n                      return 0;\n                    case 2:\n                      var range = searchRange(classDefTable.ranges, glyphIndex);\n                      return range ? range.classId : 0;\n                  }\n                },\n\n                /**\n                 * Find a glyph in a coverage table\n                 * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n                 * @param {object} coverageTable - an OpenType Layout coverage table\n                 * @param {number} glyphIndex - the index of the glyph to find\n                 * @returns {number} -1 if not found\n                 */\n                getCoverageIndex: function(coverageTable, glyphIndex) {\n                  switch (coverageTable.format) {\n                    case 1:\n                      var index = binSearch(coverageTable.glyphs, glyphIndex);\n                      return index >= 0 ? index : -1;\n                    case 2:\n                      var range = searchRange(coverageTable.ranges, glyphIndex);\n                      return range ? range.index + glyphIndex - range.start : -1;\n                  }\n                },\n\n                /**\n                 * Returns the list of glyph indexes of a coverage table.\n                 * Format 1: the list is stored raw\n                 * Format 2: compact list as range records.\n                 * @instance\n                 * @param  {Object} coverageTable\n                 * @return {Array}\n                 */\n                expandCoverage: function(coverageTable) {\n                  if (coverageTable.format === 1) {\n                    return coverageTable.glyphs;\n                  } else {\n                    var glyphs = [];\n                    var ranges = coverageTable.ranges;\n                    for (var i = 0; i < ranges.length; i++) {\n                      var range = ranges[i];\n                      var start = range.start;\n                      var end = range.end;\n                      for (var j = start; j <= end; j++) {\n                        glyphs.push(j);\n                      }\n                    }\n                    return glyphs;\n                  }\n                }\n              };\n\n              // The Position object provides utility methods to manipulate\n\n              /**\n               * @exports opentype.Position\n               * @class\n               * @extends opentype.Layout\n               * @param {opentype.Font}\n               * @constructor\n               */\n              function Position(font) {\n                Layout.call(this, font, 'gpos');\n              }\n\n              Position.prototype = Layout.prototype;\n\n              /**\n               * Init some data for faster and easier access later.\n               */\n              Position.prototype.init = function() {\n                var script = this.getDefaultScriptName();\n                this.defaultKerningTables = this.getKerningTables(script);\n              };\n\n              /**\n               * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n               *\n               * @param {integer} leftIndex - left glyph index\n               * @param {integer} rightIndex - right glyph index\n               * @returns {integer}\n               */\n              Position.prototype.getKerningValue = function(\n                kerningLookups,\n                leftIndex,\n                rightIndex\n              ) {\n                var this$1 = this;\n\n                for (var i = 0; i < kerningLookups.length; i++) {\n                  var subtables = kerningLookups[i].subtables;\n                  for (var j = 0; j < subtables.length; j++) {\n                    var subtable = subtables[j];\n                    var covIndex = this$1.getCoverageIndex(subtable.coverage, leftIndex);\n                    if (covIndex < 0) {\n                      continue;\n                    }\n                    switch (subtable.posFormat) {\n                      case 1:\n                        // Search Pair Adjustment Positioning Format 1\n                        var pairSet = subtable.pairSets[covIndex];\n                        for (var k = 0; k < pairSet.length; k++) {\n                          var pair = pairSet[k];\n                          if (pair.secondGlyph === rightIndex) {\n                            return (pair.value1 && pair.value1.xAdvance) || 0;\n                          }\n                        }\n                        break; // left glyph found, not right glyph - try next subtable\n                      case 2:\n                        // Search Pair Adjustment Positioning Format 2\n                        var class1 = this$1.getGlyphClass(subtable.classDef1, leftIndex);\n                        var class2 = this$1.getGlyphClass(subtable.classDef2, rightIndex);\n                        var pair$1 = subtable.classRecords[class1][class2];\n                        return (pair$1.value1 && pair$1.value1.xAdvance) || 0;\n                    }\n                  }\n                }\n                return 0;\n              };\n\n              /**\n               * List all kerning lookup tables.\n               *\n               * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n               * @param {string} [language='dflt']\n               * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n               */\n              Position.prototype.getKerningTables = function(script, language) {\n                if (this.font.tables.gpos) {\n                  return this.getLookupTables(script, language, 'kern', 2);\n                }\n              };\n\n              // The Substitution object provides utility methods to manipulate\n\n              /**\n               * @exports opentype.Substitution\n               * @class\n               * @extends opentype.Layout\n               * @param {opentype.Font}\n               * @constructor\n               */\n              function Substitution(font) {\n                Layout.call(this, font, 'gsub');\n              }\n\n              // Check if 2 arrays of primitives are equal.\n              function arraysEqual(ar1, ar2) {\n                var n = ar1.length;\n                if (n !== ar2.length) {\n                  return false;\n                }\n                for (var i = 0; i < n; i++) {\n                  if (ar1[i] !== ar2[i]) {\n                    return false;\n                  }\n                }\n                return true;\n              }\n\n              // Find the first subtable of a lookup table in a particular format.\n              function getSubstFormat(lookupTable, format, defaultSubtable) {\n                var subtables = lookupTable.subtables;\n                for (var i = 0; i < subtables.length; i++) {\n                  var subtable = subtables[i];\n                  if (subtable.substFormat === format) {\n                    return subtable;\n                  }\n                }\n                if (defaultSubtable) {\n                  subtables.push(defaultSubtable);\n                  return defaultSubtable;\n                }\n                return undefined;\n              }\n\n              Substitution.prototype = Layout.prototype;\n\n              /**\n               * Create a default GSUB table.\n               * @return {Object} gsub - The GSUB table.\n               */\n              Substitution.prototype.createDefaultTable = function() {\n                // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n                return {\n                  version: 1,\n                  scripts: [\n                    {\n                      tag: 'DFLT',\n                      script: {\n                        defaultLangSys: {\n                          reserved: 0,\n                          reqFeatureIndex: 0xffff,\n                          featureIndexes: []\n                        },\n                        langSysRecords: []\n                      }\n                    }\n                  ],\n                  features: [],\n                  lookups: []\n                };\n              };\n\n              /**\n               * List all single substitutions (lookup type 1) for a given script, language, and feature.\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n               * @return {Array} substitutions - The list of substitutions.\n               */\n              Substitution.prototype.getSingle = function(feature, script, language) {\n                var this$1 = this;\n\n                var substitutions = [];\n                var lookupTables = this.getLookupTables(script, language, feature, 1);\n                for (var idx = 0; idx < lookupTables.length; idx++) {\n                  var subtables = lookupTables[idx].subtables;\n                  for (var i = 0; i < subtables.length; i++) {\n                    var subtable = subtables[i];\n                    var glyphs = this$1.expandCoverage(subtable.coverage);\n                    var j = void 0;\n                    if (subtable.substFormat === 1) {\n                      var delta = subtable.deltaGlyphId;\n                      for (j = 0; j < glyphs.length; j++) {\n                        var glyph = glyphs[j];\n                        substitutions.push({ sub: glyph, by: glyph + delta });\n                      }\n                    } else {\n                      var substitute = subtable.substitute;\n                      for (j = 0; j < glyphs.length; j++) {\n                        substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                      }\n                    }\n                  }\n                }\n                return substitutions;\n              };\n\n              /**\n               * List all alternates (lookup type 3) for a given script, language, and feature.\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n               * @return {Array} alternates - The list of alternates\n               */\n              Substitution.prototype.getAlternates = function(feature, script, language) {\n                var this$1 = this;\n\n                var alternates = [];\n                var lookupTables = this.getLookupTables(script, language, feature, 3);\n                for (var idx = 0; idx < lookupTables.length; idx++) {\n                  var subtables = lookupTables[idx].subtables;\n                  for (var i = 0; i < subtables.length; i++) {\n                    var subtable = subtables[i];\n                    var glyphs = this$1.expandCoverage(subtable.coverage);\n                    var alternateSets = subtable.alternateSets;\n                    for (var j = 0; j < glyphs.length; j++) {\n                      alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n                    }\n                  }\n                }\n                return alternates;\n              };\n\n              /**\n               * List all ligatures (lookup type 4) for a given script, language, and feature.\n               * The result is an array of ligature objects like { sub: [ids], by: id }\n               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               * @return {Array} ligatures - The list of ligatures.\n               */\n              Substitution.prototype.getLigatures = function(feature, script, language) {\n                var this$1 = this;\n\n                var ligatures = [];\n                var lookupTables = this.getLookupTables(script, language, feature, 4);\n                for (var idx = 0; idx < lookupTables.length; idx++) {\n                  var subtables = lookupTables[idx].subtables;\n                  for (var i = 0; i < subtables.length; i++) {\n                    var subtable = subtables[i];\n                    var glyphs = this$1.expandCoverage(subtable.coverage);\n                    var ligatureSets = subtable.ligatureSets;\n                    for (var j = 0; j < glyphs.length; j++) {\n                      var startGlyph = glyphs[j];\n                      var ligSet = ligatureSets[j];\n                      for (var k = 0; k < ligSet.length; k++) {\n                        var lig = ligSet[k];\n                        ligatures.push({\n                          sub: [startGlyph].concat(lig.components),\n                          by: lig.ligGlyph\n                        });\n                      }\n                    }\n                  }\n                }\n                return ligatures;\n              };\n\n              /**\n               * Add or modify a single substitution (lookup type 1)\n               * Format 2, more flexible, is always used.\n               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n               * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               */\n              Substitution.prototype.addSingle = function(\n                feature,\n                substitution,\n                script,\n                language\n              ) {\n                var lookupTable = this.getLookupTables(\n                  script,\n                  language,\n                  feature,\n                  1,\n                  true\n                )[0];\n                var subtable = getSubstFormat(lookupTable, 2, {\n                  // lookup type 1 subtable, format 2, coverage format 1\n                  substFormat: 2,\n                  coverage: { format: 1, glyphs: [] },\n                  substitute: []\n                });\n                check.assert(\n                  subtable.coverage.format === 1,\n                  'Ligature: unable to modify coverage table format ' +\n                    subtable.coverage.format\n                );\n                var coverageGlyph = substitution.sub;\n                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n                if (pos < 0) {\n                  pos = -1 - pos;\n                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n                  subtable.substitute.splice(pos, 0, 0);\n                }\n                subtable.substitute[pos] = substitution.by;\n              };\n\n              /**\n               * Add or modify an alternate substitution (lookup type 1)\n               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n               * @param {Object} substitution - { sub: id, by: [ids] }\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               */\n              Substitution.prototype.addAlternate = function(\n                feature,\n                substitution,\n                script,\n                language\n              ) {\n                var lookupTable = this.getLookupTables(\n                  script,\n                  language,\n                  feature,\n                  3,\n                  true\n                )[0];\n                var subtable = getSubstFormat(lookupTable, 1, {\n                  // lookup type 3 subtable, format 1, coverage format 1\n                  substFormat: 1,\n                  coverage: { format: 1, glyphs: [] },\n                  alternateSets: []\n                });\n                check.assert(\n                  subtable.coverage.format === 1,\n                  'Ligature: unable to modify coverage table format ' +\n                    subtable.coverage.format\n                );\n                var coverageGlyph = substitution.sub;\n                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n                if (pos < 0) {\n                  pos = -1 - pos;\n                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n                  subtable.alternateSets.splice(pos, 0, 0);\n                }\n                subtable.alternateSets[pos] = substitution.by;\n              };\n\n              /**\n               * Add a ligature (lookup type 4)\n               * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n               * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n               * @param {Object} ligature - { sub: [ids], by: id }\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               */\n              Substitution.prototype.addLigature = function(\n                feature,\n                ligature,\n                script,\n                language\n              ) {\n                var lookupTable = this.getLookupTables(\n                  script,\n                  language,\n                  feature,\n                  4,\n                  true\n                )[0];\n                var subtable = lookupTable.subtables[0];\n                if (!subtable) {\n                  subtable = {\n                    // lookup type 4 subtable, format 1, coverage format 1\n                    substFormat: 1,\n                    coverage: { format: 1, glyphs: [] },\n                    ligatureSets: []\n                  };\n                  lookupTable.subtables[0] = subtable;\n                }\n                check.assert(\n                  subtable.coverage.format === 1,\n                  'Ligature: unable to modify coverage table format ' +\n                    subtable.coverage.format\n                );\n                var coverageGlyph = ligature.sub[0];\n                var ligComponents = ligature.sub.slice(1);\n                var ligatureTable = {\n                  ligGlyph: ligature.by,\n                  components: ligComponents\n                };\n                var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n                if (pos >= 0) {\n                  // ligatureSet already exists\n                  var ligatureSet = subtable.ligatureSets[pos];\n                  for (var i = 0; i < ligatureSet.length; i++) {\n                    // If ligature already exists, return.\n                    if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                      return;\n                    }\n                  }\n                  // ligature does not exist: add it.\n                  ligatureSet.push(ligatureTable);\n                } else {\n                  // Create a new ligatureSet and add coverage for the first glyph.\n                  pos = -1 - pos;\n                  subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n                  subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n                }\n              };\n\n              /**\n               * List all feature data for a given script and language.\n               * @param {string} feature - 4-letter feature name\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               * @return {Array} substitutions - The list of substitutions.\n               */\n              Substitution.prototype.getFeature = function(feature, script, language) {\n                if (/ss\\d\\d/.test(feature)) {\n                  // ss01 - ss20\n                  return this.getSingle(feature, script, language);\n                }\n                switch (feature) {\n                  case 'aalt':\n                  case 'salt':\n                    return this.getSingle(feature, script, language).concat(\n                      this.getAlternates(feature, script, language)\n                    );\n                  case 'dlig':\n                  case 'liga':\n                  case 'rlig':\n                    return this.getLigatures(feature, script, language);\n                }\n                return undefined;\n              };\n\n              /**\n               * Add a substitution to a feature for a given script and language.\n               * @param {string} feature - 4-letter feature name\n               * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n               * @param {string} [script='DFLT']\n               * @param {string} [language='dflt']\n               */\n              Substitution.prototype.add = function(feature, sub, script, language) {\n                if (/ss\\d\\d/.test(feature)) {\n                  // ss01 - ss20\n                  return this.addSingle(feature, sub, script, language);\n                }\n                switch (feature) {\n                  case 'aalt':\n                  case 'salt':\n                    if (typeof sub.by === 'number') {\n                      return this.addSingle(feature, sub, script, language);\n                    }\n                    return this.addAlternate(feature, sub, script, language);\n                  case 'dlig':\n                  case 'liga':\n                  case 'rlig':\n                    return this.addLigature(feature, sub, script, language);\n                }\n                return undefined;\n              };\n\n              function isBrowser() {\n                return typeof window !== 'undefined';\n              }\n\n              function nodeBufferToArrayBuffer(buffer) {\n                var ab = new ArrayBuffer(buffer.length);\n                var view = new Uint8Array(ab);\n                for (var i = 0; i < buffer.length; ++i) {\n                  view[i] = buffer[i];\n                }\n\n                return ab;\n              }\n\n              function arrayBufferToNodeBuffer(ab) {\n                var buffer = new Buffer(ab.byteLength);\n                var view = new Uint8Array(ab);\n                for (var i = 0; i < buffer.length; ++i) {\n                  buffer[i] = view[i];\n                }\n\n                return buffer;\n              }\n\n              function checkArgument(expression, message) {\n                if (!expression) {\n                  throw message;\n                }\n              }\n\n              // The `glyf` table describes the glyphs in TrueType outline format.\n\n              // Parse the coordinate data for a glyph.\n              function parseGlyphCoordinate(\n                p,\n                flag,\n                previousValue,\n                shortVectorBitMask,\n                sameBitMask\n              ) {\n                var v;\n                if ((flag & shortVectorBitMask) > 0) {\n                  // The coordinate is 1 byte long.\n                  v = p.parseByte();\n                  // The `same` bit is re-used for short values to signify the sign of the value.\n                  if ((flag & sameBitMask) === 0) {\n                    v = -v;\n                  }\n\n                  v = previousValue + v;\n                } else {\n                  //  The coordinate is 2 bytes long.\n                  // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n                  if ((flag & sameBitMask) > 0) {\n                    v = previousValue;\n                  } else {\n                    // Parse the coordinate as a signed 16-bit delta value.\n                    v = previousValue + p.parseShort();\n                  }\n                }\n\n                return v;\n              }\n\n              // Parse a TrueType glyph.\n              function parseGlyph(glyph, data, start) {\n                var p = new parse.Parser(data, start);\n                glyph.numberOfContours = p.parseShort();\n                glyph._xMin = p.parseShort();\n                glyph._yMin = p.parseShort();\n                glyph._xMax = p.parseShort();\n                glyph._yMax = p.parseShort();\n                var flags;\n                var flag;\n\n                if (glyph.numberOfContours > 0) {\n                  // This glyph is not a composite.\n                  var endPointIndices = (glyph.endPointIndices = []);\n                  for (var i = 0; i < glyph.numberOfContours; i += 1) {\n                    endPointIndices.push(p.parseUShort());\n                  }\n\n                  glyph.instructionLength = p.parseUShort();\n                  glyph.instructions = [];\n                  for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n                    glyph.instructions.push(p.parseByte());\n                  }\n\n                  var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n                  flags = [];\n                  for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n                    flag = p.parseByte();\n                    flags.push(flag);\n                    // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n                    if ((flag & 8) > 0) {\n                      var repeatCount = p.parseByte();\n                      for (var j = 0; j < repeatCount; j += 1) {\n                        flags.push(flag);\n                        i$2 += 1;\n                      }\n                    }\n                  }\n\n                  check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n                  if (endPointIndices.length > 0) {\n                    var points = [];\n                    var point;\n                    // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n                    if (numberOfCoordinates > 0) {\n                      for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n                        flag = flags[i$3];\n                        point = {};\n                        point.onCurve = !!(flag & 1);\n                        point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n                        points.push(point);\n                      }\n\n                      var px = 0;\n                      for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n                        flag = flags[i$4];\n                        point = points[i$4];\n                        point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                        px = point.x;\n                      }\n\n                      var py = 0;\n                      for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n                        flag = flags[i$5];\n                        point = points[i$5];\n                        point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                        py = point.y;\n                      }\n                    }\n\n                    glyph.points = points;\n                  } else {\n                    glyph.points = [];\n                  }\n                } else if (glyph.numberOfContours === 0) {\n                  glyph.points = [];\n                } else {\n                  glyph.isComposite = true;\n                  glyph.points = [];\n                  glyph.components = [];\n                  var moreComponents = true;\n                  while (moreComponents) {\n                    flags = p.parseUShort();\n                    var component = {\n                      glyphIndex: p.parseUShort(),\n                      xScale: 1,\n                      scale01: 0,\n                      scale10: 0,\n                      yScale: 1,\n                      dx: 0,\n                      dy: 0\n                    };\n                    if ((flags & 1) > 0) {\n                      // The arguments are words\n                      if ((flags & 2) > 0) {\n                        // values are offset\n                        component.dx = p.parseShort();\n                        component.dy = p.parseShort();\n                      } else {\n                        // values are matched points\n                        component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                      }\n                    } else {\n                      // The arguments are bytes\n                      if ((flags & 2) > 0) {\n                        // values are offset\n                        component.dx = p.parseChar();\n                        component.dy = p.parseChar();\n                      } else {\n                        // values are matched points\n                        component.matchedPoints = [p.parseByte(), p.parseByte()];\n                      }\n                    }\n\n                    if ((flags & 8) > 0) {\n                      // We have a scale\n                      component.xScale = component.yScale = p.parseF2Dot14();\n                    } else if ((flags & 64) > 0) {\n                      // We have an X / Y scale\n                      component.xScale = p.parseF2Dot14();\n                      component.yScale = p.parseF2Dot14();\n                    } else if ((flags & 128) > 0) {\n                      // We have a 2x2 transformation\n                      component.xScale = p.parseF2Dot14();\n                      component.scale01 = p.parseF2Dot14();\n                      component.scale10 = p.parseF2Dot14();\n                      component.yScale = p.parseF2Dot14();\n                    }\n\n                    glyph.components.push(component);\n                    moreComponents = !!(flags & 32);\n                  }\n                  if (flags & 0x100) {\n                    // We have instructions\n                    glyph.instructionLength = p.parseUShort();\n                    glyph.instructions = [];\n                    for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n                      glyph.instructions.push(p.parseByte());\n                    }\n                  }\n                }\n              }\n\n              // Transform an array of points and return a new array.\n              function transformPoints(points, transform) {\n                var newPoints = [];\n                for (var i = 0; i < points.length; i += 1) {\n                  var pt = points[i];\n                  var newPt = {\n                    x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n                    y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n                    onCurve: pt.onCurve,\n                    lastPointOfContour: pt.lastPointOfContour\n                  };\n                  newPoints.push(newPt);\n                }\n\n                return newPoints;\n              }\n\n              function getContours(points) {\n                var contours = [];\n                var currentContour = [];\n                for (var i = 0; i < points.length; i += 1) {\n                  var pt = points[i];\n                  currentContour.push(pt);\n                  if (pt.lastPointOfContour) {\n                    contours.push(currentContour);\n                    currentContour = [];\n                  }\n                }\n\n                check.argument(\n                  currentContour.length === 0,\n                  'There are still points left in the current contour.'\n                );\n                return contours;\n              }\n\n              // Convert the TrueType glyph outline to a Path.\n              function getPath(points) {\n                var p = new Path();\n                if (!points) {\n                  return p;\n                }\n\n                var contours = getContours(points);\n\n                for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n                  var contour = contours[contourIndex];\n\n                  var prev = null;\n                  var curr = contour[contour.length - 1];\n                  var next = contour[0];\n\n                  if (curr.onCurve) {\n                    p.moveTo(curr.x, curr.y);\n                  } else {\n                    if (next.onCurve) {\n                      p.moveTo(next.x, next.y);\n                    } else {\n                      // If both first and last points are off-curve, start at their middle.\n                      var start = {\n                        x: (curr.x + next.x) * 0.5,\n                        y: (curr.y + next.y) * 0.5\n                      };\n                      p.moveTo(start.x, start.y);\n                    }\n                  }\n\n                  for (var i = 0; i < contour.length; ++i) {\n                    prev = curr;\n                    curr = next;\n                    next = contour[(i + 1) % contour.length];\n\n                    if (curr.onCurve) {\n                      // This is a straight line.\n                      p.lineTo(curr.x, curr.y);\n                    } else {\n                      var prev2 = prev;\n                      var next2 = next;\n\n                      if (!prev.onCurve) {\n                        prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n                      }\n\n                      if (!next.onCurve) {\n                        next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                      }\n\n                      p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n                    }\n                  }\n\n                  p.closePath();\n                }\n                return p;\n              }\n\n              function buildPath(glyphs, glyph) {\n                if (glyph.isComposite) {\n                  for (var j = 0; j < glyph.components.length; j += 1) {\n                    var component = glyph.components[j];\n                    var componentGlyph = glyphs.get(component.glyphIndex);\n                    // Force the ttfGlyphLoader to parse the glyph.\n                    componentGlyph.getPath();\n                    if (componentGlyph.points) {\n                      var transformedPoints = void 0;\n                      if (component.matchedPoints === undefined) {\n                        // component positioned by offset\n                        transformedPoints = transformPoints(\n                          componentGlyph.points,\n                          component\n                        );\n                      } else {\n                        // component positioned by matched points\n                        if (\n                          component.matchedPoints[0] > glyph.points.length - 1 ||\n                          component.matchedPoints[1] > componentGlyph.points.length - 1\n                        ) {\n                          throw Error('Matched points out of range in ' + glyph.name);\n                        }\n                        var firstPt = glyph.points[component.matchedPoints[0]];\n                        var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                        var transform = {\n                          xScale: component.xScale,\n                          scale01: component.scale01,\n                          scale10: component.scale10,\n                          yScale: component.yScale,\n                          dx: 0,\n                          dy: 0\n                        };\n                        secondPt = transformPoints([secondPt], transform)[0];\n                        transform.dx = firstPt.x - secondPt.x;\n                        transform.dy = firstPt.y - secondPt.y;\n                        transformedPoints = transformPoints(\n                          componentGlyph.points,\n                          transform\n                        );\n                      }\n                      glyph.points = glyph.points.concat(transformedPoints);\n                    }\n                  }\n                }\n\n                return getPath(glyph.points);\n              }\n\n              // Parse all the glyphs according to the offsets from the `loca` table.\n              function parseGlyfTable(data, start, loca, font) {\n                var glyphs = new glyphset.GlyphSet(font);\n\n                // The last element of the loca table is invalid.\n                for (var i = 0; i < loca.length - 1; i += 1) {\n                  var offset = loca[i];\n                  var nextOffset = loca[i + 1];\n                  if (offset !== nextOffset) {\n                    glyphs.push(\n                      i,\n                      glyphset.ttfGlyphLoader(\n                        font,\n                        i,\n                        parseGlyph,\n                        data,\n                        start + offset,\n                        buildPath\n                      )\n                    );\n                  } else {\n                    glyphs.push(i, glyphset.glyphLoader(font, i));\n                  }\n                }\n\n                return glyphs;\n              }\n\n              var glyf = { getPath: getPath, parse: parseGlyfTable };\n\n              /* A TrueType font hinting interpreter.\n\t*\n\t* (c) 2017 Axel Kittenberger\n\t*\n\t* This interpreter has been implemented according to this documentation:\n\t* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n\t*\n\t* According to the documentation F24DOT6 values are used for pixels.\n\t* That means calculation is 1/64 pixel accurate and uses integer operations.\n\t* However, Javascript has floating point operations by default and only\n\t* those are available. One could make a case to simulate the 1/64 accuracy\n\t* exactly by truncating after every division operation\n\t* (for example with << 0) to get pixel exactly results as other TrueType\n\t* implementations. It may make sense since some fonts are pixel optimized\n\t* by hand using DELTAP instructions. The current implementation doesn't\n\t* and rather uses full floating point precision.\n\t*\n\t* xScale, yScale and rotation is currently ignored.\n\t*\n\t* A few non-trivial instructions are missing as I didn't encounter yet\n\t* a font that used them to test a possible implementation.\n\t*\n\t* Some fonts seem to use undocumented features regarding the twilight zone.\n\t* Only some of them are implemented as they were encountered.\n\t*\n\t* The exports.DEBUG statements are removed on the minified distribution file.\n\t*/\n\n              var instructionTable;\n              var exec;\n              var execGlyph;\n              var execComponent;\n\n              /*\n\t* Creates a hinting object.\n\t*\n\t* There ought to be exactly one\n\t* for each truetype font that is used for hinting.\n\t*/\n              function Hinting(font) {\n                // the font this hinting object is for\n                this.font = font;\n\n                this.getCommands = function(hPoints) {\n                  return glyf.getPath(hPoints).commands;\n                };\n\n                // cached states\n                this._fpgmState = this._prepState = undefined;\n\n                // errorState\n                // 0 ... all okay\n                // 1 ... had an error in a glyf,\n                //       continue working but stop spamming\n                //       the console\n                // 2 ... error at prep, stop hinting at this ppem\n                // 3 ... error at fpeg, stop hinting for this font at all\n                this._errorState = 0;\n              }\n\n              /*\n\t* Not rounding.\n\t*/\n              function roundOff(v) {\n                return v;\n              }\n\n              /*\n\t* Rounding to grid.\n\t*/\n              function roundToGrid(v) {\n                //Rounding in TT is supposed to \"symmetrical around zero\"\n                return Math.sign(v) * Math.round(Math.abs(v));\n              }\n\n              /*\n\t* Rounding to double grid.\n\t*/\n              function roundToDoubleGrid(v) {\n                return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n              }\n\n              /*\n\t* Rounding to half grid.\n\t*/\n              function roundToHalfGrid(v) {\n                return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n              }\n\n              /*\n\t* Rounding to up to grid.\n\t*/\n              function roundUpToGrid(v) {\n                return Math.sign(v) * Math.ceil(Math.abs(v));\n              }\n\n              /*\n\t* Rounding to down to grid.\n\t*/\n              function roundDownToGrid(v) {\n                return Math.sign(v) * Math.floor(Math.abs(v));\n              }\n\n              /*\n\t* Super rounding.\n\t*/\n              var roundSuper = function(v) {\n                var period = this.srPeriod;\n                var phase = this.srPhase;\n                var threshold = this.srThreshold;\n                var sign = 1;\n\n                if (v < 0) {\n                  v = -v;\n                  sign = -1;\n                }\n\n                v += threshold - phase;\n\n                v = Math.trunc(v / period) * period;\n\n                v += phase;\n\n                // according to http://xgridfit.sourceforge.net/round.html\n                if (v < 0) {\n                  return phase * sign;\n                }\n\n                return v * sign;\n              };\n\n              /*\n\t* Unit vector of x-axis.\n\t*/\n              var xUnitVector = {\n                x: 1,\n\n                y: 0,\n\n                axis: 'x',\n\n                // Gets the projected distance between two points.\n                // o1/o2 ... if true, respective original position is used.\n                distance: function(p1, p2, o1, o2) {\n                  return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n                },\n\n                // Moves point p so the moved position has the same relative\n                // position to the moved positions of rp1 and rp2 than the\n                // original positions had.\n                //\n                // See APPENDIX on INTERPOLATE at the bottom of this file.\n                interpolate: function(p, rp1, rp2, pv) {\n                  var do1;\n                  var do2;\n                  var doa1;\n                  var doa2;\n                  var dm1;\n                  var dm2;\n                  var dt;\n\n                  if (!pv || pv === this) {\n                    do1 = p.xo - rp1.xo;\n                    do2 = p.xo - rp2.xo;\n                    dm1 = rp1.x - rp1.xo;\n                    dm2 = rp2.x - rp2.xo;\n                    doa1 = Math.abs(do1);\n                    doa2 = Math.abs(do2);\n                    dt = doa1 + doa2;\n\n                    if (dt === 0) {\n                      p.x = p.xo + (dm1 + dm2) / 2;\n                      return;\n                    }\n\n                    p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n                    return;\n                  }\n\n                  do1 = pv.distance(p, rp1, true, true);\n                  do2 = pv.distance(p, rp2, true, true);\n                  dm1 = pv.distance(rp1, rp1, false, true);\n                  dm2 = pv.distance(rp2, rp2, false, true);\n                  doa1 = Math.abs(do1);\n                  doa2 = Math.abs(do2);\n                  dt = doa1 + doa2;\n\n                  if (dt === 0) {\n                    xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n                    return;\n                  }\n\n                  xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n                },\n\n                // Slope of line normal to this\n                normalSlope: Number.NEGATIVE_INFINITY,\n\n                // Sets the point 'p' relative to point 'rp'\n                // by the distance 'd'.\n                //\n                // See APPENDIX on SETRELATIVE at the bottom of this file.\n                //\n                // p   ... point to set\n                // rp  ... reference point\n                // d   ... distance on projection vector\n                // pv  ... projection vector (undefined = this)\n                // org ... if true, uses the original position of rp as reference.\n                setRelative: function(p, rp, d, pv, org) {\n                  if (!pv || pv === this) {\n                    p.x = (org ? rp.xo : rp.x) + d;\n                    return;\n                  }\n\n                  var rpx = org ? rp.xo : rp.x;\n                  var rpy = org ? rp.yo : rp.y;\n                  var rpdx = rpx + d * pv.x;\n                  var rpdy = rpy + d * pv.y;\n\n                  p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n                },\n\n                // Slope of vector line.\n                slope: 0,\n\n                // Touches the point p.\n                touch: function(p) {\n                  p.xTouched = true;\n                },\n\n                // Tests if a point p is touched.\n                touched: function(p) {\n                  return p.xTouched;\n                },\n\n                // Untouches the point p.\n                untouch: function(p) {\n                  p.xTouched = false;\n                }\n              };\n\n              /*\n\t* Unit vector of y-axis.\n\t*/\n              var yUnitVector = {\n                x: 0,\n\n                y: 1,\n\n                axis: 'y',\n\n                // Gets the projected distance between two points.\n                // o1/o2 ... if true, respective original position is used.\n                distance: function(p1, p2, o1, o2) {\n                  return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n                },\n\n                // Moves point p so the moved position has the same relative\n                // position to the moved positions of rp1 and rp2 than the\n                // original positions had.\n                //\n                // See APPENDIX on INTERPOLATE at the bottom of this file.\n                interpolate: function(p, rp1, rp2, pv) {\n                  var do1;\n                  var do2;\n                  var doa1;\n                  var doa2;\n                  var dm1;\n                  var dm2;\n                  var dt;\n\n                  if (!pv || pv === this) {\n                    do1 = p.yo - rp1.yo;\n                    do2 = p.yo - rp2.yo;\n                    dm1 = rp1.y - rp1.yo;\n                    dm2 = rp2.y - rp2.yo;\n                    doa1 = Math.abs(do1);\n                    doa2 = Math.abs(do2);\n                    dt = doa1 + doa2;\n\n                    if (dt === 0) {\n                      p.y = p.yo + (dm1 + dm2) / 2;\n                      return;\n                    }\n\n                    p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n                    return;\n                  }\n\n                  do1 = pv.distance(p, rp1, true, true);\n                  do2 = pv.distance(p, rp2, true, true);\n                  dm1 = pv.distance(rp1, rp1, false, true);\n                  dm2 = pv.distance(rp2, rp2, false, true);\n                  doa1 = Math.abs(do1);\n                  doa2 = Math.abs(do2);\n                  dt = doa1 + doa2;\n\n                  if (dt === 0) {\n                    yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n                    return;\n                  }\n\n                  yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n                },\n\n                // Slope of line normal to this.\n                normalSlope: 0,\n\n                // Sets the point 'p' relative to point 'rp'\n                // by the distance 'd'\n                //\n                // See APPENDIX on SETRELATIVE at the bottom of this file.\n                //\n                // p   ... point to set\n                // rp  ... reference point\n                // d   ... distance on projection vector\n                // pv  ... projection vector (undefined = this)\n                // org ... if true, uses the original position of rp as reference.\n                setRelative: function(p, rp, d, pv, org) {\n                  if (!pv || pv === this) {\n                    p.y = (org ? rp.yo : rp.y) + d;\n                    return;\n                  }\n\n                  var rpx = org ? rp.xo : rp.x;\n                  var rpy = org ? rp.yo : rp.y;\n                  var rpdx = rpx + d * pv.x;\n                  var rpdy = rpy + d * pv.y;\n\n                  p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n                },\n\n                // Slope of vector line.\n                slope: Number.POSITIVE_INFINITY,\n\n                // Touches the point p.\n                touch: function(p) {\n                  p.yTouched = true;\n                },\n\n                // Tests if a point p is touched.\n                touched: function(p) {\n                  return p.yTouched;\n                },\n\n                // Untouches the point p.\n                untouch: function(p) {\n                  p.yTouched = false;\n                }\n              };\n\n              Object.freeze(xUnitVector);\n              Object.freeze(yUnitVector);\n\n              /*\n\t* Creates a unit vector that is not x- or y-axis.\n\t*/\n              function UnitVector(x, y) {\n                this.x = x;\n                this.y = y;\n                this.axis = undefined;\n                this.slope = y / x;\n                this.normalSlope = -x / y;\n                Object.freeze(this);\n              }\n\n              /*\n\t* Gets the projected distance between two points.\n\t* o1/o2 ... if true, respective original position is used.\n\t*/\n              UnitVector.prototype.distance = function(p1, p2, o1, o2) {\n                return (\n                  this.x * xUnitVector.distance(p1, p2, o1, o2) +\n                  this.y * yUnitVector.distance(p1, p2, o1, o2)\n                );\n              };\n\n              /*\n\t* Moves point p so the moved position has the same relative\n\t* position to the moved positions of rp1 and rp2 than the\n\t* original positions had.\n\t*\n\t* See APPENDIX on INTERPOLATE at the bottom of this file.\n\t*/\n              UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n                var dm1;\n                var dm2;\n                var do1;\n                var do2;\n                var doa1;\n                var doa2;\n                var dt;\n\n                do1 = pv.distance(p, rp1, true, true);\n                do2 = pv.distance(p, rp2, true, true);\n                dm1 = pv.distance(rp1, rp1, false, true);\n                dm2 = pv.distance(rp2, rp2, false, true);\n                doa1 = Math.abs(do1);\n                doa2 = Math.abs(do2);\n                dt = doa1 + doa2;\n\n                if (dt === 0) {\n                  this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n                  return;\n                }\n\n                this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n              };\n\n              /*\n\t* Sets the point 'p' relative to point 'rp'\n\t* by the distance 'd'\n\t*\n\t* See APPENDIX on SETRELATIVE at the bottom of this file.\n\t*\n\t* p   ...  point to set\n\t* rp  ... reference point\n\t* d   ... distance on projection vector\n\t* pv  ... projection vector (undefined = this)\n\t* org ... if true, uses the original position of rp as reference.\n\t*/\n              UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n                pv = pv || this;\n\n                var rpx = org ? rp.xo : rp.x;\n                var rpy = org ? rp.yo : rp.y;\n                var rpdx = rpx + d * pv.x;\n                var rpdy = rpy + d * pv.y;\n\n                var pvns = pv.normalSlope;\n                var fvs = this.slope;\n\n                var px = p.x;\n                var py = p.y;\n\n                p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n                p.y = fvs * (p.x - px) + py;\n              };\n\n              /*\n\t* Touches the point p.\n\t*/\n              UnitVector.prototype.touch = function(p) {\n                p.xTouched = true;\n                p.yTouched = true;\n              };\n\n              /*\n\t* Returns a unit vector with x/y coordinates.\n\t*/\n              function getUnitVector(x, y) {\n                var d = Math.sqrt(x * x + y * y);\n\n                x /= d;\n                y /= d;\n\n                if (x === 1 && y === 0) {\n                  return xUnitVector;\n                } else if (x === 0 && y === 1) {\n                  return yUnitVector;\n                } else {\n                  return new UnitVector(x, y);\n                }\n              }\n\n              /*\n\t* Creates a point in the hinting engine.\n\t*/\n              function HPoint(x, y, lastPointOfContour, onCurve) {\n                this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n                this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n                this.lastPointOfContour = lastPointOfContour;\n                this.onCurve = onCurve;\n                this.prevPointOnContour = undefined;\n                this.nextPointOnContour = undefined;\n                this.xTouched = false;\n                this.yTouched = false;\n\n                Object.preventExtensions(this);\n              }\n\n              /*\n\t* Returns the next touched point on the contour.\n\t*\n\t* v  ... unit vector to test touch axis.\n\t*/\n              HPoint.prototype.nextTouched = function(v) {\n                var p = this.nextPointOnContour;\n\n                while (!v.touched(p) && p !== this) {\n                  p = p.nextPointOnContour;\n                }\n\n                return p;\n              };\n\n              /*\n\t* Returns the previous touched point on the contour\n\t*\n\t* v  ... unit vector to test touch axis.\n\t*/\n              HPoint.prototype.prevTouched = function(v) {\n                var p = this.prevPointOnContour;\n\n                while (!v.touched(p) && p !== this) {\n                  p = p.prevPointOnContour;\n                }\n\n                return p;\n              };\n\n              /*\n\t* The zero point.\n\t*/\n              var HPZero = Object.freeze(new HPoint(0, 0));\n\n              /*\n\t* The default state of the interpreter.\n\t*\n\t* Note: Freezing the defaultState and then deriving from it\n\t* makes the V8 Javascript engine going awkward,\n\t* so this is avoided, albeit the defaultState shouldn't\n\t* ever change.\n\t*/\n              var defaultState = {\n                cvCutIn: 17 / 16, // control value cut in\n                deltaBase: 9,\n                deltaShift: 0.125,\n                loop: 1, // loops some instructions\n                minDis: 1, // minimum distance\n                autoFlip: true\n              };\n\n              /*\n\t* The current state of the interpreter.\n\t*\n\t* env  ... 'fpgm' or 'prep' or 'glyf'\n\t* prog ... the program\n\t*/\n              function State(env, prog) {\n                this.env = env;\n                this.stack = [];\n                this.prog = prog;\n\n                switch (env) {\n                  case 'glyf':\n                    this.zp0 = this.zp1 = this.zp2 = 1;\n                    this.rp0 = this.rp1 = this.rp2 = 0;\n                  /* fall through */\n                  case 'prep':\n                    this.fv = this.pv = this.dpv = xUnitVector;\n                    this.round = roundToGrid;\n                }\n              }\n\n              /*\n\t* Executes a glyph program.\n\t*\n\t* This does the hinting for each glyph.\n\t*\n\t* Returns an array of moved points.\n\t*\n\t* glyph: the glyph to hint\n\t* ppem: the size the glyph is rendered for\n\t*/\n              Hinting.prototype.exec = function(glyph, ppem) {\n                if (typeof ppem !== 'number') {\n                  throw new Error('Point size is not a number!');\n                }\n\n                // Received a fatal error, don't do any hinting anymore.\n                if (this._errorState > 2) {\n                  return;\n                }\n\n                var font = this.font;\n                var prepState = this._prepState;\n\n                if (!prepState || prepState.ppem !== ppem) {\n                  var fpgmState = this._fpgmState;\n\n                  if (!fpgmState) {\n                    // Executes the fpgm state.\n                    // This is used by fonts to define functions.\n                    State.prototype = defaultState;\n\n                    fpgmState = this._fpgmState = new State('fpgm', font.tables.fpgm);\n\n                    fpgmState.funcs = [];\n                    fpgmState.font = font;\n\n                    if (exports.DEBUG) {\n                      console.log('---EXEC FPGM---');\n                      fpgmState.step = -1;\n                    }\n\n                    try {\n                      exec(fpgmState);\n                    } catch (e) {\n                      console.log('Hinting error in FPGM:' + e);\n                      this._errorState = 3;\n                      return;\n                    }\n                  }\n\n                  // Executes the prep program for this ppem setting.\n                  // This is used by fonts to set cvt values\n                  // depending on to be rendered font size.\n\n                  State.prototype = fpgmState;\n                  prepState = this._prepState = new State('prep', font.tables.prep);\n\n                  prepState.ppem = ppem;\n\n                  // Creates a copy of the cvt table\n                  // and scales it to the current ppem setting.\n                  var oCvt = font.tables.cvt;\n                  if (oCvt) {\n                    var cvt = (prepState.cvt = new Array(oCvt.length));\n                    var scale = ppem / font.unitsPerEm;\n                    for (var c = 0; c < oCvt.length; c++) {\n                      cvt[c] = oCvt[c] * scale;\n                    }\n                  } else {\n                    prepState.cvt = [];\n                  }\n\n                  if (exports.DEBUG) {\n                    console.log('---EXEC PREP---');\n                    prepState.step = -1;\n                  }\n\n                  try {\n                    exec(prepState);\n                  } catch (e) {\n                    if (this._errorState < 2) {\n                      console.log('Hinting error in PREP:' + e);\n                    }\n                    this._errorState = 2;\n                  }\n                }\n\n                if (this._errorState > 1) {\n                  return;\n                }\n\n                try {\n                  return execGlyph(glyph, prepState);\n                } catch (e) {\n                  if (this._errorState < 1) {\n                    console.log('Hinting error:' + e);\n                    console.log('Note: further hinting errors are silenced');\n                  }\n                  this._errorState = 1;\n                  return undefined;\n                }\n              };\n\n              /*\n\t* Executes the hinting program for a glyph.\n\t*/\n              execGlyph = function(glyph, prepState) {\n                // original point positions\n                var xScale = prepState.ppem / prepState.font.unitsPerEm;\n                var yScale = xScale;\n                var components = glyph.components;\n                var contours;\n                var gZone;\n                var state;\n\n                State.prototype = prepState;\n                if (!components) {\n                  state = new State('glyf', glyph.instructions);\n                  if (exports.DEBUG) {\n                    console.log('---EXEC GLYPH---');\n                    state.step = -1;\n                  }\n                  execComponent(glyph, state, xScale, yScale);\n                  gZone = state.gZone;\n                } else {\n                  var font = prepState.font;\n                  gZone = [];\n                  contours = [];\n                  for (var i = 0; i < components.length; i++) {\n                    var c = components[i];\n                    var cg = font.glyphs.get(c.glyphIndex);\n\n                    state = new State('glyf', cg.instructions);\n\n                    if (exports.DEBUG) {\n                      console.log('---EXEC COMP ' + i + '---');\n                      state.step = -1;\n                    }\n\n                    execComponent(cg, state, xScale, yScale);\n                    // appends the computed points to the result array\n                    // post processes the component points\n                    var dx = Math.round(c.dx * xScale);\n                    var dy = Math.round(c.dy * yScale);\n                    var gz = state.gZone;\n                    var cc = state.contours;\n                    for (var pi = 0; pi < gz.length; pi++) {\n                      var p = gz[pi];\n                      p.xTouched = p.yTouched = false;\n                      p.xo = p.x = p.x + dx;\n                      p.yo = p.y = p.y + dy;\n                    }\n\n                    var gLen = gZone.length;\n                    gZone.push.apply(gZone, gz);\n                    for (var j = 0; j < cc.length; j++) {\n                      contours.push(cc[j] + gLen);\n                    }\n                  }\n\n                  if (glyph.instructions && !state.inhibitGridFit) {\n                    // the composite has instructions on its own\n                    state = new State('glyf', glyph.instructions);\n\n                    state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n                    state.contours = contours;\n\n                    // note: HPZero cannot be used here, since\n                    //       the point might be modified\n                    gZone.push(\n                      new HPoint(0, 0),\n                      new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n                    );\n\n                    if (exports.DEBUG) {\n                      console.log('---EXEC COMPOSITE---');\n                      state.step = -1;\n                    }\n\n                    exec(state);\n\n                    gZone.length -= 2;\n                  }\n                }\n\n                return gZone;\n              };\n\n              /*\n\t* Executes the hinting program for a component of a multi-component glyph\n\t* or of the glyph itself for a non-component glyph.\n\t*/\n              execComponent = function(glyph, state, xScale, yScale) {\n                var points = glyph.points || [];\n                var pLen = points.length;\n                var gZone = (state.gZone = state.z0 = state.z1 = state.z2 = []);\n                var contours = (state.contours = []);\n\n                // Scales the original points and\n                // makes copies for the hinted points.\n                var cp; // current point\n                for (var i = 0; i < pLen; i++) {\n                  cp = points[i];\n\n                  gZone[i] = new HPoint(\n                    cp.x * xScale,\n                    cp.y * yScale,\n                    cp.lastPointOfContour,\n                    cp.onCurve\n                  );\n                }\n\n                // Chain links the contours.\n                var sp; // start point\n                var np; // next point\n\n                for (var i$1 = 0; i$1 < pLen; i$1++) {\n                  cp = gZone[i$1];\n\n                  if (!sp) {\n                    sp = cp;\n                    contours.push(i$1);\n                  }\n\n                  if (cp.lastPointOfContour) {\n                    cp.nextPointOnContour = sp;\n                    sp.prevPointOnContour = cp;\n                    sp = undefined;\n                  } else {\n                    np = gZone[i$1 + 1];\n                    cp.nextPointOnContour = np;\n                    np.prevPointOnContour = cp;\n                  }\n                }\n\n                if (state.inhibitGridFit) {\n                  return;\n                }\n\n                if (exports.DEBUG) {\n                  console.log('PROCESSING GLYPH', state.stack);\n                  for (var i$2 = 0; i$2 < pLen; i$2++) {\n                    console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n                  }\n                }\n\n                gZone.push(\n                  new HPoint(0, 0),\n                  new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n                );\n\n                exec(state);\n\n                // Removes the extra points.\n                gZone.length -= 2;\n\n                if (exports.DEBUG) {\n                  console.log('FINISHED GLYPH', state.stack);\n                  for (var i$3 = 0; i$3 < pLen; i$3++) {\n                    console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n                  }\n                }\n              };\n\n              /*\n\t* Executes the program loaded in state.\n\t*/\n              exec = function(state) {\n                var prog = state.prog;\n\n                if (!prog) {\n                  return;\n                }\n\n                var pLen = prog.length;\n                var ins;\n\n                for (state.ip = 0; state.ip < pLen; state.ip++) {\n                  if (exports.DEBUG) {\n                    state.step++;\n                  }\n                  ins = instructionTable[prog[state.ip]];\n\n                  if (!ins) {\n                    throw new Error(\n                      'unknown instruction: 0x' + Number(prog[state.ip]).toString(16)\n                    );\n                  }\n\n                  ins(state);\n\n                  // very extensive debugging for each step\n                  /*\n\t        if (exports.DEBUG) {\n\t            var da;\n\t            if (state.gZone) {\n\t                da = [];\n\t                for (let i = 0; i < state.gZone.length; i++)\n\t                {\n\t                    da.push(i + ' ' +\n\t                        state.gZone[i].x * 64 + ' ' +\n\t                        state.gZone[i].y * 64 + ' ' +\n\t                        (state.gZone[i].xTouched ? 'x' : '') +\n\t                        (state.gZone[i].yTouched ? 'y' : '')\n\t                    );\n\t                }\n\t                console.log('GZ', da);\n\t            }\n\n\t            if (state.tZone) {\n\t                da = [];\n\t                for (let i = 0; i < state.tZone.length; i++) {\n\t                    da.push(i + ' ' +\n\t                        state.tZone[i].x * 64 + ' ' +\n\t                        state.tZone[i].y * 64 + ' ' +\n\t                        (state.tZone[i].xTouched ? 'x' : '') +\n\t                        (state.tZone[i].yTouched ? 'y' : '')\n\t                    );\n\t                }\n\t                console.log('TZ', da);\n\t            }\n\n\t            if (state.stack.length > 10) {\n\t                console.log(\n\t                    state.stack.length,\n\t                    '...', state.stack.slice(state.stack.length - 10)\n\t                );\n\t            } else {\n\t                console.log(state.stack.length, state.stack);\n\t            }\n\t        }\n\t        */\n                }\n              };\n\n              /*\n\t* Initializes the twilight zone.\n\t*\n\t* This is only done if a SZPx instruction\n\t* refers to the twilight zone.\n\t*/\n              function initTZone(state) {\n                var tZone = (state.tZone = new Array(state.gZone.length));\n\n                // no idea if this is actually correct...\n                for (var i = 0; i < tZone.length; i++) {\n                  tZone[i] = new HPoint(0, 0);\n                }\n              }\n\n              /*\n\t* Skips the instruction pointer ahead over an IF/ELSE block.\n\t* handleElse .. if true breaks on matching ELSE\n\t*/\n              function skip(state, handleElse) {\n                var prog = state.prog;\n                var ip = state.ip;\n                var nesting = 1;\n                var ins;\n\n                do {\n                  ins = prog[++ip];\n                  if (ins === 0x58) {\n                    // IF\n                    nesting++;\n                  } else if (ins === 0x59) {\n                    // EIF\n                    nesting--;\n                  } else if (ins === 0x40) {\n                    // NPUSHB\n                    ip += prog[ip + 1] + 1;\n                  } else if (ins === 0x41) {\n                    // NPUSHW\n                    ip += 2 * prog[ip + 1] + 1;\n                  } else if (ins >= 0xb0 && ins <= 0xb7) {\n                    // PUSHB\n                    ip += ins - 0xb0 + 1;\n                  } else if (ins >= 0xb8 && ins <= 0xbf) {\n                    // PUSHW\n                    ip += (ins - 0xb8 + 1) * 2;\n                  } else if (handleElse && nesting === 1 && ins === 0x1b) {\n                    // ELSE\n                    break;\n                  }\n                } while (nesting > 0);\n\n                state.ip = ip;\n              }\n\n              /*----------------------------------------------------------*\n\t*          And then a lot of instructions...                *\n\t*----------------------------------------------------------*/\n\n              // SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n              // 0x00-0x01\n              function SVTCA(v, state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SVTCA[' + v.axis + ']');\n                }\n\n                state.fv = state.pv = state.dpv = v;\n              }\n\n              // SPVTCA[a] Set Projection Vector to Coordinate Axis\n              // 0x02-0x03\n              function SPVTCA(v, state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SPVTCA[' + v.axis + ']');\n                }\n\n                state.pv = state.dpv = v;\n              }\n\n              // SFVTCA[a] Set Freedom Vector to Coordinate Axis\n              // 0x04-0x05\n              function SFVTCA(v, state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SFVTCA[' + v.axis + ']');\n                }\n\n                state.fv = v;\n              }\n\n              // SPVTL[a] Set Projection Vector To Line\n              // 0x06-0x07\n              function SPVTL(a, state) {\n                var stack = state.stack;\n                var p2i = stack.pop();\n                var p1i = stack.pop();\n                var p2 = state.z2[p2i];\n                var p1 = state.z1[p1i];\n\n                if (exports.DEBUG) {\n                  console.log('SPVTL[' + a + ']', p2i, p1i);\n                }\n\n                var dx;\n                var dy;\n\n                if (!a) {\n                  dx = p1.x - p2.x;\n                  dy = p1.y - p2.y;\n                } else {\n                  dx = p2.y - p1.y;\n                  dy = p1.x - p2.x;\n                }\n\n                state.pv = state.dpv = getUnitVector(dx, dy);\n              }\n\n              // SFVTL[a] Set Freedom Vector To Line\n              // 0x08-0x09\n              function SFVTL(a, state) {\n                var stack = state.stack;\n                var p2i = stack.pop();\n                var p1i = stack.pop();\n                var p2 = state.z2[p2i];\n                var p1 = state.z1[p1i];\n\n                if (exports.DEBUG) {\n                  console.log('SFVTL[' + a + ']', p2i, p1i);\n                }\n\n                var dx;\n                var dy;\n\n                if (!a) {\n                  dx = p1.x - p2.x;\n                  dy = p1.y - p2.y;\n                } else {\n                  dx = p2.y - p1.y;\n                  dy = p1.x - p2.x;\n                }\n\n                state.fv = getUnitVector(dx, dy);\n              }\n\n              // SPVFS[] Set Projection Vector From Stack\n              // 0x0A\n              function SPVFS(state) {\n                var stack = state.stack;\n                var y = stack.pop();\n                var x = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SPVFS[]', y, x);\n                }\n\n                state.pv = state.dpv = getUnitVector(x, y);\n              }\n\n              // SFVFS[] Set Freedom Vector From Stack\n              // 0x0B\n              function SFVFS(state) {\n                var stack = state.stack;\n                var y = stack.pop();\n                var x = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SPVFS[]', y, x);\n                }\n\n                state.fv = getUnitVector(x, y);\n              }\n\n              // GPV[] Get Projection Vector\n              // 0x0C\n              function GPV(state) {\n                var stack = state.stack;\n                var pv = state.pv;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GPV[]');\n                }\n\n                stack.push(pv.x * 0x4000);\n                stack.push(pv.y * 0x4000);\n              }\n\n              // GFV[] Get Freedom Vector\n              // 0x0C\n              function GFV(state) {\n                var stack = state.stack;\n                var fv = state.fv;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GFV[]');\n                }\n\n                stack.push(fv.x * 0x4000);\n                stack.push(fv.y * 0x4000);\n              }\n\n              // SFVTPV[] Set Freedom Vector To Projection Vector\n              // 0x0E\n              function SFVTPV(state) {\n                state.fv = state.pv;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SFVTPV[]');\n                }\n              }\n\n              // ISECT[] moves point p to the InterSECTion of two lines\n              // 0x0F\n              function ISECT(state) {\n                var stack = state.stack;\n                var pa0i = stack.pop();\n                var pa1i = stack.pop();\n                var pb0i = stack.pop();\n                var pb1i = stack.pop();\n                var pi = stack.pop();\n                var z0 = state.z0;\n                var z1 = state.z1;\n                var pa0 = z0[pa0i];\n                var pa1 = z0[pa1i];\n                var pb0 = z1[pb0i];\n                var pb1 = z1[pb1i];\n                var p = state.z2[pi];\n\n                if (exports.DEBUG) {\n                  console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi);\n                }\n\n                // math from\n                // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n                var x1 = pa0.x;\n                var y1 = pa0.y;\n                var x2 = pa1.x;\n                var y2 = pa1.y;\n                var x3 = pb0.x;\n                var y3 = pb0.y;\n                var x4 = pb1.x;\n                var y4 = pb1.y;\n\n                var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n                var f1 = x1 * y2 - y1 * x2;\n                var f2 = x3 * y4 - y3 * x4;\n\n                p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n                p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n              }\n\n              // SRP0[] Set Reference Point 0\n              // 0x10\n              function SRP0(state) {\n                state.rp0 = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SRP0[]', state.rp0);\n                }\n              }\n\n              // SRP1[] Set Reference Point 1\n              // 0x11\n              function SRP1(state) {\n                state.rp1 = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SRP1[]', state.rp1);\n                }\n              }\n\n              // SRP1[] Set Reference Point 2\n              // 0x12\n              function SRP2(state) {\n                state.rp2 = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SRP2[]', state.rp2);\n                }\n              }\n\n              // SZP0[] Set Zone Pointer 0\n              // 0x13\n              function SZP0(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SZP0[]', n);\n                }\n\n                state.zp0 = n;\n\n                switch (n) {\n                  case 0:\n                    if (!state.tZone) {\n                      initTZone(state);\n                    }\n                    state.z0 = state.tZone;\n                    break;\n                  case 1:\n                    state.z0 = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone pointer');\n                }\n              }\n\n              // SZP1[] Set Zone Pointer 1\n              // 0x14\n              function SZP1(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SZP1[]', n);\n                }\n\n                state.zp1 = n;\n\n                switch (n) {\n                  case 0:\n                    if (!state.tZone) {\n                      initTZone(state);\n                    }\n                    state.z1 = state.tZone;\n                    break;\n                  case 1:\n                    state.z1 = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone pointer');\n                }\n              }\n\n              // SZP2[] Set Zone Pointer 2\n              // 0x15\n              function SZP2(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SZP2[]', n);\n                }\n\n                state.zp2 = n;\n\n                switch (n) {\n                  case 0:\n                    if (!state.tZone) {\n                      initTZone(state);\n                    }\n                    state.z2 = state.tZone;\n                    break;\n                  case 1:\n                    state.z2 = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone pointer');\n                }\n              }\n\n              // SZPS[] Set Zone PointerS\n              // 0x16\n              function SZPS(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SZPS[]', n);\n                }\n\n                state.zp0 = state.zp1 = state.zp2 = n;\n\n                switch (n) {\n                  case 0:\n                    if (!state.tZone) {\n                      initTZone(state);\n                    }\n                    state.z0 = state.z1 = state.z2 = state.tZone;\n                    break;\n                  case 1:\n                    state.z0 = state.z1 = state.z2 = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone pointer');\n                }\n              }\n\n              // SLOOP[] Set LOOP variable\n              // 0x17\n              function SLOOP(state) {\n                state.loop = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SLOOP[]', state.loop);\n                }\n              }\n\n              // RTG[] Round To Grid\n              // 0x18\n              function RTG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RTG[]');\n                }\n\n                state.round = roundToGrid;\n              }\n\n              // RTHG[] Round To Half Grid\n              // 0x19\n              function RTHG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RTHG[]');\n                }\n\n                state.round = roundToHalfGrid;\n              }\n\n              // SMD[] Set Minimum Distance\n              // 0x1A\n              function SMD(state) {\n                var d = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SMD[]', d);\n                }\n\n                state.minDis = d / 0x40;\n              }\n\n              // ELSE[] ELSE clause\n              // 0x1B\n              function ELSE(state) {\n                // This instruction has been reached by executing a then branch\n                // so it just skips ahead until matching EIF.\n                //\n                // In case the IF was negative the IF[] instruction already\n                // skipped forward over the ELSE[]\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ELSE[]');\n                }\n\n                skip(state, false);\n              }\n\n              // JMPR[] JuMP Relative\n              // 0x1C\n              function JMPR(state) {\n                var o = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'JMPR[]', o);\n                }\n\n                // A jump by 1 would do nothing.\n                state.ip += o - 1;\n              }\n\n              // SCVTCI[] Set Control Value Table Cut-In\n              // 0x1D\n              function SCVTCI(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SCVTCI[]', n);\n                }\n\n                state.cvCutIn = n / 0x40;\n              }\n\n              // DUP[] DUPlicate top stack element\n              // 0x20\n              function DUP(state) {\n                var stack = state.stack;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DUP[]');\n                }\n\n                stack.push(stack[stack.length - 1]);\n              }\n\n              // POP[] POP top stack element\n              // 0x21\n              function POP(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'POP[]');\n                }\n\n                state.stack.pop();\n              }\n\n              // CLEAR[] CLEAR the stack\n              // 0x22\n              function CLEAR(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'CLEAR[]');\n                }\n\n                state.stack.length = 0;\n              }\n\n              // SWAP[] SWAP the top two elements on the stack\n              // 0x23\n              function SWAP(state) {\n                var stack = state.stack;\n\n                var a = stack.pop();\n                var b = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SWAP[]');\n                }\n\n                stack.push(a);\n                stack.push(b);\n              }\n\n              // DEPTH[] DEPTH of the stack\n              // 0x24\n              function DEPTH(state) {\n                var stack = state.stack;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DEPTH[]');\n                }\n\n                stack.push(stack.length);\n              }\n\n              // LOOPCALL[] LOOPCALL function\n              // 0x2A\n              function LOOPCALL(state) {\n                var stack = state.stack;\n                var fn = stack.pop();\n                var c = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'LOOPCALL[]', fn, c);\n                }\n\n                // saves callers program\n                var cip = state.ip;\n                var cprog = state.prog;\n\n                state.prog = state.funcs[fn];\n\n                // executes the function\n                for (var i = 0; i < c; i++) {\n                  exec(state);\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      ++state.step,\n                      i + 1 < c ? 'next loopcall' : 'done loopcall',\n                      i\n                    );\n                  }\n                }\n\n                // restores the callers program\n                state.ip = cip;\n                state.prog = cprog;\n              }\n\n              // CALL[] CALL function\n              // 0x2B\n              function CALL(state) {\n                var fn = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'CALL[]', fn);\n                }\n\n                // saves callers program\n                var cip = state.ip;\n                var cprog = state.prog;\n\n                state.prog = state.funcs[fn];\n\n                // executes the function\n                exec(state);\n\n                // restores the callers program\n                state.ip = cip;\n                state.prog = cprog;\n\n                if (exports.DEBUG) {\n                  console.log(++state.step, 'returning from', fn);\n                }\n              }\n\n              // CINDEX[] Copy the INDEXed element to the top of the stack\n              // 0x25\n              function CINDEX(state) {\n                var stack = state.stack;\n                var k = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'CINDEX[]', k);\n                }\n\n                // In case of k == 1, it copies the last element after popping\n                // thus stack.length - k.\n                stack.push(stack[stack.length - k]);\n              }\n\n              // MINDEX[] Move the INDEXed element to the top of the stack\n              // 0x26\n              function MINDEX(state) {\n                var stack = state.stack;\n                var k = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MINDEX[]', k);\n                }\n\n                stack.push(stack.splice(stack.length - k, 1)[0]);\n              }\n\n              // FDEF[] Function DEFinition\n              // 0x2C\n              function FDEF(state) {\n                if (state.env !== 'fpgm') {\n                  throw new Error('FDEF not allowed here');\n                }\n                var stack = state.stack;\n                var prog = state.prog;\n                var ip = state.ip;\n\n                var fn = stack.pop();\n                var ipBegin = ip;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'FDEF[]', fn);\n                }\n\n                while (prog[++ip] !== 0x2d) {}\n\n                state.ip = ip;\n                state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n              }\n\n              // MDAP[a] Move Direct Absolute Point\n              // 0x2E-0x2F\n              function MDAP(round, state) {\n                var pi = state.stack.pop();\n                var p = state.z0[pi];\n                var fv = state.fv;\n                var pv = state.pv;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MDAP[' + round + ']', pi);\n                }\n\n                var d = pv.distance(p, HPZero);\n\n                if (round) {\n                  d = state.round(d);\n                }\n\n                fv.setRelative(p, HPZero, d, pv);\n                fv.touch(p);\n\n                state.rp0 = state.rp1 = pi;\n              }\n\n              // IUP[a] Interpolate Untouched Points through the outline\n              // 0x30\n              function IUP(v, state) {\n                var z2 = state.z2;\n                var pLen = z2.length - 2;\n                var cp;\n                var pp;\n                var np;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'IUP[' + v.axis + ']');\n                }\n\n                for (var i = 0; i < pLen; i++) {\n                  cp = z2[i]; // current point\n\n                  // if this point has been touched go on\n                  if (v.touched(cp)) {\n                    continue;\n                  }\n\n                  pp = cp.prevTouched(v);\n\n                  // no point on the contour has been touched?\n                  if (pp === cp) {\n                    continue;\n                  }\n\n                  np = cp.nextTouched(v);\n\n                  if (pp === np) {\n                    // only one point on the contour has been touched\n                    // so simply moves the point like that\n\n                    v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n                  }\n\n                  v.interpolate(cp, pp, np, v);\n                }\n              }\n\n              // SHP[] SHift Point using reference point\n              // 0x32-0x33\n              function SHP(a, state) {\n                var stack = state.stack;\n                var rpi = a ? state.rp1 : state.rp2;\n                var rp = (a ? state.z0 : state.z1)[rpi];\n                var fv = state.fv;\n                var pv = state.pv;\n                var loop = state.loop;\n                var z2 = state.z2;\n\n                while (loop--) {\n                  var pi = stack.pop();\n                  var p = z2[pi];\n\n                  var d = pv.distance(rp, rp, false, true);\n                  fv.setRelative(p, p, d, pv);\n                  fv.touch(p);\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      state.step,\n                      (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                        'SHP[' +\n                        (a ? 'rp1' : 'rp2') +\n                        ']',\n                      pi\n                    );\n                  }\n                }\n\n                state.loop = 1;\n              }\n\n              // SHC[] SHift Contour using reference point\n              // 0x36-0x37\n              function SHC(a, state) {\n                var stack = state.stack;\n                var rpi = a ? state.rp1 : state.rp2;\n                var rp = (a ? state.z0 : state.z1)[rpi];\n                var fv = state.fv;\n                var pv = state.pv;\n                var ci = stack.pop();\n                var sp = state.z2[state.contours[ci]];\n                var p = sp;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SHC[' + a + ']', ci);\n                }\n\n                var d = pv.distance(rp, rp, false, true);\n\n                do {\n                  if (p !== rp) {\n                    fv.setRelative(p, p, d, pv);\n                  }\n                  p = p.nextPointOnContour;\n                } while (p !== sp);\n              }\n\n              // SHZ[] SHift Zone using reference point\n              // 0x36-0x37\n              function SHZ(a, state) {\n                var stack = state.stack;\n                var rpi = a ? state.rp1 : state.rp2;\n                var rp = (a ? state.z0 : state.z1)[rpi];\n                var fv = state.fv;\n                var pv = state.pv;\n\n                var e = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SHZ[' + a + ']', e);\n                }\n\n                var z;\n                switch (e) {\n                  case 0:\n                    z = state.tZone;\n                    break;\n                  case 1:\n                    z = state.gZone;\n                    break;\n                  default:\n                    throw new Error('Invalid zone');\n                }\n\n                var p;\n                var d = pv.distance(rp, rp, false, true);\n                var pLen = z.length - 2;\n                for (var i = 0; i < pLen; i++) {\n                  p = z[i];\n                  fv.setRelative(p, p, d, pv);\n                  //if (p !== rp) fv.setRelative(p, p, d, pv);\n                }\n              }\n\n              // SHPIX[] SHift point by a PIXel amount\n              // 0x38\n              function SHPIX(state) {\n                var stack = state.stack;\n                var loop = state.loop;\n                var fv = state.fv;\n                var d = stack.pop() / 0x40;\n                var z2 = state.z2;\n\n                while (loop--) {\n                  var pi = stack.pop();\n                  var p = z2[pi];\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      state.step,\n                      (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                        'SHPIX[]',\n                      pi,\n                      d\n                    );\n                  }\n\n                  fv.setRelative(p, p, d);\n                  fv.touch(p);\n                }\n\n                state.loop = 1;\n              }\n\n              // IP[] Interpolate Point\n              // 0x39\n              function IP(state) {\n                var stack = state.stack;\n                var rp1i = state.rp1;\n                var rp2i = state.rp2;\n                var loop = state.loop;\n                var rp1 = state.z0[rp1i];\n                var rp2 = state.z1[rp2i];\n                var fv = state.fv;\n                var pv = state.dpv;\n                var z2 = state.z2;\n\n                while (loop--) {\n                  var pi = stack.pop();\n                  var p = z2[pi];\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      state.step,\n                      (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') + 'IP[]',\n                      pi,\n                      rp1i,\n                      '<->',\n                      rp2i\n                    );\n                  }\n\n                  fv.interpolate(p, rp1, rp2, pv);\n\n                  fv.touch(p);\n                }\n\n                state.loop = 1;\n              }\n\n              // MSIRP[a] Move Stack Indirect Relative Point\n              // 0x3A-0x3B\n              function MSIRP(a, state) {\n                var stack = state.stack;\n                var d = stack.pop() / 64;\n                var pi = stack.pop();\n                var p = state.z1[pi];\n                var rp0 = state.z0[state.rp0];\n                var fv = state.fv;\n                var pv = state.pv;\n\n                fv.setRelative(p, rp0, d, pv);\n                fv.touch(p);\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MSIRP[' + a + ']', d, pi);\n                }\n\n                state.rp1 = state.rp0;\n                state.rp2 = pi;\n                if (a) {\n                  state.rp0 = pi;\n                }\n              }\n\n              // ALIGNRP[] Align to reference point.\n              // 0x3C\n              function ALIGNRP(state) {\n                var stack = state.stack;\n                var rp0i = state.rp0;\n                var rp0 = state.z0[rp0i];\n                var loop = state.loop;\n                var fv = state.fv;\n                var pv = state.pv;\n                var z1 = state.z1;\n\n                while (loop--) {\n                  var pi = stack.pop();\n                  var p = z1[pi];\n\n                  if (exports.DEBUG) {\n                    console.log(\n                      state.step,\n                      (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                        'ALIGNRP[]',\n                      pi\n                    );\n                  }\n\n                  fv.setRelative(p, rp0, 0, pv);\n                  fv.touch(p);\n                }\n\n                state.loop = 1;\n              }\n\n              // RTG[] Round To Double Grid\n              // 0x3D\n              function RTDG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RTDG[]');\n                }\n\n                state.round = roundToDoubleGrid;\n              }\n\n              // MIAP[a] Move Indirect Absolute Point\n              // 0x3E-0x3F\n              function MIAP(round, state) {\n                var stack = state.stack;\n                var n = stack.pop();\n                var pi = stack.pop();\n                var p = state.z0[pi];\n                var fv = state.fv;\n                var pv = state.pv;\n                var cv = state.cvt[n];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MIAP[' + round + ']', n, '(', cv, ')', pi);\n                }\n\n                var d = pv.distance(p, HPZero);\n\n                if (round) {\n                  if (Math.abs(d - cv) < state.cvCutIn) {\n                    d = cv;\n                  }\n\n                  d = state.round(d);\n                }\n\n                fv.setRelative(p, HPZero, d, pv);\n\n                if (state.zp0 === 0) {\n                  p.xo = p.x;\n                  p.yo = p.y;\n                }\n\n                fv.touch(p);\n\n                state.rp0 = state.rp1 = pi;\n              }\n\n              // NPUSB[] PUSH N Bytes\n              // 0x40\n              function NPUSHB(state) {\n                var prog = state.prog;\n                var ip = state.ip;\n                var stack = state.stack;\n\n                var n = prog[++ip];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NPUSHB[]', n);\n                }\n\n                for (var i = 0; i < n; i++) {\n                  stack.push(prog[++ip]);\n                }\n\n                state.ip = ip;\n              }\n\n              // NPUSHW[] PUSH N Words\n              // 0x41\n              function NPUSHW(state) {\n                var ip = state.ip;\n                var prog = state.prog;\n                var stack = state.stack;\n                var n = prog[++ip];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NPUSHW[]', n);\n                }\n\n                for (var i = 0; i < n; i++) {\n                  var w = (prog[++ip] << 8) | prog[++ip];\n                  if (w & 0x8000) {\n                    w = -((w ^ 0xffff) + 1);\n                  }\n                  stack.push(w);\n                }\n\n                state.ip = ip;\n              }\n\n              // WS[] Write Store\n              // 0x42\n              function WS(state) {\n                var stack = state.stack;\n                var store = state.store;\n\n                if (!store) {\n                  store = state.store = [];\n                }\n\n                var v = stack.pop();\n                var l = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'WS', v, l);\n                }\n\n                store[l] = v;\n              }\n\n              // RS[] Read Store\n              // 0x43\n              function RS(state) {\n                var stack = state.stack;\n                var store = state.store;\n\n                var l = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RS', l);\n                }\n\n                var v = (store && store[l]) || 0;\n\n                stack.push(v);\n              }\n\n              // WCVTP[] Write Control Value Table in Pixel units\n              // 0x44\n              function WCVTP(state) {\n                var stack = state.stack;\n\n                var v = stack.pop();\n                var l = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'WCVTP', v, l);\n                }\n\n                state.cvt[l] = v / 0x40;\n              }\n\n              // RCVT[] Read Control Value Table entry\n              // 0x45\n              function RCVT(state) {\n                var stack = state.stack;\n                var cvte = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RCVT', cvte);\n                }\n\n                stack.push(state.cvt[cvte] * 0x40);\n              }\n\n              // GC[] Get Coordinate projected onto the projection vector\n              // 0x46-0x47\n              function GC(a, state) {\n                var stack = state.stack;\n                var pi = stack.pop();\n                var p = state.z2[pi];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GC[' + a + ']', pi);\n                }\n\n                stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n              }\n\n              // MD[a] Measure Distance\n              // 0x49-0x4A\n              function MD(a, state) {\n                var stack = state.stack;\n                var pi2 = stack.pop();\n                var pi1 = stack.pop();\n                var p2 = state.z1[pi2];\n                var p1 = state.z0[pi1];\n                var d = state.dpv.distance(p1, p2, a, a);\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d);\n                }\n\n                state.stack.push(Math.round(d * 64));\n              }\n\n              // MPPEM[] Measure Pixels Per EM\n              // 0x4B\n              function MPPEM(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MPPEM[]');\n                }\n                state.stack.push(state.ppem);\n              }\n\n              // FLIPON[] set the auto FLIP Boolean to ON\n              // 0x4D\n              function FLIPON(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'FLIPON[]');\n                }\n                state.autoFlip = true;\n              }\n\n              // LT[] Less Than\n              // 0x50\n              function LT(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'LT[]', e2, e1);\n                }\n\n                stack.push(e1 < e2 ? 1 : 0);\n              }\n\n              // LTEQ[] Less Than or EQual\n              // 0x53\n              function LTEQ(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'LTEQ[]', e2, e1);\n                }\n\n                stack.push(e1 <= e2 ? 1 : 0);\n              }\n\n              // GTEQ[] Greater Than\n              // 0x52\n              function GT(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GT[]', e2, e1);\n                }\n\n                stack.push(e1 > e2 ? 1 : 0);\n              }\n\n              // GTEQ[] Greater Than or EQual\n              // 0x53\n              function GTEQ(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GTEQ[]', e2, e1);\n                }\n\n                stack.push(e1 >= e2 ? 1 : 0);\n              }\n\n              // EQ[] EQual\n              // 0x54\n              function EQ(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'EQ[]', e2, e1);\n                }\n\n                stack.push(e2 === e1 ? 1 : 0);\n              }\n\n              // NEQ[] Not EQual\n              // 0x55\n              function NEQ(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NEQ[]', e2, e1);\n                }\n\n                stack.push(e2 !== e1 ? 1 : 0);\n              }\n\n              // ODD[] ODD\n              // 0x56\n              function ODD(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ODD[]', n);\n                }\n\n                stack.push(Math.trunc(n) % 2 ? 1 : 0);\n              }\n\n              // EVEN[] EVEN\n              // 0x57\n              function EVEN(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'EVEN[]', n);\n                }\n\n                stack.push(Math.trunc(n) % 2 ? 0 : 1);\n              }\n\n              // IF[] IF test\n              // 0x58\n              function IF(state) {\n                var test = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'IF[]', test);\n                }\n\n                // if test is true it just continues\n                // if not the ip is skipped until matching ELSE or EIF\n                if (!test) {\n                  skip(state, true);\n\n                  if (exports.DEBUG) {\n                    console.log(state.step, 'EIF[]');\n                  }\n                }\n              }\n\n              // EIF[] End IF\n              // 0x59\n              function EIF(state) {\n                // this can be reached normally when\n                // executing an else branch.\n                // -> just ignore it\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'EIF[]');\n                }\n              }\n\n              // AND[] logical AND\n              // 0x5A\n              function AND(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'AND[]', e2, e1);\n                }\n\n                stack.push(e2 && e1 ? 1 : 0);\n              }\n\n              // OR[] logical OR\n              // 0x5B\n              function OR(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'OR[]', e2, e1);\n                }\n\n                stack.push(e2 || e1 ? 1 : 0);\n              }\n\n              // NOT[] logical NOT\n              // 0x5C\n              function NOT(state) {\n                var stack = state.stack;\n                var e = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NOT[]', e);\n                }\n\n                stack.push(e ? 0 : 1);\n              }\n\n              // DELTAP1[] DELTA exception P1\n              // DELTAP2[] DELTA exception P2\n              // DELTAP3[] DELTA exception P3\n              // 0x5D, 0x71, 0x72\n              function DELTAP123(b, state) {\n                var stack = state.stack;\n                var n = stack.pop();\n                var fv = state.fv;\n                var pv = state.pv;\n                var ppem = state.ppem;\n                var base = state.deltaBase + (b - 1) * 16;\n                var ds = state.deltaShift;\n                var z0 = state.z0;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DELTAP[' + b + ']', n, stack);\n                }\n\n                for (var i = 0; i < n; i++) {\n                  var pi = stack.pop();\n                  var arg = stack.pop();\n                  var appem = base + ((arg & 0xf0) >> 4);\n                  if (appem !== ppem) {\n                    continue;\n                  }\n\n                  var mag = (arg & 0x0f) - 8;\n                  if (mag >= 0) {\n                    mag++;\n                  }\n                  if (exports.DEBUG) {\n                    console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds);\n                  }\n\n                  var p = z0[pi];\n                  fv.setRelative(p, p, mag * ds, pv);\n                }\n              }\n\n              // SDB[] Set Delta Base in the graphics state\n              // 0x5E\n              function SDB(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SDB[]', n);\n                }\n\n                state.deltaBase = n;\n              }\n\n              // SDS[] Set Delta Shift in the graphics state\n              // 0x5F\n              function SDS(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SDS[]', n);\n                }\n\n                state.deltaShift = Math.pow(0.5, n);\n              }\n\n              // ADD[] ADD\n              // 0x60\n              function ADD(state) {\n                var stack = state.stack;\n                var n2 = stack.pop();\n                var n1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ADD[]', n2, n1);\n                }\n\n                stack.push(n1 + n2);\n              }\n\n              // SUB[] SUB\n              // 0x61\n              function SUB(state) {\n                var stack = state.stack;\n                var n2 = stack.pop();\n                var n1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SUB[]', n2, n1);\n                }\n\n                stack.push(n1 - n2);\n              }\n\n              // DIV[] DIV\n              // 0x62\n              function DIV(state) {\n                var stack = state.stack;\n                var n2 = stack.pop();\n                var n1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DIV[]', n2, n1);\n                }\n\n                stack.push(n1 * 64 / n2);\n              }\n\n              // MUL[] MUL\n              // 0x63\n              function MUL(state) {\n                var stack = state.stack;\n                var n2 = stack.pop();\n                var n1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MUL[]', n2, n1);\n                }\n\n                stack.push(n1 * n2 / 64);\n              }\n\n              // ABS[] ABSolute value\n              // 0x64\n              function ABS(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ABS[]', n);\n                }\n\n                stack.push(Math.abs(n));\n              }\n\n              // NEG[] NEGate\n              // 0x65\n              function NEG(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'NEG[]', n);\n                }\n\n                stack.push(-n);\n              }\n\n              // FLOOR[] FLOOR\n              // 0x66\n              function FLOOR(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'FLOOR[]', n);\n                }\n\n                stack.push(Math.floor(n / 0x40) * 0x40);\n              }\n\n              // CEILING[] CEILING\n              // 0x67\n              function CEILING(state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'CEILING[]', n);\n                }\n\n                stack.push(Math.ceil(n / 0x40) * 0x40);\n              }\n\n              // ROUND[ab] ROUND value\n              // 0x68-0x6B\n              function ROUND(dt, state) {\n                var stack = state.stack;\n                var n = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ROUND[]');\n                }\n\n                stack.push(state.round(n / 0x40) * 0x40);\n              }\n\n              // WCVTF[] Write Control Value Table in Funits\n              // 0x70\n              function WCVTF(state) {\n                var stack = state.stack;\n                var v = stack.pop();\n                var l = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'WCVTF[]', v, l);\n                }\n\n                state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n              }\n\n              // DELTAC1[] DELTA exception C1\n              // DELTAC2[] DELTA exception C2\n              // DELTAC3[] DELTA exception C3\n              // 0x73, 0x74, 0x75\n              function DELTAC123(b, state) {\n                var stack = state.stack;\n                var n = stack.pop();\n                var ppem = state.ppem;\n                var base = state.deltaBase + (b - 1) * 16;\n                var ds = state.deltaShift;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'DELTAC[' + b + ']', n, stack);\n                }\n\n                for (var i = 0; i < n; i++) {\n                  var c = stack.pop();\n                  var arg = stack.pop();\n                  var appem = base + ((arg & 0xf0) >> 4);\n                  if (appem !== ppem) {\n                    continue;\n                  }\n\n                  var mag = (arg & 0x0f) - 8;\n                  if (mag >= 0) {\n                    mag++;\n                  }\n\n                  var delta = mag * ds;\n\n                  if (exports.DEBUG) {\n                    console.log(state.step, 'DELTACFIX', c, 'by', delta);\n                  }\n\n                  state.cvt[c] += delta;\n                }\n              }\n\n              // SROUND[] Super ROUND\n              // 0x76\n              function SROUND(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SROUND[]', n);\n                }\n\n                state.round = roundSuper;\n\n                var period;\n\n                switch (n & 0xc0) {\n                  case 0x00:\n                    period = 0.5;\n                    break;\n                  case 0x40:\n                    period = 1;\n                    break;\n                  case 0x80:\n                    period = 2;\n                    break;\n                  default:\n                    throw new Error('invalid SROUND value');\n                }\n\n                state.srPeriod = period;\n\n                switch (n & 0x30) {\n                  case 0x00:\n                    state.srPhase = 0;\n                    break;\n                  case 0x10:\n                    state.srPhase = 0.25 * period;\n                    break;\n                  case 0x20:\n                    state.srPhase = 0.5 * period;\n                    break;\n                  case 0x30:\n                    state.srPhase = 0.75 * period;\n                    break;\n                  default:\n                    throw new Error('invalid SROUND value');\n                }\n\n                n &= 0x0f;\n\n                if (n === 0) {\n                  state.srThreshold = 0;\n                } else {\n                  state.srThreshold = (n / 8 - 0.5) * period;\n                }\n              }\n\n              // S45ROUND[] Super ROUND 45 degrees\n              // 0x77\n              function S45ROUND(state) {\n                var n = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'S45ROUND[]', n);\n                }\n\n                state.round = roundSuper;\n\n                var period;\n\n                switch (n & 0xc0) {\n                  case 0x00:\n                    period = Math.sqrt(2) / 2;\n                    break;\n                  case 0x40:\n                    period = Math.sqrt(2);\n                    break;\n                  case 0x80:\n                    period = 2 * Math.sqrt(2);\n                    break;\n                  default:\n                    throw new Error('invalid S45ROUND value');\n                }\n\n                state.srPeriod = period;\n\n                switch (n & 0x30) {\n                  case 0x00:\n                    state.srPhase = 0;\n                    break;\n                  case 0x10:\n                    state.srPhase = 0.25 * period;\n                    break;\n                  case 0x20:\n                    state.srPhase = 0.5 * period;\n                    break;\n                  case 0x30:\n                    state.srPhase = 0.75 * period;\n                    break;\n                  default:\n                    throw new Error('invalid S45ROUND value');\n                }\n\n                n &= 0x0f;\n\n                if (n === 0) {\n                  state.srThreshold = 0;\n                } else {\n                  state.srThreshold = (n / 8 - 0.5) * period;\n                }\n              }\n\n              // ROFF[] Round Off\n              // 0x7A\n              function ROFF(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ROFF[]');\n                }\n\n                state.round = roundOff;\n              }\n\n              // RUTG[] Round Up To Grid\n              // 0x7C\n              function RUTG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RUTG[]');\n                }\n\n                state.round = roundUpToGrid;\n              }\n\n              // RDTG[] Round Down To Grid\n              // 0x7D\n              function RDTG(state) {\n                if (exports.DEBUG) {\n                  console.log(state.step, 'RDTG[]');\n                }\n\n                state.round = roundDownToGrid;\n              }\n\n              // SCANCTRL[] SCAN conversion ConTRoL\n              // 0x85\n              function SCANCTRL(state) {\n                var n = state.stack.pop();\n\n                // ignored by opentype.js\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SCANCTRL[]', n);\n                }\n              }\n\n              // SDPVTL[a] Set Dual Projection Vector To Line\n              // 0x86-0x87\n              function SDPVTL(a, state) {\n                var stack = state.stack;\n                var p2i = stack.pop();\n                var p1i = stack.pop();\n                var p2 = state.z2[p2i];\n                var p1 = state.z1[p1i];\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i);\n                }\n\n                var dx;\n                var dy;\n\n                if (!a) {\n                  dx = p1.x - p2.x;\n                  dy = p1.y - p2.y;\n                } else {\n                  dx = p2.y - p1.y;\n                  dy = p1.x - p2.x;\n                }\n\n                state.dpv = getUnitVector(dx, dy);\n              }\n\n              // GETINFO[] GET INFOrmation\n              // 0x88\n              function GETINFO(state) {\n                var stack = state.stack;\n                var sel = stack.pop();\n                var r = 0;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'GETINFO[]', sel);\n                }\n\n                // v35 as in no subpixel hinting\n                if (sel & 0x01) {\n                  r = 35;\n                }\n\n                // TODO rotation and stretch currently not supported\n                // and thus those GETINFO are always 0.\n\n                // opentype.js is always gray scaling\n                if (sel & 0x20) {\n                  r |= 0x1000;\n                }\n\n                stack.push(r);\n              }\n\n              // ROLL[] ROLL the top three stack elements\n              // 0x8A\n              function ROLL(state) {\n                var stack = state.stack;\n                var a = stack.pop();\n                var b = stack.pop();\n                var c = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'ROLL[]');\n                }\n\n                stack.push(b);\n                stack.push(a);\n                stack.push(c);\n              }\n\n              // MAX[] MAXimum of top two stack elements\n              // 0x8B\n              function MAX(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MAX[]', e2, e1);\n                }\n\n                stack.push(Math.max(e1, e2));\n              }\n\n              // MIN[] MINimum of top two stack elements\n              // 0x8C\n              function MIN(state) {\n                var stack = state.stack;\n                var e2 = stack.pop();\n                var e1 = stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'MIN[]', e2, e1);\n                }\n\n                stack.push(Math.min(e1, e2));\n              }\n\n              // SCANTYPE[] SCANTYPE\n              // 0x8D\n              function SCANTYPE(state) {\n                var n = state.stack.pop();\n                // ignored by opentype.js\n                if (exports.DEBUG) {\n                  console.log(state.step, 'SCANTYPE[]', n);\n                }\n              }\n\n              // INSTCTRL[] INSTCTRL\n              // 0x8D\n              function INSTCTRL(state) {\n                var s = state.stack.pop();\n                var v = state.stack.pop();\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'INSTCTRL[]', s, v);\n                }\n\n                switch (s) {\n                  case 1:\n                    state.inhibitGridFit = !!v;\n                    return;\n                  case 2:\n                    state.ignoreCvt = !!v;\n                    return;\n                  default:\n                    throw new Error('invalid INSTCTRL[] selector');\n                }\n              }\n\n              // PUSHB[abc] PUSH Bytes\n              // 0xB0-0xB7\n              function PUSHB(n, state) {\n                var stack = state.stack;\n                var prog = state.prog;\n                var ip = state.ip;\n\n                if (exports.DEBUG) {\n                  console.log(state.step, 'PUSHB[' + n + ']');\n                }\n\n                for (var i = 0; i < n; i++) {\n                  stack.push(prog[++ip]);\n                }\n\n                state.ip = ip;\n              }\n\n              // PUSHW[abc] PUSH Words\n              // 0xB8-0xBF\n              function PUSHW(n, state) {\n                var ip = state.ip;\n                var prog = state.prog;\n                var stack = state.stack;\n\n                if (exports.DEBUG) {\n                  console.log(state.ip, 'PUSHW[' + n + ']');\n                }\n\n                for (var i = 0; i < n; i++) {\n                  var w = (prog[++ip] << 8) | prog[++ip];\n                  if (w & 0x8000) {\n                    w = -((w ^ 0xffff) + 1);\n                  }\n                  stack.push(w);\n                }\n\n                state.ip = ip;\n              }\n\n              // MDRP[abcde] Move Direct Relative Point\n              // 0xD0-0xEF\n              // (if indirect is 0)\n              //\n              // and\n              //\n              // MIRP[abcde] Move Indirect Relative Point\n              // 0xE0-0xFF\n              // (if indirect is 1)\n\n              function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n                var stack = state.stack;\n                var cvte = indirect && stack.pop();\n                var pi = stack.pop();\n                var rp0i = state.rp0;\n                var rp = state.z0[rp0i];\n                var p = state.z1[pi];\n\n                var md = state.minDis;\n                var fv = state.fv;\n                var pv = state.dpv;\n                var od; // original distance\n                var d; // moving distance\n                var sign; // sign of distance\n                var cv;\n\n                d = od = pv.distance(p, rp, true, true);\n                sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n                // TODO consider autoFlip\n                d = Math.abs(d);\n\n                if (indirect) {\n                  cv = state.cvt[cvte];\n\n                  if (ro && Math.abs(d - cv) < state.cvCutIn) {\n                    d = cv;\n                  }\n                }\n\n                if (keepD && d < md) {\n                  d = md;\n                }\n\n                if (ro) {\n                  d = state.round(d);\n                }\n\n                fv.setRelative(p, rp, sign * d, pv);\n                fv.touch(p);\n\n                if (exports.DEBUG) {\n                  console.log(\n                    state.step,\n                    (indirect ? 'MIRP[' : 'MDRP[') +\n                      (setRp0 ? 'M' : 'm') +\n                      (keepD ? '>' : '_') +\n                      (ro ? 'R' : '_') +\n                      (dt === 0 ? 'Gr' : dt === 1 ? 'Bl' : dt === 2 ? 'Wh' : '') +\n                      ']',\n                    indirect ? cvte + '(' + state.cvt[cvte] + ',' + cv + ')' : '',\n                    pi,\n                    '(d =',\n                    od,\n                    '->',\n                    sign * d,\n                    ')'\n                  );\n                }\n\n                state.rp1 = state.rp0;\n                state.rp2 = pi;\n                if (setRp0) {\n                  state.rp0 = pi;\n                }\n              }\n\n              /*\n\t* The instruction table.\n\t*/\n              instructionTable = [\n                /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n                /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n                /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n                /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n                /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n                /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n                /* 0x06 */ SPVTL.bind(undefined, 0),\n                /* 0x07 */ SPVTL.bind(undefined, 1),\n                /* 0x08 */ SFVTL.bind(undefined, 0),\n                /* 0x09 */ SFVTL.bind(undefined, 1),\n                /* 0x0A */ SPVFS,\n                /* 0x0B */ SFVFS,\n                /* 0x0C */ GPV,\n                /* 0x0D */ GFV,\n                /* 0x0E */ SFVTPV,\n                /* 0x0F */ ISECT,\n                /* 0x10 */ SRP0,\n                /* 0x11 */ SRP1,\n                /* 0x12 */ SRP2,\n                /* 0x13 */ SZP0,\n                /* 0x14 */ SZP1,\n                /* 0x15 */ SZP2,\n                /* 0x16 */ SZPS,\n                /* 0x17 */ SLOOP,\n                /* 0x18 */ RTG,\n                /* 0x19 */ RTHG,\n                /* 0x1A */ SMD,\n                /* 0x1B */ ELSE,\n                /* 0x1C */ JMPR,\n                /* 0x1D */ SCVTCI,\n                /* 0x1E */ undefined, // TODO SSWCI\n                /* 0x1F */ undefined, // TODO SSW\n                /* 0x20 */ DUP,\n                /* 0x21 */ POP,\n                /* 0x22 */ CLEAR,\n                /* 0x23 */ SWAP,\n                /* 0x24 */ DEPTH,\n                /* 0x25 */ CINDEX,\n                /* 0x26 */ MINDEX,\n                /* 0x27 */ undefined, // TODO ALIGNPTS\n                /* 0x28 */ undefined,\n                /* 0x29 */ undefined, // TODO UTP\n                /* 0x2A */ LOOPCALL,\n                /* 0x2B */ CALL,\n                /* 0x2C */ FDEF,\n                /* 0x2D */ undefined, // ENDF (eaten by FDEF)\n                /* 0x2E */ MDAP.bind(undefined, 0),\n                /* 0x2F */ MDAP.bind(undefined, 1),\n                /* 0x30 */ IUP.bind(undefined, yUnitVector),\n                /* 0x31 */ IUP.bind(undefined, xUnitVector),\n                /* 0x32 */ SHP.bind(undefined, 0),\n                /* 0x33 */ SHP.bind(undefined, 1),\n                /* 0x34 */ SHC.bind(undefined, 0),\n                /* 0x35 */ SHC.bind(undefined, 1),\n                /* 0x36 */ SHZ.bind(undefined, 0),\n                /* 0x37 */ SHZ.bind(undefined, 1),\n                /* 0x38 */ SHPIX,\n                /* 0x39 */ IP,\n                /* 0x3A */ MSIRP.bind(undefined, 0),\n                /* 0x3B */ MSIRP.bind(undefined, 1),\n                /* 0x3C */ ALIGNRP,\n                /* 0x3D */ RTDG,\n                /* 0x3E */ MIAP.bind(undefined, 0),\n                /* 0x3F */ MIAP.bind(undefined, 1),\n                /* 0x40 */ NPUSHB,\n                /* 0x41 */ NPUSHW,\n                /* 0x42 */ WS,\n                /* 0x43 */ RS,\n                /* 0x44 */ WCVTP,\n                /* 0x45 */ RCVT,\n                /* 0x46 */ GC.bind(undefined, 0),\n                /* 0x47 */ GC.bind(undefined, 1),\n                /* 0x48 */ undefined, // TODO SCFS\n                /* 0x49 */ MD.bind(undefined, 0),\n                /* 0x4A */ MD.bind(undefined, 1),\n                /* 0x4B */ MPPEM,\n                /* 0x4C */ undefined, // TODO MPS\n                /* 0x4D */ FLIPON,\n                /* 0x4E */ undefined, // TODO FLIPOFF\n                /* 0x4F */ undefined, // TODO DEBUG\n                /* 0x50 */ LT,\n                /* 0x51 */ LTEQ,\n                /* 0x52 */ GT,\n                /* 0x53 */ GTEQ,\n                /* 0x54 */ EQ,\n                /* 0x55 */ NEQ,\n                /* 0x56 */ ODD,\n                /* 0x57 */ EVEN,\n                /* 0x58 */ IF,\n                /* 0x59 */ EIF,\n                /* 0x5A */ AND,\n                /* 0x5B */ OR,\n                /* 0x5C */ NOT,\n                /* 0x5D */ DELTAP123.bind(undefined, 1),\n                /* 0x5E */ SDB,\n                /* 0x5F */ SDS,\n                /* 0x60 */ ADD,\n                /* 0x61 */ SUB,\n                /* 0x62 */ DIV,\n                /* 0x63 */ MUL,\n                /* 0x64 */ ABS,\n                /* 0x65 */ NEG,\n                /* 0x66 */ FLOOR,\n                /* 0x67 */ CEILING,\n                /* 0x68 */ ROUND.bind(undefined, 0),\n                /* 0x69 */ ROUND.bind(undefined, 1),\n                /* 0x6A */ ROUND.bind(undefined, 2),\n                /* 0x6B */ ROUND.bind(undefined, 3),\n                /* 0x6C */ undefined, // TODO NROUND[ab]\n                /* 0x6D */ undefined, // TODO NROUND[ab]\n                /* 0x6E */ undefined, // TODO NROUND[ab]\n                /* 0x6F */ undefined, // TODO NROUND[ab]\n                /* 0x70 */ WCVTF,\n                /* 0x71 */ DELTAP123.bind(undefined, 2),\n                /* 0x72 */ DELTAP123.bind(undefined, 3),\n                /* 0x73 */ DELTAC123.bind(undefined, 1),\n                /* 0x74 */ DELTAC123.bind(undefined, 2),\n                /* 0x75 */ DELTAC123.bind(undefined, 3),\n                /* 0x76 */ SROUND,\n                /* 0x77 */ S45ROUND,\n                /* 0x78 */ undefined, // TODO JROT[]\n                /* 0x79 */ undefined, // TODO JROF[]\n                /* 0x7A */ ROFF,\n                /* 0x7B */ undefined,\n                /* 0x7C */ RUTG,\n                /* 0x7D */ RDTG,\n                /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n                /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n                /* 0x80 */ undefined, // TODO FLIPPT\n                /* 0x81 */ undefined, // TODO FLIPRGON\n                /* 0x82 */ undefined, // TODO FLIPRGOFF\n                /* 0x83 */ undefined,\n                /* 0x84 */ undefined,\n                /* 0x85 */ SCANCTRL,\n                /* 0x86 */ SDPVTL.bind(undefined, 0),\n                /* 0x87 */ SDPVTL.bind(undefined, 1),\n                /* 0x88 */ GETINFO,\n                /* 0x89 */ undefined, // TODO IDEF\n                /* 0x8A */ ROLL,\n                /* 0x8B */ MAX,\n                /* 0x8C */ MIN,\n                /* 0x8D */ SCANTYPE,\n                /* 0x8E */ INSTCTRL,\n                /* 0x8F */ undefined,\n                /* 0x90 */ undefined,\n                /* 0x91 */ undefined,\n                /* 0x92 */ undefined,\n                /* 0x93 */ undefined,\n                /* 0x94 */ undefined,\n                /* 0x95 */ undefined,\n                /* 0x96 */ undefined,\n                /* 0x97 */ undefined,\n                /* 0x98 */ undefined,\n                /* 0x99 */ undefined,\n                /* 0x9A */ undefined,\n                /* 0x9B */ undefined,\n                /* 0x9C */ undefined,\n                /* 0x9D */ undefined,\n                /* 0x9E */ undefined,\n                /* 0x9F */ undefined,\n                /* 0xA0 */ undefined,\n                /* 0xA1 */ undefined,\n                /* 0xA2 */ undefined,\n                /* 0xA3 */ undefined,\n                /* 0xA4 */ undefined,\n                /* 0xA5 */ undefined,\n                /* 0xA6 */ undefined,\n                /* 0xA7 */ undefined,\n                /* 0xA8 */ undefined,\n                /* 0xA9 */ undefined,\n                /* 0xAA */ undefined,\n                /* 0xAB */ undefined,\n                /* 0xAC */ undefined,\n                /* 0xAD */ undefined,\n                /* 0xAE */ undefined,\n                /* 0xAF */ undefined,\n                /* 0xB0 */ PUSHB.bind(undefined, 1),\n                /* 0xB1 */ PUSHB.bind(undefined, 2),\n                /* 0xB2 */ PUSHB.bind(undefined, 3),\n                /* 0xB3 */ PUSHB.bind(undefined, 4),\n                /* 0xB4 */ PUSHB.bind(undefined, 5),\n                /* 0xB5 */ PUSHB.bind(undefined, 6),\n                /* 0xB6 */ PUSHB.bind(undefined, 7),\n                /* 0xB7 */ PUSHB.bind(undefined, 8),\n                /* 0xB8 */ PUSHW.bind(undefined, 1),\n                /* 0xB9 */ PUSHW.bind(undefined, 2),\n                /* 0xBA */ PUSHW.bind(undefined, 3),\n                /* 0xBB */ PUSHW.bind(undefined, 4),\n                /* 0xBC */ PUSHW.bind(undefined, 5),\n                /* 0xBD */ PUSHW.bind(undefined, 6),\n                /* 0xBE */ PUSHW.bind(undefined, 7),\n                /* 0xBF */ PUSHW.bind(undefined, 8),\n                /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n                /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n                /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n                /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n                /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n                /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n                /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n                /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n                /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n                /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n                /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n                /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n                /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n                /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n                /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n                /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n                /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n                /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n                /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n                /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n                /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n                /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n                /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n                /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n                /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n                /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n                /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n                /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n                /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n                /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n                /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n                /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n                /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n                /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n                /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n                /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n                /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n                /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n                /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n                /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n                /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n                /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n                /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n                /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n                /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n                /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n                /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n                /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n                /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n                /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n                /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n                /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n                /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n                /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n                /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n                /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n                /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n                /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n                /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n                /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n                /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n                /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n                /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n                /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n              ];\n\n              /*****************************\n\t  Mathematical Considerations\n\t******************************\n\n\tfv ... refers to freedom vector\n\tpv ... refers to projection vector\n\trp ... refers to reference point\n\tp  ... refers to to point being operated on\n\td  ... refers to distance\n\n\tSETRELATIVE:\n\t============\n\n\tcase freedom vector == x-axis:\n\t------------------------------\n\n\t                        (pv)\n\t                     .-'\n\t              rpd .-'\n\t               .-*\n\t          d .-'90°'\n\t         .-'       '\n\t      .-'           '\n\t   *-'               ' b\n\t  rp                  '\n\t                       '\n\t                        '\n\t            p *----------*-------------- (fv)\n\t                          pm\n\n\t  rpdx = rpx + d * pv.x\n\t  rpdy = rpy + d * pv.y\n\n\t  equation of line b\n\n\t   y - rpdy = pvns * (x- rpdx)\n\n\t   y = p.y\n\n\t   x = rpdx + ( p.y - rpdy ) / pvns\n\n\n\tcase freedom vector == y-axis:\n\t------------------------------\n\n\t    * pm\n\t    |\\\n\t    | \\\n\t    |  \\\n\t    |   \\\n\t    |    \\\n\t    |     \\\n\t    |      \\\n\t    |       \\\n\t    |        \\\n\t    |         \\ b\n\t    |          \\\n\t    |           \\\n\t    |            \\    .-' (pv)\n\t    |         90° \\.-'\n\t    |           .-'* rpd\n\t    |        .-'\n\t    *     *-'  d\n\t    p     rp\n\n\t  rpdx = rpx + d * pv.x\n\t  rpdy = rpy + d * pv.y\n\n\t  equation of line b:\n\t           pvns ... normal slope to pv\n\n\t   y - rpdy = pvns * (x - rpdx)\n\n\t   x = p.x\n\n\t   y = rpdy +  pvns * (p.x - rpdx)\n\n\n\n\tgeneric case:\n\t-------------\n\n\n\t                              .'(fv)\n\t                            .'\n\t                          .* pm\n\t                        .' !\n\t                      .'    .\n\t                    .'      !\n\t                  .'         . b\n\t                .'           !\n\t               *              .\n\t              p               !\n\t                         90°   .    ... (pv)\n\t                           ...-*-'''\n\t                  ...---'''    rpd\n\t         ...---'''   d\n\t   *--'''\n\t  rp\n\n\t    rpdx = rpx + d * pv.x\n\t    rpdy = rpy + d * pv.y\n\n\t equation of line b:\n\t    pvns... normal slope to pv\n\n\t    y - rpdy = pvns * (x - rpdx)\n\n\t equation of freedom vector line:\n\t    fvs ... slope of freedom vector (=fy/fx)\n\n\t    y - py = fvs * (x - px)\n\n\n\t  on pm both equations are true for same x/y\n\n\t    y - rpdy = pvns * (x - rpdx)\n\n\t    y - py = fvs * (x - px)\n\n\t  form to y and set equal:\n\n\t    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n\t  expand:\n\n\t    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n\t  switch:\n\n\t    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n\t  solve for x:\n\n\t    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n\t          fvs * px - pvns * rpdx + rpdy - py\n\t    x =  -----------------------------------\n\t                 fvs - pvns\n\n\t  and:\n\n\t    y = fvs * (x - px) + py\n\n\n\n\tINTERPOLATE:\n\t============\n\n\tExamples of point interpolation.\n\n\tThe weight of the movement of the reference point gets bigger\n\tthe further the other reference point is away, thus the safest\n\toption (that is avoiding 0/0 divisions) is to weight the\n\toriginal distance of the other point by the sum of both distances.\n\n\tIf the sum of both distances is 0, then move the point by the\n\tarithmetic average of the movement of both reference points.\n\n\n\n\n\t           (+6)\n\t    rp1o *---->*rp1\n\t         .     .                          (+12)\n\t         .     .                  rp2o *---------->* rp2\n\t         .     .                       .           .\n\t         .     .                       .           .\n\t         .    10          20           .           .\n\t         |.........|...................|           .\n\t               .   .                               .\n\t               .   . (+8)                          .\n\t                po *------>*p                      .\n\t               .           .                       .\n\t               .    12     .          24           .\n\t               |...........|.......................|\n\t                                  36\n\n\n\t-------\n\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .                      (-10)\n\t         .         .              rp2 *<---------* rpo2\n\t         .         .                   .         .\n\t         .         .                   .         .\n\t         .    10   .          30       .         .\n\t         |.........|.............................|\n\t                   .                   .\n\t                   . (+5)              .\n\t                po *--->* p            .\n\t                   .    .              .\n\t                   .    .   20         .\n\t                   |....|..............|\n\t                     5        15\n\n\n\t-------\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .\n\t         .         .\n\t    rp2o *-------->*rp2\n\n\n\t                               (+10)\n\t                          po *-------->* p\n\n\t-------\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .\n\t         .         .(+30)\n\t    rp2o *---------------------------->*rp2\n\n\n\t                                        (+25)\n\t                          po *----------------------->* p\n\n\n\n\tvim: set ts=4 sw=4 expandtab:\n\t*****/\n\n              // The Font object\n\n              // This code is based on Array.from implementation for strings in https://github.com/mathiasbynens/Array.from\n              var arrayFromString =\n                Array.from ||\n                function(s) {\n                  return (\n                    s.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?|[^\\uD800-\\uDFFF]|./g) || []\n                  );\n                };\n\n              /**\n               * @typedef FontOptions\n               * @type Object\n               * @property {Boolean} empty - whether to create a new empty font\n               * @property {string} familyName\n               * @property {string} styleName\n               * @property {string=} fullName\n               * @property {string=} postScriptName\n               * @property {string=} designer\n               * @property {string=} designerURL\n               * @property {string=} manufacturer\n               * @property {string=} manufacturerURL\n               * @property {string=} license\n               * @property {string=} licenseURL\n               * @property {string=} version\n               * @property {string=} description\n               * @property {string=} copyright\n               * @property {string=} trademark\n               * @property {Number} unitsPerEm\n               * @property {Number} ascender\n               * @property {Number} descender\n               * @property {Number} createdTimestamp\n               * @property {string=} weightClass\n               * @property {string=} widthClass\n               * @property {string=} fsSelection\n               */\n\n              /**\n               * A Font represents a loaded OpenType font file.\n               * It contains a set of glyphs and methods to draw text on a drawing context,\n               * or to get a path representing the text.\n               * @exports opentype.Font\n               * @class\n               * @param {FontOptions}\n               * @constructor\n               */\n              function Font(options) {\n                options = options || {};\n\n                if (!options.empty) {\n                  // Check that we've provided the minimum set of names.\n                  checkArgument(\n                    options.familyName,\n                    'When creating a new Font object, familyName is required.'\n                  );\n                  checkArgument(\n                    options.styleName,\n                    'When creating a new Font object, styleName is required.'\n                  );\n                  checkArgument(\n                    options.unitsPerEm,\n                    'When creating a new Font object, unitsPerEm is required.'\n                  );\n                  checkArgument(\n                    options.ascender,\n                    'When creating a new Font object, ascender is required.'\n                  );\n                  checkArgument(\n                    options.descender,\n                    'When creating a new Font object, descender is required.'\n                  );\n                  checkArgument(\n                    options.descender < 0,\n                    'Descender should be negative (e.g. -512).'\n                  );\n\n                  // OS X will complain if the names are empty, so we put a single space everywhere by default.\n                  this.names = {\n                    fontFamily: { en: options.familyName || ' ' },\n                    fontSubfamily: { en: options.styleName || ' ' },\n                    fullName: {\n                      en: options.fullName || options.familyName + ' ' + options.styleName\n                    },\n                    // postScriptName may not contain any whitespace\n                    postScriptName: {\n                      en:\n                        options.postScriptName ||\n                        (options.familyName + options.styleName).replace(/\\s/g, '')\n                    },\n                    designer: { en: options.designer || ' ' },\n                    designerURL: { en: options.designerURL || ' ' },\n                    manufacturer: { en: options.manufacturer || ' ' },\n                    manufacturerURL: { en: options.manufacturerURL || ' ' },\n                    license: { en: options.license || ' ' },\n                    licenseURL: { en: options.licenseURL || ' ' },\n                    version: { en: options.version || 'Version 0.1' },\n                    description: { en: options.description || ' ' },\n                    copyright: { en: options.copyright || ' ' },\n                    trademark: { en: options.trademark || ' ' }\n                  };\n                  this.unitsPerEm = options.unitsPerEm || 1000;\n                  this.ascender = options.ascender;\n                  this.descender = options.descender;\n                  this.createdTimestamp = options.createdTimestamp;\n                  this.tables = {\n                    os2: {\n                      usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n                      usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n                      fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n                    }\n                  };\n                }\n\n                this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n                this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n                this.encoding = new DefaultEncoding(this);\n                this.position = new Position(this);\n                this.substitution = new Substitution(this);\n                this.tables = this.tables || {};\n\n                Object.defineProperty(this, 'hinting', {\n                  get: function() {\n                    if (this._hinting) {\n                      return this._hinting;\n                    }\n                    if (this.outlinesFormat === 'truetype') {\n                      return (this._hinting = new Hinting(this));\n                    }\n                  }\n                });\n              }\n\n              /**\n               * Check if the font has a glyph for the given character.\n               * @param  {string}\n               * @return {Boolean}\n               */\n              Font.prototype.hasChar = function(c) {\n                return this.encoding.charToGlyphIndex(c) !== null;\n              };\n\n              /**\n               * Convert the given character to a single glyph index.\n               * Note that this function assumes that there is a one-to-one mapping between\n               * the given character and a glyph; for complex scripts this might not be the case.\n               * @param  {string}\n               * @return {Number}\n               */\n              Font.prototype.charToGlyphIndex = function(s) {\n                return this.encoding.charToGlyphIndex(s);\n              };\n\n              /**\n               * Convert the given character to a single Glyph object.\n               * Note that this function assumes that there is a one-to-one mapping between\n               * the given character and a glyph; for complex scripts this might not be the case.\n               * @param  {string}\n               * @return {opentype.Glyph}\n               */\n              Font.prototype.charToGlyph = function(c) {\n                var glyphIndex = this.charToGlyphIndex(c);\n                var glyph = this.glyphs.get(glyphIndex);\n                if (!glyph) {\n                  // .notdef\n                  glyph = this.glyphs.get(0);\n                }\n\n                return glyph;\n              };\n\n              /**\n               * Convert the given text to a list of Glyph objects.\n               * Note that there is no strict one-to-one mapping between characters and\n               * glyphs, so the list of returned glyphs can be larger or smaller than the\n               * length of the given string.\n               * @param  {string}\n               * @param  {GlyphRenderOptions} [options]\n               * @return {opentype.Glyph[]}\n               */\n              Font.prototype.stringToGlyphs = function(s, options) {\n                var this$1 = this;\n\n                options = options || this.defaultRenderOptions;\n                // Get glyph indexes\n                var chars = arrayFromString(s);\n                var indexes = [];\n                for (var i = 0; i < chars.length; i += 1) {\n                  var c = chars[i];\n                  indexes.push(this$1.charToGlyphIndex(c));\n                }\n                var length = indexes.length;\n\n                // Apply substitutions on glyph indexes\n                if (options.features) {\n                  var script = options.script || this.substitution.getDefaultScriptName();\n                  var manyToOne = [];\n                  if (options.features.liga) {\n                    manyToOne = manyToOne.concat(\n                      this.substitution.getFeature('liga', script, options.language)\n                    );\n                  }\n                  if (options.features.rlig) {\n                    manyToOne = manyToOne.concat(\n                      this.substitution.getFeature('rlig', script, options.language)\n                    );\n                  }\n                  for (var i$1 = 0; i$1 < length; i$1 += 1) {\n                    for (var j = 0; j < manyToOne.length; j++) {\n                      var ligature = manyToOne[j];\n                      var components = ligature.sub;\n                      var compCount = components.length;\n                      var k = 0;\n                      while (k < compCount && components[k] === indexes[i$1 + k]) {\n                        k++;\n                      }\n                      if (k === compCount) {\n                        indexes.splice(i$1, compCount, ligature.by);\n                        length = length - compCount + 1;\n                      }\n                    }\n                  }\n                }\n\n                // convert glyph indexes to glyph objects\n                var glyphs = new Array(length);\n                var notdef = this.glyphs.get(0);\n                for (var i$2 = 0; i$2 < length; i$2 += 1) {\n                  glyphs[i$2] = this$1.glyphs.get(indexes[i$2]) || notdef;\n                }\n                return glyphs;\n              };\n\n              /**\n               * @param  {string}\n               * @return {Number}\n               */\n              Font.prototype.nameToGlyphIndex = function(name) {\n                return this.glyphNames.nameToGlyphIndex(name);\n              };\n\n              /**\n               * @param  {string}\n               * @return {opentype.Glyph}\n               */\n              Font.prototype.nameToGlyph = function(name) {\n                var glyphIndex = this.nameToGlyphIndex(name);\n                var glyph = this.glyphs.get(glyphIndex);\n                if (!glyph) {\n                  // .notdef\n                  glyph = this.glyphs.get(0);\n                }\n\n                return glyph;\n              };\n\n              /**\n               * @param  {Number}\n               * @return {String}\n               */\n              Font.prototype.glyphIndexToName = function(gid) {\n                if (!this.glyphNames.glyphIndexToName) {\n                  return '';\n                }\n\n                return this.glyphNames.glyphIndexToName(gid);\n              };\n\n              /**\n               * Retrieve the value of the kerning pair between the left glyph (or its index)\n               * and the right glyph (or its index). If no kerning pair is found, return 0.\n               * The kerning value gets added to the advance width when calculating the spacing\n               * between glyphs.\n               * For GPOS kerning, this method uses the default script and language, which covers\n               * most use cases. To have greater control, use font.position.getKerningValue .\n               * @param  {opentype.Glyph} leftGlyph\n               * @param  {opentype.Glyph} rightGlyph\n               * @return {Number}\n               */\n              Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n                leftGlyph = leftGlyph.index || leftGlyph;\n                rightGlyph = rightGlyph.index || rightGlyph;\n                var gposKerning = this.position.defaultKerningTables;\n                if (gposKerning) {\n                  return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n                }\n                // \"kern\" table\n                return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n              };\n\n              /**\n               * @typedef GlyphRenderOptions\n               * @type Object\n               * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n               *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n               * @property {string} [language='dflt'] - language system used to determine which features to apply.\n               *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n               * @property {boolean} [kerning=true] - whether to include kerning values\n               * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n               *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n               */\n              Font.prototype.defaultRenderOptions = {\n                kerning: true,\n                features: {\n                  liga: true,\n                  rlig: true\n                }\n              };\n\n              /**\n               * Helper function that invokes the given callback for each glyph in the given text.\n               * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n               * @param {string} text - The text to apply.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               * @param  {Function} callback\n               */\n              Font.prototype.forEachGlyph = function(\n                text,\n                x,\n                y,\n                fontSize,\n                options,\n                callback\n              ) {\n                var this$1 = this;\n\n                x = x !== undefined ? x : 0;\n                y = y !== undefined ? y : 0;\n                fontSize = fontSize !== undefined ? fontSize : 72;\n                options = options || this.defaultRenderOptions;\n                var fontScale = 1 / this.unitsPerEm * fontSize;\n                var glyphs = this.stringToGlyphs(text, options);\n                var kerningLookups;\n                if (options.kerning) {\n                  var script = options.script || this.position.getDefaultScriptName();\n                  kerningLookups = this.position.getKerningTables(script, options.language);\n                }\n                for (var i = 0; i < glyphs.length; i += 1) {\n                  var glyph = glyphs[i];\n                  callback.call(this$1, glyph, x, y, fontSize, options);\n                  if (glyph.advanceWidth) {\n                    x += glyph.advanceWidth * fontScale;\n                  }\n\n                  if (options.kerning && i < glyphs.length - 1) {\n                    // We should apply position adjustment lookups in a more generic way.\n                    // Here we only use the xAdvance value.\n                    var kerningValue = kerningLookups\n                      ? this$1.position.getKerningValue(\n                          kerningLookups,\n                          glyph.index,\n                          glyphs[i + 1].index\n                        )\n                      : this$1.getKerningValue(glyph, glyphs[i + 1]);\n                    x += kerningValue * fontScale;\n                  }\n\n                  if (options.letterSpacing) {\n                    x += options.letterSpacing * fontSize;\n                  } else if (options.tracking) {\n                    x += options.tracking / 1000 * fontSize;\n                  }\n                }\n                return x;\n              };\n\n              /**\n               * Create a Path object that represents the given text.\n               * @param  {string} text - The text to create.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               * @return {opentype.Path}\n               */\n              Font.prototype.getPath = function(text, x, y, fontSize, options) {\n                var fullPath = new Path();\n                this.forEachGlyph(text, x, y, fontSize, options, function(\n                  glyph,\n                  gX,\n                  gY,\n                  gFontSize\n                ) {\n                  var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n                  fullPath.extend(glyphPath);\n                });\n                return fullPath;\n              };\n\n              /**\n               * Create an array of Path objects that represent the glyphs of a given text.\n               * @param  {string} text - The text to create.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               * @return {opentype.Path[]}\n               */\n              Font.prototype.getPaths = function(text, x, y, fontSize, options) {\n                var glyphPaths = [];\n                this.forEachGlyph(text, x, y, fontSize, options, function(\n                  glyph,\n                  gX,\n                  gY,\n                  gFontSize\n                ) {\n                  var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n                  glyphPaths.push(glyphPath);\n                });\n\n                return glyphPaths;\n              };\n\n              /**\n               * Returns the advance width of a text.\n               *\n               * This is something different than Path.getBoundingBox() as for example a\n               * suffixed whitespace increases the advanceWidth but not the bounding box\n               * or an overhanging letter like a calligraphic 'f' might have a quite larger\n               * bounding box than its advance width.\n               *\n               * This corresponds to canvas2dContext.measureText(text).width\n               *\n               * @param  {string} text - The text to create.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               * @return advance width\n               */\n              Font.prototype.getAdvanceWidth = function(text, fontSize, options) {\n                return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n              };\n\n              /**\n               * Draw the text on the given drawing context.\n               * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param  {string} text - The text to create.\n               * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param  {GlyphRenderOptions=} options\n               */\n              Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n                this.getPath(text, x, y, fontSize, options).draw(ctx);\n              };\n\n              /**\n               * Draw the points of all glyphs in the text.\n               * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n               * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param {string} text - The text to create.\n               * @param {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param {GlyphRenderOptions=} options\n               */\n              Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n                this.forEachGlyph(text, x, y, fontSize, options, function(\n                  glyph,\n                  gX,\n                  gY,\n                  gFontSize\n                ) {\n                  glyph.drawPoints(ctx, gX, gY, gFontSize);\n                });\n              };\n\n              /**\n               * Draw lines indicating important font measurements for all glyphs in the text.\n               * Black lines indicate the origin of the coordinate system (point 0,0).\n               * Blue lines indicate the glyph bounding box.\n               * Green line indicates the advance width of the glyph.\n               * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n               * @param {string} text - The text to create.\n               * @param {number} [x=0] - Horizontal position of the beginning of the text.\n               * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n               * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n               * @param {GlyphRenderOptions=} options\n               */\n              Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n                this.forEachGlyph(text, x, y, fontSize, options, function(\n                  glyph,\n                  gX,\n                  gY,\n                  gFontSize\n                ) {\n                  glyph.drawMetrics(ctx, gX, gY, gFontSize);\n                });\n              };\n\n              /**\n               * @param  {string}\n               * @return {string}\n               */\n              Font.prototype.getEnglishName = function(name) {\n                var translations = this.names[name];\n                if (translations) {\n                  return translations.en;\n                }\n              };\n\n              /**\n               * Validate\n               */\n              Font.prototype.validate = function() {\n                var _this = this;\n\n                function assert(predicate, message) {}\n\n                function assertNamePresent(name) {\n                  var englishName = _this.getEnglishName(name);\n                  assert(\n                    englishName && englishName.trim().length > 0,\n                    'No English ' + name + ' specified.'\n                  );\n                }\n\n                // Identification information\n                assertNamePresent('fontFamily');\n                assertNamePresent('weightName');\n                assertNamePresent('manufacturer');\n                assertNamePresent('copyright');\n                assertNamePresent('version');\n\n                // Dimension information\n                assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n              };\n\n              /**\n               * Convert the font object to a SFNT data structure.\n               * This structure contains all the necessary tables and metadata to create a binary OTF file.\n               * @return {opentype.Table}\n               */\n              Font.prototype.toTables = function() {\n                return sfnt.fontToTable(this);\n              };\n              /**\n               * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n               */\n              Font.prototype.toBuffer = function() {\n                console.warn(\n                  'Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.'\n                );\n                return this.toArrayBuffer();\n              };\n              /**\n               * Converts a `opentype.Font` into an `ArrayBuffer`\n               * @return {ArrayBuffer}\n               */\n              Font.prototype.toArrayBuffer = function() {\n                var sfntTable = this.toTables();\n                var bytes = sfntTable.encode();\n                var buffer = new ArrayBuffer(bytes.length);\n                var intArray = new Uint8Array(buffer);\n                for (var i = 0; i < bytes.length; i++) {\n                  intArray[i] = bytes[i];\n                }\n\n                return buffer;\n              };\n\n              /**\n               * Initiate a download of the OpenType font.\n               */\n              Font.prototype.download = function(fileName) {\n                var familyName = this.getEnglishName('fontFamily');\n                var styleName = this.getEnglishName('fontSubfamily');\n                fileName =\n                  fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n                var arrayBuffer = this.toArrayBuffer();\n\n                if (isBrowser()) {\n                  window.requestFileSystem =\n                    window.requestFileSystem || window.webkitRequestFileSystem;\n                  window.requestFileSystem(\n                    window.TEMPORARY,\n                    arrayBuffer.byteLength,\n                    function(fs) {\n                      fs.root.getFile(fileName, { create: true }, function(fileEntry) {\n                        fileEntry.createWriter(function(writer) {\n                          var dataView = new DataView(arrayBuffer);\n                          var blob = new Blob([dataView], { type: 'font/opentype' });\n                          writer.write(blob);\n\n                          writer.addEventListener(\n                            'writeend',\n                            function() {\n                              // Navigating to the file will download it.\n                              location.href = fileEntry.toURL();\n                            },\n                            false\n                          );\n                        });\n                      });\n                    },\n                    function(err) {\n                      throw new Error(err.name + ': ' + err.message);\n                    }\n                  );\n                } else {\n                  var fs = _dereq_('fs');\n                  var buffer = arrayBufferToNodeBuffer(arrayBuffer);\n                  fs.writeFileSync(fileName, buffer);\n                }\n              };\n              /**\n               * @private\n               */\n              Font.prototype.fsSelectionValues = {\n                ITALIC: 0x001, //1\n                UNDERSCORE: 0x002, //2\n                NEGATIVE: 0x004, //4\n                OUTLINED: 0x008, //8\n                STRIKEOUT: 0x010, //16\n                BOLD: 0x020, //32\n                REGULAR: 0x040, //64\n                USER_TYPO_METRICS: 0x080, //128\n                WWS: 0x100, //256\n                OBLIQUE: 0x200 //512\n              };\n\n              /**\n               * @private\n               */\n              Font.prototype.usWidthClasses = {\n                ULTRA_CONDENSED: 1,\n                EXTRA_CONDENSED: 2,\n                CONDENSED: 3,\n                SEMI_CONDENSED: 4,\n                MEDIUM: 5,\n                SEMI_EXPANDED: 6,\n                EXPANDED: 7,\n                EXTRA_EXPANDED: 8,\n                ULTRA_EXPANDED: 9\n              };\n\n              /**\n               * @private\n               */\n              Font.prototype.usWeightClasses = {\n                THIN: 100,\n                EXTRA_LIGHT: 200,\n                LIGHT: 300,\n                NORMAL: 400,\n                MEDIUM: 500,\n                SEMI_BOLD: 600,\n                BOLD: 700,\n                EXTRA_BOLD: 800,\n                BLACK: 900\n              };\n\n              // The `fvar` table stores font variation axes and instances.\n\n              function addName(name, names) {\n                var nameString = JSON.stringify(name);\n                var nameID = 256;\n                for (var nameKey in names) {\n                  var n = parseInt(nameKey);\n                  if (!n || n < 256) {\n                    continue;\n                  }\n\n                  if (JSON.stringify(names[nameKey]) === nameString) {\n                    return n;\n                  }\n\n                  if (nameID <= n) {\n                    nameID = n + 1;\n                  }\n                }\n\n                names[nameID] = name;\n                return nameID;\n              }\n\n              function makeFvarAxis(n, axis, names) {\n                var nameID = addName(axis.name, names);\n                return [\n                  { name: 'tag_' + n, type: 'TAG', value: axis.tag },\n                  { name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16 },\n                  {\n                    name: 'defaultValue_' + n,\n                    type: 'FIXED',\n                    value: axis.defaultValue << 16\n                  },\n                  { name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16 },\n                  { name: 'flags_' + n, type: 'USHORT', value: 0 },\n                  { name: 'nameID_' + n, type: 'USHORT', value: nameID }\n                ];\n              }\n\n              function parseFvarAxis(data, start, names) {\n                var axis = {};\n                var p = new parse.Parser(data, start);\n                axis.tag = p.parseTag();\n                axis.minValue = p.parseFixed();\n                axis.defaultValue = p.parseFixed();\n                axis.maxValue = p.parseFixed();\n                p.skip('uShort', 1); // reserved for flags; no values defined\n                axis.name = names[p.parseUShort()] || {};\n                return axis;\n              }\n\n              function makeFvarInstance(n, inst, axes, names) {\n                var nameID = addName(inst.name, names);\n                var fields = [\n                  { name: 'nameID_' + n, type: 'USHORT', value: nameID },\n                  { name: 'flags_' + n, type: 'USHORT', value: 0 }\n                ];\n\n                for (var i = 0; i < axes.length; ++i) {\n                  var axisTag = axes[i].tag;\n                  fields.push({\n                    name: 'axis_' + n + ' ' + axisTag,\n                    type: 'FIXED',\n                    value: inst.coordinates[axisTag] << 16\n                  });\n                }\n\n                return fields;\n              }\n\n              function parseFvarInstance(data, start, axes, names) {\n                var inst = {};\n                var p = new parse.Parser(data, start);\n                inst.name = names[p.parseUShort()] || {};\n                p.skip('uShort', 1); // reserved for flags; no values defined\n\n                inst.coordinates = {};\n                for (var i = 0; i < axes.length; ++i) {\n                  inst.coordinates[axes[i].tag] = p.parseFixed();\n                }\n\n                return inst;\n              }\n\n              function makeFvarTable(fvar, names) {\n                var result = new table.Table('fvar', [\n                  { name: 'version', type: 'ULONG', value: 0x10000 },\n                  { name: 'offsetToData', type: 'USHORT', value: 0 },\n                  { name: 'countSizePairs', type: 'USHORT', value: 2 },\n                  { name: 'axisCount', type: 'USHORT', value: fvar.axes.length },\n                  { name: 'axisSize', type: 'USHORT', value: 20 },\n                  { name: 'instanceCount', type: 'USHORT', value: fvar.instances.length },\n                  { name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4 }\n                ]);\n                result.offsetToData = result.sizeOf();\n\n                for (var i = 0; i < fvar.axes.length; i++) {\n                  result.fields = result.fields.concat(\n                    makeFvarAxis(i, fvar.axes[i], names)\n                  );\n                }\n\n                for (var j = 0; j < fvar.instances.length; j++) {\n                  result.fields = result.fields.concat(\n                    makeFvarInstance(j, fvar.instances[j], fvar.axes, names)\n                  );\n                }\n\n                return result;\n              }\n\n              function parseFvarTable(data, start, names) {\n                var p = new parse.Parser(data, start);\n                var tableVersion = p.parseULong();\n                check.argument(\n                  tableVersion === 0x00010000,\n                  'Unsupported fvar table version.'\n                );\n                var offsetToData = p.parseOffset16();\n                // Skip countSizePairs.\n                p.skip('uShort', 1);\n                var axisCount = p.parseUShort();\n                var axisSize = p.parseUShort();\n                var instanceCount = p.parseUShort();\n                var instanceSize = p.parseUShort();\n\n                var axes = [];\n                for (var i = 0; i < axisCount; i++) {\n                  axes.push(\n                    parseFvarAxis(data, start + offsetToData + i * axisSize, names)\n                  );\n                }\n\n                var instances = [];\n                var instanceStart = start + offsetToData + axisCount * axisSize;\n                for (var j = 0; j < instanceCount; j++) {\n                  instances.push(\n                    parseFvarInstance(data, instanceStart + j * instanceSize, axes, names)\n                  );\n                }\n\n                return { axes: axes, instances: instances };\n              }\n\n              var fvar = { make: makeFvarTable, parse: parseFvarTable };\n\n              // The `GPOS` table contains kerning pairs, among other things.\n\n              var subtableParsers$1 = new Array(10); // subtableParsers[0] is unused\n\n              // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n              // this = Parser instance\n              subtableParsers$1[1] = function parseLookup1() {\n                var start = this.offset + this.relativeOffset;\n                var posformat = this.parseUShort();\n                if (posformat === 1) {\n                  return {\n                    posFormat: 1,\n                    coverage: this.parsePointer(Parser.coverage),\n                    value: this.parseValueRecord()\n                  };\n                } else if (posformat === 2) {\n                  return {\n                    posFormat: 2,\n                    coverage: this.parsePointer(Parser.coverage),\n                    values: this.parseValueRecordList()\n                  };\n                }\n                check.assert(\n                  false,\n                  '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.'\n                );\n              };\n\n              // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\n              subtableParsers$1[2] = function parseLookup2() {\n                var start = this.offset + this.relativeOffset;\n                var posFormat = this.parseUShort();\n                check.assert(\n                  posFormat === 1 || posFormat === 2,\n                  '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.'\n                );\n                var coverage = this.parsePointer(Parser.coverage);\n                var valueFormat1 = this.parseUShort();\n                var valueFormat2 = this.parseUShort();\n                if (posFormat === 1) {\n                  // Adjustments for Glyph Pairs\n                  return {\n                    posFormat: posFormat,\n                    coverage: coverage,\n                    valueFormat1: valueFormat1,\n                    valueFormat2: valueFormat2,\n                    pairSets: this.parseList(\n                      Parser.pointer(\n                        Parser.list(function() {\n                          return {\n                            // pairValueRecord\n                            secondGlyph: this.parseUShort(),\n                            value1: this.parseValueRecord(valueFormat1),\n                            value2: this.parseValueRecord(valueFormat2)\n                          };\n                        })\n                      )\n                    )\n                  };\n                } else if (posFormat === 2) {\n                  var classDef1 = this.parsePointer(Parser.classDef);\n                  var classDef2 = this.parsePointer(Parser.classDef);\n                  var class1Count = this.parseUShort();\n                  var class2Count = this.parseUShort();\n                  return {\n                    // Class Pair Adjustment\n                    posFormat: posFormat,\n                    coverage: coverage,\n                    valueFormat1: valueFormat1,\n                    valueFormat2: valueFormat2,\n                    classDef1: classDef1,\n                    classDef2: classDef2,\n                    class1Count: class1Count,\n                    class2Count: class2Count,\n                    classRecords: this.parseList(\n                      class1Count,\n                      Parser.list(class2Count, function() {\n                        return {\n                          value1: this.parseValueRecord(valueFormat1),\n                          value2: this.parseValueRecord(valueFormat2)\n                        };\n                      })\n                    )\n                  };\n                }\n              };\n\n              subtableParsers$1[3] = function parseLookup3() {\n                return { error: 'GPOS Lookup 3 not supported' };\n              };\n              subtableParsers$1[4] = function parseLookup4() {\n                return { error: 'GPOS Lookup 4 not supported' };\n              };\n              subtableParsers$1[5] = function parseLookup5() {\n                return { error: 'GPOS Lookup 5 not supported' };\n              };\n              subtableParsers$1[6] = function parseLookup6() {\n                return { error: 'GPOS Lookup 6 not supported' };\n              };\n              subtableParsers$1[7] = function parseLookup7() {\n                return { error: 'GPOS Lookup 7 not supported' };\n              };\n              subtableParsers$1[8] = function parseLookup8() {\n                return { error: 'GPOS Lookup 8 not supported' };\n              };\n              subtableParsers$1[9] = function parseLookup9() {\n                return { error: 'GPOS Lookup 9 not supported' };\n              };\n\n              // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\n              function parseGposTable(data, start) {\n                start = start || 0;\n                var p = new Parser(data, start);\n                var tableVersion = p.parseVersion(1);\n                check.argument(\n                  tableVersion === 1 || tableVersion === 1.1,\n                  'Unsupported GPOS table version ' + tableVersion\n                );\n\n                if (tableVersion === 1) {\n                  return {\n                    version: tableVersion,\n                    scripts: p.parseScriptList(),\n                    features: p.parseFeatureList(),\n                    lookups: p.parseLookupList(subtableParsers$1)\n                  };\n                } else {\n                  return {\n                    version: tableVersion,\n                    scripts: p.parseScriptList(),\n                    features: p.parseFeatureList(),\n                    lookups: p.parseLookupList(subtableParsers$1),\n                    variations: p.parseFeatureVariationsList()\n                  };\n                }\n              }\n\n              // GPOS Writing //////////////////////////////////////////////\n              // NOT SUPPORTED\n              var subtableMakers$1 = new Array(10);\n\n              function makeGposTable(gpos) {\n                return new table.Table('GPOS', [\n                  { name: 'version', type: 'ULONG', value: 0x10000 },\n                  {\n                    name: 'scripts',\n                    type: 'TABLE',\n                    value: new table.ScriptList(gpos.scripts)\n                  },\n                  {\n                    name: 'features',\n                    type: 'TABLE',\n                    value: new table.FeatureList(gpos.features)\n                  },\n                  {\n                    name: 'lookups',\n                    type: 'TABLE',\n                    value: new table.LookupList(gpos.lookups, subtableMakers$1)\n                  }\n                ]);\n              }\n\n              var gpos = { parse: parseGposTable, make: makeGposTable };\n\n              // The `kern` table contains kerning pairs.\n\n              function parseWindowsKernTable(p) {\n                var pairs = {};\n                // Skip nTables.\n                p.skip('uShort');\n                var subtableVersion = p.parseUShort();\n                check.argument(\n                  subtableVersion === 0,\n                  'Unsupported kern sub-table version.'\n                );\n                // Skip subtableLength, subtableCoverage\n                p.skip('uShort', 2);\n                var nPairs = p.parseUShort();\n                // Skip searchRange, entrySelector, rangeShift.\n                p.skip('uShort', 3);\n                for (var i = 0; i < nPairs; i += 1) {\n                  var leftIndex = p.parseUShort();\n                  var rightIndex = p.parseUShort();\n                  var value = p.parseShort();\n                  pairs[leftIndex + ',' + rightIndex] = value;\n                }\n                return pairs;\n              }\n\n              function parseMacKernTable(p) {\n                var pairs = {};\n                // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n                // Skip the rest.\n                p.skip('uShort');\n                var nTables = p.parseULong();\n                //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n                if (nTables > 1) {\n                  console.warn('Only the first kern subtable is supported.');\n                }\n                p.skip('uLong');\n                var coverage = p.parseUShort();\n                var subtableVersion = coverage & 0xff;\n                p.skip('uShort');\n                if (subtableVersion === 0) {\n                  var nPairs = p.parseUShort();\n                  // Skip searchRange, entrySelector, rangeShift.\n                  p.skip('uShort', 3);\n                  for (var i = 0; i < nPairs; i += 1) {\n                    var leftIndex = p.parseUShort();\n                    var rightIndex = p.parseUShort();\n                    var value = p.parseShort();\n                    pairs[leftIndex + ',' + rightIndex] = value;\n                  }\n                }\n                return pairs;\n              }\n\n              // Parse the `kern` table which contains kerning pairs.\n              function parseKernTable(data, start) {\n                var p = new parse.Parser(data, start);\n                var tableVersion = p.parseUShort();\n                if (tableVersion === 0) {\n                  return parseWindowsKernTable(p);\n                } else if (tableVersion === 1) {\n                  return parseMacKernTable(p);\n                } else {\n                  throw new Error('Unsupported kern table version (' + tableVersion + ').');\n                }\n              }\n\n              var kern = { parse: parseKernTable };\n\n              // The `loca` table stores the offsets to the locations of the glyphs in the font.\n\n              // Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n              // relative to the beginning of the glyphData table.\n              // The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n              // The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n              // version where offsets are stored as uLongs. The `head` table specifies which version to use\n              // (under indexToLocFormat).\n              function parseLocaTable(data, start, numGlyphs, shortVersion) {\n                var p = new parse.Parser(data, start);\n                var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n                // There is an extra entry after the last index element to compute the length of the last glyph.\n                // That's why we use numGlyphs + 1.\n                var glyphOffsets = [];\n                for (var i = 0; i < numGlyphs + 1; i += 1) {\n                  var glyphOffset = parseFn.call(p);\n                  if (shortVersion) {\n                    // The short table version stores the actual offset divided by 2.\n                    glyphOffset *= 2;\n                  }\n\n                  glyphOffsets.push(glyphOffset);\n                }\n\n                return glyphOffsets;\n              }\n\n              var loca = { parse: parseLocaTable };\n\n              // opentype.js\n\n              /**\n               * The opentype library.\n               * @namespace opentype\n               */\n\n              // File loaders /////////////////////////////////////////////////////////\n              /**\n               * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n               * and the font as an ArrayBuffer in the second parameter if it succeeds.\n               * @param  {string} path - The path of the file\n               * @param  {Function} callback - The function to call when the font load completes\n               */\n              function loadFromFile(path, callback) {\n                var fs = _dereq_('fs');\n                fs.readFile(path, function(err, buffer) {\n                  if (err) {\n                    return callback(err.message);\n                  }\n\n                  callback(null, nodeBufferToArrayBuffer(buffer));\n                });\n              }\n              /**\n               * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n               * and the font as an ArrayBuffer in the second parameter if it succeeds.\n               * @param  {string} url - The URL of the font file.\n               * @param  {Function} callback - The function to call when the font load completes\n               */\n              function loadFromUrl(url, callback) {\n                var request = new XMLHttpRequest();\n                request.open('get', url, true);\n                request.responseType = 'arraybuffer';\n                request.onload = function() {\n                  if (request.response) {\n                    return callback(null, request.response);\n                  } else {\n                    return callback('Font could not be loaded: ' + request.statusText);\n                  }\n                };\n\n                request.onerror = function() {\n                  callback('Font could not be loaded');\n                };\n\n                request.send();\n              }\n\n              // Table Directory Entries //////////////////////////////////////////////\n              /**\n               * Parses OpenType table entries.\n               * @param  {DataView}\n               * @param  {Number}\n               * @return {Object[]}\n               */\n              function parseOpenTypeTableEntries(data, numTables) {\n                var tableEntries = [];\n                var p = 12;\n                for (var i = 0; i < numTables; i += 1) {\n                  var tag = parse.getTag(data, p);\n                  var checksum = parse.getULong(data, p + 4);\n                  var offset = parse.getULong(data, p + 8);\n                  var length = parse.getULong(data, p + 12);\n                  tableEntries.push({\n                    tag: tag,\n                    checksum: checksum,\n                    offset: offset,\n                    length: length,\n                    compression: false\n                  });\n                  p += 16;\n                }\n\n                return tableEntries;\n              }\n\n              /**\n               * Parses WOFF table entries.\n               * @param  {DataView}\n               * @param  {Number}\n               * @return {Object[]}\n               */\n              function parseWOFFTableEntries(data, numTables) {\n                var tableEntries = [];\n                var p = 44; // offset to the first table directory entry.\n                for (var i = 0; i < numTables; i += 1) {\n                  var tag = parse.getTag(data, p);\n                  var offset = parse.getULong(data, p + 4);\n                  var compLength = parse.getULong(data, p + 8);\n                  var origLength = parse.getULong(data, p + 12);\n                  var compression = void 0;\n                  if (compLength < origLength) {\n                    compression = 'WOFF';\n                  } else {\n                    compression = false;\n                  }\n\n                  tableEntries.push({\n                    tag: tag,\n                    offset: offset,\n                    compression: compression,\n                    compressedLength: compLength,\n                    length: origLength\n                  });\n                  p += 20;\n                }\n\n                return tableEntries;\n              }\n\n              /**\n               * @typedef TableData\n               * @type Object\n               * @property {DataView} data - The DataView\n               * @property {number} offset - The data offset.\n               */\n\n              /**\n               * @param  {DataView}\n               * @param  {Object}\n               * @return {TableData}\n               */\n              function uncompressTable(data, tableEntry) {\n                if (tableEntry.compression === 'WOFF') {\n                  var inBuffer = new Uint8Array(\n                    data.buffer,\n                    tableEntry.offset + 2,\n                    tableEntry.compressedLength - 2\n                  );\n                  var outBuffer = new Uint8Array(tableEntry.length);\n                  tinyInflate(inBuffer, outBuffer);\n                  if (outBuffer.byteLength !== tableEntry.length) {\n                    throw new Error(\n                      'Decompression error: ' +\n                        tableEntry.tag +\n                        \" decompressed length doesn't match recorded length\"\n                    );\n                  }\n\n                  var view = new DataView(outBuffer.buffer, 0);\n                  return { data: view, offset: 0 };\n                } else {\n                  return { data: data, offset: tableEntry.offset };\n                }\n              }\n\n              // Public API ///////////////////////////////////////////////////////////\n\n              /**\n               * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n               * Throws an error if the font could not be parsed.\n               * @param  {ArrayBuffer}\n               * @return {opentype.Font}\n               */\n              function parseBuffer(buffer) {\n                var indexToLocFormat;\n                var ltagTable;\n\n                // Since the constructor can also be called to create new fonts from scratch, we indicate this\n                // should be an empty font that we'll fill with our own data.\n                var font = new Font({ empty: true });\n\n                // OpenType fonts use big endian byte ordering.\n                // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n                // Instead we use DataViews where we can specify endianness.\n                var data = new DataView(buffer, 0);\n                var numTables;\n                var tableEntries = [];\n                var signature = parse.getTag(data, 0);\n                if (\n                  signature === String.fromCharCode(0, 1, 0, 0) ||\n                  signature === 'true' ||\n                  signature === 'typ1'\n                ) {\n                  font.outlinesFormat = 'truetype';\n                  numTables = parse.getUShort(data, 4);\n                  tableEntries = parseOpenTypeTableEntries(data, numTables);\n                } else if (signature === 'OTTO') {\n                  font.outlinesFormat = 'cff';\n                  numTables = parse.getUShort(data, 4);\n                  tableEntries = parseOpenTypeTableEntries(data, numTables);\n                } else if (signature === 'wOFF') {\n                  var flavor = parse.getTag(data, 4);\n                  if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n                    font.outlinesFormat = 'truetype';\n                  } else if (flavor === 'OTTO') {\n                    font.outlinesFormat = 'cff';\n                  } else {\n                    throw new Error('Unsupported OpenType flavor ' + signature);\n                  }\n\n                  numTables = parse.getUShort(data, 12);\n                  tableEntries = parseWOFFTableEntries(data, numTables);\n                } else {\n                  throw new Error('Unsupported OpenType signature ' + signature);\n                }\n\n                var cffTableEntry;\n                var fvarTableEntry;\n                var glyfTableEntry;\n                var gposTableEntry;\n                var gsubTableEntry;\n                var hmtxTableEntry;\n                var kernTableEntry;\n                var locaTableEntry;\n                var nameTableEntry;\n                var metaTableEntry;\n                var p;\n\n                for (var i = 0; i < numTables; i += 1) {\n                  var tableEntry = tableEntries[i];\n                  var table = void 0;\n                  switch (tableEntry.tag) {\n                    case 'cmap':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.cmap = cmap.parse(table.data, table.offset);\n                      font.encoding = new CmapEncoding(font.tables.cmap);\n                      break;\n                    case 'cvt ':\n                      table = uncompressTable(data, tableEntry);\n                      p = new parse.Parser(table.data, table.offset);\n                      font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                      break;\n                    case 'fvar':\n                      fvarTableEntry = tableEntry;\n                      break;\n                    case 'fpgm':\n                      table = uncompressTable(data, tableEntry);\n                      p = new parse.Parser(table.data, table.offset);\n                      font.tables.fpgm = p.parseByteList(tableEntry.length);\n                      break;\n                    case 'head':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.head = head.parse(table.data, table.offset);\n                      font.unitsPerEm = font.tables.head.unitsPerEm;\n                      indexToLocFormat = font.tables.head.indexToLocFormat;\n                      break;\n                    case 'hhea':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.hhea = hhea.parse(table.data, table.offset);\n                      font.ascender = font.tables.hhea.ascender;\n                      font.descender = font.tables.hhea.descender;\n                      font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                      break;\n                    case 'hmtx':\n                      hmtxTableEntry = tableEntry;\n                      break;\n                    case 'ltag':\n                      table = uncompressTable(data, tableEntry);\n                      ltagTable = ltag.parse(table.data, table.offset);\n                      break;\n                    case 'maxp':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.maxp = maxp.parse(table.data, table.offset);\n                      font.numGlyphs = font.tables.maxp.numGlyphs;\n                      break;\n                    case 'name':\n                      nameTableEntry = tableEntry;\n                      break;\n                    case 'OS/2':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.os2 = os2.parse(table.data, table.offset);\n                      break;\n                    case 'post':\n                      table = uncompressTable(data, tableEntry);\n                      font.tables.post = post.parse(table.data, table.offset);\n                      font.glyphNames = new GlyphNames(font.tables.post);\n                      break;\n                    case 'prep':\n                      table = uncompressTable(data, tableEntry);\n                      p = new parse.Parser(table.data, table.offset);\n                      font.tables.prep = p.parseByteList(tableEntry.length);\n                      break;\n                    case 'glyf':\n                      glyfTableEntry = tableEntry;\n                      break;\n                    case 'loca':\n                      locaTableEntry = tableEntry;\n                      break;\n                    case 'CFF ':\n                      cffTableEntry = tableEntry;\n                      break;\n                    case 'kern':\n                      kernTableEntry = tableEntry;\n                      break;\n                    case 'GPOS':\n                      gposTableEntry = tableEntry;\n                      break;\n                    case 'GSUB':\n                      gsubTableEntry = tableEntry;\n                      break;\n                    case 'meta':\n                      metaTableEntry = tableEntry;\n                      break;\n                  }\n                }\n\n                var nameTable = uncompressTable(data, nameTableEntry);\n                font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);\n                font.names = font.tables.name;\n\n                if (glyfTableEntry && locaTableEntry) {\n                  var shortVersion = indexToLocFormat === 0;\n                  var locaTable = uncompressTable(data, locaTableEntry);\n                  var locaOffsets = loca.parse(\n                    locaTable.data,\n                    locaTable.offset,\n                    font.numGlyphs,\n                    shortVersion\n                  );\n                  var glyfTable = uncompressTable(data, glyfTableEntry);\n                  font.glyphs = glyf.parse(\n                    glyfTable.data,\n                    glyfTable.offset,\n                    locaOffsets,\n                    font\n                  );\n                } else if (cffTableEntry) {\n                  var cffTable = uncompressTable(data, cffTableEntry);\n                  cff.parse(cffTable.data, cffTable.offset, font);\n                } else {\n                  throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n                }\n\n                var hmtxTable = uncompressTable(data, hmtxTableEntry);\n                hmtx.parse(\n                  hmtxTable.data,\n                  hmtxTable.offset,\n                  font.numberOfHMetrics,\n                  font.numGlyphs,\n                  font.glyphs\n                );\n                addGlyphNames(font);\n\n                if (kernTableEntry) {\n                  var kernTable = uncompressTable(data, kernTableEntry);\n                  font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n                } else {\n                  font.kerningPairs = {};\n                }\n\n                if (gposTableEntry) {\n                  var gposTable = uncompressTable(data, gposTableEntry);\n                  font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n                  font.position.init();\n                }\n\n                if (gsubTableEntry) {\n                  var gsubTable = uncompressTable(data, gsubTableEntry);\n                  font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n                }\n\n                if (fvarTableEntry) {\n                  var fvarTable = uncompressTable(data, fvarTableEntry);\n                  font.tables.fvar = fvar.parse(\n                    fvarTable.data,\n                    fvarTable.offset,\n                    font.names\n                  );\n                }\n\n                if (metaTableEntry) {\n                  var metaTable = uncompressTable(data, metaTableEntry);\n                  font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n                  font.metas = font.tables.meta;\n                }\n\n                return font;\n              }\n\n              /**\n               * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n               * with two arguments `(err, font)`. The `err` will be null on success,\n               * the `font` is a Font object.\n               * We use the node.js callback convention so that\n               * opentype.js can integrate with frameworks like async.js.\n               * @alias opentype.load\n               * @param  {string} url - The URL of the font to load.\n               * @param  {Function} callback - The callback.\n               */\n              function load(url, callback) {\n                var isNode$$1 = typeof window === 'undefined';\n                var loadFn = isNode$$1 ? loadFromFile : loadFromUrl;\n                loadFn(url, function(err, arrayBuffer) {\n                  if (err) {\n                    return callback(err);\n                  }\n                  var font;\n                  try {\n                    font = parseBuffer(arrayBuffer);\n                  } catch (e) {\n                    return callback(e, null);\n                  }\n                  return callback(null, font);\n                });\n              }\n\n              /**\n               * Synchronously load the font from a URL or file.\n               * When done, returns the font object or throws an error.\n               * @alias opentype.loadSync\n               * @param  {string} url - The URL of the font to load.\n               * @return {opentype.Font}\n               */\n              function loadSync(url) {\n                var fs = _dereq_('fs');\n                var buffer = fs.readFileSync(url);\n                return parseBuffer(nodeBufferToArrayBuffer(buffer));\n              }\n\n              exports.Font = Font;\n              exports.Glyph = Glyph;\n              exports.Path = Path;\n              exports.BoundingBox = BoundingBox;\n              exports._parse = parse;\n              exports.parse = parseBuffer;\n              exports.load = load;\n              exports.loadSync = loadSync;\n\n              Object.defineProperty(exports, '__esModule', { value: true });\n            });\n          }.call(this, _dereq_('buffer').Buffer));\n        },\n        { buffer: 22, fs: 21 }\n      ],\n      35: [\n        function(_dereq_, module, exports) {\n          (function(process) {\n            // .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n            // backported and transplited with Babel, with backwards-compat fixes\n\n            // Copyright Joyent, Inc. and other Node contributors.\n            //\n            // Permission is hereby granted, free of charge, to any person obtaining a\n            // copy of this software and associated documentation files (the\n            // \"Software\"), to deal in the Software without restriction, including\n            // without limitation the rights to use, copy, modify, merge, publish,\n            // distribute, sublicense, and/or sell copies of the Software, and to permit\n            // persons to whom the Software is furnished to do so, subject to the\n            // following conditions:\n            //\n            // The above copyright notice and this permission notice shall be included\n            // in all copies or substantial portions of the Software.\n            //\n            // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n            // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n            // resolves . and .. elements in a path array with directory names there\n            // must be no slashes, empty elements, or device names (c:\\) in the array\n            // (so also no leading and trailing slashes - it does not distinguish\n            // relative and absolute paths)\n            function normalizeArray(parts, allowAboveRoot) {\n              // if the path tries to go above the root, `up` ends up > 0\n              var up = 0;\n              for (var i = parts.length - 1; i >= 0; i--) {\n                var last = parts[i];\n                if (last === '.') {\n                  parts.splice(i, 1);\n                } else if (last === '..') {\n                  parts.splice(i, 1);\n                  up++;\n                } else if (up) {\n                  parts.splice(i, 1);\n                  up--;\n                }\n              }\n\n              // if the path is allowed to go above the root, restore leading ..s\n              if (allowAboveRoot) {\n                for (; up--; up) {\n                  parts.unshift('..');\n                }\n              }\n\n              return parts;\n            }\n\n            // path.resolve([from ...], to)\n            // posix version\n            exports.resolve = function() {\n              var resolvedPath = '',\n                resolvedAbsolute = false;\n\n              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n                var path = i >= 0 ? arguments[i] : process.cwd();\n\n                // Skip empty and invalid entries\n                if (typeof path !== 'string') {\n                  throw new TypeError('Arguments to path.resolve must be strings');\n                } else if (!path) {\n                  continue;\n                }\n\n                resolvedPath = path + '/' + resolvedPath;\n                resolvedAbsolute = path.charAt(0) === '/';\n              }\n\n              // At this point the path should be resolved to a full absolute path, but\n              // handle relative paths to be safe (might happen when process.cwd() fails)\n\n              // Normalize the path\n              resolvedPath = normalizeArray(\n                filter(resolvedPath.split('/'), function(p) {\n                  return !!p;\n                }),\n                !resolvedAbsolute\n              ).join('/');\n\n              return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n            };\n\n            // path.normalize(path)\n            // posix version\n            exports.normalize = function(path) {\n              var isAbsolute = exports.isAbsolute(path),\n                trailingSlash = substr(path, -1) === '/';\n\n              // Normalize the path\n              path = normalizeArray(\n                filter(path.split('/'), function(p) {\n                  return !!p;\n                }),\n                !isAbsolute\n              ).join('/');\n\n              if (!path && !isAbsolute) {\n                path = '.';\n              }\n              if (path && trailingSlash) {\n                path += '/';\n              }\n\n              return (isAbsolute ? '/' : '') + path;\n            };\n\n            // posix version\n            exports.isAbsolute = function(path) {\n              return path.charAt(0) === '/';\n            };\n\n            // posix version\n            exports.join = function() {\n              var paths = Array.prototype.slice.call(arguments, 0);\n              return exports.normalize(\n                filter(paths, function(p, index) {\n                  if (typeof p !== 'string') {\n                    throw new TypeError('Arguments to path.join must be strings');\n                  }\n                  return p;\n                }).join('/')\n              );\n            };\n\n            // path.relative(from, to)\n            // posix version\n            exports.relative = function(from, to) {\n              from = exports.resolve(from).substr(1);\n              to = exports.resolve(to).substr(1);\n\n              function trim(arr) {\n                var start = 0;\n                for (; start < arr.length; start++) {\n                  if (arr[start] !== '') break;\n                }\n\n                var end = arr.length - 1;\n                for (; end >= 0; end--) {\n                  if (arr[end] !== '') break;\n                }\n\n                if (start > end) return [];\n                return arr.slice(start, end - start + 1);\n              }\n\n              var fromParts = trim(from.split('/'));\n              var toParts = trim(to.split('/'));\n\n              var length = Math.min(fromParts.length, toParts.length);\n              var samePartsLength = length;\n              for (var i = 0; i < length; i++) {\n                if (fromParts[i] !== toParts[i]) {\n                  samePartsLength = i;\n                  break;\n                }\n              }\n\n              var outputParts = [];\n              for (var i = samePartsLength; i < fromParts.length; i++) {\n                outputParts.push('..');\n              }\n\n              outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n              return outputParts.join('/');\n            };\n\n            exports.sep = '/';\n            exports.delimiter = ':';\n\n            exports.dirname = function(path) {\n              if (typeof path !== 'string') path = path + '';\n              if (path.length === 0) return '.';\n              var code = path.charCodeAt(0);\n              var hasRoot = code === 47 /*/*/;\n              var end = -1;\n              var matchedSlash = true;\n              for (var i = path.length - 1; i >= 1; --i) {\n                code = path.charCodeAt(i);\n                if (code === 47 /*/*/) {\n                  if (!matchedSlash) {\n                    end = i;\n                    break;\n                  }\n                } else {\n                  // We saw the first non-path separator\n                  matchedSlash = false;\n                }\n              }\n\n              if (end === -1) return hasRoot ? '/' : '.';\n              if (hasRoot && end === 1) {\n                // return '//';\n                // Backwards-compat fix:\n                return '/';\n              }\n              return path.slice(0, end);\n            };\n\n            function basename(path) {\n              if (typeof path !== 'string') path = path + '';\n\n              var start = 0;\n              var end = -1;\n              var matchedSlash = true;\n              var i;\n\n              for (i = path.length - 1; i >= 0; --i) {\n                if (path.charCodeAt(i) === 47 /*/*/) {\n                  // If we reached a path separator that was not part of a set of path\n                  // separators at the end of the string, stop now\n                  if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                  }\n                } else if (end === -1) {\n                  // We saw the first non-path separator, mark this as the end of our\n                  // path component\n                  matchedSlash = false;\n                  end = i + 1;\n                }\n              }\n\n              if (end === -1) return '';\n              return path.slice(start, end);\n            }\n\n            // Uses a mixed approach for backwards-compatibility, as ext behavior changed\n            // in new Node.js versions, so only basename() above is backported here\n            exports.basename = function(path, ext) {\n              var f = basename(path);\n              if (ext && f.substr(-1 * ext.length) === ext) {\n                f = f.substr(0, f.length - ext.length);\n              }\n              return f;\n            };\n\n            exports.extname = function(path) {\n              if (typeof path !== 'string') path = path + '';\n              var startDot = -1;\n              var startPart = 0;\n              var end = -1;\n              var matchedSlash = true;\n              // Track the state of characters (if any) we see before our first dot and\n              // after any path separator we find\n              var preDotState = 0;\n              for (var i = path.length - 1; i >= 0; --i) {\n                var code = path.charCodeAt(i);\n                if (code === 47 /*/*/) {\n                  // If we reached a path separator that was not part of a set of path\n                  // separators at the end of the string, stop now\n                  if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                  }\n                  continue;\n                }\n                if (end === -1) {\n                  // We saw the first non-path separator, mark this as the end of our\n                  // extension\n                  matchedSlash = false;\n                  end = i + 1;\n                }\n                if (code === 46 /*.*/) {\n                  // If this is our first dot, mark it as the start of our extension\n                  if (startDot === -1) startDot = i;\n                  else if (preDotState !== 1) preDotState = 1;\n                } else if (startDot !== -1) {\n                  // We saw a non-dot and non-path separator before our dot, so we should\n                  // have a good chance at having a non-empty extension\n                  preDotState = -1;\n                }\n              }\n\n              if (\n                startDot === -1 ||\n                end === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly '..'\n                (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n              ) {\n                return '';\n              }\n              return path.slice(startDot, end);\n            };\n\n            function filter(xs, f) {\n              if (xs.filter) return xs.filter(f);\n              var res = [];\n              for (var i = 0; i < xs.length; i++) {\n                if (f(xs[i], i, xs)) res.push(xs[i]);\n              }\n              return res;\n            }\n\n            // String.prototype.substr - negative index don't work in IE8\n            var substr =\n               true\n                ? function(str, start, len) {\n                    return str.substr(start, len);\n                  }\n                : 0;\n          }.call(this, _dereq_('_process')));\n        },\n        { _process: 36 }\n      ],\n      36: [\n        function(_dereq_, module, exports) {\n          // shim for using process in browser\n          var process = (module.exports = {});\n\n          // cached from whatever global is present so that test runners that stub it\n          // don't break things.  But we need to wrap it in a try catch in case it is\n          // wrapped in strict mode code which doesn't define any globals.  It's inside a\n          // function because try/catches deoptimize in certain engines.\n\n          var cachedSetTimeout;\n          var cachedClearTimeout;\n\n          function defaultSetTimout() {\n            throw new Error('setTimeout has not been defined');\n          }\n          function defaultClearTimeout() {\n            throw new Error('clearTimeout has not been defined');\n          }\n          (function() {\n            try {\n              if (typeof setTimeout === 'function') {\n                cachedSetTimeout = setTimeout;\n              } else {\n                cachedSetTimeout = defaultSetTimout;\n              }\n            } catch (e) {\n              cachedSetTimeout = defaultSetTimout;\n            }\n            try {\n              if (typeof clearTimeout === 'function') {\n                cachedClearTimeout = clearTimeout;\n              } else {\n                cachedClearTimeout = defaultClearTimeout;\n              }\n            } catch (e) {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          })();\n          function runTimeout(fun) {\n            if (cachedSetTimeout === setTimeout) {\n              //normal enviroments in sane situations\n              return setTimeout(fun, 0);\n            }\n            // if setTimeout wasn't available but was latter defined\n            if (\n              (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&\n              setTimeout\n            ) {\n              cachedSetTimeout = setTimeout;\n              return setTimeout(fun, 0);\n            }\n            try {\n              // when when somebody has screwed with setTimeout but no I.E. maddness\n              return cachedSetTimeout(fun, 0);\n            } catch (e) {\n              try {\n                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n                return cachedSetTimeout.call(null, fun, 0);\n              } catch (e) {\n                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n                return cachedSetTimeout.call(this, fun, 0);\n              }\n            }\n          }\n          function runClearTimeout(marker) {\n            if (cachedClearTimeout === clearTimeout) {\n              //normal enviroments in sane situations\n              return clearTimeout(marker);\n            }\n            // if clearTimeout wasn't available but was latter defined\n            if (\n              (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&\n              clearTimeout\n            ) {\n              cachedClearTimeout = clearTimeout;\n              return clearTimeout(marker);\n            }\n            try {\n              // when when somebody has screwed with setTimeout but no I.E. maddness\n              return cachedClearTimeout(marker);\n            } catch (e) {\n              try {\n                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n                return cachedClearTimeout.call(null, marker);\n              } catch (e) {\n                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n                // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n                return cachedClearTimeout.call(this, marker);\n              }\n            }\n          }\n          var queue = [];\n          var draining = false;\n          var currentQueue;\n          var queueIndex = -1;\n\n          function cleanUpNextTick() {\n            if (!draining || !currentQueue) {\n              return;\n            }\n            draining = false;\n            if (currentQueue.length) {\n              queue = currentQueue.concat(queue);\n            } else {\n              queueIndex = -1;\n            }\n            if (queue.length) {\n              drainQueue();\n            }\n          }\n\n          function drainQueue() {\n            if (draining) {\n              return;\n            }\n            var timeout = runTimeout(cleanUpNextTick);\n            draining = true;\n\n            var len = queue.length;\n            while (len) {\n              currentQueue = queue;\n              queue = [];\n              while (++queueIndex < len) {\n                if (currentQueue) {\n                  currentQueue[queueIndex].run();\n                }\n              }\n              queueIndex = -1;\n              len = queue.length;\n            }\n            currentQueue = null;\n            draining = false;\n            runClearTimeout(timeout);\n          }\n\n          process.nextTick = function(fun) {\n            var args = new Array(arguments.length - 1);\n            if (arguments.length > 1) {\n              for (var i = 1; i < arguments.length; i++) {\n                args[i - 1] = arguments[i];\n              }\n            }\n            queue.push(new Item(fun, args));\n            if (queue.length === 1 && !draining) {\n              runTimeout(drainQueue);\n            }\n          };\n\n          // v8 likes predictible objects\n          function Item(fun, array) {\n            this.fun = fun;\n            this.array = array;\n          }\n          Item.prototype.run = function() {\n            this.fun.apply(null, this.array);\n          };\n          process.title = 'browser';\n          process.browser = true;\n          process.env = {};\n          process.argv = [];\n          process.version = ''; // empty string to avoid regexp issues\n          process.versions = {};\n\n          function noop() {}\n\n          process.on = noop;\n          process.addListener = noop;\n          process.once = noop;\n          process.off = noop;\n          process.removeListener = noop;\n          process.removeAllListeners = noop;\n          process.emit = noop;\n          process.prependListener = noop;\n          process.prependOnceListener = noop;\n\n          process.listeners = function(name) {\n            return [];\n          };\n\n          process.binding = function(name) {\n            throw new Error('process.binding is not supported');\n          };\n\n          process.cwd = function() {\n            return '/';\n          };\n          process.chdir = function(dir) {\n            throw new Error('process.chdir is not supported');\n          };\n          process.umask = function() {\n            return 0;\n          };\n        },\n        {}\n      ],\n      37: [\n        function(_dereq_, module, exports) {\n          (function(self) {\n            'use strict';\n\n            if (self.fetch) {\n              return;\n            }\n\n            var support = {\n              searchParams: 'URLSearchParams' in self,\n              iterable: 'Symbol' in self && 'iterator' in Symbol,\n              blob:\n                'FileReader' in self &&\n                'Blob' in self &&\n                (function() {\n                  try {\n                    new Blob();\n                    return true;\n                  } catch (e) {\n                    return false;\n                  }\n                })(),\n              formData: 'FormData' in self,\n              arrayBuffer: 'ArrayBuffer' in self\n            };\n\n            if (support.arrayBuffer) {\n              var viewClasses = [\n                '[object Int8Array]',\n                '[object Uint8Array]',\n                '[object Uint8ClampedArray]',\n                '[object Int16Array]',\n                '[object Uint16Array]',\n                '[object Int32Array]',\n                '[object Uint32Array]',\n                '[object Float32Array]',\n                '[object Float64Array]'\n              ];\n\n              var isDataView = function(obj) {\n                return obj && DataView.prototype.isPrototypeOf(obj);\n              };\n\n              var isArrayBufferView =\n                ArrayBuffer.isView ||\n                function(obj) {\n                  return (\n                    obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n                  );\n                };\n            }\n\n            function normalizeName(name) {\n              if (typeof name !== 'string') {\n                name = String(name);\n              }\n              if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n                throw new TypeError('Invalid character in header field name');\n              }\n              return name.toLowerCase();\n            }\n\n            function normalizeValue(value) {\n              if (typeof value !== 'string') {\n                value = String(value);\n              }\n              return value;\n            }\n\n            // Build a destructive iterator for the value list\n            function iteratorFor(items) {\n              var iterator = {\n                next: function() {\n                  var value = items.shift();\n                  return { done: value === undefined, value: value };\n                }\n              };\n\n              if (support.iterable) {\n                iterator[Symbol.iterator] = function() {\n                  return iterator;\n                };\n              }\n\n              return iterator;\n            }\n\n            function Headers(headers) {\n              this.map = {};\n\n              if (headers instanceof Headers) {\n                headers.forEach(function(value, name) {\n                  this.append(name, value);\n                }, this);\n              } else if (Array.isArray(headers)) {\n                headers.forEach(function(header) {\n                  this.append(header[0], header[1]);\n                }, this);\n              } else if (headers) {\n                Object.getOwnPropertyNames(headers).forEach(function(name) {\n                  this.append(name, headers[name]);\n                }, this);\n              }\n            }\n\n            Headers.prototype.append = function(name, value) {\n              name = normalizeName(name);\n              value = normalizeValue(value);\n              var oldValue = this.map[name];\n              this.map[name] = oldValue ? oldValue + ',' + value : value;\n            };\n\n            Headers.prototype['delete'] = function(name) {\n              delete this.map[normalizeName(name)];\n            };\n\n            Headers.prototype.get = function(name) {\n              name = normalizeName(name);\n              return this.has(name) ? this.map[name] : null;\n            };\n\n            Headers.prototype.has = function(name) {\n              return this.map.hasOwnProperty(normalizeName(name));\n            };\n\n            Headers.prototype.set = function(name, value) {\n              this.map[normalizeName(name)] = normalizeValue(value);\n            };\n\n            Headers.prototype.forEach = function(callback, thisArg) {\n              for (var name in this.map) {\n                if (this.map.hasOwnProperty(name)) {\n                  callback.call(thisArg, this.map[name], name, this);\n                }\n              }\n            };\n\n            Headers.prototype.keys = function() {\n              var items = [];\n              this.forEach(function(value, name) {\n                items.push(name);\n              });\n              return iteratorFor(items);\n            };\n\n            Headers.prototype.values = function() {\n              var items = [];\n              this.forEach(function(value) {\n                items.push(value);\n              });\n              return iteratorFor(items);\n            };\n\n            Headers.prototype.entries = function() {\n              var items = [];\n              this.forEach(function(value, name) {\n                items.push([name, value]);\n              });\n              return iteratorFor(items);\n            };\n\n            if (support.iterable) {\n              Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n            }\n\n            function consumed(body) {\n              if (body.bodyUsed) {\n                return Promise.reject(new TypeError('Already read'));\n              }\n              body.bodyUsed = true;\n            }\n\n            function fileReaderReady(reader) {\n              return new Promise(function(resolve, reject) {\n                reader.onload = function() {\n                  resolve(reader.result);\n                };\n                reader.onerror = function() {\n                  reject(reader.error);\n                };\n              });\n            }\n\n            function readBlobAsArrayBuffer(blob) {\n              var reader = new FileReader();\n              var promise = fileReaderReady(reader);\n              reader.readAsArrayBuffer(blob);\n              return promise;\n            }\n\n            function readBlobAsText(blob) {\n              var reader = new FileReader();\n              var promise = fileReaderReady(reader);\n              reader.readAsText(blob);\n              return promise;\n            }\n\n            function readArrayBufferAsText(buf) {\n              var view = new Uint8Array(buf);\n              var chars = new Array(view.length);\n\n              for (var i = 0; i < view.length; i++) {\n                chars[i] = String.fromCharCode(view[i]);\n              }\n              return chars.join('');\n            }\n\n            function bufferClone(buf) {\n              if (buf.slice) {\n                return buf.slice(0);\n              } else {\n                var view = new Uint8Array(buf.byteLength);\n                view.set(new Uint8Array(buf));\n                return view.buffer;\n              }\n            }\n\n            function Body() {\n              this.bodyUsed = false;\n\n              this._initBody = function(body) {\n                this._bodyInit = body;\n                if (!body) {\n                  this._bodyText = '';\n                } else if (typeof body === 'string') {\n                  this._bodyText = body;\n                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n                  this._bodyBlob = body;\n                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n                  this._bodyFormData = body;\n                } else if (\n                  support.searchParams &&\n                  URLSearchParams.prototype.isPrototypeOf(body)\n                ) {\n                  this._bodyText = body.toString();\n                } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n                  this._bodyArrayBuffer = bufferClone(body.buffer);\n                  // IE 10-11 can't handle a DataView body.\n                  this._bodyInit = new Blob([this._bodyArrayBuffer]);\n                } else if (\n                  support.arrayBuffer &&\n                  (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))\n                ) {\n                  this._bodyArrayBuffer = bufferClone(body);\n                } else {\n                  throw new Error('unsupported BodyInit type');\n                }\n\n                if (!this.headers.get('content-type')) {\n                  if (typeof body === 'string') {\n                    this.headers.set('content-type', 'text/plain;charset=UTF-8');\n                  } else if (this._bodyBlob && this._bodyBlob.type) {\n                    this.headers.set('content-type', this._bodyBlob.type);\n                  } else if (\n                    support.searchParams &&\n                    URLSearchParams.prototype.isPrototypeOf(body)\n                  ) {\n                    this.headers.set(\n                      'content-type',\n                      'application/x-www-form-urlencoded;charset=UTF-8'\n                    );\n                  }\n                }\n              };\n\n              if (support.blob) {\n                this.blob = function() {\n                  var rejected = consumed(this);\n                  if (rejected) {\n                    return rejected;\n                  }\n\n                  if (this._bodyBlob) {\n                    return Promise.resolve(this._bodyBlob);\n                  } else if (this._bodyArrayBuffer) {\n                    return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n                  } else if (this._bodyFormData) {\n                    throw new Error('could not read FormData body as blob');\n                  } else {\n                    return Promise.resolve(new Blob([this._bodyText]));\n                  }\n                };\n\n                this.arrayBuffer = function() {\n                  if (this._bodyArrayBuffer) {\n                    return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n                  } else {\n                    return this.blob().then(readBlobAsArrayBuffer);\n                  }\n                };\n              }\n\n              this.text = function() {\n                var rejected = consumed(this);\n                if (rejected) {\n                  return rejected;\n                }\n\n                if (this._bodyBlob) {\n                  return readBlobAsText(this._bodyBlob);\n                } else if (this._bodyArrayBuffer) {\n                  return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n                } else if (this._bodyFormData) {\n                  throw new Error('could not read FormData body as text');\n                } else {\n                  return Promise.resolve(this._bodyText);\n                }\n              };\n\n              if (support.formData) {\n                this.formData = function() {\n                  return this.text().then(decode);\n                };\n              }\n\n              this.json = function() {\n                return this.text().then(JSON.parse);\n              };\n\n              return this;\n            }\n\n            // HTTP methods whose capitalization should be normalized\n            var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n            function normalizeMethod(method) {\n              var upcased = method.toUpperCase();\n              return methods.indexOf(upcased) > -1 ? upcased : method;\n            }\n\n            function Request(input, options) {\n              options = options || {};\n              var body = options.body;\n\n              if (input instanceof Request) {\n                if (input.bodyUsed) {\n                  throw new TypeError('Already read');\n                }\n                this.url = input.url;\n                this.credentials = input.credentials;\n                if (!options.headers) {\n                  this.headers = new Headers(input.headers);\n                }\n                this.method = input.method;\n                this.mode = input.mode;\n                if (!body && input._bodyInit != null) {\n                  body = input._bodyInit;\n                  input.bodyUsed = true;\n                }\n              } else {\n                this.url = String(input);\n              }\n\n              this.credentials = options.credentials || this.credentials || 'omit';\n              if (options.headers || !this.headers) {\n                this.headers = new Headers(options.headers);\n              }\n              this.method = normalizeMethod(options.method || this.method || 'GET');\n              this.mode = options.mode || this.mode || null;\n              this.referrer = null;\n\n              if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n                throw new TypeError('Body not allowed for GET or HEAD requests');\n              }\n              this._initBody(body);\n            }\n\n            Request.prototype.clone = function() {\n              return new Request(this, { body: this._bodyInit });\n            };\n\n            function decode(body) {\n              var form = new FormData();\n              body\n                .trim()\n                .split('&')\n                .forEach(function(bytes) {\n                  if (bytes) {\n                    var split = bytes.split('=');\n                    var name = split.shift().replace(/\\+/g, ' ');\n                    var value = split.join('=').replace(/\\+/g, ' ');\n                    form.append(decodeURIComponent(name), decodeURIComponent(value));\n                  }\n                });\n              return form;\n            }\n\n            function parseHeaders(rawHeaders) {\n              var headers = new Headers();\n              // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n              // https://tools.ietf.org/html/rfc7230#section-3.2\n              var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n              preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n                var parts = line.split(':');\n                var key = parts.shift().trim();\n                if (key) {\n                  var value = parts.join(':').trim();\n                  headers.append(key, value);\n                }\n              });\n              return headers;\n            }\n\n            Body.call(Request.prototype);\n\n            function Response(bodyInit, options) {\n              if (!options) {\n                options = {};\n              }\n\n              this.type = 'default';\n              this.status = options.status === undefined ? 200 : options.status;\n              this.ok = this.status >= 200 && this.status < 300;\n              this.statusText = 'statusText' in options ? options.statusText : 'OK';\n              this.headers = new Headers(options.headers);\n              this.url = options.url || '';\n              this._initBody(bodyInit);\n            }\n\n            Body.call(Response.prototype);\n\n            Response.prototype.clone = function() {\n              return new Response(this._bodyInit, {\n                status: this.status,\n                statusText: this.statusText,\n                headers: new Headers(this.headers),\n                url: this.url\n              });\n            };\n\n            Response.error = function() {\n              var response = new Response(null, { status: 0, statusText: '' });\n              response.type = 'error';\n              return response;\n            };\n\n            var redirectStatuses = [301, 302, 303, 307, 308];\n\n            Response.redirect = function(url, status) {\n              if (redirectStatuses.indexOf(status) === -1) {\n                throw new RangeError('Invalid status code');\n              }\n\n              return new Response(null, { status: status, headers: { location: url } });\n            };\n\n            self.Headers = Headers;\n            self.Request = Request;\n            self.Response = Response;\n\n            self.fetch = function(input, init) {\n              return new Promise(function(resolve, reject) {\n                var request = new Request(input, init);\n                var xhr = new XMLHttpRequest();\n\n                xhr.onload = function() {\n                  var options = {\n                    status: xhr.status,\n                    statusText: xhr.statusText,\n                    headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n                  };\n                  options.url =\n                    'responseURL' in xhr\n                      ? xhr.responseURL\n                      : options.headers.get('X-Request-URL');\n                  var body = 'response' in xhr ? xhr.response : xhr.responseText;\n                  resolve(new Response(body, options));\n                };\n\n                xhr.onerror = function() {\n                  reject(new TypeError('Network request failed'));\n                };\n\n                xhr.ontimeout = function() {\n                  reject(new TypeError('Network request failed'));\n                };\n\n                xhr.open(request.method, request.url, true);\n\n                if (request.credentials === 'include') {\n                  xhr.withCredentials = true;\n                } else if (request.credentials === 'omit') {\n                  xhr.withCredentials = false;\n                }\n\n                if ('responseType' in xhr && support.blob) {\n                  xhr.responseType = 'blob';\n                }\n\n                request.headers.forEach(function(value, name) {\n                  xhr.setRequestHeader(name, value);\n                });\n\n                xhr.send(\n                  typeof request._bodyInit === 'undefined' ? null : request._bodyInit\n                );\n              });\n            };\n            self.fetch.polyfill = true;\n          })(typeof self !== 'undefined' ? self : this);\n        },\n        {}\n      ],\n      38: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var _color_conversion = _interopRequireDefault(\n            _dereq_('../color/color_conversion')\n          );\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** //stores the original hsb values\n           * @module Environment\n           * @submodule Environment\n           * @for p5\n           * @requires core\n           */\n          var originalHSB; //stores values for color name exceptions\n          var colorExceptions = [\n            {\n              h: 0,\n              s: 0,\n              b: 0.8275,\n              name: 'gray'\n            },\n\n            {\n              h: 0,\n              s: 0,\n              b: 0.8627,\n              name: 'gray'\n            },\n\n            {\n              h: 0,\n              s: 0,\n              b: 0.7529,\n              name: 'gray'\n            },\n\n            {\n              h: 0.0167,\n              s: 0.1176,\n              b: 1,\n              name: 'light pink'\n            }\n          ];\n\n          //stores values for color names\n          var colorLookUp = [\n            {\n              h: 0,\n              s: 0,\n              b: 0,\n              name: 'black'\n            },\n\n            {\n              h: 0,\n              s: 0,\n              b: 0.5,\n              name: 'gray'\n            },\n\n            {\n              h: 0,\n              s: 0,\n              b: 1,\n              name: 'white'\n            },\n\n            {\n              h: 0,\n              s: 0.5,\n              b: 0.5,\n              name: 'dark maroon'\n            },\n\n            {\n              h: 0,\n              s: 0.5,\n              b: 1,\n              name: 'salmon pink'\n            },\n\n            {\n              h: 0,\n              s: 1,\n              b: 0,\n              name: 'black'\n            },\n\n            {\n              h: 0,\n              s: 1,\n              b: 0.5,\n              name: 'dark red'\n            },\n\n            {\n              h: 0,\n              s: 1,\n              b: 1,\n              name: 'red'\n            },\n\n            {\n              h: 5,\n              s: 0,\n              b: 1,\n              name: 'very light peach'\n            },\n\n            {\n              h: 5,\n              s: 0.5,\n              b: 0.5,\n              name: 'brown'\n            },\n\n            {\n              h: 5,\n              s: 0.5,\n              b: 1,\n              name: 'peach'\n            },\n\n            {\n              h: 5,\n              s: 1,\n              b: 0.5,\n              name: 'brick red'\n            },\n\n            {\n              h: 5,\n              s: 1,\n              b: 1,\n              name: 'crimson'\n            },\n\n            {\n              h: 10,\n              s: 0,\n              b: 1,\n              name: 'light peach'\n            },\n\n            {\n              h: 10,\n              s: 0.5,\n              b: 0.5,\n              name: 'brown'\n            },\n\n            {\n              h: 10,\n              s: 0.5,\n              b: 1,\n              name: 'light orange'\n            },\n\n            {\n              h: 10,\n              s: 1,\n              b: 0.5,\n              name: 'brown'\n            },\n\n            {\n              h: 10,\n              s: 1,\n              b: 1,\n              name: 'orange'\n            },\n\n            {\n              h: 15,\n              s: 0,\n              b: 1,\n              name: 'very light yellow'\n            },\n\n            {\n              h: 15,\n              s: 0.5,\n              b: 0.5,\n              name: 'olive green'\n            },\n\n            {\n              h: 15,\n              s: 0.5,\n              b: 1,\n              name: 'light yellow'\n            },\n\n            {\n              h: 15,\n              s: 1,\n              b: 0,\n              name: 'dark olive green'\n            },\n\n            {\n              h: 15,\n              s: 1,\n              b: 0.5,\n              name: 'olive green'\n            },\n\n            {\n              h: 15,\n              s: 1,\n              b: 1,\n              name: 'yellow'\n            },\n\n            {\n              h: 20,\n              s: 0,\n              b: 1,\n              name: 'very light yellow'\n            },\n\n            {\n              h: 20,\n              s: 0.5,\n              b: 0.5,\n              name: 'olive green'\n            },\n\n            {\n              h: 20,\n              s: 0.5,\n              b: 1,\n              name: 'light yellow green'\n            },\n\n            {\n              h: 20,\n              s: 1,\n              b: 0,\n              name: 'dark olive green'\n            },\n\n            {\n              h: 20,\n              s: 1,\n              b: 0.5,\n              name: 'dark yellow green'\n            },\n\n            {\n              h: 20,\n              s: 1,\n              b: 1,\n              name: 'yellow green'\n            },\n\n            {\n              h: 25,\n              s: 0.5,\n              b: 0.5,\n              name: 'dark yellow green'\n            },\n\n            {\n              h: 25,\n              s: 0.5,\n              b: 1,\n              name: 'light green'\n            },\n\n            {\n              h: 25,\n              s: 1,\n              b: 0.5,\n              name: 'dark green'\n            },\n\n            {\n              h: 25,\n              s: 1,\n              b: 1,\n              name: 'green'\n            },\n\n            {\n              h: 30,\n              s: 0.5,\n              b: 1,\n              name: 'light green'\n            },\n\n            {\n              h: 30,\n              s: 1,\n              b: 0.5,\n              name: 'dark green'\n            },\n\n            {\n              h: 30,\n              s: 1,\n              b: 1,\n              name: 'green'\n            },\n\n            {\n              h: 35,\n              s: 0,\n              b: 0.5,\n              name: 'light green'\n            },\n\n            {\n              h: 35,\n              s: 0,\n              b: 1,\n              name: 'very light green'\n            },\n\n            {\n              h: 35,\n              s: 0.5,\n              b: 0.5,\n              name: 'dark green'\n            },\n\n            {\n              h: 35,\n              s: 0.5,\n              b: 1,\n              name: 'light green'\n            },\n\n            {\n              h: 35,\n              s: 1,\n              b: 0,\n              name: 'very dark green'\n            },\n\n            {\n              h: 35,\n              s: 1,\n              b: 0.5,\n              name: 'dark green'\n            },\n\n            {\n              h: 35,\n              s: 1,\n              b: 1,\n              name: 'green'\n            },\n\n            {\n              h: 40,\n              s: 0,\n              b: 1,\n              name: 'very light green'\n            },\n\n            {\n              h: 40,\n              s: 0.5,\n              b: 0.5,\n              name: 'dark green'\n            },\n\n            {\n              h: 40,\n              s: 0.5,\n              b: 1,\n              name: 'light green'\n            },\n\n            {\n              h: 40,\n              s: 1,\n              b: 0.5,\n              name: 'dark green'\n            },\n\n            {\n              h: 40,\n              s: 1,\n              b: 1,\n              name: 'green'\n            },\n\n            {\n              h: 45,\n              s: 0.5,\n              b: 1,\n              name: 'light turquoise'\n            },\n\n            {\n              h: 45,\n              s: 1,\n              b: 0.5,\n              name: 'dark turquoise'\n            },\n\n            {\n              h: 45,\n              s: 1,\n              b: 1,\n              name: 'turquoise'\n            },\n\n            {\n              h: 50,\n              s: 0,\n              b: 1,\n              name: 'light sky blue'\n            },\n\n            {\n              h: 50,\n              s: 0.5,\n              b: 0.5,\n              name: 'dark cyan'\n            },\n\n            {\n              h: 50,\n              s: 0.5,\n              b: 1,\n              name: 'light cyan'\n            },\n\n            {\n              h: 50,\n              s: 1,\n              b: 0.5,\n              name: 'dark cyan'\n            },\n\n            {\n              h: 50,\n              s: 1,\n              b: 1,\n              name: 'cyan'\n            },\n\n            {\n              h: 55,\n              s: 0,\n              b: 1,\n              name: 'light sky blue'\n            },\n\n            {\n              h: 55,\n              s: 0.5,\n              b: 1,\n              name: 'light sky blue'\n            },\n\n            {\n              h: 55,\n              s: 1,\n              b: 0.5,\n              name: 'dark blue'\n            },\n\n            {\n              h: 55,\n              s: 1,\n              b: 1,\n              name: 'sky blue'\n            },\n\n            {\n              h: 60,\n              s: 0,\n              b: 0.5,\n              name: 'gray'\n            },\n\n            {\n              h: 60,\n              s: 0,\n              b: 1,\n              name: 'very light blue'\n            },\n\n            {\n              h: 60,\n              s: 0.5,\n              b: 0.5,\n              name: 'blue'\n            },\n\n            {\n              h: 60,\n              s: 0.5,\n              b: 1,\n              name: 'light blue'\n            },\n\n            {\n              h: 60,\n              s: 1,\n              b: 0.5,\n              name: 'navy blue'\n            },\n\n            {\n              h: 60,\n              s: 1,\n              b: 1,\n              name: 'blue'\n            },\n\n            {\n              h: 65,\n              s: 0,\n              b: 1,\n              name: 'lavender'\n            },\n\n            {\n              h: 65,\n              s: 0.5,\n              b: 0.5,\n              name: 'navy blue'\n            },\n\n            {\n              h: 65,\n              s: 0.5,\n              b: 1,\n              name: 'light purple'\n            },\n\n            {\n              h: 65,\n              s: 1,\n              b: 0.5,\n              name: 'dark navy blue'\n            },\n\n            {\n              h: 65,\n              s: 1,\n              b: 1,\n              name: 'blue'\n            },\n\n            {\n              h: 70,\n              s: 0,\n              b: 1,\n              name: 'lavender'\n            },\n\n            {\n              h: 70,\n              s: 0.5,\n              b: 0.5,\n              name: 'navy blue'\n            },\n\n            {\n              h: 70,\n              s: 0.5,\n              b: 1,\n              name: 'lavender blue'\n            },\n\n            {\n              h: 70,\n              s: 1,\n              b: 0.5,\n              name: 'dark navy blue'\n            },\n\n            {\n              h: 70,\n              s: 1,\n              b: 1,\n              name: 'blue'\n            },\n\n            {\n              h: 75,\n              s: 0.5,\n              b: 1,\n              name: 'lavender'\n            },\n\n            {\n              h: 75,\n              s: 1,\n              b: 0.5,\n              name: 'dark purple'\n            },\n\n            {\n              h: 75,\n              s: 1,\n              b: 1,\n              name: 'purple'\n            },\n\n            {\n              h: 80,\n              s: 0.5,\n              b: 1,\n              name: 'pinkish purple'\n            },\n\n            {\n              h: 80,\n              s: 1,\n              b: 0.5,\n              name: 'dark purple'\n            },\n\n            {\n              h: 80,\n              s: 1,\n              b: 1,\n              name: 'purple'\n            },\n\n            {\n              h: 85,\n              s: 0,\n              b: 1,\n              name: 'light pink'\n            },\n\n            {\n              h: 85,\n              s: 0.5,\n              b: 0.5,\n              name: 'purple'\n            },\n\n            {\n              h: 85,\n              s: 0.5,\n              b: 1,\n              name: 'light fuchsia'\n            },\n\n            {\n              h: 85,\n              s: 1,\n              b: 0.5,\n              name: 'dark fuchsia'\n            },\n\n            {\n              h: 85,\n              s: 1,\n              b: 1,\n              name: 'fuchsia'\n            },\n\n            {\n              h: 90,\n              s: 0.5,\n              b: 0.5,\n              name: 'dark fuchsia'\n            },\n\n            {\n              h: 90,\n              s: 0.5,\n              b: 1,\n              name: 'hot pink'\n            },\n\n            {\n              h: 90,\n              s: 1,\n              b: 0.5,\n              name: 'dark fuchsia'\n            },\n\n            {\n              h: 90,\n              s: 1,\n              b: 1,\n              name: 'fuchsia'\n            },\n\n            {\n              h: 95,\n              s: 0,\n              b: 1,\n              name: 'pink'\n            },\n\n            {\n              h: 95,\n              s: 0.5,\n              b: 1,\n              name: 'light pink'\n            },\n\n            {\n              h: 95,\n              s: 1,\n              b: 0.5,\n              name: 'dark magenta'\n            },\n\n            {\n              h: 95,\n              s: 1,\n              b: 1,\n              name: 'magenta'\n            }\n          ];\n\n          //returns text with color name\n          function _calculateColor(hsb) {\n            var colortext;\n            //round hue\n            if (hsb[0] !== 0) {\n              hsb[0] = Math.round(hsb[0] * 100);\n              var hue = hsb[0].toString().split('');\n              var last = hue.length - 1;\n              hue[last] = parseInt(hue[last]);\n              //if last digit of hue is < 2.5 make it 0\n              if (hue[last] < 2.5) {\n                hue[last] = 0;\n                //if last digit of hue is >= 2.5 and less than 7.5 make it 5\n              } else if (hue[last] >= 2.5 && hue[last] < 7.5) {\n                hue[last] = 5;\n              }\n              //if hue only has two digits\n              if (hue.length === 2) {\n                hue[0] = parseInt(hue[0]);\n                //if last is greater than 7.5\n                if (hue[last] >= 7.5) {\n                  //add one to the tens\n                  hue[last] = 0;\n                  hue[0] = hue[0] + 1;\n                }\n                hsb[0] = hue[0] * 10 + hue[1];\n              } else {\n                if (hue[last] >= 7.5) {\n                  hsb[0] = 10;\n                } else {\n                  hsb[0] = hue[last];\n                }\n              }\n            }\n            //map brightness from 0 to 1\n            hsb[2] = hsb[2] / 255;\n            //round saturation and brightness\n            for (var i = hsb.length - 1; i >= 1; i--) {\n              if (hsb[i] <= 0.25) {\n                hsb[i] = 0;\n              } else if (hsb[i] > 0.25 && hsb[i] < 0.75) {\n                hsb[i] = 0.5;\n              } else {\n                hsb[i] = 1;\n              }\n            }\n            //after rounding, if the values are hue 0, saturation 0 and brightness 1\n            //look at color exceptions which includes several tones from white to gray\n            if (hsb[0] === 0 && hsb[1] === 0 && hsb[2] === 1) {\n              //round original hsb values\n              for (var _i = 2; _i >= 0; _i--) {\n                originalHSB[_i] = Math.round(originalHSB[_i] * 10000) / 10000;\n              }\n              //compare with the values in the colorExceptions array\n              for (var e = 0; e < colorExceptions.length; e++) {\n                if (\n                  colorExceptions[e].h === originalHSB[0] &&\n                  colorExceptions[e].s === originalHSB[1] &&\n                  colorExceptions[e].b === originalHSB[2]\n                ) {\n                  colortext = colorExceptions[e].name;\n                  break;\n                } else {\n                  //if there is no match return white\n                  colortext = 'white';\n                }\n              }\n            } else {\n              //otherwise, compare with values in colorLookUp\n              for (var _i2 = 0; _i2 < colorLookUp.length; _i2++) {\n                if (\n                  colorLookUp[_i2].h === hsb[0] &&\n                  colorLookUp[_i2].s === hsb[1] &&\n                  colorLookUp[_i2].b === hsb[2]\n                ) {\n                  colortext = colorLookUp[_i2].name;\n                  break;\n                }\n              }\n            }\n            return colortext;\n          }\n\n          //gets rgba and returs a color name\n          _main.default.prototype._rgbColorName = function(arg) {\n            //conversts rgba to hsb\n            var hsb = _color_conversion.default._rgbaToHSBA(arg);\n            //stores hsb in global variable\n            originalHSB = hsb;\n            //calculate color name\n            return _calculateColor([hsb[0], hsb[1], hsb[2]]);\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../color/color_conversion': 44, '../core/main': 59 }\n      ],\n      39: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Environment\n           * @submodule Environment\n           * @for p5\n           * @requires core\n           */ var descContainer = '_Description'; //Fallback container\n          var fallbackDescId = '_fallbackDesc'; //Fallback description\n          var fallbackTableId = '_fallbackTable'; //Fallback Table\n          var fallbackTableElId = '_fte_'; //Fallback Table Element\n          var labelContainer = '_Label'; //Label container\n          var labelDescId = '_labelDesc'; //Label description\n          var labelTableId = '_labelTable'; //Label Table\n          var labelTableElId = '_lte_'; //Label Table Element\n          /**\n           * Creates a screen reader accessible description for the canvas.\n           * The first parameter should be a string with a description of the canvas.\n           * The second parameter is optional. If specified, it determines how the\n           * description is displayed.\n           *\n           * <code class=\"language-javascript\">describe(text, LABEL)</code> displays\n           * the description to all users as a <a\n           * href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">\n           * tombstone or exhibit label/caption</a> in a\n           * <code class=\"language-javascript\">&lt;div class=\"p5Label\"&gt;&lt;/div&gt;</code>\n           * adjacent to the canvas. You can style it as you wish in your CSS.\n           *\n           * <code class=\"language-javascript\">describe(text, FALLBACK)</code> makes the\n           * description accessible to screen-reader users only, in\n           * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\n           * a sub DOM inside the canvas element</a>. If a second parameter is not\n           * specified, by default, the description will only be available to\n           * screen-reader users.\n           *\n           * @method describe\n           * @param  {String} text      description of the canvas\n           * @param  {Constant} [display] either LABEL or FALLBACK (Optional)\n           *\n           * @example\n           * <div>\n           * <code>\n           * describe('pink square with red heart in the bottom right corner', LABEL);\n           * background('pink');\n           * fill('red');\n           * noStroke();\n           * ellipse(67, 67, 20, 20);\n           * ellipse(83, 67, 20, 20);\n           * triangle(91, 73, 75, 95, 59, 73);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let x = 0;\n           * function draw() {\n           *   if (x > 100) {\n           *     x = 0;\n           *   }\n           *   background(220);\n           *   fill(0, 255, 0);\n           *   ellipse(x, 50, 40, 40);\n           *   x = x + 0.1;\n           *   describe('green circle at x pos ' + round(x) + ' moving to the right');\n           * }\n           * </code>\n           * </div>\n           *\n           */ _main.default.prototype.describe = function(text, display) {\n            _main.default._validateParameters('describe', arguments);\n            if (typeof text !== 'string') {\n              return;\n            }\n            var cnvId = this.canvas.id;\n            //calls function that adds punctuation for better screen reading\n            text = _descriptionText(text);\n            //if there is no dummyDOM\n            if (!this.dummyDOM) {\n              this.dummyDOM = document.getElementById(cnvId).parentNode;\n            }\n            if (!this.descriptions) {\n              this.descriptions = {};\n            }\n            //check if html structure for description is ready\n            if (this.descriptions.fallback) {\n              //check if text is different from current description\n              if (this.descriptions.fallback.innerHTML !== text) {\n                //update description\n                this.descriptions.fallback.innerHTML = text;\n              }\n            } else {\n              //create fallback html structure\n              this._describeHTML('fallback', text);\n            }\n            //if display is LABEL\n            if (display === this.LABEL) {\n              //check if html structure for label is ready\n              if (this.descriptions.label) {\n                //check if text is different from current label\n                if (this.descriptions.label.innerHTML !== text) {\n                  //update label description\n                  this.descriptions.label.innerHTML = text;\n                }\n              } else {\n                //create label html structure\n                this._describeHTML('label', text);\n              }\n            }\n          };\n\n          /**\n           * This function creates a screen-reader accessible\n           * description for elements —shapes or groups of shapes that create\n           * meaning together— in the canvas. The first paramater should\n           * be the name of the element. The second parameter should be a string\n           * with a description of the element. The third parameter is optional.\n           * If specified, it determines how the element description is displayed.\n           *\n           * <code class=\"language-javascript\">describeElement(name, text, LABEL)</code>\n           * displays the element description to all users as a\n           * <a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">\n           * tombstone or exhibit label/caption</a> in a\n           * <code class=\"language-javascript\">&lt;div class=\"p5Label\"&gt;&lt;/div&gt;</code>\n           * adjacent to the canvas. You can style it as you wish in your CSS.\n           *\n           * <code class=\"language-javascript\">describeElement(name, text, FALLBACK)</code>\n           * makes the element description accessible to screen-reader users\n           * only, in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\n           * a sub DOM inside the canvas element</a>. If a second parameter is not\n           * specified, by default, the element description will only be available\n           * to screen-reader users.\n           *\n           * @method describeElement\n           * @param  {String} name      name of the element\n           * @param  {String} text      description of the element\n           * @param  {Constant} [display] either LABEL or FALLBACK (Optional)\n           *\n           * @example\n           * <div>\n           * <code>\n           * describe('Heart and yellow circle over pink background', LABEL);\n           * noStroke();\n           * background('pink');\n           * describeElement('Circle', 'Yellow circle in the top left corner', LABEL);\n           * fill('yellow');\n           * ellipse(25, 25, 40, 40);\n           * describeElement('Heart', 'red heart in the bottom right corner', LABEL);\n           * fill('red');\n           * ellipse(66.6, 66.6, 20, 20);\n           * ellipse(83.2, 66.6, 20, 20);\n           * triangle(91.2, 72.6, 75, 95, 58.6, 72.6);\n           * </code>\n           * </div>\n           */\n\n          _main.default.prototype.describeElement = function(name, text, display) {\n            _main.default._validateParameters('describeElement', arguments);\n            if (typeof text !== 'string' || typeof name !== 'string') {\n              return;\n            }\n            var cnvId = this.canvas.id;\n            //calls function that adds punctuation for better screen reading\n            text = _descriptionText(text);\n            //calls function that adds punctuation for better screen reading\n            var elementName = _elementName(name);\n            //remove any special characters from name to use it as html id\n            name = name.replace(/[^a-zA-Z0-9 ]/g, '');\n            //store element description\n            var inner = '<th scope=\"row\">'\n              .concat(elementName, '</th><td>')\n              .concat(text, '</td>');\n            //if there is no dummyDOM\n            if (!this.dummyDOM) {\n              this.dummyDOM = document.getElementById(cnvId).parentNode;\n            }\n            if (!this.descriptions) {\n              this.descriptions = { fallbackElements: {} };\n            } else if (!this.descriptions.fallbackElements) {\n              this.descriptions.fallbackElements = {};\n            }\n            //check if html structure for element description is ready\n            if (this.descriptions.fallbackElements[name]) {\n              //if current element description is not the same as inner\n              if (this.descriptions.fallbackElements[name].innerHTML !== inner) {\n                //update element description\n                this.descriptions.fallbackElements[name].innerHTML = inner;\n              }\n            } else {\n              //create fallback html structure\n              this._describeElementHTML('fallback', name, inner);\n            }\n            //if display is LABEL\n            if (display === this.LABEL) {\n              if (!this.descriptions.labelElements) {\n                this.descriptions.labelElements = {};\n              }\n              //if html structure for label element description is ready\n              if (this.descriptions.labelElements[name]) {\n                //if label element description is different\n                if (this.descriptions.labelElements[name].innerHTML !== inner) {\n                  //update label element description\n                  this.descriptions.labelElements[name].innerHTML = inner;\n                }\n              } else {\n                //create label element html structure\n                this._describeElementHTML('label', name, inner);\n              }\n            }\n          };\n\n          /*\n    *\n    * Helper functions for describe() and describeElement().\n    *\n    */\n\n          // check that text is not LABEL or FALLBACK and ensure text ends with punctuation mark\n          function _descriptionText(text) {\n            if (text === 'label' || text === 'fallback') {\n              throw new Error('description should not be LABEL or FALLBACK');\n            }\n            //if string does not end with '.'\n            if (\n              !text.endsWith('.') &&\n              !text.endsWith(';') &&\n              !text.endsWith(',') &&\n              !text.endsWith('?') &&\n              !text.endsWith('!')\n            ) {\n              //add '.' to the end of string\n              text = text + '.';\n            }\n            return text;\n          }\n\n          /*\n   * Helper functions for describe()\n   */\n\n          //creates HTML structure for canvas descriptions\n          _main.default.prototype._describeHTML = function(type, text) {\n            var cnvId = this.canvas.id;\n            if (type === 'fallback') {\n              //if there is no description container\n              if (!this.dummyDOM.querySelector('#'.concat(cnvId + descContainer))) {\n                //if there are no accessible outputs (see textOutput() and gridOutput())\n                var html = '<div id=\"'\n                  .concat(cnvId)\n                  .concat(\n                    descContainer,\n                    '\" role=\"region\" aria-label=\"Canvas Description\"><p id=\"'\n                  )\n                  .concat(cnvId)\n                  .concat(fallbackDescId, '\"></p></div>');\n                if (!this.dummyDOM.querySelector('#'.concat(cnvId, 'accessibleOutput'))) {\n                  //create description container + <p> for fallback description\n                  this.dummyDOM.querySelector('#'.concat(cnvId)).innerHTML = html;\n                } else {\n                  //create description container + <p> for fallback description before outputs\n                  this.dummyDOM\n                    .querySelector('#'.concat(cnvId, 'accessibleOutput'))\n                    .insertAdjacentHTML('beforebegin', html);\n                }\n              } else {\n                //if describeElement() has already created the container and added a table of elements\n                //create fallback description <p> before the table\n                this.dummyDOM\n                  .querySelector('#' + cnvId + fallbackTableId)\n                  .insertAdjacentHTML(\n                    'beforebegin',\n                    '<p id=\"'.concat(cnvId + fallbackDescId, '\"></p>')\n                  );\n              }\n              //if the container for the description exists\n              this.descriptions.fallback = this.dummyDOM.querySelector(\n                '#'.concat(cnvId).concat(fallbackDescId)\n              );\n\n              this.descriptions.fallback.innerHTML = text;\n              return;\n            } else if (type === 'label') {\n              //if there is no label container\n              if (!this.dummyDOM.querySelector('#'.concat(cnvId + labelContainer))) {\n                var _html = '<div id=\"'\n                  .concat(cnvId)\n                  .concat(labelContainer, '\" class=\"p5Label\"><p id=\"')\n                  .concat(cnvId)\n                  .concat(labelDescId, '\"></p></div>');\n                //if there are no accessible outputs (see textOutput() and gridOutput())\n                if (\n                  !this.dummyDOM.querySelector('#'.concat(cnvId, 'accessibleOutputLabel'))\n                ) {\n                  //create label container + <p> for label description\n                  this.dummyDOM\n                    .querySelector('#' + cnvId)\n                    .insertAdjacentHTML('afterend', _html);\n                } else {\n                  //create label container + <p> for label description before outputs\n                  this.dummyDOM\n                    .querySelector('#'.concat(cnvId, 'accessibleOutputLabel'))\n                    .insertAdjacentHTML('beforebegin', _html);\n                }\n              } else if (this.dummyDOM.querySelector('#'.concat(cnvId + labelTableId))) {\n                //if describeElement() has already created the container and added a table of elements\n                //create label description <p> before the table\n                this.dummyDOM\n                  .querySelector('#'.concat(cnvId + labelTableId))\n                  .insertAdjacentHTML(\n                    'beforebegin',\n                    '<p id=\"'.concat(cnvId).concat(labelDescId, '\"></p>')\n                  );\n              }\n              this.descriptions.label = this.dummyDOM.querySelector(\n                '#' + cnvId + labelDescId\n              );\n\n              this.descriptions.label.innerHTML = text;\n              return;\n            }\n          };\n\n          /*\n    * Helper functions for describeElement().\n    */\n\n          //check that name is not LABEL or FALLBACK and ensure text ends with colon\n          function _elementName(name) {\n            if (name === 'label' || name === 'fallback') {\n              throw new Error('element name should not be LABEL or FALLBACK');\n            }\n            //check if last character of string n is '.', ';', or ','\n            if (name.endsWith('.') || name.endsWith(';') || name.endsWith(',')) {\n              //replace last character with ':'\n              name = name.replace(/.$/, ':');\n            } else if (!name.endsWith(':')) {\n              //if string n does not end with ':'\n              //add ':'' at the end of string\n              name = name + ':';\n            }\n            return name;\n          }\n\n          //creates HTML structure for element descriptions\n          _main.default.prototype._describeElementHTML = function(type, name, text) {\n            var cnvId = this.canvas.id;\n            if (type === 'fallback') {\n              //if there is no description container\n              if (!this.dummyDOM.querySelector('#'.concat(cnvId + descContainer))) {\n                //if there are no accessible outputs (see textOutput() and gridOutput())\n                var html = '<div id=\"'\n                  .concat(cnvId)\n                  .concat(\n                    descContainer,\n                    '\" role=\"region\" aria-label=\"Canvas Description\"><table id=\"'\n                  )\n                  .concat(cnvId)\n                  .concat(\n                    fallbackTableId,\n                    '\"><caption>Canvas elements and their descriptions</caption></table></div>'\n                  );\n                if (!this.dummyDOM.querySelector('#'.concat(cnvId, 'accessibleOutput'))) {\n                  //create container + table for element descriptions\n                  this.dummyDOM.querySelector('#' + cnvId).innerHTML = html;\n                } else {\n                  //create container + table for element descriptions before outputs\n                  this.dummyDOM\n                    .querySelector('#'.concat(cnvId, 'accessibleOutput'))\n                    .insertAdjacentHTML('beforebegin', html);\n                }\n              } else if (!this.dummyDOM.querySelector('#' + cnvId + fallbackTableId)) {\n                //if describe() has already created the container and added a description\n                //and there is no table create fallback table for element description after\n                //fallback description\n                this.dummyDOM\n                  .querySelector('#' + cnvId + fallbackDescId)\n                  .insertAdjacentHTML(\n                    'afterend',\n                    '<table id=\"'\n                      .concat(cnvId)\n                      .concat(\n                        fallbackTableId,\n                        '\"><caption>Canvas elements and their descriptions</caption></table>'\n                      )\n                  );\n              }\n              //create a table row for the element\n              var tableRow = document.createElement('tr');\n              tableRow.id = cnvId + fallbackTableElId + name;\n              this.dummyDOM\n                .querySelector('#' + cnvId + fallbackTableId)\n                .appendChild(tableRow);\n              //update element description\n              this.descriptions.fallbackElements[name] = this.dummyDOM.querySelector(\n                '#'\n                  .concat(cnvId)\n                  .concat(fallbackTableElId)\n                  .concat(name)\n              );\n\n              this.descriptions.fallbackElements[name].innerHTML = text;\n              return;\n            } else if (type === 'label') {\n              //If display is LABEL creates a div adjacent to the canvas element with\n              //a table, a row header cell with the name of the elements,\n              //and adds the description of the element in adjecent cell.\n              //if there is no label description container\n              if (!this.dummyDOM.querySelector('#'.concat(cnvId + labelContainer))) {\n                //if there are no accessible outputs (see textOutput() and gridOutput())\n                var _html2 = '<div id=\"'\n                  .concat(cnvId)\n                  .concat(labelContainer, '\" class=\"p5Label\"><table id=\"')\n                  .concat(cnvId)\n                  .concat(labelTableId, '\"></table></div>');\n                if (\n                  !this.dummyDOM.querySelector('#'.concat(cnvId, 'accessibleOutputLabel'))\n                ) {\n                  //create container + table for element descriptions\n                  this.dummyDOM\n                    .querySelector('#' + cnvId)\n                    .insertAdjacentHTML('afterend', _html2);\n                } else {\n                  //create container + table for element descriptions before outputs\n                  this.dummyDOM\n                    .querySelector('#'.concat(cnvId, 'accessibleOutputLabel'))\n                    .insertAdjacentHTML('beforebegin', _html2);\n                }\n              } else if (!this.dummyDOM.querySelector('#'.concat(cnvId + labelTableId))) {\n                //if describe() has already created the label container and added a description\n                //and there is no table create label table for element description after\n                //label description\n                this.dummyDOM\n                  .querySelector('#' + cnvId + labelDescId)\n                  .insertAdjacentHTML(\n                    'afterend',\n                    '<table id=\"'.concat(cnvId + labelTableId, '\"></table>')\n                  );\n              }\n              //create a table row for the element label description\n              var _tableRow = document.createElement('tr');\n              _tableRow.id = cnvId + labelTableElId + name;\n              this.dummyDOM\n                .querySelector('#' + cnvId + labelTableId)\n                .appendChild(_tableRow);\n              //update element label description\n              this.descriptions.labelElements[name] = this.dummyDOM.querySelector(\n                '#'\n                  .concat(cnvId)\n                  .concat(labelTableElId)\n                  .concat(name)\n              );\n\n              this.descriptions.labelElements[name].innerHTML = text;\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      40: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** //the functions in this file support updating the grid output\n           * @module Environment\n           * @submodule Environment\n           * @for p5\n           * @requires core\n           */\n          //updates gridOutput\n          _main.default.prototype._updateGridOutput = function(idT) {\n            //if html structure is not there yet\n            if (!this.dummyDOM.querySelector('#'.concat(idT, '_summary'))) {\n              return;\n            }\n            var current = this._accessibleOutputs[idT];\n            //create shape details list\n            var innerShapeDetails = _gridShapeDetails(idT, this.ingredients.shapes);\n            //create summary\n            var innerSummary = _gridSummary(\n              innerShapeDetails.numShapes,\n              this.ingredients.colors.background,\n              this.width,\n              this.height\n            );\n\n            //create grid map\n            var innerMap = _gridMap(idT, this.ingredients.shapes);\n            //if it is different from current summary\n            if (innerSummary !== current.summary.innerHTML) {\n              //update\n              current.summary.innerHTML = innerSummary;\n            }\n            //if it is different from current map\n            if (innerMap !== current.map.innerHTML) {\n              //update\n              current.map.innerHTML = innerMap;\n            }\n            //if it is different from current shape details\n            if (innerShapeDetails.details !== current.shapeDetails.innerHTML) {\n              //update\n              current.shapeDetails.innerHTML = innerShapeDetails.details;\n            }\n            this._accessibleOutputs[idT] = current;\n          };\n\n          //creates spatial grid that maps the location of shapes\n          function _gridMap(idT, ingredients) {\n            var shapeNumber = 0;\n            var table = '';\n            //create an array of arrays 10*10 of empty cells\n            var cells = Array.apply(null, Array(10)).map(function() {});\n            for (var r in cells) {\n              cells[r] = Array.apply(null, Array(10)).map(function() {});\n            }\n            for (var x in ingredients) {\n              for (var y in ingredients[x]) {\n                var fill = void 0;\n                if (x !== 'line') {\n                  fill = '<a href=\"#'\n                    .concat(idT, 'shape')\n                    .concat(shapeNumber, '\">')\n                    .concat(ingredients[x][y].color, ' ')\n                    .concat(x, '</a>');\n                } else {\n                  fill = '<a href=\"#'\n                    .concat(idT, 'shape')\n                    .concat(shapeNumber, '\">')\n                    .concat(ingredients[x][y].color, ' ')\n                    .concat(x, ' midpoint</a>');\n                }\n                //if empty cell of location of shape is undefined\n                if (!cells[ingredients[x][y].loc.locY][ingredients[x][y].loc.locX]) {\n                  //fill it with shape info\n                  cells[ingredients[x][y].loc.locY][ingredients[x][y].loc.locX] = fill;\n                  //if a shape is already in that location\n                } else {\n                  //add it\n                  cells[ingredients[x][y].loc.locY][ingredients[x][y].loc.locX] =\n                    cells[ingredients[x][y].loc.locY][ingredients[x][y].loc.locX] +\n                    '  ' +\n                    fill;\n                }\n                shapeNumber++;\n              }\n            }\n            //make table based on array\n            for (var _r in cells) {\n              var row = '<tr>';\n              for (var c in cells[_r]) {\n                row = row + '<td>';\n                if (cells[_r][c] !== undefined) {\n                  row = row + cells[_r][c];\n                }\n                row = row + '</td>';\n              }\n              table = table + row + '</tr>';\n            }\n            return table;\n          }\n\n          //creates grid summary\n          function _gridSummary(numShapes, background, width, height) {\n            var text = ''\n              .concat(background, ' canvas, ')\n              .concat(width, ' by ')\n              .concat(height, ' pixels, contains ')\n              .concat(numShapes[0]);\n\n            if (numShapes[0] === 1) {\n              text = ''.concat(text, ' shape: ').concat(numShapes[1]);\n            } else {\n              text = ''.concat(text, ' shapes: ').concat(numShapes[1]);\n            }\n            return text;\n          }\n\n          //creates list of shapes\n          function _gridShapeDetails(idT, ingredients) {\n            var shapeDetails = '';\n            var shapes = '';\n            var totalShapes = 0;\n            //goes trhough every shape type in ingredients\n            for (var x in ingredients) {\n              var shapeNum = 0;\n              for (var y in ingredients[x]) {\n                //it creates a line in a list\n                var line = '<li id=\"'\n                  .concat(idT, 'shape')\n                  .concat(totalShapes, '\">')\n                  .concat(ingredients[x][y].color, ' ')\n                  .concat(x, ',');\n                if (x === 'line') {\n                  line =\n                    line +\n                    ' location = '\n                      .concat(ingredients[x][y].pos, ', length = ')\n                      .concat(ingredients[x][y].length, ' pixels');\n                } else {\n                  line = line + ' location = '.concat(ingredients[x][y].pos);\n                  if (x !== 'point') {\n                    line = line + ', area = '.concat(ingredients[x][y].area, ' %');\n                  }\n                  line = line + '</li>';\n                }\n                shapeDetails = shapeDetails + line;\n                shapeNum++;\n                totalShapes++;\n              }\n              if (shapeNum > 1) {\n                shapes = ''\n                  .concat(shapes, ' ')\n                  .concat(shapeNum, ' ')\n                  .concat(x, 's');\n              } else {\n                shapes = ''\n                  .concat(shapes, ' ')\n                  .concat(shapeNum, ' ')\n                  .concat(x);\n              }\n            }\n            return { numShapes: [totalShapes, shapes], details: shapeDetails };\n          }\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      41: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Environment\n           * @submodule Environment\n           * @for p5\n           * @requires core\n           */ /**\n           * <code class=\"language-javascript\">textOutput()</code> creates a screenreader\n           * accessible output that describes the shapes present on the canvas.\n           * The general description of the canvas includes canvas size,\n           * canvas color, and number of elements in the canvas\n           * (example: 'Your output is a, 400 by 400 pixels, lavender blue\n           * canvas containing the following 4 shapes:'). This description\n           * is followed by a list of shapes where the color, position, and area\n           * of each shape are described (example: \"orange ellipse at top left\n           * covering 1% of the canvas\"). Each element can be selected to get\n           * more details. A table of elements is also provided. In this table,\n           * shape, color, location, coordinates and area are described\n           * (example: \"orange ellipse location=top left area=2\").\n           *\n           * <code class=\"language-javascript\">textOutput()</code> and <code class=\"language-javascript\">texOutput(FALLBACK)</code>\n           * make the output available in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\n           * a sub DOM inside the canvas element</a> which is accessible to screen readers.\n           * <code class=\"language-javascript\">textOutput(LABEL)</code> creates an\n           * additional div with the output adjacent to the canvas, this is useful\n           * for non-screen reader users that might want to display the output outside\n           * of the canvas' sub DOM as they code. However, using LABEL will create\n           * unnecessary redundancy for screen reader users. We recommend using LABEL\n           * only as part of the development process of a sketch and removing it before\n           * publishing or sharing with screen reader users.\n           *\n           * @method textOutput\n           * @param  {Constant} [display] either FALLBACK or LABEL (Optional)\n           *\n           * @example\n           * <div>\n           * <code>\n           * textOutput();\n           * background(148, 196, 0);\n           * fill(255, 0, 0);\n           * ellipse(20, 20, 20, 20);\n           * fill(0, 0, 255);\n           * rect(50, 50, 50, 50);\n           * </code>\n           * </div>\n           *\n           *\n           * <div>\n           * <code>\n           * let x = 0;\n           * function draw() {\n           *   textOutput();\n           *   background(148, 196, 0);\n           *   fill(255, 0, 0);\n           *   ellipse(x, 20, 20, 20);\n           *   fill(0, 0, 255);\n           *   rect(50, 50, 50, 50);\n           *   ellipse(20, 20, 20, 20);\n           *   x += 0.1;\n           * }\n           * </code>\n           * </div>\n           *\n           */ _main.default.prototype.textOutput = function(display) {\n            _main.default._validateParameters('textOutput', arguments);\n            //if textOutput is already true\n            if (this._accessibleOutputs.text) {\n              return;\n            } else {\n              //make textOutput true\n              this._accessibleOutputs.text = true;\n              //create output for fallback\n              this._createOutput('textOutput', 'Fallback');\n              if (display === this.LABEL) {\n                //make textOutput label true\n                this._accessibleOutputs.textLabel = true;\n                //create output for label\n                this._createOutput('textOutput', 'Label');\n              }\n            }\n          };\n\n          /**\n           * <code class=\"language-javascript\">gridOutput()</code> lays out the\n           * content of the canvas in the form of a grid (html table) based\n           * on the spatial location of each shape. A brief\n           * description of the canvas is available before the table output.\n           * This description includes: color of the background, size of the canvas,\n           * number of objects, and object types (example: \"lavender blue canvas is\n           * 200 by 200 and contains 4 objects - 3 ellipses 1 rectangle\"). The grid\n           * describes the content spatially, each element is placed on a cell of the\n           * table depending on its position. Within each cell an element the color\n           * and type of shape of that element are available (example: \"orange ellipse\").\n           * These descriptions can be selected individually to get more details.\n           * A list of elements where shape, color, location, and area are described\n           * (example: \"orange ellipse location=top left area=1%\") is also available.\n           *\n           * <code class=\"language-javascript\">gridOutput()</code> and <code class=\"language-javascript\">gridOutput(FALLBACK)</code>\n           * make the output available in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">\n           * a sub DOM inside the canvas element</a> which is accessible to screen readers.\n           * <code class=\"language-javascript\">gridOutput(LABEL)</code> creates an\n           * additional div with the output adjacent to the canvas, this is useful\n           * for non-screen reader users that might want to display the output outside\n           * of the canvas' sub DOM as they code. However, using LABEL will create\n           * unnecessary redundancy for screen reader users. We recommend using LABEL\n           * only as part of the development process of a sketch and removing it before\n           * publishing or sharing with screen reader users.\n           *\n           * @method gridOutput\n           * @param  {Constant} [display] either FALLBACK or LABEL (Optional)\n           *\n           * @example\n           * <div>\n           * <code>\n           * gridOutput();\n           * background(148, 196, 0);\n           * fill(255, 0, 0);\n           * ellipse(20, 20, 20, 20);\n           * fill(0, 0, 255);\n           * rect(50, 50, 50, 50);\n           * </code>\n           * </div>\n           *\n           *\n           * <div>\n           * <code>\n           * let x = 0;\n           * function draw() {\n           *   gridOutput();\n           *   background(148, 196, 0);\n           *   fill(255, 0, 0);\n           *   ellipse(x, 20, 20, 20);\n           *   fill(0, 0, 255);\n           *   rect(50, 50, 50, 50);\n           *   ellipse(20, 20, 20, 20);\n           *   x += 0.1;\n           * }\n           * </code>\n           * </div>\n           *\n           */\n\n          _main.default.prototype.gridOutput = function(display) {\n            _main.default._validateParameters('gridOutput', arguments);\n            //if gridOutput is already true\n            if (this._accessibleOutputs.grid) {\n              return;\n            } else {\n              //make gridOutput true\n              this._accessibleOutputs.grid = true;\n              //create output for fallback\n              this._createOutput('gridOutput', 'Fallback');\n              if (display === this.LABEL) {\n                //make gridOutput label true\n                this._accessibleOutputs.gridLabel = true;\n                //create output for label\n                this._createOutput('gridOutput', 'Label');\n              }\n            }\n          };\n\n          //helper function returns true when accessible outputs are true\n          _main.default.prototype._addAccsOutput = function() {\n            //if there are no accessible outputs create object with all false\n            if (!this._accessibleOutputs) {\n              this._accessibleOutputs = {\n                text: false,\n                grid: false,\n                textLabel: false,\n                gridLabel: false\n              };\n            }\n            return this._accessibleOutputs.grid || this._accessibleOutputs.text;\n          };\n\n          //helper function that creates html structure for accessible outputs\n          _main.default.prototype._createOutput = function(type, display) {\n            var cnvId = this.canvas.id;\n            //if there are no ingredients create object. this object stores data for the outputs\n            if (!this.ingredients) {\n              this.ingredients = {\n                shapes: {},\n                colors: { background: 'white', fill: 'white', stroke: 'black' },\n                pShapes: ''\n              };\n            }\n            //if there is no dummyDOM create it\n            if (!this.dummyDOM) {\n              this.dummyDOM = document.getElementById(cnvId).parentNode;\n            }\n            var cIdT, container, inner;\n            var query = '';\n            if (display === 'Fallback') {\n              cIdT = cnvId + type;\n              container = cnvId + 'accessibleOutput';\n              if (!this.dummyDOM.querySelector('#'.concat(container))) {\n                //if there is no canvas description (see describe() and describeElement())\n                if (!this.dummyDOM.querySelector('#'.concat(cnvId, '_Description'))) {\n                  //create html structure inside of canvas\n                  this.dummyDOM.querySelector(\n                    '#'.concat(cnvId)\n                  ).innerHTML = '<div id=\"'.concat(\n                    container,\n                    '\" role=\"region\" aria-label=\"Canvas Outputs\"></div>'\n                  );\n                } else {\n                  //create html structure after canvas description container\n                  this.dummyDOM\n                    .querySelector('#'.concat(cnvId, '_Description'))\n                    .insertAdjacentHTML(\n                      'afterend',\n                      '<div id=\"'.concat(\n                        container,\n                        '\" role=\"region\" aria-label=\"Canvas Outputs\"></div>'\n                      )\n                    );\n                }\n              }\n            } else if (display === 'Label') {\n              query = display;\n              cIdT = cnvId + type + display;\n              container = cnvId + 'accessibleOutput' + display;\n              if (!this.dummyDOM.querySelector('#'.concat(container))) {\n                //if there is no canvas description label (see describe() and describeElement())\n                if (!this.dummyDOM.querySelector('#'.concat(cnvId, '_Label'))) {\n                  //create html structure adjacent to canvas\n                  this.dummyDOM\n                    .querySelector('#'.concat(cnvId))\n                    .insertAdjacentHTML(\n                      'afterend',\n                      '<div id=\"'.concat(container, '\"></div>')\n                    );\n                } else {\n                  //create html structure after canvas label\n                  this.dummyDOM\n                    .querySelector('#'.concat(cnvId, '_Label'))\n                    .insertAdjacentHTML(\n                      'afterend',\n                      '<div id=\"'.concat(container, '\"></div>')\n                    );\n                }\n              }\n            }\n            //create an object to store the latest output. this object is used in _updateTextOutput() and _updateGridOutput()\n            this._accessibleOutputs[cIdT] = {};\n            if (type === 'textOutput') {\n              query = '#'.concat(cnvId, 'gridOutput').concat(query); //query is used to check if gridOutput already exists\n              inner = '<div id=\"'\n                .concat(cIdT, '\">Text Output<div id=\"')\n                .concat(cIdT, 'Summary\" aria-label=\"text output summary\"><p id=\"')\n                .concat(cIdT, '_summary\"></p><ul id=\"')\n                .concat(cIdT, '_list\"></ul></div><table id=\"')\n                .concat(\n                  cIdT,\n                  '_shapeDetails\" summary=\"text output shape details\"></table></div>'\n                );\n              //if gridOutput already exists\n              if (this.dummyDOM.querySelector(query)) {\n                //create textOutput before gridOutput\n                this.dummyDOM.querySelector(query).insertAdjacentHTML('beforebegin', inner);\n              } else {\n                //create output inside of container\n                this.dummyDOM.querySelector('#'.concat(container)).innerHTML = inner;\n              }\n              //store output html elements\n              this._accessibleOutputs[cIdT].list = this.dummyDOM.querySelector(\n                '#'.concat(cIdT, '_list')\n              );\n            } else if (type === 'gridOutput') {\n              query = '#'.concat(cnvId, 'textOutput').concat(query); //query is used to check if textOutput already exists\n              inner = '<div id=\"'\n                .concat(cIdT, '\">Grid Output<p id=\"')\n                .concat(cIdT, '_summary\" aria-label=\"grid output summary\"><table id=\"')\n                .concat(cIdT, '_map\" summary=\"grid output content\"></table><ul id=\"')\n                .concat(\n                  cIdT,\n                  '_shapeDetails\" aria-label=\"grid output shape details\"></ul></div>'\n                );\n              //if textOutput already exists\n              if (this.dummyDOM.querySelector(query)) {\n                //create gridOutput after textOutput\n                this.dummyDOM.querySelector(query).insertAdjacentHTML('afterend', inner);\n              } else {\n                //create output inside of container\n                this.dummyDOM.querySelector('#'.concat(container)).innerHTML = inner;\n              }\n              //store output html elements\n              this._accessibleOutputs[cIdT].map = this.dummyDOM.querySelector(\n                '#'.concat(cIdT, '_map')\n              );\n            }\n            this._accessibleOutputs[cIdT].shapeDetails = this.dummyDOM.querySelector(\n              '#'.concat(cIdT, '_shapeDetails')\n            );\n\n            this._accessibleOutputs[cIdT].summary = this.dummyDOM.querySelector(\n              '#'.concat(cIdT, '_summary')\n            );\n          };\n\n          //this function is called at the end of setup and draw if using\n          //accessibleOutputs and calls update functions of outputs\n          _main.default.prototype._updateAccsOutput = function() {\n            var cnvId = this.canvas.id;\n            //if the shapes are not the same as before\n            if (JSON.stringify(this.ingredients.shapes) !== this.ingredients.pShapes) {\n              //save current shapes as string in pShapes\n              this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes);\n              if (this._accessibleOutputs.text) {\n                this._updateTextOutput(cnvId + 'textOutput');\n              }\n              if (this._accessibleOutputs.grid) {\n                this._updateGridOutput(cnvId + 'gridOutput');\n              }\n              if (this._accessibleOutputs.textLabel) {\n                this._updateTextOutput(cnvId + 'textOutputLabel');\n              }\n              if (this._accessibleOutputs.gridLabel) {\n                this._updateGridOutput(cnvId + 'gridOutputLabel');\n              }\n            }\n          };\n\n          //helper function that resets all ingredients when background is called\n          //and saves background color name\n          _main.default.prototype._accsBackground = function(args) {\n            //save current shapes as string in pShapes\n            this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes);\n            //empty shapes JSON\n            this.ingredients.shapes = {};\n            //update background different\n            if (this.ingredients.colors.backgroundRGBA !== args) {\n              this.ingredients.colors.backgroundRGBA = args;\n              this.ingredients.colors.background = this._rgbColorName(args);\n            }\n          };\n\n          //helper function that gets fill and stroke of shapes\n          _main.default.prototype._accsCanvasColors = function(f, args) {\n            if (f === 'fill') {\n              //update fill different\n              if (this.ingredients.colors.fillRGBA !== args) {\n                this.ingredients.colors.fillRGBA = args;\n                this.ingredients.colors.fill = this._rgbColorName(args);\n              }\n            } else if (f === 'stroke') {\n              //update stroke if different\n              if (this.ingredients.colors.strokeRGBA !== args) {\n                this.ingredients.colors.strokeRGBA = args;\n                this.ingredients.colors.stroke = this._rgbColorName(args);\n              }\n            }\n          };\n\n          //builds ingredients.shapes used for building outputs\n          _main.default.prototype._accsOutput = function(f, args) {\n            if (f === 'ellipse' && args[2] === args[3]) {\n              f = 'circle';\n            } else if (f === 'rectangle' && args[2] === args[3]) {\n              f = 'square';\n            }\n            var include = {};\n            var add = true;\n            var middle = _getMiddle(f, args);\n            if (f === 'line') {\n              //make color stroke\n              include.color = this.ingredients.colors.stroke;\n              //get lenght\n              include.length = Math.round(this.dist(args[0], args[1], args[2], args[3]));\n              //get position of end points\n              var p1 = _getPos([args[0], [1]], this.width, this.height);\n              var p2 = _getPos([args[2], [3]], this.width, this.height);\n              include.loc = _canvasLocator(middle, this.width, this.height);\n              if (p1 === p2) {\n                include.pos = 'at '.concat(p1);\n              } else {\n                include.pos = 'from '.concat(p1, ' to ').concat(p2);\n              }\n            } else {\n              if (f === 'point') {\n                //make color stroke\n                include.color = this.ingredients.colors.stroke;\n              } else {\n                //make color fill\n                include.color = this.ingredients.colors.fill;\n                //get area of shape\n                include.area = _getArea(f, args, this.width, this.height);\n              }\n              //get middle of shapes\n              //calculate position using middle of shape\n              include.pos = _getPos(middle, this.width, this.height);\n              //calculate location using middle of shape\n              include.loc = _canvasLocator(middle, this.width, this.height);\n            }\n            //if it is the first time this shape is created\n            if (!this.ingredients.shapes[f]) {\n              this.ingredients.shapes[f] = [include];\n              //if other shapes of this type have been created\n            } else if (this.ingredients.shapes[f] !== [include]) {\n              //for every shape of this type\n              for (var y in this.ingredients.shapes[f]) {\n                //compare it with current shape and if it already exists make add false\n                if (\n                  JSON.stringify(this.ingredients.shapes[f][y]) === JSON.stringify(include)\n                ) {\n                  add = false;\n                }\n              }\n              //add shape by pushing it to the end\n              if (add === true) {\n                this.ingredients.shapes[f].push(include);\n              }\n            }\n          };\n\n          //gets middle point / centroid of shape\n          function _getMiddle(f, args) {\n            var x, y;\n            if (\n              f === 'rectangle' ||\n              f === 'ellipse' ||\n              f === 'arc' ||\n              f === 'circle' ||\n              f === 'square'\n            ) {\n              x = Math.round(args[0] + args[2] / 2);\n              y = Math.round(args[1] + args[3] / 2);\n            } else if (f === 'triangle') {\n              x = (args[0] + args[2] + args[4]) / 3;\n              y = (args[1] + args[3] + args[5]) / 3;\n            } else if (f === 'quadrilateral') {\n              x = (args[0] + args[2] + args[4] + args[6]) / 4;\n              y = (args[1] + args[3] + args[5] + args[7]) / 4;\n            } else if (f === 'line') {\n              x = (args[0] + args[2]) / 2;\n              y = (args[1] + args[3]) / 2;\n            } else {\n              x = args[0];\n              y = args[1];\n            }\n            return [x, y];\n          }\n\n          //gets position of shape in the canvas\n          function _getPos(args, canvasWidth, canvasHeight) {\n            if (args[0] < 0.4 * canvasWidth) {\n              if (args[1] < 0.4 * canvasHeight) {\n                return 'top left';\n              } else if (args[1] > 0.6 * canvasHeight) {\n                return 'bottom left';\n              } else {\n                return 'mid left';\n              }\n            } else if (args[0] > 0.6 * canvasWidth) {\n              if (args[1] < 0.4 * canvasHeight) {\n                return 'top right';\n              } else if (args[1] > 0.6 * canvasHeight) {\n                return 'bottom right';\n              } else {\n                return 'mid right';\n              }\n            } else {\n              if (args[1] < 0.4 * canvasHeight) {\n                return 'top middle';\n              } else if (args[1] > 0.6 * canvasHeight) {\n                return 'bottom middle';\n              } else {\n                return 'middle';\n              }\n            }\n          }\n\n          //locates shape in a 10*10 grid\n          function _canvasLocator(args, canvasWidth, canvasHeight) {\n            var noRows = 10;\n            var noCols = 10;\n            var locX = Math.floor(args[0] / canvasWidth * noRows);\n            var locY = Math.floor(args[1] / canvasHeight * noCols);\n            if (locX === noRows) {\n              locX = locX - 1;\n            }\n            if (locY === noCols) {\n              locY = locY - 1;\n            }\n            return {\n              locX: locX,\n              locY: locY\n            };\n          }\n\n          //calculates area of shape\n          function _getArea(objectType, shapeArgs, canvasWidth, canvasHeight) {\n            var objectArea = 0;\n            if (objectType === 'arc') {\n              // area of full ellipse = PI * horizontal radius * vertical radius.\n              // therefore, area of arc = difference bet. arc's start and end radians * horizontal radius * vertical radius.\n              // the below expression is adjusted for negative values and differences in arc's start and end radians over PI*2\n              var arcSizeInRadians =\n                ((shapeArgs[5] - shapeArgs[4]) % (Math.PI * 2) + Math.PI * 2) %\n                (Math.PI * 2);\n              objectArea = arcSizeInRadians * shapeArgs[2] * shapeArgs[3] / 8;\n              if (shapeArgs[6] === 'open' || shapeArgs[6] === 'chord') {\n                // when the arc's mode is OPEN or CHORD, we need to account for the area of the triangle that is formed to close the arc\n                // (Ax( By −  Cy) + Bx(Cy − Ay) + Cx(Ay − By ) )/2\n                var Ax = shapeArgs[0];\n                var Ay = shapeArgs[1];\n                var Bx =\n                  shapeArgs[0] + shapeArgs[2] / 2 * Math.cos(shapeArgs[4]).toFixed(2);\n                var By =\n                  shapeArgs[1] + shapeArgs[3] / 2 * Math.sin(shapeArgs[4]).toFixed(2);\n                var Cx =\n                  shapeArgs[0] + shapeArgs[2] / 2 * Math.cos(shapeArgs[5]).toFixed(2);\n                var Cy =\n                  shapeArgs[1] + shapeArgs[3] / 2 * Math.sin(shapeArgs[5]).toFixed(2);\n                var areaOfExtraTriangle =\n                  Math.abs(Ax * (By - Cy) + Bx * (Cy - Ay) + Cx * (Ay - By)) / 2;\n                if (arcSizeInRadians > Math.PI) {\n                  objectArea = objectArea + areaOfExtraTriangle;\n                } else {\n                  objectArea = objectArea - areaOfExtraTriangle;\n                }\n              }\n            } else if (objectType === 'ellipse' || objectType === 'circle') {\n              objectArea = 3.14 * shapeArgs[2] / 2 * shapeArgs[3] / 2;\n            } else if (objectType === 'line') {\n              objectArea = 0;\n            } else if (objectType === 'point') {\n              objectArea = 0;\n            } else if (objectType === 'quadrilateral') {\n              // ((x4+x1)*(y4-y1)+(x1+x2)*(y1-y2)+(x2+x3)*(y2-y3)+(x3+x4)*(y3-y4))/2\n              objectArea =\n                Math.abs(\n                  (shapeArgs[6] + shapeArgs[0]) * (shapeArgs[7] - shapeArgs[1]) +\n                    (shapeArgs[0] + shapeArgs[2]) * (shapeArgs[1] - shapeArgs[3]) +\n                    (shapeArgs[2] + shapeArgs[4]) * (shapeArgs[3] - shapeArgs[5]) +\n                    (shapeArgs[4] + shapeArgs[6]) * (shapeArgs[5] - shapeArgs[7])\n                ) / 2;\n            } else if (objectType === 'rectangle' || objectType === 'square') {\n              objectArea = shapeArgs[2] * shapeArgs[3];\n            } else if (objectType === 'triangle') {\n              objectArea =\n                Math.abs(\n                  shapeArgs[0] * (shapeArgs[3] - shapeArgs[5]) +\n                    shapeArgs[2] * (shapeArgs[5] - shapeArgs[1]) +\n                    shapeArgs[4] * (shapeArgs[1] - shapeArgs[3])\n                ) / 2;\n              // (Ax( By −  Cy) + Bx(Cy − Ay) + Cx(Ay − By ))/2\n            }\n\n            return Math.round(objectArea * 100 / (canvasWidth * canvasHeight));\n          }\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      42: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** //the functions in this file support updating the text output\n           * @module Environment\n           * @submodule Environment\n           * @for p5\n           * @requires core\n           */\n          //updates textOutput\n          _main.default.prototype._updateTextOutput = function(idT) {\n            //if html structure is not there yet\n            if (!this.dummyDOM.querySelector('#'.concat(idT, '_summary'))) {\n              return;\n            }\n            var current = this._accessibleOutputs[idT];\n            //create shape list\n            var innerList = _shapeList(idT, this.ingredients.shapes);\n            //create output summary\n            var innerSummary = _textSummary(\n              innerList.numShapes,\n              this.ingredients.colors.background,\n              this.width,\n              this.height\n            );\n\n            //create shape details\n            var innerShapeDetails = _shapeDetails(idT, this.ingredients.shapes);\n            //if it is different from current summary\n            if (innerSummary !== current.summary.innerHTML) {\n              //update\n              current.summary.innerHTML = innerSummary;\n            }\n            //if it is different from current shape list\n            if (innerList.listShapes !== current.list.innerHTML) {\n              //update\n              current.list.innerHTML = innerList.listShapes;\n            }\n            //if it is different from current shape details\n            if (innerShapeDetails !== current.shapeDetails.innerHTML) {\n              //update\n              current.shapeDetails.innerHTML = innerShapeDetails;\n            }\n            this._accessibleOutputs[idT] = current;\n          };\n\n          //Builds textOutput summary\n          function _textSummary(numShapes, background, width, height) {\n            var text = 'Your output is a, '\n              .concat(width, ' by ')\n              .concat(height, ' pixels, ')\n              .concat(background, ' canvas containing the following');\n            if (numShapes === 1) {\n              text = ''.concat(text, ' shape:');\n            } else {\n              text = ''.concat(text, ' ').concat(numShapes, ' shapes:');\n            }\n            return text;\n          }\n\n          //Builds textOutput table with shape details\n          function _shapeDetails(idT, ingredients) {\n            var shapeDetails = '';\n            var shapeNumber = 0;\n            //goes trhough every shape type in ingredients\n            for (var x in ingredients) {\n              //and for every shape\n              for (var y in ingredients[x]) {\n                //it creates a table row\n                var row = '<tr id=\"'\n                  .concat(idT, 'shape')\n                  .concat(shapeNumber, '\"><th>')\n                  .concat(ingredients[x][y].color, ' ')\n                  .concat(x, '</th>');\n                if (x === 'line') {\n                  row =\n                    row +\n                    '<td>location = '\n                      .concat(ingredients[x][y].pos, '</td><td>length = ')\n                      .concat(ingredients[x][y].length, ' pixels</td></tr>');\n                } else {\n                  row = row + '<td>location = '.concat(ingredients[x][y].pos, '</td>');\n                  if (x !== 'point') {\n                    row = row + '<td> area = '.concat(ingredients[x][y].area, '%</td>');\n                  }\n                  row = row + '</tr>';\n                }\n                shapeDetails = shapeDetails + row;\n                shapeNumber++;\n              }\n            }\n            return shapeDetails;\n          }\n\n          //Builds textOutput shape list\n          function _shapeList(idT, ingredients) {\n            var shapeList = '';\n            var shapeNumber = 0;\n            //goes trhough every shape type in ingredients\n            for (var x in ingredients) {\n              for (var y in ingredients[x]) {\n                //it creates a line in a list\n                var _line = '<li><a href=\"#'\n                  .concat(idT, 'shape')\n                  .concat(shapeNumber, '\">')\n                  .concat(ingredients[x][y].color, ' ')\n                  .concat(x, '</a>');\n                if (x === 'line') {\n                  _line =\n                    _line +\n                    ', '\n                      .concat(ingredients[x][y].pos, ', ')\n                      .concat(ingredients[x][y].length, ' pixels long.</li>');\n                } else {\n                  _line = _line + ', at '.concat(ingredients[x][y].pos);\n                  if (x !== 'point') {\n                    _line =\n                      _line +\n                      ', covering '.concat(ingredients[x][y].area, '% of the canvas');\n                  }\n                  _line = _line + '.</li>';\n                }\n                shapeList = shapeList + _line;\n                shapeNumber++;\n              }\n            }\n            return { numShapes: shapeNumber, listShapes: shapeList };\n          }\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      43: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          var _main = _interopRequireDefault(_dereq_('./core/main'));\n          _dereq_('./core/constants');\n          _dereq_('./core/environment');\n          _dereq_('./core/friendly_errors/stacktrace');\n          _dereq_('./core/friendly_errors/validate_params');\n          _dereq_('./core/friendly_errors/file_errors');\n          _dereq_('./core/friendly_errors/fes_core');\n          _dereq_('./core/helpers');\n          _dereq_('./core/legacy');\n          _dereq_('./core/preload');\n          _dereq_('./core/p5.Element');\n          _dereq_('./core/p5.Graphics');\n          _dereq_('./core/p5.Renderer');\n          _dereq_('./core/p5.Renderer2D');\n          _dereq_('./core/rendering');\n          _dereq_('./core/shim');\n          _dereq_('./core/structure');\n          _dereq_('./core/transform');\n          _dereq_('./core/shape/2d_primitives');\n          _dereq_('./core/shape/attributes');\n          _dereq_('./core/shape/curves');\n          _dereq_('./core/shape/vertex');\n\n          _dereq_('./accessibility/outputs');\n          _dereq_('./accessibility/textOutput');\n          _dereq_('./accessibility/gridOutput');\n          _dereq_('./accessibility/color_namer');\n\n          _dereq_('./color/color_conversion');\n          _dereq_('./color/creating_reading');\n          _dereq_('./color/p5.Color');\n          _dereq_('./color/setting');\n\n          _dereq_('./data/p5.TypedDict');\n          _dereq_('./data/local_storage.js');\n\n          _dereq_('./dom/dom');\n\n          _dereq_('./accessibility/describe');\n\n          _dereq_('./events/acceleration');\n          _dereq_('./events/keyboard');\n          _dereq_('./events/mouse');\n          _dereq_('./events/touch');\n\n          _dereq_('./image/filters');\n          _dereq_('./image/image');\n          _dereq_('./image/loading_displaying');\n          _dereq_('./image/p5.Image');\n          _dereq_('./image/pixels');\n\n          _dereq_('./io/files');\n          _dereq_('./io/p5.Table');\n          _dereq_('./io/p5.TableRow');\n          _dereq_('./io/p5.XML');\n\n          _dereq_('./math/calculation');\n          _dereq_('./math/math');\n          _dereq_('./math/noise');\n          _dereq_('./math/p5.Vector');\n          _dereq_('./math/random');\n          _dereq_('./math/trigonometry');\n\n          _dereq_('./typography/attributes');\n          _dereq_('./typography/loading_displaying');\n          _dereq_('./typography/p5.Font');\n\n          _dereq_('./utilities/array_functions');\n          _dereq_('./utilities/conversion');\n          _dereq_('./utilities/string_functions');\n          _dereq_('./utilities/time_date');\n\n          _dereq_('./webgl/3d_primitives');\n          _dereq_('./webgl/interaction');\n          _dereq_('./webgl/light');\n          _dereq_('./webgl/loading');\n          _dereq_('./webgl/material');\n          _dereq_('./webgl/p5.Camera');\n          _dereq_('./webgl/p5.Geometry');\n          _dereq_('./webgl/p5.Matrix');\n          _dereq_('./webgl/p5.RendererGL.Immediate');\n          _dereq_('./webgl/p5.RendererGL');\n          _dereq_('./webgl/p5.RendererGL.Retained');\n          _dereq_('./webgl/p5.Shader');\n          _dereq_('./webgl/p5.RenderBuffer');\n          _dereq_('./webgl/p5.Texture');\n          _dereq_('./webgl/text');\n\n          _dereq_('./core/init');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } // core\n          //accessibility\n          // color\n          // data\n          // DOM\n          // accessibility\n          // events\n          // image\n          // io\n          // math\n          // typography\n          // utilities\n          // webgl\n          module.exports = _main.default;\n        },\n        {\n          './accessibility/color_namer': 38,\n          './accessibility/describe': 39,\n          './accessibility/gridOutput': 40,\n          './accessibility/outputs': 41,\n          './accessibility/textOutput': 42,\n          './color/color_conversion': 44,\n          './color/creating_reading': 45,\n          './color/p5.Color': 46,\n          './color/setting': 47,\n          './core/constants': 48,\n          './core/environment': 49,\n          './core/friendly_errors/fes_core': 51,\n          './core/friendly_errors/file_errors': 52,\n          './core/friendly_errors/stacktrace': 53,\n          './core/friendly_errors/validate_params': 54,\n          './core/helpers': 55,\n          './core/init': 56,\n          './core/legacy': 58,\n          './core/main': 59,\n          './core/p5.Element': 60,\n          './core/p5.Graphics': 61,\n          './core/p5.Renderer': 62,\n          './core/p5.Renderer2D': 63,\n          './core/preload': 64,\n          './core/rendering': 65,\n          './core/shape/2d_primitives': 66,\n          './core/shape/attributes': 67,\n          './core/shape/curves': 68,\n          './core/shape/vertex': 69,\n          './core/shim': 70,\n          './core/structure': 71,\n          './core/transform': 72,\n          './data/local_storage.js': 73,\n          './data/p5.TypedDict': 74,\n          './dom/dom': 75,\n          './events/acceleration': 76,\n          './events/keyboard': 77,\n          './events/mouse': 78,\n          './events/touch': 79,\n          './image/filters': 80,\n          './image/image': 81,\n          './image/loading_displaying': 82,\n          './image/p5.Image': 83,\n          './image/pixels': 84,\n          './io/files': 85,\n          './io/p5.Table': 86,\n          './io/p5.TableRow': 87,\n          './io/p5.XML': 88,\n          './math/calculation': 89,\n          './math/math': 90,\n          './math/noise': 91,\n          './math/p5.Vector': 92,\n          './math/random': 93,\n          './math/trigonometry': 94,\n          './typography/attributes': 95,\n          './typography/loading_displaying': 96,\n          './typography/p5.Font': 97,\n          './utilities/array_functions': 98,\n          './utilities/conversion': 99,\n          './utilities/string_functions': 100,\n          './utilities/time_date': 101,\n          './webgl/3d_primitives': 102,\n          './webgl/interaction': 103,\n          './webgl/light': 104,\n          './webgl/loading': 105,\n          './webgl/material': 106,\n          './webgl/p5.Camera': 107,\n          './webgl/p5.Geometry': 108,\n          './webgl/p5.Matrix': 109,\n          './webgl/p5.RenderBuffer': 110,\n          './webgl/p5.RendererGL': 113,\n          './webgl/p5.RendererGL.Immediate': 111,\n          './webgl/p5.RendererGL.Retained': 112,\n          './webgl/p5.Shader': 114,\n          './webgl/p5.Texture': 115,\n          './webgl/text': 116\n        }\n      ],\n      44: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Color\n           * @submodule Color Conversion\n           * @for p5\n           * @requires core\n           */ /**\n           * Conversions adapted from <http://www.easyrgb.com/en/math.php>.\n           *\n           * In these functions, hue is always in the range [0, 1], just like all other\n           * components are in the range [0, 1]. 'Brightness' and 'value' are used\n           * interchangeably.\n           */ _main.default.ColorConversion = {};\n          /**\n           * Convert an HSBA array to HSLA.\n           */ _main.default.ColorConversion._hsbaToHSLA = function(hsba) {\n            var hue = hsba[0];\n            var sat = hsba[1];\n            var val = hsba[2]; // Calculate lightness.\n            var li = (2 - sat) * val / 2; // Convert saturation.\n            if (li !== 0) {\n              if (li === 1) {\n                sat = 0;\n              } else if (li < 0.5) {\n                sat = sat / (2 - sat);\n              } else {\n                sat = sat * val / (2 - li * 2);\n              }\n            }\n\n            // Hue and alpha stay the same.\n            return [hue, sat, li, hsba[3]];\n          };\n\n          /**\n           * Convert an HSBA array to RGBA.\n           */\n          _main.default.ColorConversion._hsbaToRGBA = function(hsba) {\n            var hue = hsba[0] * 6; // We will split hue into 6 sectors.\n            var sat = hsba[1];\n            var val = hsba[2];\n\n            var RGBA = [];\n\n            if (sat === 0) {\n              RGBA = [val, val, val, hsba[3]]; // Return early if grayscale.\n            } else {\n              var sector = Math.floor(hue);\n              var tint1 = val * (1 - sat);\n              var tint2 = val * (1 - sat * (hue - sector));\n              var tint3 = val * (1 - sat * (1 + sector - hue));\n              var red, green, blue;\n              if (sector === 1) {\n                // Yellow to green.\n                red = tint2;\n                green = val;\n                blue = tint1;\n              } else if (sector === 2) {\n                // Green to cyan.\n                red = tint1;\n                green = val;\n                blue = tint3;\n              } else if (sector === 3) {\n                // Cyan to blue.\n                red = tint1;\n                green = tint2;\n                blue = val;\n              } else if (sector === 4) {\n                // Blue to magenta.\n                red = tint3;\n                green = tint1;\n                blue = val;\n              } else if (sector === 5) {\n                // Magenta to red.\n                red = val;\n                green = tint1;\n                blue = tint2;\n              } else {\n                // Red to yellow (sector could be 0 or 6).\n                red = val;\n                green = tint3;\n                blue = tint1;\n              }\n              RGBA = [red, green, blue, hsba[3]];\n            }\n\n            return RGBA;\n          };\n\n          /**\n           * Convert an HSLA array to HSBA.\n           */\n          _main.default.ColorConversion._hslaToHSBA = function(hsla) {\n            var hue = hsla[0];\n            var sat = hsla[1];\n            var li = hsla[2];\n\n            // Calculate brightness.\n            var val;\n            if (li < 0.5) {\n              val = (1 + sat) * li;\n            } else {\n              val = li + sat - li * sat;\n            }\n\n            // Convert saturation.\n            sat = 2 * (val - li) / val;\n\n            // Hue and alpha stay the same.\n            return [hue, sat, val, hsla[3]];\n          };\n\n          /**\n           * Convert an HSLA array to RGBA.\n           *\n           * We need to change basis from HSLA to something that can be more easily be\n           * projected onto RGBA. We will choose hue and brightness as our first two\n           * components, and pick a convenient third one ('zest') so that we don't need\n           * to calculate formal HSBA saturation.\n           */\n          _main.default.ColorConversion._hslaToRGBA = function(hsla) {\n            var hue = hsla[0] * 6; // We will split hue into 6 sectors.\n            var sat = hsla[1];\n            var li = hsla[2];\n\n            var RGBA = [];\n\n            if (sat === 0) {\n              RGBA = [li, li, li, hsla[3]]; // Return early if grayscale.\n            } else {\n              // Calculate brightness.\n              var val;\n              if (li < 0.5) {\n                val = (1 + sat) * li;\n              } else {\n                val = li + sat - li * sat;\n              }\n\n              // Define zest.\n              var zest = 2 * li - val;\n\n              // Implement projection (project onto green by default).\n              var hzvToRGB = function hzvToRGB(hue, zest, val) {\n                if (hue < 0) {\n                  // Hue must wrap to allow projection onto red and blue.\n                  hue += 6;\n                } else if (hue >= 6) {\n                  hue -= 6;\n                }\n                if (hue < 1) {\n                  // Red to yellow (increasing green).\n                  return zest + (val - zest) * hue;\n                } else if (hue < 3) {\n                  // Yellow to cyan (greatest green).\n                  return val;\n                } else if (hue < 4) {\n                  // Cyan to blue (decreasing green).\n                  return zest + (val - zest) * (4 - hue);\n                } else {\n                  // Blue to red (least green).\n                  return zest;\n                }\n              };\n\n              // Perform projections, offsetting hue as necessary.\n              RGBA = [\n                hzvToRGB(hue + 2, zest, val),\n                hzvToRGB(hue, zest, val),\n                hzvToRGB(hue - 2, zest, val),\n                hsla[3]\n              ];\n            }\n\n            return RGBA;\n          };\n\n          /**\n           * Convert an RGBA array to HSBA.\n           */\n          _main.default.ColorConversion._rgbaToHSBA = function(rgba) {\n            var red = rgba[0];\n            var green = rgba[1];\n            var blue = rgba[2];\n\n            var val = Math.max(red, green, blue);\n            var chroma = val - Math.min(red, green, blue);\n\n            var hue, sat;\n            if (chroma === 0) {\n              // Return early if grayscale.\n              hue = 0;\n              sat = 0;\n            } else {\n              sat = chroma / val;\n              if (red === val) {\n                // Magenta to yellow.\n                hue = (green - blue) / chroma;\n              } else if (green === val) {\n                // Yellow to cyan.\n                hue = 2 + (blue - red) / chroma;\n              } else if (blue === val) {\n                // Cyan to magenta.\n                hue = 4 + (red - green) / chroma;\n              }\n              if (hue < 0) {\n                // Confine hue to the interval [0, 1).\n                hue += 6;\n              } else if (hue >= 6) {\n                hue -= 6;\n              }\n            }\n\n            return [hue / 6, sat, val, rgba[3]];\n          };\n\n          /**\n           * Convert an RGBA array to HSLA.\n           */\n          _main.default.ColorConversion._rgbaToHSLA = function(rgba) {\n            var red = rgba[0];\n            var green = rgba[1];\n            var blue = rgba[2];\n\n            var val = Math.max(red, green, blue);\n            var min = Math.min(red, green, blue);\n            var li = val + min; // We will halve this later.\n            var chroma = val - min;\n\n            var hue, sat;\n            if (chroma === 0) {\n              // Return early if grayscale.\n              hue = 0;\n              sat = 0;\n            } else {\n              if (li < 1) {\n                sat = chroma / li;\n              } else {\n                sat = chroma / (2 - li);\n              }\n              if (red === val) {\n                // Magenta to yellow.\n                hue = (green - blue) / chroma;\n              } else if (green === val) {\n                // Yellow to cyan.\n                hue = 2 + (blue - red) / chroma;\n              } else if (blue === val) {\n                // Cyan to magenta.\n                hue = 4 + (red - green) / chroma;\n              }\n              if (hue < 0) {\n                // Confine hue to the interval [0, 1).\n                hue += 6;\n              } else if (hue >= 6) {\n                hue -= 6;\n              }\n            }\n\n            return [hue / 6, sat, li / 2, rgba[3]];\n          };\n          var _default = _main.default.ColorConversion;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      45: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          _dereq_('./p5.Color');\n          _dereq_('../core/friendly_errors/validate_params');\n          _dereq_('../core/friendly_errors/file_errors');\n          _dereq_('../core/friendly_errors/fes_core');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Color\n           * @submodule Creating & Reading\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ /**\n           * Extracts the alpha value from a color or pixel array.\n           *\n           * @method alpha\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the alpha value\n           *\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * let c = color(0, 126, 255, 102);\n           * fill(c);\n           * rect(15, 15, 35, 70);\n           * let value = alpha(c); // Sets 'value' to 102\n           * fill(value);\n           * rect(50, 15, 35, 70);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Left half of canvas light blue and right half light charcoal grey.\n           */ _main.default.prototype.alpha = function(c) {\n            _main.default._validateParameters('alpha', arguments);\n            return this.color(c)._getAlpha();\n          };\n\n          /**\n           * Extracts the blue value from a color or pixel array.\n           *\n           * @method blue\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the blue value\n           * @example\n           * <div>\n           * <code>\n           * let c = color(175, 100, 220);\n           * fill(c);\n           * rect(15, 20, 35, 60); // Draw left rectangle\n           * let blueValue = blue(c);\n           * fill(0, 0, blueValue);\n           * rect(50, 20, 35, 60); // Draw right rectangle\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Left half of canvas light purple and right half a royal blue.\n           */\n          _main.default.prototype.blue = function(c) {\n            _main.default._validateParameters('blue', arguments);\n            return this.color(c)._getBlue();\n          };\n\n          /**\n           * Extracts the HSB brightness value from a color or pixel array.\n           *\n           * @method brightness\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the brightness value\n           *\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 255);\n           * let c = color(0, 126, 255);\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = brightness(c); // Sets 'value' to 255\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 255);\n           * let c = color('hsb(60, 100%, 50%)');\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = brightness(c); // A 'value' of 50% is 127.5\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Left half of canvas salmon pink and the right half with it's brightness colored white.\n           * Left half of canvas olive colored and the right half with it's brightness color gray.\n           */\n          _main.default.prototype.brightness = function(c) {\n            _main.default._validateParameters('brightness', arguments);\n            return this.color(c)._getBrightness();\n          };\n\n          /**\n           * Creates colors for storing in variables of the color datatype. The\n           * parameters are interpreted as RGB or HSB values depending on the\n           * current <a href=\"#/p5/colorMode\">colorMode()</a>. The default mode is RGB values from 0 to 255\n           * and, therefore, the function call color(255, 204, 0) will return a\n           * bright yellow color.\n           *\n           * Note that if only one value is provided to <a href=\"#/p5/color\">color()</a>, it will be interpreted\n           * as a grayscale value. Add a second value, and it will be used for alpha\n           * transparency. When three values are specified, they are interpreted as\n           * either RGB or HSB values. Adding a fourth value applies alpha\n           * transparency.\n           *\n           * If a single string argument is provided, RGB, RGBA and Hex CSS color\n           * strings and all named color strings are supported. In this case, an alpha\n           * number value as a second argument is not supported, the RGBA form should be\n           * used.\n           *\n           * @method color\n           * @param  {Number} gray number specifying value between white and black.\n           * @param  {Number} [alpha] alpha value relative to current color range\n           *                                 (default is 0-255)\n           * @return {p5.Color} resulting color\n           *\n           * @example\n           * <div>\n           * <code>\n           * let c = color(255, 204, 0);\n           * fill(c);\n           * noStroke();\n           * rect(30, 20, 55, 55);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let c = color(255, 204, 0);\n           * fill(c);\n           * noStroke();\n           * ellipse(25, 25, 80, 80); // Draw left circle\n           * // Using only one value generates a grayscale value.\n           * c = color(65);\n           * fill(c);\n           * ellipse(75, 75, 80, 80);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // You can use named SVG & CSS colors\n           * let c = color('magenta');\n           * fill(c);\n           * noStroke();\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Example of hex color codes\n           * noStroke();\n           * let c = color('#0f0');\n           * fill(c);\n           * rect(0, 10, 45, 80);\n           * c = color('#00ff00');\n           * fill(c);\n           * rect(55, 10, 45, 80);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // RGB and RGBA color strings are also supported\n           * // these all set to the same color (solid blue)\n           * let c;\n           * noStroke();\n           * c = color('rgb(0,0,255)');\n           * fill(c);\n           * rect(10, 10, 35, 35); // Draw rectangle\n           * c = color('rgb(0%, 0%, 100%)');\n           * fill(c);\n           * rect(55, 10, 35, 35); // Draw rectangle\n           * c = color('rgba(0, 0, 255, 1)');\n           * fill(c);\n           * rect(10, 55, 35, 35); // Draw rectangle\n           * c = color('rgba(0%, 0%, 100%, 1)');\n           * fill(c);\n           * rect(55, 55, 35, 35); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // HSL color can also be specified by value\n           * let c = color('hsl(160, 100%, 50%)');\n           * noStroke();\n           * fill(c);\n           * rect(0, 10, 45, 80); // Draw rectangle\n           * c = color('hsla(160, 100%, 50%, 0.5)');\n           * fill(c);\n           * rect(55, 10, 45, 80); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // HSB color can also be specified\n           * let c = color('hsb(160, 100%, 50%)');\n           * noStroke();\n           * fill(c);\n           * rect(0, 10, 45, 80); // Draw rectangle\n           * c = color('hsba(160, 100%, 50%, 0.5)');\n           * fill(c);\n           * rect(55, 10, 45, 80); // Draw rectangle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noStroke();\n           * let c = color(50, 55, 100);\n           * fill(c);\n           * rect(0, 10, 45, 80); // Draw left rect\n           * colorMode(HSB, 100);\n           * c = color(50, 55, 100);\n           * fill(c);\n           * rect(55, 10, 45, 80);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Yellow rect in middle right of canvas, with 55 pixel width and height.\n           * Yellow ellipse in top left of canvas, black ellipse in bottom right,both 80x80.\n           * Bright fuchsia rect in middle of canvas, 60 pixel width and height.\n           * Two bright green rects on opposite sides of the canvas, both 45x80.\n           * Four blue rects in each corner of the canvas, each are 35x35.\n           * Bright sea green rect on left and darker rect on right of canvas, both 45x80.\n           * Dark green rect on left and lighter green rect on right of canvas, both 45x80.\n           * Dark blue rect on left and light teal rect on right of canvas, both 45x80.\n           */\n\n          /**\n           * @method color\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           * @return {p5.Color}\n           */\n\n          /**\n           * @method color\n           * @param  {String}        value   a color string\n           * @return {p5.Color}\n           */\n\n          /**\n           * @method color\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @return {p5.Color}\n           */\n\n          /**\n           * @method color\n           * @param  {p5.Color}     color\n           * @return {p5.Color}\n           */\n          _main.default.prototype.color = function() {\n            _main.default._validateParameters('color', arguments);\n            if (arguments[0] instanceof _main.default.Color) {\n              return arguments[0]; // Do nothing if argument is already a color object.\n            }\n\n            var args = arguments[0] instanceof Array ? arguments[0] : arguments;\n            return new _main.default.Color(this, args);\n          };\n\n          /**\n           * Extracts the green value from a color or pixel array.\n           *\n           * @method green\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the green value\n           * @example\n           * <div>\n           * <code>\n           * let c = color(20, 75, 200); // Define color 'c'\n           * fill(c); // Use color variable 'c' as fill color\n           * rect(15, 20, 35, 60); // Draw left rectangle\n           *\n           * let greenValue = green(c); // Get green in 'c'\n           * print(greenValue); // Print \"75.0\"\n           * fill(0, greenValue, 0); // Use 'greenValue' in new fill\n           * rect(50, 20, 35, 60); // Draw right rectangle\n           * </code>\n           * </div>\n           *\n           * @alt\n           * blue rect on left and green on right, both with black outlines & 35x60.\n           */\n          _main.default.prototype.green = function(c) {\n            _main.default._validateParameters('green', arguments);\n            return this.color(c)._getGreen();\n          };\n\n          /**\n           * Extracts the hue value from a color or pixel array.\n           *\n           * Hue exists in both HSB and HSL. This function will return the\n           * HSB-normalized hue when supplied with an HSB color object (or when supplied\n           * with a pixel array while the color mode is HSB), but will default to the\n           * HSL-normalized hue otherwise. (The values will only be different if the\n           * maximum hue setting for each system is different.)\n           *\n           * @method hue\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the hue\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 255);\n           * let c = color(0, 126, 255);\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = hue(c); // Sets 'value' to \"0\"\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * salmon pink rect on left and black on right, both 35x60.\n           */\n          _main.default.prototype.hue = function(c) {\n            _main.default._validateParameters('hue', arguments);\n            return this.color(c)._getHue();\n          };\n\n          /**\n           * Blends two colors to find a third color somewhere between them. The amt\n           * parameter is the amount to interpolate between the two values where 0.0\n           * equal to the first color, 0.1 is very near the first color, 0.5 is halfway\n           * in between, etc. An amount below 0 will be treated as 0. Likewise, amounts\n           * above 1 will be capped at 1. This is different from the behavior of <a href=\"#/p5/lerp\">lerp()</a>,\n           * but necessary because otherwise numbers outside the range will produce\n           * strange and unexpected colors.\n           *\n           * The way that colors are interpolated depends on the current color mode.\n           *\n           * @method lerpColor\n           * @param  {p5.Color} c1  interpolate from this color\n           * @param  {p5.Color} c2  interpolate to this color\n           * @param  {Number}       amt number between 0 and 1\n           * @return {p5.Color}     interpolated color\n           *\n           * @example\n           * <div>\n           * <code>\n           * colorMode(RGB);\n           * stroke(255);\n           * background(51);\n           * let from = color(218, 165, 32);\n           * let to = color(72, 61, 139);\n           * colorMode(RGB); // Try changing to HSB.\n           * let interA = lerpColor(from, to, 0.33);\n           * let interB = lerpColor(from, to, 0.66);\n           * fill(from);\n           * rect(10, 20, 20, 60);\n           * fill(interA);\n           * rect(30, 20, 20, 60);\n           * fill(interB);\n           * rect(50, 20, 20, 60);\n           * fill(to);\n           * rect(70, 20, 20, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 4 rects one tan, brown, brownish purple, purple, with white outlines & 20x60\n           */\n\n          _main.default.prototype.lerpColor = function(c1, c2, amt) {\n            _main.default._validateParameters('lerpColor', arguments);\n            var mode = this._colorMode;\n            var maxes = this._colorMaxes;\n            var l0, l1, l2, l3;\n            var fromArray, toArray;\n\n            if (mode === constants.RGB) {\n              fromArray = c1.levels.map(function(level) {\n                return level / 255;\n              });\n              toArray = c2.levels.map(function(level) {\n                return level / 255;\n              });\n            } else if (mode === constants.HSB) {\n              c1._getBrightness(); // Cache hsba so it definitely exists.\n              c2._getBrightness();\n              fromArray = c1.hsba;\n              toArray = c2.hsba;\n            } else if (mode === constants.HSL) {\n              c1._getLightness(); // Cache hsla so it definitely exists.\n              c2._getLightness();\n              fromArray = c1.hsla;\n              toArray = c2.hsla;\n            } else {\n              throw new Error(''.concat(mode, 'cannot be used for interpolation.'));\n            }\n\n            // Prevent extrapolation.\n            amt = Math.max(Math.min(amt, 1), 0);\n\n            // Define lerp here itself if user isn't using math module.\n            // Maintains the definition as found in math/calculation.js\n            if (typeof this.lerp === 'undefined') {\n              this.lerp = function(start, stop, amt) {\n                return amt * (stop - start) + start;\n              };\n            }\n\n            // Perform interpolation.\n            l0 = this.lerp(fromArray[0], toArray[0], amt);\n            l1 = this.lerp(fromArray[1], toArray[1], amt);\n            l2 = this.lerp(fromArray[2], toArray[2], amt);\n            l3 = this.lerp(fromArray[3], toArray[3], amt);\n\n            // Scale components.\n            l0 *= maxes[mode][0];\n            l1 *= maxes[mode][1];\n            l2 *= maxes[mode][2];\n            l3 *= maxes[mode][3];\n\n            return this.color(l0, l1, l2, l3);\n          };\n\n          /**\n           * Extracts the HSL lightness value from a color or pixel array.\n           *\n           * @method lightness\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the lightness\n           *\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSL);\n           * let c = color(156, 100, 50, 1);\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = lightness(c); // Sets 'value' to 50\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * light pastel green rect on left and dark grey rect on right, both 35x60.\n           */\n          _main.default.prototype.lightness = function(c) {\n            _main.default._validateParameters('lightness', arguments);\n            return this.color(c)._getLightness();\n          };\n\n          /**\n           * Extracts the red value from a color or pixel array.\n           *\n           * @method red\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the red value\n           * @example\n           * <div>\n           * <code>\n           * let c = color(255, 204, 0); // Define color 'c'\n           * fill(c); // Use color variable 'c' as fill color\n           * rect(15, 20, 35, 60); // Draw left rectangle\n           *\n           * let redValue = red(c); // Get red in 'c'\n           * print(redValue); // Print \"255.0\"\n           * fill(redValue, 0, 0); // Use 'redValue' in new fill\n           * rect(50, 20, 35, 60); // Draw right rectangle\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * colorMode(RGB, 255); // Sets the range for red, green, and blue to 255\n           * let c = color(127, 255, 0);\n           * colorMode(RGB, 1); // Sets the range for red, green, and blue to 1\n           * let myColor = red(c);\n           * print(myColor); // 0.4980392156862745\n           * </code>\n           * </div>\n           *\n           * @alt\n           * yellow rect on left and red rect on right, both with black outlines and 35x60.\n           * grey canvas\n           */\n          _main.default.prototype.red = function(c) {\n            _main.default._validateParameters('red', arguments);\n            return this.color(c)._getRed();\n          };\n\n          /**\n           * Extracts the saturation value from a color or pixel array.\n           *\n           * Saturation is scaled differently in HSB and HSL. This function will return\n           * the HSB saturation when supplied with an HSB color object (or when supplied\n           * with a pixel array while the color mode is HSB), but will default to the\n           * HSL saturation otherwise.\n           *\n           * @method saturation\n           * @param {p5.Color|Number[]|String} color <a href=\"#/p5.Color\">p5.Color</a> object, color components,\n           *                                         or CSS color\n           * @return {Number} the saturation value\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 255);\n           * let c = color(0, 126, 255);\n           * fill(c);\n           * rect(15, 20, 35, 60);\n           * let value = saturation(c); // Sets 'value' to 126\n           * fill(value);\n           * rect(50, 20, 35, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *deep pink rect on left and grey rect on right, both 35x60.\n           */\n          _main.default.prototype.saturation = function(c) {\n            _main.default._validateParameters('saturation', arguments);\n            return this.color(c)._getSaturation();\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../core/constants': 48,\n          '../core/friendly_errors/fes_core': 51,\n          '../core/friendly_errors/file_errors': 52,\n          '../core/friendly_errors/validate_params': 54,\n          '../core/main': 59,\n          './p5.Color': 46\n        }\n      ],\n      46: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          var _color_conversion = _interopRequireDefault(_dereq_('./color_conversion'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Color\n           * @submodule Creating & Reading\n           * @for p5\n           * @requires core\n           * @requires constants\n           * @requires color_conversion\n           */ /**\n           * Each color stores the color mode and level maxes that was applied at the\n           * time of its construction. These are used to interpret the input arguments\n           * (at construction and later for that instance of color) and to format the\n           * output e.g. when <a href=\"#/p5/saturation\">saturation()</a> is requested.\n           *\n           * Internally, we store an array representing the ideal RGBA values in floating\n           * point form, normalized from 0 to 1. From this we calculate the closest\n           * screen color (RGBA levels from 0 to 255) and expose this to the renderer.\n           *\n           * We also cache normalized, floating point components of the color in various\n           * representations as they are calculated. This is done to prevent repeating a\n           * conversion that has already been performed.\n           *\n           * @class p5.Color\n           * @constructor\n           */ _main.default.Color = function(pInst, vals) {\n            // Record color mode and maxes at time of construction.\n            this._storeModeAndMaxes(pInst._colorMode, pInst._colorMaxes); // Calculate normalized RGBA values.\n            if (\n              this.mode !== constants.RGB &&\n              this.mode !== constants.HSL &&\n              this.mode !== constants.HSB\n            ) {\n              throw new Error(''.concat(this.mode, ' is an invalid colorMode.'));\n            } else {\n              this._array = _main.default.Color._parseInputs.apply(this, vals);\n            }\n\n            // Expose closest screen color.\n            this._calculateLevels();\n            return this;\n          };\n\n          /**\n           * This function returns the color formatted as a string. This can be useful\n           * for debugging, or for using p5.js with other libraries.\n           *\n           * @method toString\n           * @param {String} [format] How the color string will be formatted.\n           * Leaving this empty formats the string as rgba(r, g, b, a).\n           * '#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\n           * 'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\n           * 'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\n           * 'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.\n           * @return {String} the formatted string\n           *\n           * @example\n           * <div>\n           * <code>\n           * createCanvas(200, 100);\n           * let myColor;\n           * stroke(255);\n           * myColor = color(100, 100, 250);\n           * fill(myColor);\n           * rotate(HALF_PI);\n           * text(myColor.toString(), 0, -5);\n           * text(myColor.toString('#rrggbb'), 0, -30);\n           * text(myColor.toString('rgba%'), 0, -55);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let myColor = color(100, 130, 250);\n           * text(myColor.toString('#rrggbb'), 25, 25);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * A canvas with 3 text representation of their color.\n           */\n          _main.default.Color.prototype.toString = function(format) {\n            var a = this.levels;\n            var f = this._array;\n            var alpha = f[3]; // String representation uses normalized alpha\n\n            switch (format) {\n              case '#rrggbb':\n                return '#'.concat(\n                  a[0] < 16 ? '0'.concat(a[0].toString(16)) : a[0].toString(16),\n                  a[1] < 16 ? '0'.concat(a[1].toString(16)) : a[1].toString(16),\n                  a[2] < 16 ? '0'.concat(a[2].toString(16)) : a[2].toString(16)\n                );\n\n              case '#rrggbbaa':\n                return '#'.concat(\n                  a[0] < 16 ? '0'.concat(a[0].toString(16)) : a[0].toString(16),\n                  a[1] < 16 ? '0'.concat(a[1].toString(16)) : a[1].toString(16),\n                  a[2] < 16 ? '0'.concat(a[2].toString(16)) : a[2].toString(16),\n                  a[3] < 16 ? '0'.concat(a[2].toString(16)) : a[3].toString(16)\n                );\n\n              case '#rgb':\n                return '#'.concat(\n                  Math.round(f[0] * 15).toString(16),\n                  Math.round(f[1] * 15).toString(16),\n                  Math.round(f[2] * 15).toString(16)\n                );\n\n              case '#rgba':\n                return '#'.concat(\n                  Math.round(f[0] * 15).toString(16),\n                  Math.round(f[1] * 15).toString(16),\n                  Math.round(f[2] * 15).toString(16),\n                  Math.round(f[3] * 15).toString(16)\n                );\n\n              case 'rgb':\n                return 'rgb('.concat(a[0], ', ', a[1], ', ', a[2], ')');\n\n              case 'rgb%':\n                return 'rgb('.concat(\n                  (100 * f[0]).toPrecision(3),\n                  '%, ',\n                  (100 * f[1]).toPrecision(3),\n                  '%, ',\n                  (100 * f[2]).toPrecision(3),\n                  '%)'\n                );\n\n              case 'rgba%':\n                return 'rgba('.concat(\n                  (100 * f[0]).toPrecision(3),\n                  '%, ',\n                  (100 * f[1]).toPrecision(3),\n                  '%, ',\n                  (100 * f[2]).toPrecision(3),\n                  '%, ',\n                  (100 * f[3]).toPrecision(3),\n                  '%)'\n                );\n\n              case 'hsb':\n              case 'hsv':\n                if (!this.hsba)\n                  this.hsba = _color_conversion.default._rgbaToHSBA(this._array);\n                return 'hsb('.concat(\n                  this.hsba[0] * this.maxes[constants.HSB][0],\n                  ', ',\n                  this.hsba[1] * this.maxes[constants.HSB][1],\n                  ', ',\n                  this.hsba[2] * this.maxes[constants.HSB][2],\n                  ')'\n                );\n\n              case 'hsb%':\n              case 'hsv%':\n                if (!this.hsba)\n                  this.hsba = _color_conversion.default._rgbaToHSBA(this._array);\n                return 'hsb('.concat(\n                  (100 * this.hsba[0]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsba[1]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsba[2]).toPrecision(3),\n                  '%)'\n                );\n\n              case 'hsba':\n              case 'hsva':\n                if (!this.hsba)\n                  this.hsba = _color_conversion.default._rgbaToHSBA(this._array);\n                return 'hsba('.concat(\n                  this.hsba[0] * this.maxes[constants.HSB][0],\n                  ', ',\n                  this.hsba[1] * this.maxes[constants.HSB][1],\n                  ', ',\n                  this.hsba[2] * this.maxes[constants.HSB][2],\n                  ', ',\n                  alpha,\n                  ')'\n                );\n\n              case 'hsba%':\n              case 'hsva%':\n                if (!this.hsba)\n                  this.hsba = _color_conversion.default._rgbaToHSBA(this._array);\n                return 'hsba('.concat(\n                  (100 * this.hsba[0]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsba[1]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsba[2]).toPrecision(3),\n                  '%, ',\n                  (100 * alpha).toPrecision(3),\n                  '%)'\n                );\n\n              case 'hsl':\n                if (!this.hsla)\n                  this.hsla = _color_conversion.default._rgbaToHSLA(this._array);\n                return 'hsl('.concat(\n                  this.hsla[0] * this.maxes[constants.HSL][0],\n                  ', ',\n                  this.hsla[1] * this.maxes[constants.HSL][1],\n                  ', ',\n                  this.hsla[2] * this.maxes[constants.HSL][2],\n                  ')'\n                );\n\n              case 'hsl%':\n                if (!this.hsla)\n                  this.hsla = _color_conversion.default._rgbaToHSLA(this._array);\n                return 'hsl('.concat(\n                  (100 * this.hsla[0]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsla[1]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsla[2]).toPrecision(3),\n                  '%)'\n                );\n\n              case 'hsla':\n                if (!this.hsla)\n                  this.hsla = _color_conversion.default._rgbaToHSLA(this._array);\n                return 'hsla('.concat(\n                  this.hsla[0] * this.maxes[constants.HSL][0],\n                  ', ',\n                  this.hsla[1] * this.maxes[constants.HSL][1],\n                  ', ',\n                  this.hsla[2] * this.maxes[constants.HSL][2],\n                  ', ',\n                  alpha,\n                  ')'\n                );\n\n              case 'hsla%':\n                if (!this.hsla)\n                  this.hsla = _color_conversion.default._rgbaToHSLA(this._array);\n                return 'hsl('.concat(\n                  (100 * this.hsla[0]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsla[1]).toPrecision(3),\n                  '%, ',\n                  (100 * this.hsla[2]).toPrecision(3),\n                  '%, ',\n                  (100 * alpha).toPrecision(3),\n                  '%)'\n                );\n\n              case 'rgba':\n              default:\n                return 'rgba('.concat(a[0], ',', a[1], ',', a[2], ',', alpha, ')');\n            }\n          };\n\n          /**\n           * The setRed function sets the red component of a color.\n           * The range depends on your color mode, in the default RGB mode it's between 0 and 255.\n           * @method setRed\n           * @param {Number} red the new red value\n           * @example\n           * <div>\n           * <code>\n           * let backgroundColor;\n           *\n           * function setup() {\n           *   backgroundColor = color(100, 50, 150);\n           * }\n           *\n           * function draw() {\n           *   backgroundColor.setRed(128 + 128 * sin(millis() / 1000));\n           *   background(backgroundColor);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with gradually changing background color\n           */\n          _main.default.Color.prototype.setRed = function(new_red) {\n            this._array[0] = new_red / this.maxes[constants.RGB][0];\n            this._calculateLevels();\n          };\n\n          /**\n           * The setGreen function sets the green component of a color.\n           * The range depends on your color mode, in the default RGB mode it's between 0 and 255.\n           * @method setGreen\n           * @param {Number} green the new green value\n           * @example\n           * <div>\n           * <code>\n           * let backgroundColor = color(100, 50, 150);\n           * function draw() {\n           *   backgroundColor.setGreen(128 + 128 * sin(millis() / 1000));\n           *   background(backgroundColor);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with gradually changing background color\n           **/\n          _main.default.Color.prototype.setGreen = function(new_green) {\n            this._array[1] = new_green / this.maxes[constants.RGB][1];\n            this._calculateLevels();\n          };\n\n          /**\n           * The setBlue function sets the blue component of a color.\n           * The range depends on your color mode, in the default RGB mode it's between 0 and 255.\n           * @method setBlue\n           * @param {Number} blue the new blue value\n           * @example\n           * <div>\n           * <code>\n           * let backgroundColor = color(100, 50, 150);\n           * function draw() {\n           *   backgroundColor.setBlue(128 + 128 * sin(millis() / 1000));\n           *   background(backgroundColor);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with gradually changing background color\n           **/\n          _main.default.Color.prototype.setBlue = function(new_blue) {\n            this._array[2] = new_blue / this.maxes[constants.RGB][2];\n            this._calculateLevels();\n          };\n\n          /**\n           * The setAlpha function sets the transparency (alpha) value of a color.\n           * The range depends on your color mode, in the default RGB mode it's between 0 and 255.\n           * @method setAlpha\n           * @param {Number} alpha the new alpha value\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   clear();\n           *   background(200);\n           *   squareColor = color(100, 50, 100);\n           *   squareColor.setAlpha(128 + 128 * sin(millis() / 1000));\n           *   fill(squareColor);\n           *   rect(13, 13, width - 26, height - 26);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * a square with gradually changing opacity on a gray background\n           **/\n          _main.default.Color.prototype.setAlpha = function(new_alpha) {\n            this._array[3] = new_alpha / this.maxes[this.mode][3];\n            this._calculateLevels();\n          };\n\n          // calculates and stores the closest screen levels\n          _main.default.Color.prototype._calculateLevels = function() {\n            var array = this._array;\n            // (loop backwards for performance)\n            var levels = (this.levels = new Array(array.length));\n            for (var i = array.length - 1; i >= 0; --i) {\n              levels[i] = Math.round(array[i] * 255);\n            }\n          };\n\n          _main.default.Color.prototype._getAlpha = function() {\n            return this._array[3] * this.maxes[this.mode][3];\n          };\n\n          // stores the color mode and maxes in this instance of Color\n          // for later use (by _parseInputs())\n          _main.default.Color.prototype._storeModeAndMaxes = function(new_mode, new_maxes) {\n            this.mode = new_mode;\n            this.maxes = new_maxes;\n          };\n\n          _main.default.Color.prototype._getMode = function() {\n            return this.mode;\n          };\n\n          _main.default.Color.prototype._getMaxes = function() {\n            return this.maxes;\n          };\n\n          _main.default.Color.prototype._getBlue = function() {\n            return this._array[2] * this.maxes[constants.RGB][2];\n          };\n\n          _main.default.Color.prototype._getBrightness = function() {\n            if (!this.hsba) {\n              this.hsba = _color_conversion.default._rgbaToHSBA(this._array);\n            }\n            return this.hsba[2] * this.maxes[constants.HSB][2];\n          };\n\n          _main.default.Color.prototype._getGreen = function() {\n            return this._array[1] * this.maxes[constants.RGB][1];\n          };\n\n          /**\n           * Hue is the same in HSB and HSL, but the maximum value may be different.\n           * This function will return the HSB-normalized saturation when supplied with\n           * an HSB color object, but will default to the HSL-normalized saturation\n           * otherwise.\n           */\n          _main.default.Color.prototype._getHue = function() {\n            if (this.mode === constants.HSB) {\n              if (!this.hsba) {\n                this.hsba = _color_conversion.default._rgbaToHSBA(this._array);\n              }\n              return this.hsba[0] * this.maxes[constants.HSB][0];\n            } else {\n              if (!this.hsla) {\n                this.hsla = _color_conversion.default._rgbaToHSLA(this._array);\n              }\n              return this.hsla[0] * this.maxes[constants.HSL][0];\n            }\n          };\n\n          _main.default.Color.prototype._getLightness = function() {\n            if (!this.hsla) {\n              this.hsla = _color_conversion.default._rgbaToHSLA(this._array);\n            }\n            return this.hsla[2] * this.maxes[constants.HSL][2];\n          };\n\n          _main.default.Color.prototype._getRed = function() {\n            return this._array[0] * this.maxes[constants.RGB][0];\n          };\n\n          /**\n           * Saturation is scaled differently in HSB and HSL. This function will return\n           * the HSB saturation when supplied with an HSB color object, but will default\n           * to the HSL saturation otherwise.\n           */\n          _main.default.Color.prototype._getSaturation = function() {\n            if (this.mode === constants.HSB) {\n              if (!this.hsba) {\n                this.hsba = _color_conversion.default._rgbaToHSBA(this._array);\n              }\n              return this.hsba[1] * this.maxes[constants.HSB][1];\n            } else {\n              if (!this.hsla) {\n                this.hsla = _color_conversion.default._rgbaToHSLA(this._array);\n              }\n              return this.hsla[1] * this.maxes[constants.HSL][1];\n            }\n          };\n\n          /**\n           * CSS named colors.\n           */\n          var namedColors = {\n            aliceblue: '#f0f8ff',\n            antiquewhite: '#faebd7',\n            aqua: '#00ffff',\n            aquamarine: '#7fffd4',\n            azure: '#f0ffff',\n            beige: '#f5f5dc',\n            bisque: '#ffe4c4',\n            black: '#000000',\n            blanchedalmond: '#ffebcd',\n            blue: '#0000ff',\n            blueviolet: '#8a2be2',\n            brown: '#a52a2a',\n            burlywood: '#deb887',\n            cadetblue: '#5f9ea0',\n            chartreuse: '#7fff00',\n            chocolate: '#d2691e',\n            coral: '#ff7f50',\n            cornflowerblue: '#6495ed',\n            cornsilk: '#fff8dc',\n            crimson: '#dc143c',\n            cyan: '#00ffff',\n            darkblue: '#00008b',\n            darkcyan: '#008b8b',\n            darkgoldenrod: '#b8860b',\n            darkgray: '#a9a9a9',\n            darkgreen: '#006400',\n            darkgrey: '#a9a9a9',\n            darkkhaki: '#bdb76b',\n            darkmagenta: '#8b008b',\n            darkolivegreen: '#556b2f',\n            darkorange: '#ff8c00',\n            darkorchid: '#9932cc',\n            darkred: '#8b0000',\n            darksalmon: '#e9967a',\n            darkseagreen: '#8fbc8f',\n            darkslateblue: '#483d8b',\n            darkslategray: '#2f4f4f',\n            darkslategrey: '#2f4f4f',\n            darkturquoise: '#00ced1',\n            darkviolet: '#9400d3',\n            deeppink: '#ff1493',\n            deepskyblue: '#00bfff',\n            dimgray: '#696969',\n            dimgrey: '#696969',\n            dodgerblue: '#1e90ff',\n            firebrick: '#b22222',\n            floralwhite: '#fffaf0',\n            forestgreen: '#228b22',\n            fuchsia: '#ff00ff',\n            gainsboro: '#dcdcdc',\n            ghostwhite: '#f8f8ff',\n            gold: '#ffd700',\n            goldenrod: '#daa520',\n            gray: '#808080',\n            green: '#008000',\n            greenyellow: '#adff2f',\n            grey: '#808080',\n            honeydew: '#f0fff0',\n            hotpink: '#ff69b4',\n            indianred: '#cd5c5c',\n            indigo: '#4b0082',\n            ivory: '#fffff0',\n            khaki: '#f0e68c',\n            lavender: '#e6e6fa',\n            lavenderblush: '#fff0f5',\n            lawngreen: '#7cfc00',\n            lemonchiffon: '#fffacd',\n            lightblue: '#add8e6',\n            lightcoral: '#f08080',\n            lightcyan: '#e0ffff',\n            lightgoldenrodyellow: '#fafad2',\n            lightgray: '#d3d3d3',\n            lightgreen: '#90ee90',\n            lightgrey: '#d3d3d3',\n            lightpink: '#ffb6c1',\n            lightsalmon: '#ffa07a',\n            lightseagreen: '#20b2aa',\n            lightskyblue: '#87cefa',\n            lightslategray: '#778899',\n            lightslategrey: '#778899',\n            lightsteelblue: '#b0c4de',\n            lightyellow: '#ffffe0',\n            lime: '#00ff00',\n            limegreen: '#32cd32',\n            linen: '#faf0e6',\n            magenta: '#ff00ff',\n            maroon: '#800000',\n            mediumaquamarine: '#66cdaa',\n            mediumblue: '#0000cd',\n            mediumorchid: '#ba55d3',\n            mediumpurple: '#9370db',\n            mediumseagreen: '#3cb371',\n            mediumslateblue: '#7b68ee',\n            mediumspringgreen: '#00fa9a',\n            mediumturquoise: '#48d1cc',\n            mediumvioletred: '#c71585',\n            midnightblue: '#191970',\n            mintcream: '#f5fffa',\n            mistyrose: '#ffe4e1',\n            moccasin: '#ffe4b5',\n            navajowhite: '#ffdead',\n            navy: '#000080',\n            oldlace: '#fdf5e6',\n            olive: '#808000',\n            olivedrab: '#6b8e23',\n            orange: '#ffa500',\n            orangered: '#ff4500',\n            orchid: '#da70d6',\n            palegoldenrod: '#eee8aa',\n            palegreen: '#98fb98',\n            paleturquoise: '#afeeee',\n            palevioletred: '#db7093',\n            papayawhip: '#ffefd5',\n            peachpuff: '#ffdab9',\n            peru: '#cd853f',\n            pink: '#ffc0cb',\n            plum: '#dda0dd',\n            powderblue: '#b0e0e6',\n            purple: '#800080',\n            rebeccapurple: '#663399',\n            red: '#ff0000',\n            rosybrown: '#bc8f8f',\n            royalblue: '#4169e1',\n            saddlebrown: '#8b4513',\n            salmon: '#fa8072',\n            sandybrown: '#f4a460',\n            seagreen: '#2e8b57',\n            seashell: '#fff5ee',\n            sienna: '#a0522d',\n            silver: '#c0c0c0',\n            skyblue: '#87ceeb',\n            slateblue: '#6a5acd',\n            slategray: '#708090',\n            slategrey: '#708090',\n            snow: '#fffafa',\n            springgreen: '#00ff7f',\n            steelblue: '#4682b4',\n            tan: '#d2b48c',\n            teal: '#008080',\n            thistle: '#d8bfd8',\n            tomato: '#ff6347',\n            turquoise: '#40e0d0',\n            violet: '#ee82ee',\n            wheat: '#f5deb3',\n            white: '#ffffff',\n            whitesmoke: '#f5f5f5',\n            yellow: '#ffff00',\n            yellowgreen: '#9acd32'\n          };\n\n          /**\n           * These regular expressions are used to build up the patterns for matching\n           * viable CSS color strings: fragmenting the regexes in this way increases the\n           * legibility and comprehensibility of the code.\n           *\n           * Note that RGB values of .9 are not parsed by IE, but are supported here for\n           * color string consistency.\n           */\n          var WHITESPACE = /\\s*/; // Match zero or more whitespace characters.\n          var INTEGER = /(\\d{1,3})/; // Match integers: 79, 255, etc.\n          var DECIMAL = /((?:\\d+(?:\\.\\d+)?)|(?:\\.\\d+))/; // Match 129.6, 79, .9, etc.\n          var PERCENT = new RegExp(''.concat(DECIMAL.source, '%')); // Match 12.9%, 79%, .9%, etc.\n\n          /**\n           * Full color string patterns. The capture groups are necessary.\n           */\n          var colorPatterns = {\n            // Match colors in format #XXX, e.g. #416.\n            HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,\n\n            // Match colors in format #XXXX, e.g. #5123.\n            HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,\n\n            // Match colors in format #XXXXXX, e.g. #b4d455.\n            HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,\n\n            // Match colors in format #XXXXXXXX, e.g. #b4d45535.\n            HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,\n\n            // Match colors in format rgb(R, G, B), e.g. rgb(255, 0, 128).\n            RGB: new RegExp(\n              [\n                '^rgb\\\\(',\n                INTEGER.source,\n                ',',\n                INTEGER.source,\n                ',',\n                INTEGER.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format rgb(R%, G%, B%), e.g. rgb(100%, 0%, 28.9%).\n            RGB_PERCENT: new RegExp(\n              [\n                '^rgb\\\\(',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format rgb(R, G, B, A), e.g. rgb(255, 0, 128, 0.25).\n            RGBA: new RegExp(\n              [\n                '^rgba\\\\(',\n                INTEGER.source,\n                ',',\n                INTEGER.source,\n                ',',\n                INTEGER.source,\n                ',',\n                DECIMAL.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format rgb(R%, G%, B%, A), e.g. rgb(100%, 0%, 28.9%, 0.5).\n            RGBA_PERCENT: new RegExp(\n              [\n                '^rgba\\\\(',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                DECIMAL.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format hsla(H, S%, L%), e.g. hsl(100, 40%, 28.9%).\n            HSL: new RegExp(\n              [\n                '^hsl\\\\(',\n                INTEGER.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format hsla(H, S%, L%, A), e.g. hsla(100, 40%, 28.9%, 0.5).\n            HSLA: new RegExp(\n              [\n                '^hsla\\\\(',\n                INTEGER.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                DECIMAL.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format hsb(H, S%, B%), e.g. hsb(100, 40%, 28.9%).\n            HSB: new RegExp(\n              [\n                '^hsb\\\\(',\n                INTEGER.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            ),\n\n            // Match colors in format hsba(H, S%, B%, A), e.g. hsba(100, 40%, 28.9%, 0.5).\n            HSBA: new RegExp(\n              [\n                '^hsba\\\\(',\n                INTEGER.source,\n                ',',\n                PERCENT.source,\n                ',',\n                PERCENT.source,\n                ',',\n                DECIMAL.source,\n                '\\\\)$'\n              ].join(WHITESPACE.source),\n              'i'\n            )\n          };\n\n          /**\n           * For a number of different inputs, returns a color formatted as [r, g, b, a]\n           * arrays, with each component normalized between 0 and 1.\n           *\n           * @private\n           * @param {Array} [...args] An 'array-like' object that represents a list of\n           *                          arguments\n           * @return {Number[]}       a color formatted as [r, g, b, a]\n           *                          Example:\n           *                          input        ==> output\n           *                          g            ==> [g, g, g, 255]\n           *                          g,a          ==> [g, g, g, a]\n           *                          r, g, b      ==> [r, g, b, 255]\n           *                          r, g, b, a   ==> [r, g, b, a]\n           *                          [g]          ==> [g, g, g, 255]\n           *                          [g, a]       ==> [g, g, g, a]\n           *                          [r, g, b]    ==> [r, g, b, 255]\n           *                          [r, g, b, a] ==> [r, g, b, a]\n           * @example\n           * <div>\n           * <code>\n           * // todo\n           * </code>\n           * </div>\n           *\n           * @alt\n           * //todo\n           */\n          _main.default.Color._parseInputs = function(r, g, b, a) {\n            var numArgs = arguments.length;\n            var mode = this.mode;\n            var maxes = this.maxes[mode];\n            var results = [];\n            var i;\n\n            if (numArgs >= 3) {\n              // Argument is a list of component values.\n\n              results[0] = r / maxes[0];\n              results[1] = g / maxes[1];\n              results[2] = b / maxes[2];\n\n              // Alpha may be undefined, so default it to 100%.\n              if (typeof a === 'number') {\n                results[3] = a / maxes[3];\n              } else {\n                results[3] = 1;\n              }\n\n              // Constrain components to the range [0,1].\n              // (loop backwards for performance)\n              for (i = results.length - 1; i >= 0; --i) {\n                var result = results[i];\n                if (result < 0) {\n                  results[i] = 0;\n                } else if (result > 1) {\n                  results[i] = 1;\n                }\n              }\n\n              // Convert to RGBA and return.\n              if (mode === constants.HSL) {\n                return _color_conversion.default._hslaToRGBA(results);\n              } else if (mode === constants.HSB) {\n                return _color_conversion.default._hsbaToRGBA(results);\n              } else {\n                return results;\n              }\n            } else if (numArgs === 1 && typeof r === 'string') {\n              var str = r.trim().toLowerCase();\n\n              // Return if string is a named colour.\n              if (namedColors[str]) {\n                return _main.default.Color._parseInputs.call(this, namedColors[str]);\n              }\n\n              // Try RGBA pattern matching.\n              if (colorPatterns.HEX3.test(str)) {\n                // #rgb\n                results = colorPatterns.HEX3.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseInt(color + color, 16) / 255;\n                  });\n                results[3] = 1;\n                return results;\n              } else if (colorPatterns.HEX6.test(str)) {\n                // #rrggbb\n                results = colorPatterns.HEX6.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseInt(color, 16) / 255;\n                  });\n                results[3] = 1;\n                return results;\n              } else if (colorPatterns.HEX4.test(str)) {\n                // #rgba\n                results = colorPatterns.HEX4.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseInt(color + color, 16) / 255;\n                  });\n                return results;\n              } else if (colorPatterns.HEX8.test(str)) {\n                // #rrggbbaa\n                results = colorPatterns.HEX8.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseInt(color, 16) / 255;\n                  });\n                return results;\n              } else if (colorPatterns.RGB.test(str)) {\n                // rgb(R,G,B)\n                results = colorPatterns.RGB.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return color / 255;\n                  });\n                results[3] = 1;\n                return results;\n              } else if (colorPatterns.RGB_PERCENT.test(str)) {\n                // rgb(R%,G%,B%)\n                results = colorPatterns.RGB_PERCENT.exec(str)\n                  .slice(1)\n                  .map(function(color) {\n                    return parseFloat(color) / 100;\n                  });\n                results[3] = 1;\n                return results;\n              } else if (colorPatterns.RGBA.test(str)) {\n                // rgba(R,G,B,A)\n                results = colorPatterns.RGBA.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 3) {\n                      return parseFloat(color);\n                    }\n                    return color / 255;\n                  });\n                return results;\n              } else if (colorPatterns.RGBA_PERCENT.test(str)) {\n                // rgba(R%,G%,B%,A%)\n                results = colorPatterns.RGBA_PERCENT.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 3) {\n                      return parseFloat(color);\n                    }\n                    return parseFloat(color) / 100;\n                  });\n                return results;\n              }\n\n              // Try HSLA pattern matching.\n              if (colorPatterns.HSL.test(str)) {\n                // hsl(H,S,L)\n                results = colorPatterns.HSL.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 0) {\n                      return parseInt(color, 10) / 360;\n                    }\n                    return parseInt(color, 10) / 100;\n                  });\n                results[3] = 1;\n              } else if (colorPatterns.HSLA.test(str)) {\n                // hsla(H,S,L,A)\n                results = colorPatterns.HSLA.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 0) {\n                      return parseInt(color, 10) / 360;\n                    } else if (idx === 3) {\n                      return parseFloat(color);\n                    }\n                    return parseInt(color, 10) / 100;\n                  });\n              }\n              results = results.map(function(value) {\n                return Math.max(Math.min(value, 1), 0);\n              });\n              if (results.length) {\n                return _color_conversion.default._hslaToRGBA(results);\n              }\n\n              // Try HSBA pattern matching.\n              if (colorPatterns.HSB.test(str)) {\n                // hsb(H,S,B)\n                results = colorPatterns.HSB.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 0) {\n                      return parseInt(color, 10) / 360;\n                    }\n                    return parseInt(color, 10) / 100;\n                  });\n                results[3] = 1;\n              } else if (colorPatterns.HSBA.test(str)) {\n                // hsba(H,S,B,A)\n                results = colorPatterns.HSBA.exec(str)\n                  .slice(1)\n                  .map(function(color, idx) {\n                    if (idx === 0) {\n                      return parseInt(color, 10) / 360;\n                    } else if (idx === 3) {\n                      return parseFloat(color);\n                    }\n                    return parseInt(color, 10) / 100;\n                  });\n              }\n\n              if (results.length) {\n                // (loop backwards for performance)\n                for (i = results.length - 1; i >= 0; --i) {\n                  results[i] = Math.max(Math.min(results[i], 1), 0);\n                }\n\n                return _color_conversion.default._hsbaToRGBA(results);\n              }\n\n              // Input did not match any CSS color pattern: default to white.\n              results = [1, 1, 1, 1];\n            } else if ((numArgs === 1 || numArgs === 2) && typeof r === 'number') {\n              // 'Grayscale' mode.\n\n              /**\n               * For HSB and HSL, interpret the gray level as a brightness/lightness\n               * value (they are equivalent when chroma is zero). For RGB, normalize the\n               * gray level according to the blue maximum.\n               */\n              results[0] = r / maxes[2];\n              results[1] = r / maxes[2];\n              results[2] = r / maxes[2];\n\n              // Alpha may be undefined, so default it to 100%.\n              if (typeof g === 'number') {\n                results[3] = g / maxes[3];\n              } else {\n                results[3] = 1;\n              }\n\n              // Constrain components to the range [0,1].\n              results = results.map(function(value) {\n                return Math.max(Math.min(value, 1), 0);\n              });\n            } else {\n              throw new Error(''.concat(arguments, 'is not a valid color representation.'));\n            }\n\n            return results;\n          };\n          var _default = _main.default.Color;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59, './color_conversion': 44 }\n      ],\n      47: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          _dereq_('./p5.Color');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /**\n           * @method background\n           * @param {Number} gray   specifies a value between white and black\n           * @param {Number} [a]\n           * @chainable\n           */ /**\n           * @module Color\n           * @submodule Setting\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ /**\n           * The <a href=\"#/p5/background\">background()</a> function sets the color used\n           * for the background of the p5.js canvas. The default background is transparent.\n           * This function is typically used within <a href=\"#/p5/draw\">draw()</a> to clear\n           * the display window at the beginning of each frame, but it can be used inside\n           * <a href=\"#/p5/setup\">setup()</a> to set the background on the first frame of\n           * animation or if the background need only be set once.\n           *\n           * The color is either specified in terms of the RGB, HSB, or HSL color depending\n           * on the current <a href=\"#/p5/colorMode\">colorMode</a>. (The default color space\n           * is RGB, with each value in the range from 0 to 255). The alpha range by default\n           * is also 0 to 255.<br><br>\n           *\n           * If a single string argument is provided, RGB, RGBA and Hex CSS color strings\n           * and all named color strings are supported. In this case, an alpha number\n           * value as a second argument is not supported, the RGBA form should be used.\n           *\n           * A <a href=\"#/p5.Color\">p5.Color</a> object can also be provided to set the background color.\n           *\n           * A <a href=\"#/p5.Image\">p5.Image</a> can also be provided to set the background image.\n           *\n           * @method background\n           * @param {p5.Color} color  any value created by the <a href=\"#/p5/color\">color()</a> function\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Grayscale integer value\n           * background(51);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // R, G & B integer values\n           * background(255, 204, 0);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // H, S & B integer values\n           * colorMode(HSB);\n           * background(255, 204, 100);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Named SVG/CSS color string\n           * background('red');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // three-digit hexadecimal RGB notation\n           * background('#fae');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // six-digit hexadecimal RGB notation\n           * background('#222222');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGB notation\n           * background('rgb(0,255,0)');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGBA notation\n           * background('rgba(0,255,0, 0.25)');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGB notation\n           * background('rgb(100%,0%,10%)');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGBA notation\n           * background('rgba(100%,0%,100%,0.5)');\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // p5 Color object\n           * background(color(0, 0, 255));\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas with darkest charcoal grey background.\n           * canvas with yellow background.\n           * canvas with royal blue background.\n           * canvas with red background.\n           * canvas with pink background.\n           * canvas with black background.\n           * canvas with bright green background.\n           * canvas with soft green background.\n           * canvas with red background.\n           * canvas with light purple background.\n           * canvas with blue background.\n           */ /**\n           * @method background\n           * @param {String} colorstring color string, possible formats include: integer\n           *                         rgb() or rgba(), percentage rgb() or rgba(),\n           *                         3-digit hex, 6-digit hex\n           * @param {Number} [a]         opacity of the background relative to current\n           *                             color range (default is 0-255)\n           * @chainable\n           */\n\n          /**\n           * @method background\n           * @param {Number} v1     red or hue value (depending on the current color\n           *                        mode)\n           * @param {Number} v2     green or saturation value (depending on the current\n           *                        color mode)\n           * @param {Number} v3     blue or brightness value (depending on the current\n           *                        color mode)\n           * @param  {Number} [a]\n           * @chainable\n           */\n\n          /**\n           * @method background\n           * @param  {Number[]}      values  an array containing the red, green, blue\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method background\n           * @param {p5.Image} image     image created with <a href=\"#/p5/loadImage\">loadImage()</a> or <a href=\"#/p5/createImage\">createImage()</a>,\n           *                             to set as background\n           *                             (must be same size as the sketch window)\n           * @param  {Number}  [a]\n           * @chainable\n           */\n          _main.default.prototype.background = function() {\n            var _this$_renderer;\n            (_this$_renderer = this._renderer).background.apply(_this$_renderer, arguments);\n            return this;\n          };\n\n          /**\n           * Clears the pixels within a buffer. This function only clears the canvas.\n           * It will not clear objects created by createX() methods such as\n           * <a href=\"#/p5/createVideo\">createVideo()</a> or <a href=\"#/p5/createDiv\">createDiv()</a>.\n           * Unlike the main graphics context, pixels in additional graphics areas created\n           * with <a href=\"#/p5/createGraphics\">createGraphics()</a> can be entirely\n           * or partially transparent. This function clears everything to make all of\n           * the pixels 100% transparent.\n           *\n           * @method clear\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Clear the screen on mouse press.\n           * function draw() {\n           *   ellipse(mouseX, mouseY, 20, 20);\n           * }\n           * function mousePressed() {\n           *   clear();\n           *   background(128);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * small white ellipses are continually drawn at mouse's x and y coordinates.\n           */\n\n          _main.default.prototype.clear = function() {\n            this._renderer.clear();\n            return this;\n          };\n\n          /**\n           * <a href=\"#/p5/colorMode\">colorMode()</a> changes the way p5.js interprets\n           * color data. By default, the parameters for <a href=\"#/p5/fill\">fill()</a>,\n           * <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/background\">background()</a>,\n           * and <a href=\"#/p5/color\">color()</a> are defined by values between 0 and 255\n           * using the RGB color model. This is equivalent to setting colorMode(RGB, 255).\n           * Setting colorMode(HSB) lets you use the HSB system instead. By default, this\n           * is colorMode(HSB, 360, 100, 100, 1). You can also use HSL.\n           *\n           * Note: existing color objects remember the mode that they were created in,\n           * so you can change modes as you like without affecting their appearance.\n           *\n           * @method colorMode\n           * @param {Constant} mode   either RGB, HSB or HSL, corresponding to\n           *                          Red/Green/Blue and Hue/Saturation/Brightness\n           *                          (or Lightness)\n           * @param {Number}  [max]  range for all values\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(RGB, 100);\n           * for (let i = 0; i < 100; i++) {\n           *   for (let j = 0; j < 100; j++) {\n           *     stroke(i, j, 0);\n           *     point(i, j);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noStroke();\n           * colorMode(HSB, 100);\n           * for (let i = 0; i < 100; i++) {\n           *   for (let j = 0; j < 100; j++) {\n           *     stroke(i, j, 100);\n           *     point(i, j);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * colorMode(RGB, 255);\n           * let c = color(127, 255, 0);\n           * colorMode(RGB, 1);\n           * let myColor = c._getRed();\n           * text(myColor, 10, 10, 80, 80);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * colorMode(RGB, 255, 255, 255, 1);\n           * background(255);\n           * strokeWeight(4);\n           * stroke(255, 0, 10, 0.3);\n           * ellipse(40, 40, 50, 50);\n           * ellipse(50, 50, 40, 40);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *Green to red gradient from bottom L to top R. shading originates from top left.\n           *Rainbow gradient from left to right. Brightness increasing to white at top.\n           *unknown image.\n           *50x50 ellipse at middle L & 40x40 ellipse at center. Translucent pink outlines.\n           */\n\n          /**\n           * @method colorMode\n           * @param {Constant} mode\n           * @param {Number} max1     range for the red or hue depending on the\n           *                              current color mode\n           * @param {Number} max2     range for the green or saturation depending\n           *                              on the current color mode\n           * @param {Number} max3     range for the blue or brightness/lightness\n           *                              depending on the current color mode\n           * @param {Number} [maxA]   range for the alpha\n           * @chainable\n           */\n          _main.default.prototype.colorMode = function(mode, max1, max2, max3, maxA) {\n            _main.default._validateParameters('colorMode', arguments);\n            if (\n              mode === constants.RGB ||\n              mode === constants.HSB ||\n              mode === constants.HSL\n            ) {\n              // Set color mode.\n              this._colorMode = mode;\n\n              // Set color maxes.\n              var maxes = this._colorMaxes[mode];\n              if (arguments.length === 2) {\n                maxes[0] = max1; // Red\n                maxes[1] = max1; // Green\n                maxes[2] = max1; // Blue\n                maxes[3] = max1; // Alpha\n              } else if (arguments.length === 4) {\n                maxes[0] = max1; // Red\n                maxes[1] = max2; // Green\n                maxes[2] = max3; // Blue\n              } else if (arguments.length === 5) {\n                maxes[0] = max1; // Red\n                maxes[1] = max2; // Green\n                maxes[2] = max3; // Blue\n                maxes[3] = maxA; // Alpha\n              }\n            }\n\n            return this;\n          };\n\n          /**\n           * Sets the color used to fill shapes. For example, if you run fill(204, 102, 0),\n           * all shapes drawn after the fill command will be filled with the color orange.\n           * This color is either specified in terms of the RGB or HSB color depending on\n           * the current <a href=\"#/p5/colorMode\">colorMode()</a>. (The default color space\n           * is RGB, with each value in the range from 0 to 255). The alpha range by default\n           * is also 0 to 255.\n           *\n           * If a single string argument is provided, RGB, RGBA and Hex CSS color strings\n           * and all named color strings are supported. In this case, an alpha number\n           * value as a second argument is not supported, the RGBA form should be used.\n           *\n           * A p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the fill color.\n           *\n           * @method fill\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Grayscale integer value\n           * fill(51);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // R, G & B integer values\n           * fill(255, 204, 0);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // H, S & B integer values\n           * colorMode(HSB);\n           * fill(255, 204, 100);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Named SVG/CSS color string\n           * fill('red');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // three-digit hexadecimal RGB notation\n           * fill('#fae');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // six-digit hexadecimal RGB notation\n           * fill('#222222');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGB notation\n           * fill('rgb(0,255,0)');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGBA notation\n           * fill('rgba(0,255,0, 0.25)');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGB notation\n           * fill('rgb(100%,0%,10%)');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGBA notation\n           * fill('rgba(100%,0%,100%,0.5)');\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // p5 Color object\n           * fill(color(0, 0, 255));\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 dark charcoal grey rect with black outline in center of canvas.\n           * 60x60 yellow rect with black outline in center of canvas.\n           * 60x60 royal blue rect with black outline in center of canvas.\n           * 60x60 red rect with black outline in center of canvas.\n           * 60x60 pink rect with black outline in center of canvas.\n           * 60x60 black rect with black outline in center of canvas.\n           * 60x60 light green rect with black outline in center of canvas.\n           * 60x60 soft green rect with black outline in center of canvas.\n           * 60x60 red rect with black outline in center of canvas.\n           * 60x60 dark fuchsia rect with black outline in center of canvas.\n           * 60x60 blue rect with black outline in center of canvas.\n           */\n\n          /**\n           * @method fill\n           * @param  {String}        value   a color string\n           * @chainable\n           */\n\n          /**\n           * @method fill\n           * @param  {Number}        gray   a gray value\n           * @param  {Number}        [alpha]\n           * @chainable\n           */\n\n          /**\n           * @method fill\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method fill\n           * @param  {p5.Color}      color   the fill color\n           * @chainable\n           */\n          _main.default.prototype.fill = function() {\n            var _this$_renderer2;\n            this._renderer._setProperty('_fillSet', true);\n            this._renderer._setProperty('_doFill', true);\n            (_this$_renderer2 = this._renderer).fill.apply(_this$_renderer2, arguments);\n            return this;\n          };\n\n          /**\n           * Disables filling geometry. If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a> are called,\n           * nothing will be drawn to the screen.\n           *\n           * @method noFill\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * rect(15, 10, 55, 55);\n           * noFill();\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   noFill();\n           *   stroke(100, 100, 240);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(45, 45, 45);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white rect top middle and noFill rect center. Both 60x60 with black outlines.\n           * black canvas with purple cube wireframe spinning\n           */\n          _main.default.prototype.noFill = function() {\n            this._renderer._setProperty('_doFill', false);\n            return this;\n          };\n\n          /**\n           * Disables drawing the stroke (outline). If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a>\n           * are called, nothing will be drawn to the screen.\n           *\n           * @method noStroke\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * noStroke();\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   fill(240, 150, 150);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(45, 45, 45);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 white rect at center. no outline.\n           * black canvas with pink cube spinning\n           */\n          _main.default.prototype.noStroke = function() {\n            this._renderer._setProperty('_doStroke', false);\n            return this;\n          };\n\n          /**\n           * Sets the color used to draw lines and borders around shapes. This color\n           * is either specified in terms of the RGB or HSB color depending on the\n           * current <a href=\"#/p5/colorMode\">colorMode()</a> (the default color space\n           * is RGB, with each value in the range from 0 to 255). The alpha range by\n           * default is also 0 to 255.\n           *\n           * If a single string argument is provided, RGB, RGBA and Hex CSS color\n           * strings and all named color strings are supported. In this case, an alpha\n           * number value as a second argument is not supported, the RGBA form should be\n           * used.\n           *\n           * A p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the stroke color.\n           *\n           * @method stroke\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Grayscale integer value\n           * strokeWeight(4);\n           * stroke(51);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // R, G & B integer values\n           * stroke(255, 204, 0);\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // H, S & B integer values\n           * colorMode(HSB);\n           * strokeWeight(4);\n           * stroke(255, 204, 100);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Named SVG/CSS color string\n           * stroke('red');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // three-digit hexadecimal RGB notation\n           * stroke('#fae');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // six-digit hexadecimal RGB notation\n           * stroke('#222222');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGB notation\n           * stroke('rgb(0,255,0)');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // integer RGBA notation\n           * stroke('rgba(0,255,0,0.25)');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGB notation\n           * stroke('rgb(100%,0%,10%)');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // percentage RGBA notation\n           * stroke('rgba(100%,0%,100%,0.5)');\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // p5 Color object\n           * stroke(color(0, 0, 255));\n           * strokeWeight(4);\n           * rect(20, 20, 60, 60);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 white rect at center. Dark charcoal grey outline.\n           * 60x60 white rect at center. Yellow outline.\n           * 60x60 white rect at center. Royal blue outline.\n           * 60x60 white rect at center. Red outline.\n           * 60x60 white rect at center. Pink outline.\n           * 60x60 white rect at center. Black outline.\n           * 60x60 white rect at center. Bright green outline.\n           * 60x60 white rect at center. Soft green outline.\n           * 60x60 white rect at center. Red outline.\n           * 60x60 white rect at center. Dark fuchsia outline.\n           * 60x60 white rect at center. Blue outline.\n           */\n\n          /**\n           * @method stroke\n           * @param  {String}        value   a color string\n           * @chainable\n           */\n\n          /**\n           * @method stroke\n           * @param  {Number}        gray   a gray value\n           * @param  {Number}        [alpha]\n           * @chainable\n           */\n\n          /**\n           * @method stroke\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method stroke\n           * @param  {p5.Color}      color   the stroke color\n           * @chainable\n           */\n\n          _main.default.prototype.stroke = function() {\n            var _this$_renderer3;\n            this._renderer._setProperty('_strokeSet', true);\n            this._renderer._setProperty('_doStroke', true);\n            (_this$_renderer3 = this._renderer).stroke.apply(_this$_renderer3, arguments);\n            return this;\n          };\n\n          /**\n           * All drawing that follows <a href=\"#/p5/erase\">erase()</a> will subtract from\n           * the canvas.Erased areas will reveal the web page underneath the canvas.Erasing\n           * can be canceled with <a href=\"#/p5/noErase\">noErase()</a>.\n           *\n           * Drawing done with <a href=\"#/p5/image\">image()</a> and <a href=\"#/p5/background\">\n           * background()</a> in between <a href=\"#/p5/erase\">erase()</a> and\n           * <a href=\"#/p5/noErase\">noErase()</a> will not erase the canvas but works as usual.\n           *\n           * @method erase\n           * @param  {Number}   [strengthFill]      A number (0-255) for the strength of erasing for a shape's fill.\n           *                                        This will default to 255 when no argument is given, which\n           *                                        is full strength.\n           * @param  {Number}   [strengthStroke]    A number (0-255) for the strength of erasing for a shape's stroke.\n           *                                        This will default to 255 when no argument is given, which\n           *                                        is full strength.\n           *\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * background(100, 100, 250);\n           * fill(250, 100, 100);\n           * rect(20, 20, 60, 60);\n           * erase();\n           * ellipse(25, 30, 30);\n           * noErase();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * background(150, 250, 150);\n           * fill(100, 100, 250);\n           * rect(20, 20, 60, 60);\n           * strokeWeight(5);\n           * erase(150, 255);\n           * triangle(50, 10, 70, 50, 90, 10);\n           * noErase();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function setup() {\n           *   smooth();\n           *   createCanvas(100, 100, WEBGL);\n           *   // Make a &lt;p&gt; element and put it behind the canvas\n           *   let p = createP('I am a dom element');\n           *   p.center();\n           *   p.style('font-size', '20px');\n           *   p.style('text-align', 'center');\n           *   p.style('z-index', '-9999');\n           * }\n           *\n           * function draw() {\n           *   background(250, 250, 150);\n           *   fill(15, 195, 185);\n           *   noStroke();\n           *   sphere(30);\n           *   erase();\n           *   rotateY(frameCount * 0.02);\n           *   translate(0, 0, 40);\n           *   torus(15, 5);\n           *   noErase();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 centered pink rect, purple background. Elliptical area in top-left of rect is erased white.\n           * 60x60 centered purple rect, mint green background. Triangle in top-right is partially erased with fully erased outline.\n           * 60x60 centered teal sphere, yellow background. Torus rotating around sphere erases to reveal black text underneath.\n           */\n          _main.default.prototype.erase = function() {\n            var opacityFill =\n              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 255;\n            var opacityStroke =\n              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 255;\n            this._renderer.erase(opacityFill, opacityStroke);\n\n            return this;\n          };\n\n          /**\n           * Ends erasing that was started with <a href=\"#/p5/erase\">erase()</a>.\n           * The <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, and\n           * <a href=\"#/p5/blendMode\">blendMode()</a> settings will return to what they were\n           * prior to calling <a href=\"#/p5/erase\">erase()</a>.\n           *\n           * @method noErase\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * background(235, 145, 15);\n           * noStroke();\n           * fill(30, 45, 220);\n           * rect(30, 10, 10, 80);\n           * erase();\n           * ellipse(50, 50, 60);\n           * noErase();\n           * rect(70, 10, 10, 80);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Orange background, with two tall blue rectangles. A centered ellipse erased the first blue rect but not the second.\n           */\n\n          _main.default.prototype.noErase = function() {\n            this._renderer.noErase();\n            return this;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59, './p5.Color': 46 }\n      ],\n      48: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.FILL = exports.STROKE = exports.CURVE = exports.BEZIER = exports.QUADRATIC = exports.LINEAR = exports._CTX_MIDDLE = exports._DEFAULT_LEADMULT = exports._DEFAULT_TEXT_FILL = exports.BOLDITALIC = exports.BOLD = exports.ITALIC = exports.NORMAL = exports.BLUR = exports.ERODE = exports.DILATE = exports.POSTERIZE = exports.INVERT = exports.OPAQUE = exports.GRAY = exports.THRESHOLD = exports.BURN = exports.DODGE = exports.SOFT_LIGHT = exports.HARD_LIGHT = exports.OVERLAY = exports.REPLACE = exports.SCREEN = exports.MULTIPLY = exports.EXCLUSION = exports.SUBTRACT = exports.DIFFERENCE = exports.LIGHTEST = exports.DARKEST = exports.ADD = exports.REMOVE = exports.BLEND = exports.UP_ARROW = exports.TAB = exports.SHIFT = exports.RIGHT_ARROW = exports.RETURN = exports.OPTION = exports.LEFT_ARROW = exports.ESCAPE = exports.ENTER = exports.DOWN_ARROW = exports.DELETE = exports.CONTROL = exports.BACKSPACE = exports.ALT = exports.AUTO = exports.HSL = exports.HSB = exports.RGB = exports.MITER = exports.BEVEL = exports.ROUND = exports.SQUARE = exports.PROJECT = exports.PIE = exports.CHORD = exports.OPEN = exports.CLOSE = exports.TESS = exports.QUAD_STRIP = exports.QUADS = exports.TRIANGLE_STRIP = exports.TRIANGLE_FAN = exports.TRIANGLES = exports.LINE_LOOP = exports.LINE_STRIP = exports.LINES = exports.POINTS = exports.BASELINE = exports.BOTTOM = exports.TOP = exports.CENTER = exports.LEFT = exports.RIGHT = exports.RADIUS = exports.CORNERS = exports.CORNER = exports.RAD_TO_DEG = exports.DEG_TO_RAD = exports.RADIANS = exports.DEGREES = exports.TWO_PI = exports.TAU = exports.QUARTER_PI = exports.PI = exports.HALF_PI = exports.WAIT = exports.TEXT = exports.MOVE = exports.HAND = exports.CROSS = exports.ARROW = exports.WEBGL = exports.P2D = void 0;\n          exports.FALLBACK = exports.LABEL = exports.AXES = exports.GRID = exports._DEFAULT_FILL = exports._DEFAULT_STROKE = exports.PORTRAIT = exports.LANDSCAPE = exports.MIRROR = exports.CLAMP = exports.REPEAT = exports.NEAREST = exports.IMAGE = exports.IMMEDIATE = exports.TEXTURE = void 0; /**\n           * @module Constants\n           * @submodule Constants\n           * @for p5\n           */\n\n          var _PI = Math.PI;\n\n          // GRAPHICS RENDERER\n          /**\n           * The default, two-dimensional renderer.\n           * @property {String} P2D\n           * @final\n           */\n          var P2D = 'p2d';\n          /**\n           * One of the two render modes in p5.js: P2D (default renderer) and WEBGL\n           * Enables 3D render by introducing the third dimension: Z\n           * @property {String} WEBGL\n           * @final\n           */ exports.P2D = P2D;\n          var WEBGL = 'webgl';\n\n          // ENVIRONMENT\n          /**\n           * @property {String} ARROW\n           * @final\n           */ exports.WEBGL = WEBGL;\n          var ARROW = 'default';\n          /**\n           * @property {String} CROSS\n           * @final\n           */ exports.ARROW = ARROW;\n          var CROSS = 'crosshair';\n          /**\n           * @property {String} HAND\n           * @final\n           */ exports.CROSS = CROSS;\n          var HAND = 'pointer';\n          /**\n           * @property {String} MOVE\n           * @final\n           */ exports.HAND = HAND;\n          var MOVE = 'move';\n          /**\n           * @property {String} TEXT\n           * @final\n           */ exports.MOVE = MOVE;\n          var TEXT = 'text';\n          /**\n           * @property {String} WAIT\n           * @final\n           */ exports.TEXT = TEXT;\n          var WAIT = 'wait';\n\n          // TRIGONOMETRY\n\n          /**\n           * HALF_PI is a mathematical constant with the value\n           * 1.57079632679489661923. It is half the ratio of the\n           * circumference of a circle to its diameter. It is useful in\n           * combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n           *\n           * @property {Number} HALF_PI\n           * @final\n           *\n           * @example\n           * <div><code>\n           * arc(50, 50, 80, 80, 0, HALF_PI);\n           * </code></div>\n           *\n           * @alt\n           * 80x80 white quarter-circle with curve toward bottom right of canvas.\n           */ exports.WAIT = WAIT;\n          var HALF_PI = _PI / 2;\n          /**\n           * PI is a mathematical constant with the value\n           * 3.14159265358979323846. It is the ratio of the circumference\n           * of a circle to its diameter. It is useful in combination with\n           * the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n           *\n           * @property {Number} PI\n           * @final\n           *\n           * @example\n           * <div><code>\n           * arc(50, 50, 80, 80, 0, PI);\n           * </code></div>\n           *\n           * @alt\n           * white half-circle with curve toward bottom of canvas.\n           */ exports.HALF_PI = HALF_PI;\n          var PI = _PI;\n          /**\n           * QUARTER_PI is a mathematical constant with the value 0.7853982.\n           * It is one quarter the ratio of the circumference of a circle to\n           * its diameter. It is useful in combination with the trigonometric\n           * functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n           *\n           * @property {Number} QUARTER_PI\n           * @final\n           *\n           * @example\n           * <div><code>\n           * arc(50, 50, 80, 80, 0, QUARTER_PI);\n           * </code></div>\n           *\n           * @alt\n           * white eighth-circle rotated about 40 degrees with curve bottom right canvas.\n           */ exports.PI = PI;\n          var QUARTER_PI = _PI / 4;\n          /**\n           * TAU is an alias for TWO_PI, a mathematical constant with the\n           * value 6.28318530717958647693. It is twice the ratio of the\n           * circumference of a circle to its diameter. It is useful in\n           * combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n           *\n           * @property {Number} TAU\n           * @final\n           *\n           * @example\n           * <div><code>\n           * arc(50, 50, 80, 80, 0, TAU);\n           * </code></div>\n           *\n           * @alt\n           * 80x80 white ellipse shape in center of canvas.\n           */ exports.QUARTER_PI = QUARTER_PI;\n          var TAU = _PI * 2;\n          /**\n           * TWO_PI is a mathematical constant with the value\n           * 6.28318530717958647693. It is twice the ratio of the\n           * circumference of a circle to its diameter. It is useful in\n           * combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.\n           *\n           * @property {Number} TWO_PI\n           * @final\n           *\n           * @example\n           * <div><code>\n           * arc(50, 50, 80, 80, 0, TWO_PI);\n           * </code></div>\n           *\n           * @alt\n           * 80x80 white ellipse shape in center of canvas.\n           */ exports.TAU = TAU;\n          var TWO_PI = _PI * 2;\n          /**\n           * Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\n           * p5.js interprates and calculates angles (either DEGREES or RADIANS).\n           * @property {String} DEGREES\n           * @final\n           *\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   angleMode(DEGREES);\n           * }\n           * </code></div>\n           */ exports.TWO_PI = TWO_PI;\n          var DEGREES = 'degrees';\n          /**\n           * Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\n           * p5.js interprates and calculates angles (either RADIANS or DEGREES).\n           * @property {String} RADIANS\n           * @final\n           *\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   angleMode(RADIANS);\n           * }\n           * </code></div>\n           */ exports.DEGREES = DEGREES;\n          var RADIANS = 'radians';\n          exports.RADIANS = RADIANS;\n          var DEG_TO_RAD = _PI / 180.0;\n          exports.DEG_TO_RAD = DEG_TO_RAD;\n          var RAD_TO_DEG = 180.0 / _PI;\n\n          // SHAPE\n          /**\n           * @property {String} CORNER\n           * @final\n           */ exports.RAD_TO_DEG = RAD_TO_DEG;\n          var CORNER = 'corner';\n          /**\n           * @property {String} CORNERS\n           * @final\n           */ exports.CORNER = CORNER;\n          var CORNERS = 'corners';\n          /**\n           * @property {String} RADIUS\n           * @final\n           */ exports.CORNERS = CORNERS;\n          var RADIUS = 'radius';\n          /**\n           * @property {String} RIGHT\n           * @final\n           */ exports.RADIUS = RADIUS;\n          var RIGHT = 'right';\n          /**\n           * @property {String} LEFT\n           * @final\n           */ exports.RIGHT = RIGHT;\n          var LEFT = 'left';\n          /**\n           * @property {String} CENTER\n           * @final\n           */ exports.LEFT = LEFT;\n          var CENTER = 'center';\n          /**\n           * @property {String} TOP\n           * @final\n           */ exports.CENTER = CENTER;\n          var TOP = 'top';\n          /**\n           * @property {String} BOTTOM\n           * @final\n           */ exports.TOP = TOP;\n          var BOTTOM = 'bottom';\n          /**\n           * @property {String} BASELINE\n           * @final\n           * @default alphabetic\n           */ exports.BOTTOM = BOTTOM;\n          var BASELINE = 'alphabetic';\n          /**\n           * @property {Number} POINTS\n           * @final\n           * @default 0x0000\n           */ exports.BASELINE = BASELINE;\n          var POINTS = 0x0000;\n          /**\n           * @property {Number} LINES\n           * @final\n           * @default 0x0001\n           */ exports.POINTS = POINTS;\n          var LINES = 0x0001;\n          /**\n           * @property {Number} LINE_STRIP\n           * @final\n           * @default 0x0003\n           */ exports.LINES = LINES;\n          var LINE_STRIP = 0x0003;\n          /**\n           * @property {Number} LINE_LOOP\n           * @final\n           * @default 0x0002\n           */ exports.LINE_STRIP = LINE_STRIP;\n          var LINE_LOOP = 0x0002;\n          /**\n           * @property {Number} TRIANGLES\n           * @final\n           * @default 0x0004\n           */ exports.LINE_LOOP = LINE_LOOP;\n          var TRIANGLES = 0x0004;\n          /**\n           * @property {Number} TRIANGLE_FAN\n           * @final\n           * @default 0x0006\n           */ exports.TRIANGLES = TRIANGLES;\n          var TRIANGLE_FAN = 0x0006;\n          /**\n           * @property {Number} TRIANGLE_STRIP\n           * @final\n           * @default 0x0005\n           */ exports.TRIANGLE_FAN = TRIANGLE_FAN;\n          var TRIANGLE_STRIP = 0x0005;\n          /**\n           * @property {String} QUADS\n           * @final\n           */ exports.TRIANGLE_STRIP = TRIANGLE_STRIP;\n          var QUADS = 'quads';\n          /**\n           * @property {String} QUAD_STRIP\n           * @final\n           * @default quad_strip\n           */ exports.QUADS = QUADS;\n          var QUAD_STRIP = 'quad_strip';\n          /**\n           * @property {String} TESS\n           * @final\n           * @default tess\n           */ exports.QUAD_STRIP = QUAD_STRIP;\n          var TESS = 'tess';\n          /**\n           * @property {String} CLOSE\n           * @final\n           */ exports.TESS = TESS;\n          var CLOSE = 'close';\n          /**\n           * @property {String} OPEN\n           * @final\n           */ exports.CLOSE = CLOSE;\n          var OPEN = 'open';\n          /**\n           * @property {String} CHORD\n           * @final\n           */ exports.OPEN = OPEN;\n          var CHORD = 'chord';\n          /**\n           * @property {String} PIE\n           * @final\n           */ exports.CHORD = CHORD;\n          var PIE = 'pie';\n          /**\n           * @property {String} PROJECT\n           * @final\n           * @default square\n           */ exports.PIE = PIE;\n          var PROJECT = 'square'; // PEND: careful this is counterintuitive\n          /**\n           * @property {String} SQUARE\n           * @final\n           * @default butt\n           */ exports.PROJECT = PROJECT;\n          var SQUARE = 'butt';\n          /**\n           * @property {String} ROUND\n           * @final\n           */ exports.SQUARE = SQUARE;\n          var ROUND = 'round';\n          /**\n           * @property {String} BEVEL\n           * @final\n           */ exports.ROUND = ROUND;\n          var BEVEL = 'bevel';\n          /**\n           * @property {String} MITER\n           * @final\n           */ exports.BEVEL = BEVEL;\n          var MITER = 'miter';\n\n          // COLOR\n          /**\n           * @property {String} RGB\n           * @final\n           */ exports.MITER = MITER;\n          var RGB = 'rgb';\n          /**\n           * HSB (hue, saturation, brightness) is a type of color model.\n           * You can learn more about it at\n           * <a href=\"https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html\">HSB</a>.\n           *\n           * @property {String} HSB\n           * @final\n           */ exports.RGB = RGB;\n          var HSB = 'hsb';\n          /**\n           * @property {String} HSL\n           * @final\n           */ exports.HSB = HSB;\n          var HSL = 'hsl';\n\n          // DOM EXTENSION\n          /**\n           * AUTO allows us to automatically set the width or height of an element (but not both),\n           * based on the current height and width of the element. Only one parameter can\n           * be passed to the <a href=\"/#/p5.Element/size\">size</a> function as AUTO, at a time.\n           *\n           * @property {String} AUTO\n           * @final\n           */ exports.HSL = HSL;\n          var AUTO = 'auto';\n\n          /**\n           * @property {Number} ALT\n           * @final\n           */\n          // INPUT\n          exports.AUTO = AUTO;\n          var ALT = 18;\n          /**\n           * @property {Number} BACKSPACE\n           * @final\n           */ exports.ALT = ALT;\n          var BACKSPACE = 8;\n          /**\n           * @property {Number} CONTROL\n           * @final\n           */ exports.BACKSPACE = BACKSPACE;\n          var CONTROL = 17;\n          /**\n           * @property {Number} DELETE\n           * @final\n           */ exports.CONTROL = CONTROL;\n          var DELETE = 46;\n          /**\n           * @property {Number} DOWN_ARROW\n           * @final\n           */ exports.DELETE = DELETE;\n          var DOWN_ARROW = 40;\n          /**\n           * @property {Number} ENTER\n           * @final\n           */ exports.DOWN_ARROW = DOWN_ARROW;\n          var ENTER = 13;\n          /**\n           * @property {Number} ESCAPE\n           * @final\n           */ exports.ENTER = ENTER;\n          var ESCAPE = 27;\n          /**\n           * @property {Number} LEFT_ARROW\n           * @final\n           */ exports.ESCAPE = ESCAPE;\n          var LEFT_ARROW = 37;\n          /**\n           * @property {Number} OPTION\n           * @final\n           */ exports.LEFT_ARROW = LEFT_ARROW;\n          var OPTION = 18;\n          /**\n           * @property {Number} RETURN\n           * @final\n           */ exports.OPTION = OPTION;\n          var RETURN = 13;\n          /**\n           * @property {Number} RIGHT_ARROW\n           * @final\n           */ exports.RETURN = RETURN;\n          var RIGHT_ARROW = 39;\n          /**\n           * @property {Number} SHIFT\n           * @final\n           */ exports.RIGHT_ARROW = RIGHT_ARROW;\n          var SHIFT = 16;\n          /**\n           * @property {Number} TAB\n           * @final\n           */ exports.SHIFT = SHIFT;\n          var TAB = 9;\n          /**\n           * @property {Number} UP_ARROW\n           * @final\n           */ exports.TAB = TAB;\n          var UP_ARROW = 38;\n\n          // RENDERING\n          /**\n           * @property {String} BLEND\n           * @final\n           * @default source-over\n           */ exports.UP_ARROW = UP_ARROW;\n          var BLEND = 'source-over';\n          /**\n           * @property {String} REMOVE\n           * @final\n           * @default destination-out\n           */ exports.BLEND = BLEND;\n          var REMOVE = 'destination-out';\n          /**\n           * @property {String} ADD\n           * @final\n           * @default lighter\n           */ exports.REMOVE = REMOVE;\n          var ADD = 'lighter';\n          //ADD: 'add', //\n          //SUBTRACT: 'subtract', //\n          /**\n           * @property {String} DARKEST\n           * @final\n           */ exports.ADD = ADD;\n          var DARKEST = 'darken';\n          /**\n           * @property {String} LIGHTEST\n           * @final\n           * @default lighten\n           */ exports.DARKEST = DARKEST;\n          var LIGHTEST = 'lighten';\n          /**\n           * @property {String} DIFFERENCE\n           * @final\n           */ exports.LIGHTEST = LIGHTEST;\n          var DIFFERENCE = 'difference';\n          /**\n           * @property {String} SUBTRACT\n           * @final\n           */ exports.DIFFERENCE = DIFFERENCE;\n          var SUBTRACT = 'subtract';\n          /**\n           * @property {String} EXCLUSION\n           * @final\n           */ exports.SUBTRACT = SUBTRACT;\n          var EXCLUSION = 'exclusion';\n          /**\n           * @property {String} MULTIPLY\n           * @final\n           */ exports.EXCLUSION = EXCLUSION;\n          var MULTIPLY = 'multiply';\n          /**\n           * @property {String} SCREEN\n           * @final\n           */ exports.MULTIPLY = MULTIPLY;\n          var SCREEN = 'screen';\n          /**\n           * @property {String} REPLACE\n           * @final\n           * @default copy\n           */ exports.SCREEN = SCREEN;\n          var REPLACE = 'copy';\n          /**\n           * @property {String} OVERLAY\n           * @final\n           */ exports.REPLACE = REPLACE;\n          var OVERLAY = 'overlay';\n          /**\n           * @property {String} HARD_LIGHT\n           * @final\n           */ exports.OVERLAY = OVERLAY;\n          var HARD_LIGHT = 'hard-light';\n          /**\n           * @property {String} SOFT_LIGHT\n           * @final\n           */ exports.HARD_LIGHT = HARD_LIGHT;\n          var SOFT_LIGHT = 'soft-light';\n          /**\n           * @property {String} DODGE\n           * @final\n           * @default color-dodge\n           */ exports.SOFT_LIGHT = SOFT_LIGHT;\n          var DODGE = 'color-dodge';\n          /**\n           * @property {String} BURN\n           * @final\n           * @default color-burn\n           */ exports.DODGE = DODGE;\n          var BURN = 'color-burn';\n\n          // FILTERS\n          /**\n           * @property {String} THRESHOLD\n           * @final\n           */ exports.BURN = BURN;\n          var THRESHOLD = 'threshold';\n          /**\n           * @property {String} GRAY\n           * @final\n           */ exports.THRESHOLD = THRESHOLD;\n          var GRAY = 'gray';\n          /**\n           * @property {String} OPAQUE\n           * @final\n           */ exports.GRAY = GRAY;\n          var OPAQUE = 'opaque';\n          /**\n           * @property {String} INVERT\n           * @final\n           */ exports.OPAQUE = OPAQUE;\n          var INVERT = 'invert';\n          /**\n           * @property {String} POSTERIZE\n           * @final\n           */ exports.INVERT = INVERT;\n          var POSTERIZE = 'posterize';\n          /**\n           * @property {String} DILATE\n           * @final\n           */ exports.POSTERIZE = POSTERIZE;\n          var DILATE = 'dilate';\n          /**\n           * @property {String} ERODE\n           * @final\n           */ exports.DILATE = DILATE;\n          var ERODE = 'erode';\n          /**\n           * @property {String} BLUR\n           * @final\n           */ exports.ERODE = ERODE;\n          var BLUR = 'blur';\n\n          // TYPOGRAPHY\n          /**\n           * @property {String} NORMAL\n           * @final\n           */ exports.BLUR = BLUR;\n          var NORMAL = 'normal';\n          /**\n           * @property {String} ITALIC\n           * @final\n           */ exports.NORMAL = NORMAL;\n          var ITALIC = 'italic';\n          /**\n           * @property {String} BOLD\n           * @final\n           */ exports.ITALIC = ITALIC;\n          var BOLD = 'bold';\n          /**\n           * @property {String} BOLDITALIC\n           * @final\n           */ exports.BOLD = BOLD;\n          var BOLDITALIC = 'bold italic';\n\n          // TYPOGRAPHY-INTERNAL\n          exports.BOLDITALIC = BOLDITALIC;\n          var _DEFAULT_TEXT_FILL = '#000000';\n          exports._DEFAULT_TEXT_FILL = _DEFAULT_TEXT_FILL;\n          var _DEFAULT_LEADMULT = 1.25;\n          exports._DEFAULT_LEADMULT = _DEFAULT_LEADMULT;\n          var _CTX_MIDDLE = 'middle';\n\n          // VERTICES\n          /**\n           * @property {String} LINEAR\n           * @final\n           */ exports._CTX_MIDDLE = _CTX_MIDDLE;\n          var LINEAR = 'linear';\n          /**\n           * @property {String} QUADRATIC\n           * @final\n           */ exports.LINEAR = LINEAR;\n          var QUADRATIC = 'quadratic';\n          /**\n           * @property {String} BEZIER\n           * @final\n           */ exports.QUADRATIC = QUADRATIC;\n          var BEZIER = 'bezier';\n          /**\n           * @property {String} CURVE\n           * @final\n           */ exports.BEZIER = BEZIER;\n          var CURVE = 'curve';\n\n          // WEBGL DRAWMODES\n          /**\n           * @property {String} STROKE\n           * @final\n           */ exports.CURVE = CURVE;\n          var STROKE = 'stroke';\n          /**\n           * @property {String} FILL\n           * @final\n           */ exports.STROKE = STROKE;\n          var FILL = 'fill';\n          /**\n           * @property {String} TEXTURE\n           * @final\n           */ exports.FILL = FILL;\n          var TEXTURE = 'texture';\n          /**\n           * @property {String} IMMEDIATE\n           * @final\n           */ exports.TEXTURE = TEXTURE;\n          var IMMEDIATE = 'immediate';\n\n          // WEBGL TEXTURE MODE\n          // NORMAL already exists for typography\n          /**\n           * @property {String} IMAGE\n           * @final\n           */ exports.IMMEDIATE = IMMEDIATE;\n          var IMAGE = 'image';\n\n          // WEBGL TEXTURE WRAP AND FILTERING\n          // LINEAR already exists above\n          /**\n           * @property {String} NEAREST\n           * @final\n           */ exports.IMAGE = IMAGE;\n          var NEAREST = 'nearest';\n          /**\n           * @property {String} REPEAT\n           * @final\n           */ exports.NEAREST = NEAREST;\n          var REPEAT = 'repeat';\n          /**\n           * @property {String} CLAMP\n           * @final\n           */ exports.REPEAT = REPEAT;\n          var CLAMP = 'clamp';\n          /**\n           * @property {String} MIRROR\n           * @final\n           */ exports.CLAMP = CLAMP;\n          var MIRROR = 'mirror';\n\n          // DEVICE-ORIENTATION\n          /**\n           * @property {String} LANDSCAPE\n           * @final\n           */ exports.MIRROR = MIRROR;\n          var LANDSCAPE = 'landscape';\n          /**\n           * @property {String} PORTRAIT\n           * @final\n           */ exports.LANDSCAPE = LANDSCAPE;\n          var PORTRAIT = 'portrait';\n\n          // DEFAULTS\n          exports.PORTRAIT = PORTRAIT;\n          var _DEFAULT_STROKE = '#000000';\n          exports._DEFAULT_STROKE = _DEFAULT_STROKE;\n          var _DEFAULT_FILL = '#FFFFFF';\n\n          /**\n           * @property {String} GRID\n           * @final\n           */ exports._DEFAULT_FILL = _DEFAULT_FILL;\n          var GRID = 'grid';\n\n          /**\n           * @property {String} AXES\n           * @final\n           */ exports.GRID = GRID;\n          var AXES = 'axes';\n\n          /**\n           * @property {String} LABEL\n           * @final\n           */ exports.AXES = AXES;\n          var LABEL = 'label';\n          /**\n           * @property {String} FALLBACK\n           * @final\n           */ exports.LABEL = LABEL;\n          var FALLBACK = 'fallback';\n          exports.FALLBACK = FALLBACK;\n        },\n        {}\n      ],\n      49: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          var C = _interopRequireWildcard(_dereq_('./constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Environment\n           * @submodule Environment\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ var standardCursors = [C.ARROW, C.CROSS, C.HAND, C.MOVE, C.TEXT, C.WAIT];\n          _main.default.prototype._frameRate = 0;\n          _main.default.prototype._lastFrameTime = window.performance.now();\n          _main.default.prototype._targetFrameRate = 60;\n\n          var _windowPrint = window.print;\n\n          /**\n           * The <a href=\"#/p5/print\">print()</a> function writes to the console area of\n           * your browser. This function is often helpful for looking at the data a program\n           * is producing. This function creates a new line of text for each call to\n           * the function. Individual elements can be separated with quotes (\"\") and joined\n           * with the addition operator (+).\n           *\n           * Note that calling print() without any arguments invokes the window.print()\n           * function which opens the browser's print dialog. To print a blank line\n           * to console you can write print('\\n').\n           *\n           * @method print\n           * @param {Any} contents any combination of Number, String, Object, Boolean,\n           *                       Array to print\n           * @example\n           * <div><code class='norender'>\n           * let x = 10;\n           * print('The value of x is ' + x);\n           * // prints \"The value of x is 10\"\n           * </code></div>\n           *\n           * @alt\n           * default grey canvas\n           */\n          _main.default.prototype.print = function() {\n            if (!arguments.length) {\n              _windowPrint();\n            } else {\n              var _console;\n              (_console = console).log.apply(_console, arguments);\n            }\n          };\n\n          /**\n           * The system variable <a href=\"#/p5/frameCount\">frameCount</a> contains the\n           * number of frames that have been displayed since the program started. Inside\n           * <a href=\"#/p5/setup\">setup()</a> the value is 0, after the first iteration\n           * of draw it is 1, etc.\n           *\n           * @property {Integer} frameCount\n           * @readOnly\n           * @example\n           * <div><code>\n           * function setup() {\n           *   frameRate(30);\n           *   textSize(30);\n           *   textAlign(CENTER);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   text(frameCount, width / 2, height / 2);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * numbers rapidly counting upward with frame count set to 30.\n           */\n          _main.default.prototype.frameCount = 0;\n\n          /**\n           * The system variable <a href=\"#/p5/deltaTime\">deltaTime</a> contains the time\n           * difference between the beginning of the previous frame and the beginning\n           * of the current frame in milliseconds.\n           *\n           * This variable is useful for creating time sensitive animation or physics\n           * calculation that should stay constant regardless of frame rate.\n           *\n           * @property {Integer} deltaTime\n           * @readOnly\n           * @example\n           * <div><code>\n           * let rectX = 0;\n           * let fr = 30; //starting FPS\n           * let clr;\n           *\n           * function setup() {\n           *   background(200);\n           *   frameRate(fr); // Attempt to refresh at starting FPS\n           *   clr = color(255, 0, 0);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rectX = rectX + 1 * (deltaTime / 50); // Move Rectangle in relation to deltaTime\n           *\n           *   if (rectX >= width) {\n           *     // If you go off screen.\n           *     if (fr === 30) {\n           *       clr = color(0, 0, 255);\n           *       fr = 10;\n           *       frameRate(fr); // make frameRate 10 FPS\n           *     } else {\n           *       clr = color(255, 0, 0);\n           *       fr = 30;\n           *       frameRate(fr); // make frameRate 30 FPS\n           *     }\n           *     rectX = 0;\n           *   }\n           *   fill(clr);\n           *   rect(rectX, 40, 20, 20);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * red rect moves left to right, followed by blue rect moving at the same speed\n           * with a lower frame rate. Loops.\n           */\n          _main.default.prototype.deltaTime = 0;\n\n          /**\n                                        * Confirms if the window a p5.js program is in is \"focused,\" meaning that\n                                        * the sketch will accept mouse or keyboard input. This variable is\n                                        * \"true\" if the window is focused and \"false\" if not.\n                                        *\n                                        * @property {Boolean} focused\n                                        * @readOnly\n                                        * @example\n                                        * <div><code>\n                                        * // To demonstrate, put two windows side by side.\n                                        * // Click on the window that the p5 sketch isn't in!\n                                        * function draw() {\n                                        *   background(200);\n                                        *   noStroke();\n                                        *   fill(0, 200, 0);\n                                        *   ellipse(25, 25, 50, 50);\n                                        *\n                                        *   if (!focused) {\n                                           // or \"if (focused === false)\"\n                                        *     stroke(200, 0, 0);\n                                        *     line(0, 0, 100, 100);\n                                        *     line(100, 0, 0, 100);\n                                        *   }\n                                        * }\n                                        * </code></div>\n                                        *\n                                        * @alt\n                                        * green 50x50 ellipse at top left. Red X covers canvas when page focus changes\n                                        */\n          _main.default.prototype.focused = document.hasFocus();\n\n          /**\n           * Sets the cursor to a predefined symbol or an image, or makes it visible\n           * if already hidden. If you are trying to set an image as the cursor, the\n           * recommended size is 16x16 or 32x32 pixels. The values for parameters x and y\n           * must be less than the dimensions of the image.\n           *\n           * @method cursor\n           * @param {String|Constant} type Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\n           *                               Native CSS properties: 'grab', 'progress', 'cell' etc.\n           *                               External: path for cursor's images\n           *                               (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n           *                               For more information on Native CSS cursors and url visit:\n           *                               https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n           * @param {Number}          [x]  the horizontal active spot of the cursor (must be less than 32)\n           * @param {Number}          [y]  the vertical active spot of the cursor (must be less than 32)\n           * @example\n           * <div><code>\n           * // Move the mouse across the quadrants\n           * // to see the cursor change\n           * function draw() {\n           *   line(width / 2, 0, width / 2, height);\n           *   line(0, height / 2, width, height / 2);\n           *   if (mouseX < 50 && mouseY < 50) {\n           *     cursor(CROSS);\n           *   } else if (mouseX > 50 && mouseY < 50) {\n           *     cursor('progress');\n           *   } else if (mouseX > 50 && mouseY > 50) {\n           *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');\n           *   } else {\n           *     cursor('grab');\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * canvas is divided into four quadrants. cursor on first is a cross, second is a progress,\n           * third is a custom cursor using path to the cursor and fourth is a grab.\n           */\n          _main.default.prototype.cursor = function(type, x, y) {\n            var cursor = 'auto';\n            var canvas = this._curElement.elt;\n            if (standardCursors.includes(type)) {\n              // Standard css cursor\n              cursor = type;\n            } else if (typeof type === 'string') {\n              var coords = '';\n              if (x && y && typeof x === 'number' && typeof y === 'number') {\n                // Note that x and y values must be unit-less positive integers < 32\n                // https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n                coords = ''.concat(x, ' ').concat(y);\n              }\n              if (\n                type.substring(0, 7) === 'http://' ||\n                type.substring(0, 8) === 'https://'\n              ) {\n                // Image (absolute url)\n                cursor = 'url('.concat(type, ') ').concat(coords, ', auto');\n              } else if (/\\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(type)) {\n                // Image file (relative path) - Separated for performance reasons\n                cursor = 'url('.concat(type, ') ').concat(coords, ', auto');\n              } else {\n                // Any valid string for the css cursor property\n                cursor = type;\n              }\n            }\n            canvas.style.cursor = cursor;\n          };\n\n          /**\n    * Specifies the number of frames to be displayed every second. For example,\n    * the function call frameRate(30) will attempt to refresh 30 times a second.\n    * If the processor is not fast enough to maintain the specified rate, the\n    * frame rate will not be achieved. Setting the frame rate within \n    * <a href=\"#/p5/setup\">setup()</a> is recommended. The default frame rate is\n    * based on the frame rate of the display (here also called \"refresh rate\"), \n    * which is set to 60 frames per second on most computers. A frame rate of 24\n    * frames per second (usual for movies) or above will be enough for smooth \n    * animations. This is the same as setFrameRate(val).\n    * \n    * Calling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns\n    * the current framerate. The draw function must run at least once before it will\n    * return a value. This is the same as <a href=\"#/p5/getFrameRate\">getFrameRate()</a>.\n    *\n    * Calling <a href=\"#/p5/frameRate\">frameRate()</a> with arguments that are not\n    * of the type numbers or are non positive also returns current framerate.\n    *\n    * @method frameRate\n    * @param  {Number} fps number of frames to be displayed every second\n    * @chainable\n    *\n    * @example\n    *\n    * <div><code>\n    * let rectX = 0;\n    * let fr = 30; //starting FPS\n    * let clr;\n    *\n    * function setup() {\n    *   background(200);\n    *   frameRate(fr); // Attempt to refresh at starting FPS\n    *   clr = color(255, 0, 0);\n    * }\n    *\n    * function draw() {\n    *   background(200);\n    *   rectX = rectX += 1; // Move Rectangle\n    *\n    *   if (rectX >= width) {\n       // If you go off screen.\n    *     if (fr === 30) {\n    *       clr = color(0, 0, 255);\n    *       fr = 10;\n    *       frameRate(fr); // make frameRate 10 FPS\n    *     } else {\n    *       clr = color(255, 0, 0);\n    *       fr = 30;\n    *       frameRate(fr); // make frameRate 30 FPS\n    *     }\n    *     rectX = 0;\n    *   }\n    *   fill(clr);\n    *   rect(rectX, 40, 20, 20);\n    * }\n    * </code></div>\n    *\n    * @alt\n    * blue rect moves left to right, followed by red rect moving faster. Loops.\n    */\n          /**\n           * @method frameRate\n           * @return {Number}       current frameRate\n           */\n          _main.default.prototype.frameRate = function(fps) {\n            _main.default._validateParameters('frameRate', arguments);\n            if (typeof fps !== 'number' || fps < 0) {\n              return this._frameRate;\n            } else {\n              this._setProperty('_targetFrameRate', fps);\n              if (fps === 0) {\n                this._setProperty('_frameRate', fps);\n              }\n              return this;\n            }\n          };\n\n          /**\n           * Returns the current framerate.\n           *\n           * @private\n           * @return {Number} current frameRate\n           */\n          _main.default.prototype.getFrameRate = function() {\n            return this.frameRate();\n          };\n\n          /**\n           * Specifies the number of frames to be displayed every second. For example,\n           * the function call frameRate(30) will attempt to refresh 30 times a second.\n           * If the processor is not fast enough to maintain the specified rate, the\n           * frame rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\n           * recommended. The default rate is 60 frames per second.\n           *\n           * Calling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate.\n           *\n           * @private\n           * @param {Number} [fps] number of frames to be displayed every second\n           */\n          _main.default.prototype.setFrameRate = function(fps) {\n            return this.frameRate(fps);\n          };\n\n          /**\n           * Hides the cursor from view.\n           *\n           * @method noCursor\n           * @example\n           * <div><code>\n           * function setup() {\n           *   noCursor();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   ellipse(mouseX, mouseY, 10, 10);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * cursor becomes 10x 10 white ellipse the moves with mouse x and y.\n           */\n          _main.default.prototype.noCursor = function() {\n            this._curElement.elt.style.cursor = 'none';\n          };\n\n          /**\n           * System variable that stores the width of the screen display according to The\n           * default <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\n           * full-screen program on any display size. To return actual screen size,\n           * multiply this by pixelDensity.\n           *\n           * @property {Number} displayWidth\n           * @readOnly\n           * @example\n           * <div class=\"norender\"><code>\n           * createCanvas(displayWidth, displayHeight);\n           * </code></div>\n           *\n           * @alt\n           * This example does not render anything.\n           */\n          _main.default.prototype.displayWidth = screen.width;\n\n          /**\n           * System variable that stores the height of the screen display according to The\n           * default <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\n           * full-screen program on any display size. To return actual screen size,\n           * multiply this by pixelDensity.\n           *\n           * @property {Number} displayHeight\n           * @readOnly\n           * @example\n           * <div class=\"norender\"><code>\n           * createCanvas(displayWidth, displayHeight);\n           * </code></div>\n           *\n           * @alt\n           * This example does not render anything.\n           */\n          _main.default.prototype.displayHeight = screen.height;\n\n          /**\n           * System variable that stores the width of the inner window, it maps to\n           * window.innerWidth.\n           *\n           * @property {Number} windowWidth\n           * @readOnly\n           * @example\n           * <div class=\"norender\"><code>\n           * createCanvas(windowWidth, windowHeight);\n           * </code></div>\n           *\n           * @alt\n           * This example does not render anything.\n           */\n          _main.default.prototype.windowWidth = getWindowWidth();\n          /**\n           * System variable that stores the height of the inner window, it maps to\n           * window.innerHeight.\n           *\n           * @property {Number} windowHeight\n           * @readOnly\n           * @example\n           * <div class=\"norender\"><code>\n           * createCanvas(windowWidth, windowHeight);\n           * </code></div>\n           *\n           * @alt\n           * This example does not render anything.\n           */\n          _main.default.prototype.windowHeight = getWindowHeight();\n\n          /**\n           * The <a href=\"#/p5/windowResized\">windowResized()</a> function is called once\n           * every time the browser window is resized. This is a good place to resize the\n           * canvas or do any other adjustments to accommodate the new window size.\n           *\n           * @method windowResized\n           * @example\n           * <div class=\"norender\"><code>\n           * function setup() {\n           *   createCanvas(windowWidth, windowHeight);\n           * }\n           *\n           * function draw() {\n           *   background(0, 100, 200);\n           * }\n           *\n           * function windowResized() {\n           *   resizeCanvas(windowWidth, windowHeight);\n           * }\n           * </code></div>\n           * @alt\n           * This example does not render anything.\n           */\n          _main.default.prototype._onresize = function(e) {\n            this._setProperty('windowWidth', getWindowWidth());\n            this._setProperty('windowHeight', getWindowHeight());\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            if (typeof context.windowResized === 'function') {\n              executeDefault = context.windowResized(e);\n              if (executeDefault !== undefined && !executeDefault) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          function getWindowWidth() {\n            return (\n              window.innerWidth ||\n              (document.documentElement && document.documentElement.clientWidth) ||\n              (document.body && document.body.clientWidth) ||\n              0\n            );\n          }\n\n          function getWindowHeight() {\n            return (\n              window.innerHeight ||\n              (document.documentElement && document.documentElement.clientHeight) ||\n              (document.body && document.body.clientHeight) ||\n              0\n            );\n          }\n\n          /**\n           * System variable that stores the width of the drawing canvas. This value\n           * is set by the first parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function.\n           * For example, the function call createCanvas(320, 240) sets the width\n           * variable to the value 320. The value of width defaults to 100 if\n           * <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.\n           *\n           * @property {Number} width\n           * @readOnly\n           */\n          _main.default.prototype.width = 0;\n\n          /**\n           * System variable that stores the height of the drawing canvas. This value\n           * is set by the second parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function. For\n           * example, the function call createCanvas(320, 240) sets the height\n           * variable to the value 240. The value of height defaults to 100 if\n           * <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.\n           *\n           * @property {Number} height\n           * @readOnly\n           */\n          _main.default.prototype.height = 0;\n\n          /**\n           * If argument is given, sets the sketch to fullscreen or not based on the\n           * value of the argument. If no argument is given, returns the current\n           * fullscreen state. Note that due to browser restrictions this can only\n           * be called on user input, for example, on mouse press like the example\n           * below.\n           *\n           * @method fullscreen\n           * @param  {Boolean} [val] whether the sketch should be in fullscreen mode\n           * or not\n           * @return {Boolean} current fullscreen state\n           * @example\n           * <div>\n           * <code>\n           * // Clicking in the box toggles fullscreen on and off.\n           * function setup() {\n           *   background(200);\n           * }\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n           *     let fs = fullscreen();\n           *     fullscreen(!fs);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * This example does not render anything.\n           */\n          _main.default.prototype.fullscreen = function(val) {\n            _main.default._validateParameters('fullscreen', arguments);\n            // no arguments, return fullscreen or not\n            if (typeof val === 'undefined') {\n              return (\n                document.fullscreenElement ||\n                document.webkitFullscreenElement ||\n                document.mozFullScreenElement ||\n                document.msFullscreenElement\n              );\n            } else {\n              // otherwise set to fullscreen or not\n              if (val) {\n                launchFullscreen(document.documentElement);\n              } else {\n                exitFullscreen();\n              }\n            }\n          };\n\n          /**\n           * Sets the pixel scaling for high pixel density displays. By default\n           * pixel density is set to match display density, call pixelDensity(1)\n           * to turn this off. Calling <a href=\"#/p5/pixelDensity\">pixelDensity()</a> with no arguments returns\n           * the current pixel density of the sketch.\n           *\n           * @method pixelDensity\n           * @param  {Number} val whether or how much the sketch should scale\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   pixelDensity(1);\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   ellipse(width / 2, height / 2, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function setup() {\n           *   pixelDensity(3.0);\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   ellipse(width / 2, height / 2, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * fuzzy 50x50 white ellipse with black outline in center of canvas.\n           * sharp 50x50 white ellipse with black outline in center of canvas.\n           */\n          /**\n           * @method pixelDensity\n           * @returns {Number} current pixel density of the sketch\n           */\n          _main.default.prototype.pixelDensity = function(val) {\n            _main.default._validateParameters('pixelDensity', arguments);\n            var returnValue;\n            if (typeof val === 'number') {\n              if (val !== this._pixelDensity) {\n                this._pixelDensity = val;\n              }\n              returnValue = this;\n              this.resizeCanvas(this.width, this.height, true); // as a side effect, it will clear the canvas\n            } else {\n              returnValue = this._pixelDensity;\n            }\n            return returnValue;\n          };\n\n          /**\n           * Returns the pixel density of the current display the sketch is running on.\n           *\n           * @method displayDensity\n           * @returns {Number} current pixel density of the display\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   let density = displayDensity();\n           *   pixelDensity(density);\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   ellipse(width / 2, height / 2, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 white ellipse with black outline in center of canvas.\n           */\n          _main.default.prototype.displayDensity = function() {\n            return window.devicePixelRatio;\n          };\n\n          function launchFullscreen(element) {\n            var enabled =\n              document.fullscreenEnabled ||\n              document.webkitFullscreenEnabled ||\n              document.mozFullScreenEnabled ||\n              document.msFullscreenEnabled;\n            if (!enabled) {\n              throw new Error('Fullscreen not enabled in this browser.');\n            }\n            if (element.requestFullscreen) {\n              element.requestFullscreen();\n            } else if (element.mozRequestFullScreen) {\n              element.mozRequestFullScreen();\n            } else if (element.webkitRequestFullscreen) {\n              element.webkitRequestFullscreen();\n            } else if (element.msRequestFullscreen) {\n              element.msRequestFullscreen();\n            }\n          }\n\n          function exitFullscreen() {\n            if (document.exitFullscreen) {\n              document.exitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n              document.mozCancelFullScreen();\n            } else if (document.webkitExitFullscreen) {\n              document.webkitExitFullscreen();\n            } else if (document.msExitFullscreen) {\n              document.msExitFullscreen();\n            }\n          }\n\n          /**\n           * Gets the current URL.\n           * @method getURL\n           * @return {String} url\n           * @example\n           * <div>\n           * <code>\n           * let url;\n           * let x = 100;\n           *\n           * function setup() {\n           *   fill(0);\n           *   noStroke();\n           *   url = getURL();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   text(url, x, height / 2);\n           *   x--;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * current url (http://p5js.org/reference/#/p5/getURL) moves right to left.\n           */\n          _main.default.prototype.getURL = function() {\n            return location.href;\n          };\n          /**\n           * Gets the current URL path as an array.\n           * @method getURLPath\n           * @return {String[]} path components\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let urlPath = getURLPath();\n           *   for (let i = 0; i < urlPath.length; i++) {\n           *     text(urlPath[i], 10, i * 20 + 20);\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * This example does not render anything.\n           */\n          _main.default.prototype.getURLPath = function() {\n            return location.pathname.split('/').filter(function(v) {\n              return v !== '';\n            });\n          };\n          /**\n           * Gets the current URL params as an Object.\n           * @method getURLParams\n           * @return {Object} URL params\n           * @example\n           * <div class='norender notest'>\n           * <code>\n           * // Example: http://p5js.org?year=2014&month=May&day=15\n           *\n           * function setup() {\n           *   let params = getURLParams();\n           *   text(params.day, 10, 20);\n           *   text(params.month, 10, 40);\n           *   text(params.year, 10, 60);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * This example does not render anything.\n           */\n          _main.default.prototype.getURLParams = function() {\n            var re = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim;\n            var m;\n            var v = {};\n            while ((m = re.exec(location.search)) != null) {\n              if (m.index === re.lastIndex) {\n                re.lastIndex++;\n              }\n              v[m[1]] = m[2];\n            }\n            return v;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { './constants': 48, './main': 59 }\n      ],\n      50: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0; // Different browsers may use different error strings for the same error.\n          // Extracting info from them is much easier and cleaner if we have a predefined\n          // lookup against which we try and match the errors obtained from the browser,\n          // classify them into types and extract the required information. The contents\n          // of this file serve as that lookup. The FES can use this to give a simplified\n          // explanation for all kinds of errors.\n          var strings = {\n            ReferenceError: [\n              {\n                msg: '{{}} is not defined',\n                type: 'NOTDEFINED',\n                browser: 'all'\n              },\n\n              {\n                msg: \"Can't find variable: {{}}\",\n                type: 'NOTDEFINED',\n                browser: 'Safari'\n              }\n            ],\n\n            SyntaxError: [\n              {\n                msg: 'illegal character',\n                type: 'INVALIDTOKEN',\n                browser: 'Firefox'\n              },\n\n              {\n                msg: 'Invalid character',\n                type: 'INVALIDTOKEN',\n                browser: 'Safari'\n              },\n\n              {\n                msg: 'Invalid or unexpected token',\n                type: 'INVALIDTOKEN',\n                browser: 'Chrome'\n              },\n\n              {\n                msg: \"Unexpected token '{{.}}'\",\n                type: 'UNEXPECTEDTOKEN',\n                browser: 'Chrome'\n              },\n\n              {\n                msg: \"expected {{.}}, got '{{.}}'\",\n                type: 'UNEXPECTEDTOKEN',\n                browser: 'Chrome'\n              }\n            ],\n\n            TypeError: [\n              {\n                msg: '{{.}} is not a function',\n                type: 'NOTFUNC',\n                browser: 'all'\n              }\n            ]\n          };\n          var _default = strings;\n          exports.default = _default;\n        },\n        {}\n      ],\n      51: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../main'));\n          var _internationalization = _dereq_('../internationalization');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _slicedToArray(arr, i) {\n            return (\n              _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest()\n            );\n          }\n          function _nonIterableRest() {\n            throw new TypeError('Invalid attempt to destructure non-iterable instance');\n          }\n          function _iterableToArrayLimit(arr, i) {\n            if (\n              !(\n                Symbol.iterator in Object(arr) ||\n                Object.prototype.toString.call(arr) === '[object Arguments]'\n              )\n            ) {\n              return;\n            }\n            var _arr = [];\n            var _n = true;\n            var _d = false;\n            var _e = undefined;\n            try {\n              for (\n                var _i = arr[Symbol.iterator](), _s;\n                !(_n = (_s = _i.next()).done);\n                _n = true\n              ) {\n                _arr.push(_s.value);\n                if (i && _arr.length === i) break;\n              }\n            } catch (err) {\n              _d = true;\n              _e = err;\n            } finally {\n              try {\n                if (!_n && _i['return'] != null) _i['return']();\n              } finally {\n                if (_d) throw _e;\n              }\n            }\n            return _arr;\n          }\n          function _arrayWithHoles(arr) {\n            if (Array.isArray(arr)) return arr;\n          }\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          // p5.js blue, p5.js orange, auto dark green; fallback p5.js darkened magenta\n          // See testColors below for all the color codes and names\n          var typeColors = ['#2D7BB6', '#EE9900', '#4DB200', '#C83C00'];\n          var misusedAtTopLevelCode = null;\n          var defineMisusedAtTopLevelCode = null;\n\n          // the threshold for the maximum allowed levenshtein distance\n          // used in misspelling detection\n          var EDIT_DIST_THRESHOLD = 2;\n\n          // to enable or disable styling (color, font-size, etc. ) for fes messages\n          var ENABLE_FES_STYLING = false;\n\n          if (typeof IS_MINIFIED !== 'undefined') {\n            _main.default._friendlyError = _main.default._checkForUserDefinedFunctions = _main.default._fesErrorMonitor = function() {};\n          } else {\n            var doFriendlyWelcome = false; // TEMP until we get it all working LM\n\n            var errorTable = _dereq_('./browser_errors').default;\n\n            // -- Borrowed from jQuery 1.11.3 --\n            var class2type = {};\n            var _toString = class2type.toString;\n            var names = [\n              'Boolean',\n              'Number',\n              'String',\n              'Function',\n              'Array',\n              'Date',\n              'RegExp',\n              'Object',\n              'Error'\n            ];\n\n            for (var n = 0; n < names.length; n++) {\n              class2type['[object '.concat(names[n], ']')] = names[n].toLowerCase();\n            }\n            var getType = function getType(obj) {\n              if (obj == null) {\n                return ''.concat(obj);\n              }\n              return _typeof(obj) === 'object' || typeof obj === 'function'\n                ? class2type[_toString.call(obj)] || 'object'\n                : _typeof(obj);\n            };\n\n            // -- End borrow --\n\n            // entry points into user-defined code\n            var entryPoints = [\n              'setup',\n              'draw',\n              'preload',\n              'deviceMoved',\n              'deviceTurned',\n              'deviceShaken',\n              'doubleClicked',\n              'mousePressed',\n              'mouseReleased',\n              'mouseMoved',\n              'mouseDragged',\n              'mouseClicked',\n              'mouseWheel',\n              'touchStarted',\n              'touchMoved',\n              'touchEnded',\n              'keyPressed',\n              'keyReleased',\n              'keyTyped',\n              'windowResized'\n            ];\n\n            var friendlyWelcome = function friendlyWelcome() {\n              // p5.js brand - magenta: #ED225D\n              //const astrixBgColor = 'transparent';\n              //const astrixTxtColor = '#ED225D';\n              //const welcomeBgColor = '#ED225D';\n              //const welcomeTextColor = 'white';\n              var welcomeMessage = (0, _internationalization.translator)('fes.pre', {\n                message: (0, _internationalization.translator)('fes.welcome')\n              });\n\n              console.log(\n                '    _ \\n' +\n                  ' /\\\\| |/\\\\ \\n' +\n                  \" \\\\ ` ' /  \\n\" +\n                  ' / , . \\\\  \\n' +\n                  ' \\\\/|_|\\\\/ ' +\n                  '\\n\\n' +\n                  welcomeMessage\n              );\n            };\n\n            /**\n             * Takes a message and a p5 function func, and adds a link pointing to\n             * the reference documentation of func at the end of the message\n             *\n             * @method mapToReference\n             * @private\n             * @param {String} message the words to be said\n             * @param {String} [func]    the name of the function to link\n             *\n             * @returns {String}\n             */\n            var mapToReference = function mapToReference(message, func) {\n              var msgWithReference = '';\n              if (func == null || func.substring(0, 4) === 'load') {\n                msgWithReference = message;\n              } else {\n                var methodParts = func.split('.');\n                var referenceSection =\n                  methodParts.length > 1\n                    ? ''.concat(methodParts[0], '.').concat(methodParts[1])\n                    : 'p5';\n\n                var funcName =\n                  methodParts.length === 1 ? func : methodParts.slice(2).join('/');\n                msgWithReference = ''\n                  .concat(message, ' (http://p5js.org/reference/#/')\n                  .concat(referenceSection, '/')\n                  .concat(funcName, ')');\n              }\n              return msgWithReference;\n            };\n\n            /**\n             * Prints out a fancy, colorful message to the console log\n             *\n             * @method report\n             * @private\n             * @param  {String}               message the words to be said\n             * @param  {String}               [func]  the name of the function to link\n             * @param  {Number|String} [color]   CSS color string or error type\n             *\n             * @return console logs\n             */\n            var report = function report(message, func, color) {\n              // if p5._fesLogger is set ( i.e we are running tests ), use that\n              // instead of console.log\n              var log =\n                _main.default._fesLogger == null\n                  ? console.log.bind(console)\n                  : _main.default._fesLogger;\n\n              if (doFriendlyWelcome) {\n                friendlyWelcome();\n                doFriendlyWelcome = false;\n              }\n              if ('undefined' === getType(color)) {\n                color = '#B40033'; // dark magenta\n              } else if (getType(color) === 'number') {\n                // Type to color\n                color = typeColors[color];\n              }\n\n              // Add a link to the reference docs of func at the end of the message\n              message = mapToReference(message, func);\n              var style = [\n                'color: '.concat(color),\n                'font-family: Arial',\n                'font-size: larger'\n              ];\n              var prefixedMsg = (0, _internationalization.translator)('fes.pre', {\n                message: message\n              });\n\n              if (ENABLE_FES_STYLING) {\n                log('%c' + prefixedMsg, style.join(';'));\n              } else {\n                log(prefixedMsg);\n              }\n            };\n            /**\n             * This is a generic method that can be called from anywhere in the p5\n             * library to alert users to a common error.\n             *\n             * @method _friendlyError\n             * @private\n             * @param  {Number} message message to be printed\n             * @param  {String} [method] name of method\n             * @param  {Number|String} [color]   CSS color string or error type (Optional)\n             */\n            _main.default._friendlyError = function(message, method, color) {\n              report(message, method, color);\n            };\n\n            /**\n             * This is called internally if there is a error with autoplay.\n             *\n             * @method _friendlyAutoplayError\n             * @private\n             */\n            _main.default._friendlyAutoplayError = function(src) {\n              var message = (0, _internationalization.translator)('fes.autoplay', {\n                src: src,\n                link: 'https://developer.mozilla.org/docs/Web/Media/Autoplay_guide'\n              });\n\n              console.log(\n                (0, _internationalization.translator)('fes.pre', { message: message })\n              );\n            };\n\n            /**\n             * An implementation of\n             * https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm to\n             * compute the Levenshtein distance. It gives a measure of how dissimilar\n             * two strings are. If the \"distance\" between them is small enough, it is\n             * reasonable to think that one is the misspelled version of the other.\n             * @method computeEditDistance\n             * @private\n             * @param {String} w1 the first word\n             * @param {String} w2 the second word\n             *\n             * @returns {Number} the \"distance\" between the two words, a smaller value\n             *                   indicates that the words are similar\n             */\n            var computeEditDistance = function computeEditDistance(w1, w2) {\n              var l1 = w1.length,\n                l2 = w2.length;\n              if (l1 === 0) return w2;\n              if (l2 === 0) return w1;\n\n              var prev = [];\n              var cur = [];\n\n              for (var j = 0; j < l2 + 1; j++) {\n                cur[j] = j;\n              }\n\n              prev = cur;\n\n              for (var i = 1; i < l1 + 1; i++) {\n                cur = [];\n                for (var _j = 0; _j < l2 + 1; _j++) {\n                  if (_j === 0) {\n                    cur[_j] = i;\n                  } else {\n                    var a1 = w1[i - 1],\n                      a2 = w2[_j - 1];\n                    var temp = 999999;\n                    var cost = a1.toLowerCase() === a2.toLowerCase() ? 0 : 1;\n                    temp = temp > cost + prev[_j - 1] ? cost + prev[_j - 1] : temp;\n                    temp = temp > 1 + cur[_j - 1] ? 1 + cur[_j - 1] : temp;\n                    temp = temp > 1 + prev[_j] ? 1 + prev[_j] : temp;\n                    cur[_j] = temp;\n                  }\n                }\n                prev = cur;\n              }\n\n              return cur[l2];\n            };\n\n            /**\n             * checks if the various functions such as setup, draw, preload have been\n             * defined with capitalization mistakes\n             * @method checkForUserDefinedFunctions\n             * @private\n             * @param {*} context The current default context. It's set to window in\n             * \"global mode\" and to a p5 instance in \"instance mode\"\n             */\n            var checkForUserDefinedFunctions = function checkForUserDefinedFunctions(\n              context\n            ) {\n              if (_main.default.disableFriendlyErrors) return;\n\n              // if using instance mode, this function would be called with the current\n              // instance as context\n              var instanceMode = context instanceof _main.default;\n              context = instanceMode ? context : window;\n              var fnNames = entryPoints;\n\n              var fxns = {};\n              // lowercasename -> actualName mapping\n              fnNames.forEach(function(symbol) {\n                fxns[symbol.toLowerCase()] = symbol;\n              });\n\n              for (\n                var _i = 0, _Object$keys = Object.keys(context);\n                _i < _Object$keys.length;\n                _i++\n              ) {\n                var prop = _Object$keys[_i];\n                var lowercase = prop.toLowerCase();\n\n                // check if the lowercase property name has an entry in fxns, if the\n                // actual name with correct capitalization doesnt exist in context,\n                // and if the user-defined symbol is of the type function\n                if (\n                  fxns[lowercase] &&\n                  !context[fxns[lowercase]] &&\n                  typeof context[prop] === 'function'\n                ) {\n                  var msg = (0, _internationalization.translator)(\n                    'fes.checkUserDefinedFns',\n                    {\n                      name: prop,\n                      actualName: fxns[lowercase]\n                    }\n                  );\n\n                  report(msg, fxns[lowercase]);\n                }\n              }\n            };\n\n            /**\n             * compares the the symbol caught in the ReferenceErrror to everything\n             * in misusedAtTopLevel ( all public p5 properties ). The use of\n             * misusedAtTopLevel here is for convenience as it was an array that was\n             * already defined when spelling check was implemented. For this particular\n             * use-case, it's a misnomer.\n             *\n             * @method handleMisspelling\n             * @private\n             * @param {String} errSym the symbol to whose spelling to check\n             * @param {Error} error the ReferenceError object\n             *\n             * @returns {Boolean} a boolean value indicating if this error was likely due\n             * to a mis-spelling\n             */\n            var handleMisspelling = function handleMisspelling(errSym, error) {\n              if (!misusedAtTopLevelCode) {\n                defineMisusedAtTopLevelCode();\n              }\n\n              var distanceMap = {};\n              var min = 999999;\n              // compute the levenshtein distance for the symbol against all known\n              // public p5 properties. Find the property with the minimum distance\n              misusedAtTopLevelCode.forEach(function(symbol) {\n                var dist = computeEditDistance(errSym, symbol.name);\n                if (distanceMap[dist]) distanceMap[dist].push(symbol);\n                else distanceMap[dist] = [symbol];\n\n                if (dist < min) min = dist;\n              });\n\n              // if the closest match has more \"distance\" than the max allowed threshold\n              if (min > Math.min(EDIT_DIST_THRESHOLD, errSym.length)) return false;\n\n              // Show a message only if the caught symbol and the matched property name\n              // differ in their name ( either letter difference or difference of case )\n              var matchedSymbols = distanceMap[min].filter(function(symbol) {\n                return symbol.name !== errSym;\n              });\n\n              if (matchedSymbols.length !== 0) {\n                var parsed = _main.default._getErrorStackParser().parse(error);\n                var locationObj;\n                if (\n                  parsed &&\n                  parsed[0] &&\n                  parsed[0].fileName &&\n                  parsed[0].lineNumber &&\n                  parsed[0].columnNumber\n                ) {\n                  locationObj = {\n                    location: ''\n                      .concat(parsed[0].fileName, ':')\n                      .concat(parsed[0].lineNumber, ':')\n                      .concat(parsed[0].columnNumber),\n\n                    file: parsed[0].fileName.split('/').slice(-1),\n                    line: parsed[0].lineNumber\n                  };\n                }\n\n                var msg;\n                if (matchedSymbols.length === 1) {\n                  // To be used when there is only one closest match. The count parameter\n                  // allows i18n to pick between the keys \"fes.misspelling\" and\n                  // \"fes.misspelling__plural\"\n                  msg = (0, _internationalization.translator)('fes.misspelling', {\n                    name: errSym,\n                    actualName: matchedSymbols[0].name,\n                    type: matchedSymbols[0].type,\n                    location: locationObj\n                      ? (0, _internationalization.translator)('fes.location', locationObj)\n                      : '',\n                    count: matchedSymbols.length\n                  });\n                } else {\n                  // To be used when there are multiple closest matches. Gives each\n                  // suggestion on its own line, the function name followed by a link to\n                  // reference documentation\n                  var suggestions = matchedSymbols\n                    .map(function(symbol) {\n                      var message =\n                        '▶️ ' + symbol.name + (symbol.type === 'function' ? '()' : '');\n                      return mapToReference(message, symbol.name);\n                    })\n                    .join('\\n');\n\n                  msg = (0, _internationalization.translator)('fes.misspelling', {\n                    name: errSym,\n                    suggestions: suggestions,\n                    location: locationObj\n                      ? (0, _internationalization.translator)('fes.location', locationObj)\n                      : '',\n                    count: matchedSymbols.length\n                  });\n                }\n\n                // If there is only one closest match, tell _friendlyError to also add\n                // a link to the reference documentation. In case of multiple matches,\n                // this is already done in the suggestions variable, one link for each\n                // suggestion.\n                report(\n                  msg,\n                  matchedSymbols.length === 1 ? matchedSymbols[0].name : undefined\n                );\n\n                return true;\n              }\n              return false;\n            };\n\n            /**\n             * prints a friendly stacktrace which only includes user-written functions\n             * and is easier for newcomers to understand\n             * @method printFriendlyStack\n             * @private\n             * @param {Array} friendlyStack\n             */\n            var printFriendlyStack = function printFriendlyStack(friendlyStack) {\n              var log =\n                _main.default._fesLogger && typeof _main.default._fesLogger === 'function'\n                  ? _main.default._fesLogger\n                  : console.log.bind(console);\n              if (friendlyStack.length > 1) {\n                var stacktraceMsg = '';\n                friendlyStack.forEach(function(frame, idx) {\n                  var location = ''\n                    .concat(frame.fileName, ':')\n                    .concat(frame.lineNumber, ':')\n                    .concat(frame.columnNumber);\n\n                  var frameMsg,\n                    translationObj = {\n                      func: frame.functionName,\n                      line: frame.lineNumber,\n                      location: location,\n                      file: frame.fileName.split('/').slice(-1)\n                    };\n\n                  if (idx === 0) {\n                    frameMsg = (0, _internationalization.translator)(\n                      'fes.globalErrors.stackTop',\n                      translationObj\n                    );\n                  } else {\n                    frameMsg = (0, _internationalization.translator)(\n                      'fes.globalErrors.stackSubseq',\n                      translationObj\n                    );\n                  }\n                  stacktraceMsg += frameMsg;\n                });\n                log(stacktraceMsg);\n              }\n            };\n\n            /**\n             * Takes a stacktrace array and filters out all frames that show internal p5\n             * details. It also uses this processed stack to figure out if the error\n             * error happened internally within the library, and if the error was due to\n             * a non-loadX() method being used in preload\n             * \"Internally\" here means that the error exact location of the error (the\n             * top of the stack) is a piece of code write in the p5.js library (which may\n             * or may not have been called from the user's sketch)\n             *\n             * @method processStack\n             * @private\n             * @param {Error} error\n             * @param {Array} stacktrace\n             *\n             * @returns {Array} An array with two elements, [isInternal, friendlyStack]\n             * isInternal: a boolean indicating if the error happened internally\n             * friendlyStack: the simplified stacktrace, with internal details filtered\n             */\n            var processStack = function processStack(error, stacktrace) {\n              // cannot process a stacktrace that doesn't exist\n              if (!stacktrace) return [false, null];\n\n              stacktrace.forEach(function(frame) {\n                frame.functionName = frame.functionName || '';\n              });\n\n              // isInternal - Did this error happen inside the library\n              var isInternal = false;\n              var p5FileName, friendlyStack, currentEntryPoint;\n              for (var i = stacktrace.length - 1; i >= 0; i--) {\n                var splitted = stacktrace[i].functionName.split('.');\n                if (entryPoints.includes(splitted[splitted.length - 1])) {\n                  // remove everything below an entry point function (setup, draw, etc).\n                  // (it's usually the internal initialization calls)\n                  friendlyStack = stacktrace.slice(0, i + 1);\n                  currentEntryPoint = splitted[splitted.length - 1];\n                  for (var j = 0; j < i; j++) {\n                    // Due to the current build process, all p5 functions have\n                    // _main.default in their names in the final build. This is the\n                    // easiest way to check if a function is inside the p5 library\n                    if (stacktrace[j].functionName.search('_main.default') !== -1) {\n                      isInternal = true;\n                      p5FileName = stacktrace[j].fileName;\n                      break;\n                    }\n                  }\n                  break;\n                }\n              }\n\n              // in some cases ( errors in promises, callbacks, etc), no entry-point\n              // function may be found in the stacktrace. In that case just use the\n              // entire stacktrace for friendlyStack\n              if (!friendlyStack) friendlyStack = stacktrace;\n\n              if (isInternal) {\n                // the frameIndex property is added before the filter, so frameIndex\n                // corresponds to the index of a frame in the original stacktrace.\n                // Then we filter out all frames which belong to the file that contains\n                // the p5 library\n                friendlyStack = friendlyStack\n                  .map(function(frame, index) {\n                    frame.frameIndex = index;\n                    return frame;\n                  })\n                  .filter(function(frame) {\n                    return frame.fileName !== p5FileName;\n                  });\n\n                // a weird case, if for some reason we can't identify the function called\n                // from user's code\n                if (friendlyStack.length === 0) return [true, null];\n\n                // get the function just above the topmost frame in the friendlyStack.\n                // i.e the name of the library function called from user's code\n                var func = stacktrace[friendlyStack[0].frameIndex - 1].functionName\n                  .split('.')\n                  .slice(-1)[0];\n\n                // Try and get the location (line no.) from the top element of the stack\n                var locationObj;\n                if (\n                  friendlyStack[0].fileName &&\n                  friendlyStack[0].lineNumber &&\n                  friendlyStack[0].columnNumber\n                ) {\n                  locationObj = {\n                    location: ''\n                      .concat(friendlyStack[0].fileName, ':')\n                      .concat(friendlyStack[0].lineNumber, ':')\n                      .concat(friendlyStack[0].columnNumber),\n                    file: friendlyStack[0].fileName.split('/').slice(-1),\n                    line: friendlyStack[0].lineNumber\n                  };\n\n                  // if already handled by another part of the FES, don't handle again\n                  if (_main.default._fesLogCache[locationObj.location]) return [true, null];\n                }\n\n                // Check if the error is due to a non loadX method being used incorrectly\n                // in preload\n                if (\n                  currentEntryPoint === 'preload' &&\n                  _main.default.prototype._preloadMethods[func] == null\n                ) {\n                  report(\n                    (0, _internationalization.translator)('fes.wrongPreload', {\n                      func: func,\n                      location: locationObj\n                        ? (0, _internationalization.translator)('fes.location', locationObj)\n                        : '',\n                      error: error.message\n                    }),\n\n                    'preload'\n                  );\n                } else {\n                  // Library error\n                  report(\n                    (0, _internationalization.translator)('fes.libraryError', {\n                      func: func,\n                      location: locationObj\n                        ? (0, _internationalization.translator)('fes.location', locationObj)\n                        : '',\n                      error: error.message\n                    }),\n\n                    func\n                  );\n                }\n\n                // Finally, if it's an internal error, print the friendlyStack\n                // ( fesErrorMonitor won't handle this error )\n                if (friendlyStack && friendlyStack.length) {\n                  printFriendlyStack(friendlyStack);\n                }\n              }\n              return [isInternal, friendlyStack];\n            };\n\n            /**\n             * The main function for handling global errors. Called when an error\n             * happens and is responsible for detecting the type of error that\n             * has happened and showing the appropriate message\n             *\n             * @method fesErrorMonitor\n             * @private\n             * @param {*} e The object to extract error details from\n             */\n            var fesErrorMonitor = function fesErrorMonitor(e) {\n              if (_main.default.disableFriendlyErrors) return;\n              // Try to get the error object from e\n              var error;\n              if (e instanceof Error) {\n                error = e;\n              } else if (e instanceof ErrorEvent) {\n                error = e.error;\n              } else if (e instanceof PromiseRejectionEvent) {\n                error = e.reason;\n                if (!(error instanceof Error)) return;\n              }\n              if (!error) return;\n\n              var stacktrace = _main.default._getErrorStackParser().parse(error);\n              // process the stacktrace from the browser and simplify it to give\n              // friendlyStack.\n              var _processStack = processStack(error, stacktrace),\n                _processStack2 = _slicedToArray(_processStack, 2),\n                isInternal = _processStack2[0],\n                friendlyStack = _processStack2[1];\n\n              // if this is an internal library error, the type of the error is not relevant,\n              // only the user code that lead to it is.\n              if (isInternal) {\n                return;\n              }\n\n              var errList = errorTable[error.name];\n              if (!errList) return; // this type of error can't be handled yet\n              var matchedError;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n              try {\n                for (\n                  var _iterator = errList[Symbol.iterator](), _step;\n                  !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                  _iteratorNormalCompletion = true\n                ) {\n                  var obj = _step.value;\n                  var string = obj.msg;\n                  // capture the primary symbol mentioned in the error\n                  string = string.replace(new RegExp('{{}}', 'g'), '([a-zA-Z0-9_]+)');\n                  string = string.replace(new RegExp('{{.}}', 'g'), '(.+)');\n                  string = string.replace(new RegExp('{}', 'g'), '(?:[a-zA-Z0-9_]+)');\n                  var matched = error.message.match(string);\n\n                  if (matched) {\n                    matchedError = Object.assign({}, obj);\n                    matchedError.match = matched;\n                    break;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              if (!matchedError) return;\n\n              // Try and get the location from the top element of the stack\n              var locationObj;\n              if (\n                stacktrace &&\n                stacktrace[0].fileName &&\n                stacktrace[0].lineNumber &&\n                stacktrace[0].columnNumber\n              ) {\n                locationObj = {\n                  location: ''\n                    .concat(stacktrace[0].fileName, ':')\n                    .concat(stacktrace[0].lineNumber, ':')\n                    .concat(stacktrace[0].columnNumber),\n\n                  file: stacktrace[0].fileName.split('/').slice(-1),\n                  line: friendlyStack[0].lineNumber\n                };\n              }\n\n              switch (error.name) {\n                case 'SyntaxError': {\n                  // We can't really do much with syntax errors other than try to use\n                  // a simpler framing of the error message. The stack isn't available\n                  // for syntax errors\n                  switch (matchedError.type) {\n                    case 'INVALIDTOKEN': {\n                      var url =\n                        'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Illegal_character#What_went_wrong';\n                      report(\n                        (0, _internationalization.translator)(\n                          'fes.globalErrors.syntax.invalidToken',\n                          {\n                            url: url\n                          }\n                        )\n                      );\n\n                      break;\n                    }\n                    case 'UNEXPECTEDTOKEN': {\n                      var _url =\n                        'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Unexpected_token#What_went_wrong';\n                      report(\n                        (0, _internationalization.translator)(\n                          'fes.globalErrors.syntax.unexpectedToken',\n                          {\n                            url: _url\n                          }\n                        )\n                      );\n\n                      break;\n                    }\n                  }\n\n                  break;\n                }\n                case 'ReferenceError': {\n                  switch (matchedError.type) {\n                    case 'NOTDEFINED': {\n                      var errSym = matchedError.match[1];\n\n                      if (errSym && handleMisspelling(errSym, error)) {\n                        break;\n                      }\n\n                      // if the flow gets this far, this is likely not a misspelling\n                      // of a p5 property/function\n                      var url1 = 'https://p5js.org/examples/data-variable-scope.html';\n                      var url2 =\n                        'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Not_Defined#What_went_wrong';\n                      report(\n                        (0, _internationalization.translator)(\n                          'fes.globalErrors.reference.notDefined',\n                          {\n                            url1: url1,\n                            url2: url2,\n                            symbol: errSym,\n                            location: locationObj\n                              ? (0, _internationalization.translator)(\n                                  'fes.location',\n                                  locationObj\n                                )\n                              : ''\n                          }\n                        )\n                      );\n\n                      if (friendlyStack) printFriendlyStack(friendlyStack);\n                      break;\n                    }\n                  }\n\n                  break;\n                }\n\n                case 'TypeError': {\n                  switch (matchedError.type) {\n                    case 'NOTFUNC': {\n                      var _errSym = matchedError.match[1];\n                      var splitSym = _errSym.split('.');\n                      var _url2 =\n                        'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Not_a_function#What_went_wrong';\n\n                      // if errSym is aa.bb.cc , symbol would be cc and obj would aa.bb\n                      var translationObj = {\n                        url: _url2,\n                        symbol: splitSym[splitSym.length - 1],\n                        obj: splitSym.slice(0, splitSym.length - 1).join('.'),\n                        location: locationObj\n                          ? (0, _internationalization.translator)(\n                              'fes.location',\n                              locationObj\n                            )\n                          : ''\n                      };\n\n                      // There are two cases to handle here. When the function is called\n                      // as a property of an object and when it's called independently.\n                      // Both have different explanations.\n                      if (splitSym.length > 1) {\n                        report(\n                          (0, _internationalization.translator)(\n                            'fes.globalErrors.type.notfuncObj',\n                            translationObj\n                          )\n                        );\n                      } else {\n                        report(\n                          (0, _internationalization.translator)(\n                            'fes.globalErrors.type.notfunc',\n                            translationObj\n                          )\n                        );\n                      }\n\n                      if (friendlyStack) printFriendlyStack(friendlyStack);\n                      break;\n                    }\n                  }\n                }\n              }\n            };\n\n            _main.default._fesErrorMonitor = fesErrorMonitor;\n            _main.default._checkForUserDefinedFunctions = checkForUserDefinedFunctions;\n\n            // logger for testing purposes.\n            _main.default._fesLogger = null;\n            _main.default._fesLogCache = {};\n\n            window.addEventListener('load', checkForUserDefinedFunctions, false);\n            window.addEventListener('error', _main.default._fesErrorMonitor, false);\n            window.addEventListener(\n              'unhandledrejection',\n              _main.default._fesErrorMonitor,\n              false\n            );\n\n            /**\n             * Prints out all the colors in the color pallete with white text.\n             * For color blindness testing.\n             */\n            /* function testColors() {\n                                                                                              const str = 'A box of biscuits, a box of mixed biscuits and a biscuit mixer';\n                                                                                              report(str, 'print', '#ED225D'); // p5.js magenta\n                                                                                              report(str, 'print', '#2D7BB6'); // p5.js blue\n                                                                                              report(str, 'print', '#EE9900'); // p5.js orange\n                                                                                              report(str, 'print', '#A67F59'); // p5.js light brown\n                                                                                              report(str, 'print', '#704F21'); // p5.js gold\n                                                                                              report(str, 'print', '#1CC581'); // auto cyan\n                                                                                              report(str, 'print', '#FF6625'); // auto orange\n                                                                                              report(str, 'print', '#79EB22'); // auto green\n                                                                                              report(str, 'print', '#B40033'); // p5.js darkened magenta\n                                                                                              report(str, 'print', '#084B7F'); // p5.js darkened blue\n                                                                                              report(str, 'print', '#945F00'); // p5.js darkened orange\n                                                                                              report(str, 'print', '#6B441D'); // p5.js darkened brown\n                                                                                              report(str, 'print', '#2E1B00'); // p5.js darkened gold\n                                                                                              report(str, 'print', '#008851'); // auto dark cyan\n                                                                                              report(str, 'print', '#C83C00'); // auto dark orange\n                                                                                              report(str, 'print', '#4DB200'); // auto dark green\n                                                                                            } */\n          }\n\n          // This is a lazily-defined list of p5 symbols that may be\n          // misused by beginners at top-level code, outside of setup/draw. We'd like\n          // to detect these errors and help the user by suggesting they move them\n          // into setup/draw.\n          //\n          // For more details, see https://github.com/processing/p5.js/issues/1121.\n          misusedAtTopLevelCode = null;\n          var FAQ_URL =\n            'https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup';\n\n          defineMisusedAtTopLevelCode = function defineMisusedAtTopLevelCode() {\n            var uniqueNamesFound = {};\n\n            var getSymbols = function getSymbols(obj) {\n              return Object.getOwnPropertyNames(obj)\n                .filter(function(name) {\n                  if (name[0] === '_') {\n                    return false;\n                  }\n                  if (name in uniqueNamesFound) {\n                    return false;\n                  }\n\n                  uniqueNamesFound[name] = true;\n\n                  return true;\n                })\n                .map(function(name) {\n                  var type;\n\n                  if (typeof obj[name] === 'function') {\n                    type = 'function';\n                  } else if (name === name.toUpperCase()) {\n                    type = 'constant';\n                  } else {\n                    type = 'variable';\n                  }\n\n                  return { name: name, type: type };\n                });\n            };\n\n            misusedAtTopLevelCode = [].concat(\n              getSymbols(_main.default.prototype),\n              // At present, p5 only adds its constants to p5.prototype during\n              // construction, which may not have happened at the time a\n              // ReferenceError is thrown, so we'll manually add them to our list.\n              getSymbols(_dereq_('../constants'))\n            );\n\n            // This will ultimately ensure that we report the most specific error\n            // possible to the user, e.g. advising them about HALF_PI instead of PI\n            // when their code misuses the former.\n            misusedAtTopLevelCode.sort(function(a, b) {\n              return b.name.length - a.name.length;\n            });\n          };\n\n          var helpForMisusedAtTopLevelCode = function helpForMisusedAtTopLevelCode(e, log) {\n            if (!log) {\n              log = console.log.bind(console);\n            }\n\n            if (!misusedAtTopLevelCode) {\n              defineMisusedAtTopLevelCode();\n            }\n\n            // If we find that we're logging lots of false positives, we can\n            // uncomment the following code to avoid displaying anything if the\n            // user's code isn't likely to be using p5's global mode. (Note that\n            // setup/draw are more likely to be defined due to JS function hoisting.)\n            //\n            //if (!('setup' in window || 'draw' in window)) {\n            //  return;\n            //}\n\n            misusedAtTopLevelCode.some(function(symbol) {\n              // Note that while just checking for the occurrence of the\n              // symbol name in the error message could result in false positives,\n              // a more rigorous test is difficult because different browsers\n              // log different messages, and the format of those messages may\n              // change over time.\n              //\n              // For example, if the user uses 'PI' in their code, it may result\n              // in any one of the following messages:\n              //\n              //   * 'PI' is undefined                           (Microsoft Edge)\n              //   * ReferenceError: PI is undefined             (Firefox)\n              //   * Uncaught ReferenceError: PI is not defined  (Chrome)\n\n              if (\n                e.message &&\n                e.message.match('\\\\W?'.concat(symbol.name, '\\\\W')) !== null\n              ) {\n                var symbolName =\n                  symbol.type === 'function' ? ''.concat(symbol.name, '()') : symbol.name;\n                if (typeof IS_MINIFIED !== 'undefined') {\n                  log(\n                    \"Did you just try to use p5.js's \"\n                      .concat(symbolName, ' ')\n                      .concat(\n                        symbol.type,\n                        \"? If so, you may want to move it into your sketch's setup() function.\\n\\nFor more details, see: \"\n                      )\n                      .concat(FAQ_URL)\n                  );\n                } else {\n                  log(\n                    (0, _internationalization.translator)('fes.misusedTopLevel', {\n                      symbolName: symbolName,\n                      symbolType: symbol.type,\n                      link: FAQ_URL\n                    })\n                  );\n                }\n                return true;\n              }\n            });\n          };\n\n          // Exposing this primarily for unit testing.\n          _main.default.prototype._helpForMisusedAtTopLevelCode = helpForMisusedAtTopLevelCode;\n\n          if (document.readyState !== 'complete') {\n            window.addEventListener('error', helpForMisusedAtTopLevelCode, false);\n\n            // Our job is only to catch ReferenceErrors that are thrown when\n            // global (non-instance mode) p5 APIs are used at the top-level\n            // scope of a file, so we'll unbind our error listener now to make\n            // sure we don't log false positives later.\n            window.addEventListener('load', function() {\n              window.removeEventListener('error', helpForMisusedAtTopLevelCode, false);\n            });\n          }\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../constants': 48,\n          '../internationalization': 57,\n          '../main': 59,\n          './browser_errors': 50\n        }\n      ],\n      52: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../main'));\n          var _internationalization = _dereq_('../internationalization');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @for p5\n           * @requires core\n           *\n           * This file contains the part of the FES responsible for dealing with\n           * file load errors\n           */ if (typeof IS_MINIFIED !== 'undefined') {\n            _main.default._friendlyFileLoadError = function() {};\n          } else {\n            // mapping used by `_friendlyFileLoadError`\n            var fileLoadErrorCases = function fileLoadErrorCases(num, filePath) {\n              var suggestion = (0, _internationalization.translator)(\n                'fes.fileLoadError.suggestion',\n                {\n                  filePath: filePath,\n                  link: 'https://github.com/processing/p5.js/wiki/Local-server'\n                }\n              );\n\n              switch (num) {\n                case 0:\n                  return {\n                    message: (0, _internationalization.translator)(\n                      'fes.fileLoadError.image',\n                      {\n                        suggestion: suggestion\n                      }\n                    ),\n\n                    method: 'loadImage'\n                  };\n\n                case 1:\n                  return {\n                    message: (0, _internationalization.translator)(\n                      'fes.fileLoadError.xml',\n                      {\n                        suggestion: suggestion\n                      }\n                    ),\n\n                    method: 'loadXML'\n                  };\n\n                case 2:\n                  return {\n                    message: (0, _internationalization.translator)(\n                      'fes.fileLoadError.table',\n                      {\n                        suggestion: suggestion\n                      }\n                    ),\n\n                    method: 'loadTable'\n                  };\n\n                case 3:\n                  return {\n                    message: (0, _internationalization.translator)(\n                      'fes.fileLoadError.strings',\n                      {\n                        suggestion: suggestion\n                      }\n                    ),\n\n                    method: 'loadStrings'\n                  };\n\n                case 4:\n                  return {\n                    message: (0, _internationalization.translator)(\n                      'fes.fileLoadError.font',\n                      {\n                        suggestion: suggestion\n                      }\n                    ),\n\n                    method: 'loadFont'\n                  };\n\n                case 5:\n                  return {\n                    message: (0, _internationalization.translator)(\n                      'fes.fileLoadError.json',\n                      {\n                        suggestion: suggestion\n                      }\n                    ),\n\n                    method: 'loadJSON'\n                  };\n\n                case 6:\n                  return {\n                    message: (0, _internationalization.translator)(\n                      'fes.fileLoadError.bytes',\n                      {\n                        suggestion: suggestion\n                      }\n                    ),\n\n                    method: 'loadBytes'\n                  };\n\n                case 7:\n                  return {\n                    message: (0, _internationalization.translator)(\n                      'fes.fileLoadError.large'\n                    ),\n                    method: 'loadX'\n                  };\n\n                case 8:\n                  return {\n                    message: (0, _internationalization.translator)('fes.fileLoadError.gif'),\n                    method: 'loadImage'\n                  };\n              }\n            };\n\n            /**\n             * This is called internally if there is a error during file loading.\n             *\n             * @method _friendlyFileLoadError\n             * @private\n             * @param  {Number} errorType\n             * @param  {String} filePath\n             */\n            _main.default._friendlyFileLoadError = function(errorType, filePath) {\n              var _fileLoadErrorCases = fileLoadErrorCases(errorType, filePath),\n                message = _fileLoadErrorCases.message,\n                method = _fileLoadErrorCases.method;\n              _main.default._friendlyError(message, method, 3);\n            };\n          }\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../internationalization': 57, '../main': 59 }\n      ],\n      53: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** // Borrow from stacktracejs https://github.com/stacktracejs/stacktrace.js with\n           * @for p5\n           * @requires core\n           */\n          // minor modifications. The license for the same and the code is included below\n          // Copyright (c) 2017 Eric Wendelin and other contributors\n          // Permission is hereby granted, free of charge, to any person obtaining a copy of\n          // this software and associated documentation files (the \"Software\"), to deal in\n          // the Software without restriction, including without limitation the rights to\n          // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n          // of the Software, and to permit persons to whom the Software is furnished to do\n          // so, subject to the following conditions:\n          // The above copyright notice and this permission notice shall be included in all\n          // copies or substantial portions of the Software.\n          // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n          // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n          // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n          // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n          // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n          // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n          // SOFTWARE.\n          function ErrorStackParser() {\n            'use strict';\n\n            var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\n            var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\n            var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\n\n            return {\n              /**\n               * Given an Error object, extract the most information from it.\n               * @private\n               * @param {Error} error object\n               * @return {Array} of stack frames\n               */\n              parse: function ErrorStackParser$$parse(error) {\n                if (\n                  typeof error.stacktrace !== 'undefined' ||\n                  typeof error['opera#sourceloc'] !== 'undefined'\n                ) {\n                  return this.parseOpera(error);\n                } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n                  return this.parseV8OrIE(error);\n                } else if (error.stack) {\n                  return this.parseFFOrSafari(error);\n                } else {\n                  // throw new Error('Cannot parse given Error object');\n                }\n              },\n\n              // Separate line and column numbers from a string of the form: (URI:Line:Column)\n              extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n                // Fail-fast but return locations like \"(native)\"\n                if (urlLike.indexOf(':') === -1) {\n                  return [urlLike];\n                }\n\n                var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n                var parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n                return [parts[1], parts[2] || undefined, parts[3] || undefined];\n              },\n\n              parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n                var filtered = error.stack.split('\\n').filter(function(line) {\n                  return !!line.match(CHROME_IE_STACK_REGEXP);\n                }, this);\n\n                return filtered.map(function(line) {\n                  if (line.indexOf('(eval ') > -1) {\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\n                    line = line\n                      .replace(/eval code/g, 'eval')\n                      .replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');\n                  }\n                  var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(');\n\n                  // capture and preseve the parenthesized location \"(/foo/my bar.js:12:87)\" in\n                  // case it has spaces in it, as the string is split on \\s+ later on\n                  var location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/);\n\n                  // remove the parenthesized location from the line, if it was matched\n                  sanitizedLine = location\n                    ? sanitizedLine.replace(location[0], '')\n                    : sanitizedLine;\n\n                  var tokens = sanitizedLine.split(/\\s+/).slice(1);\n                  // if a location was matched, pass it to extractLocation() otherwise pop the last token\n                  var locationParts = this.extractLocation(\n                    location ? location[1] : tokens.pop()\n                  );\n\n                  var functionName = tokens.join(' ') || undefined;\n                  var fileName =\n                    ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1\n                      ? undefined\n                      : locationParts[0];\n\n                  return {\n                    functionName: functionName,\n                    fileName: fileName,\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                    source: line\n                  };\n                }, this);\n              },\n\n              parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n                var filtered = error.stack.split('\\n').filter(function(line) {\n                  return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n                }, this);\n\n                return filtered.map(function(line) {\n                  // Throw away eval information until we implement stacktrace.js/stackframe#8\n                  if (line.indexOf(' > eval') > -1) {\n                    line = line.replace(\n                      / line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g,\n                      ':$1'\n                    );\n                  }\n\n                  if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n                    // Safari eval frames only have function names and nothing else\n                    return {\n                      functionName: line\n                    };\n                  } else {\n                    var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n                    var matches = line.match(functionNameRegex);\n                    var functionName = matches && matches[1] ? matches[1] : undefined;\n                    var locationParts = this.extractLocation(\n                      line.replace(functionNameRegex, '')\n                    );\n\n                    return {\n                      functionName: functionName,\n                      fileName: locationParts[0],\n                      lineNumber: locationParts[1],\n                      columnNumber: locationParts[2],\n                      source: line\n                    };\n                  }\n                }, this);\n              },\n\n              parseOpera: function ErrorStackParser$$parseOpera(e) {\n                if (\n                  !e.stacktrace ||\n                  (e.message.indexOf('\\n') > -1 &&\n                    e.message.split('\\n').length > e.stacktrace.split('\\n').length)\n                ) {\n                  return this.parseOpera9(e);\n                } else if (!e.stack) {\n                  return this.parseOpera10(e);\n                } else {\n                  return this.parseOpera11(e);\n                }\n              },\n\n              parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n                var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n                var lines = e.message.split('\\n');\n                var result = [];\n\n                for (var i = 2, len = lines.length; i < len; i += 2) {\n                  var match = lineRE.exec(lines[i]);\n                  if (match) {\n                    result.push({\n                      fileName: match[2],\n                      lineNumber: match[1],\n                      source: lines[i]\n                    });\n                  }\n                }\n\n                return result;\n              },\n\n              parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n                var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n                var lines = e.stacktrace.split('\\n');\n                var result = [];\n\n                for (var i = 0, len = lines.length; i < len; i += 2) {\n                  var match = lineRE.exec(lines[i]);\n                  if (match) {\n                    result.push({\n                      functionName: match[3] || undefined,\n                      fileName: match[2],\n                      lineNumber: match[1],\n                      source: lines[i]\n                    });\n                  }\n                }\n\n                return result;\n              },\n\n              // Opera 10.65+ Error.stack very similar to FF/Safari\n              parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n                var filtered = error.stack.split('\\n').filter(function(line) {\n                  return (\n                    !!line.match(FIREFOX_SAFARI_STACK_REGEXP) &&\n                    !line.match(/^Error created at/)\n                  );\n                }, this);\n\n                return filtered.map(function(line) {\n                  var tokens = line.split('@');\n                  var locationParts = this.extractLocation(tokens.pop());\n                  var functionCall = tokens.shift() || '';\n                  var functionName =\n                    functionCall\n                      .replace(/<anonymous function(: (\\w+))?>/, '$2')\n                      .replace(/\\([^)]*\\)/g, '') || undefined;\n                  var argsRaw;\n                  if (functionCall.match(/\\(([^)]*)\\)/)) {\n                    argsRaw = functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, '$1');\n                  }\n                  var args =\n                    argsRaw === undefined || argsRaw === '[arguments not available]'\n                      ? undefined\n                      : argsRaw.split(',');\n\n                  return {\n                    functionName: functionName,\n                    args: args,\n                    fileName: locationParts[0],\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                    source: line\n                  };\n                }, this);\n              }\n            };\n          }\n\n          // End borrow\n\n          // wrapper exposing ErrorStackParser\n          _main.default._getErrorStackParser = function getErrorStackParser() {\n            return new ErrorStackParser();\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../main': 59 }\n      ],\n      54: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../main'));\n          var constants = _interopRequireWildcard(_dereq_('../constants'));\n          var _internationalization = _dereq_('../internationalization');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError('Cannot call a class as a function');\n            }\n          }\n          function _possibleConstructorReturn(self, call) {\n            if (call && (_typeof(call) === 'object' || typeof call === 'function')) {\n              return call;\n            }\n            return _assertThisInitialized(self);\n          }\n          function _assertThisInitialized(self) {\n            if (self === void 0) {\n              throw new ReferenceError(\n                \"this hasn't been initialised - super() hasn't been called\"\n              );\n            }\n            return self;\n          }\n          function _inherits(subClass, superClass) {\n            if (typeof superClass !== 'function' && superClass !== null) {\n              throw new TypeError('Super expression must either be null or a function');\n            }\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n              constructor: { value: subClass, writable: true, configurable: true }\n            });\n            if (superClass) _setPrototypeOf(subClass, superClass);\n          }\n          function _wrapNativeSuper(Class) {\n            var _cache = typeof Map === 'function' ? new Map() : undefined;\n            _wrapNativeSuper = function _wrapNativeSuper(Class) {\n              if (Class === null || !_isNativeFunction(Class)) return Class;\n              if (typeof Class !== 'function') {\n                throw new TypeError('Super expression must either be null or a function');\n              }\n              if (typeof _cache !== 'undefined') {\n                if (_cache.has(Class)) return _cache.get(Class);\n                _cache.set(Class, Wrapper);\n              }\n              function Wrapper() {\n                return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n              }\n              Wrapper.prototype = Object.create(Class.prototype, {\n                constructor: {\n                  value: Wrapper,\n                  enumerable: false,\n                  writable: true,\n                  configurable: true\n                }\n              });\n              return _setPrototypeOf(Wrapper, Class);\n            };\n            return _wrapNativeSuper(Class);\n          }\n          function isNativeReflectConstruct() {\n            if (typeof Reflect === 'undefined' || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === 'function') return true;\n            try {\n              Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n              return true;\n            } catch (e) {\n              return false;\n            }\n          }\n          function _construct(Parent, args, Class) {\n            if (isNativeReflectConstruct()) {\n              _construct = Reflect.construct;\n            } else {\n              _construct = function _construct(Parent, args, Class) {\n                var a = [null];\n                a.push.apply(a, args);\n                var Constructor = Function.bind.apply(Parent, a);\n                var instance = new Constructor();\n                if (Class) _setPrototypeOf(instance, Class.prototype);\n                return instance;\n              };\n            }\n            return _construct.apply(null, arguments);\n          }\n          function _isNativeFunction(fn) {\n            return Function.toString.call(fn).indexOf('[native code]') !== -1;\n          }\n          function _setPrototypeOf(o, p) {\n            _setPrototypeOf =\n              Object.setPrototypeOf ||\n              function _setPrototypeOf(o, p) {\n                o.__proto__ = p;\n                return o;\n              };\n            return _setPrototypeOf(o, p);\n          }\n          function _getPrototypeOf(o) {\n            _getPrototypeOf = Object.setPrototypeOf\n              ? Object.getPrototypeOf\n              : function _getPrototypeOf(o) {\n                  return o.__proto__ || Object.getPrototypeOf(o);\n                };\n            return _getPrototypeOf(o);\n          }\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          if (typeof IS_MINIFIED !== 'undefined') {\n            _main.default._validateParameters = _main.default._clearValidateParamsCache = function() {};\n          } else {\n            // for parameter validation\n            var dataDoc = _dereq_('../../../docs/parameterData.json');\n            var arrDoc = JSON.parse(JSON.stringify(dataDoc));\n\n            var docCache = {};\n            var builtinTypes = new Set([\n              'null',\n              'number',\n              'string',\n              'boolean',\n              'constant',\n              'function',\n              'any',\n              'integer'\n            ]);\n\n            var basicTypes = {\n              number: true,\n              boolean: true,\n              string: true,\n              function: true,\n              undefined: true\n            };\n\n            // reverse map of all constants\n            var constantsReverseMap = {};\n            for (var key in constants) {\n              constantsReverseMap[constants[key]] = key;\n            }\n\n            // mapping names of p5 types to their constructor function\n            // p5Constructors:\n            //    - Color: f()\n            //    - Graphics: f()\n            //    - Vector: f()\n            // and so on\n            var p5Constructors = {};\n\n            // For speedup over many runs. funcSpecificConstructors[func] only has the\n            // constructors for types which were seen earlier as args of \"func\"\n            var funcSpecificConstructors = {};\n            window.addEventListener('load', function() {\n              // Make a list of all p5 classes to be used for argument validation\n              // This must be done only when everything has loaded otherwise we get\n              // an empty array\n              for (\n                var _i = 0, _Object$keys = Object.keys(_main.default);\n                _i < _Object$keys.length;\n                _i++\n              ) {\n                var _key = _Object$keys[_i];\n                // Get a list of all constructors in p5. They are functions whose names\n                // start with a capital letter\n                if (\n                  typeof _main.default[_key] === 'function' &&\n                  _key[0] !== _key[0].toLowerCase()\n                ) {\n                  p5Constructors[_key] = _main.default[_key];\n                }\n              }\n            });\n\n            var argumentTree = {};\n            // The following two functions are responsible for querying and inserting\n            // into the argument tree. It stores the types of arguments that each\n            // function has seen so far. It is used to query if a sequence of\n            // arguments seen in validate parameters was seen before.\n            // Lets consider that the following segment of code runs repeatedly, perhaps\n            // in a loop or in draw()\n            //   color(10, 10, 10);\n            //   color(10, 10);\n            //   color('r', 'g', 'b');\n            // After the first of run the code segment, the argument tree looks like\n            // - color\n            //     - number\n            //        - number\n            //            - number\n            //                - seen: true\n            //            - seen: true\n            //     - string\n            //        - string\n            //            - string\n            //                - seen: true\n            // seen: true signifies that this argument was also seen as the last\n            // argument in a call. Now in the second run of the sketch, it would traverse\n            // the existing tree and see seen: true, i.e this sequence was seen\n            // before and so scoring can be skipped. This also prevents logging multiple\n            // validation messages for the same thing.\n\n            // These two functions would be called repeatedly over and over again,\n            // so they need to be as optimized for performance as possible\n\n            var addType = function addType(value, obj, func) {\n              var type = _typeof(value);\n              if (basicTypes[type]) {\n                if (constantsReverseMap[value]) {\n                  // check if the value is a p5 constant and if it is, we would want the\n                  // value itself to be stored in the tree instead of the type\n                  obj = obj[value] || (obj[value] = {});\n                } else {\n                  obj = obj[type] || (obj[type] = {});\n                }\n              } else if (value === null) {\n                // typeof null -> \"object\". don't want that\n                obj = obj['null'] || (obj['null'] = {});\n              } else {\n                // objects which are instances of p5 classes have nameless constructors.\n                // native objects have a constructor named \"Object\". This check\n                // differentiates between the two so that we dont waste time finding the\n                // p5 class if we just have a native object\n                if (value.constructor && value.constructor.name) {\n                  obj = obj[value.constructor.name] || (obj[value.constructor.name] = {});\n                  return obj;\n                }\n\n                // constructors for types defined in p5 do not have a name property.\n                // e.constructor.name gives \"\". Code in this segment is a workaround for it\n\n                // p5C will only have the name: constructor mapping for types\n                // which were already seen as args of \"func\"\n                var p5C = funcSpecificConstructors[func];\n                // p5C would contain much fewer items than p5Constructors. if we find our\n                // answer in p5C, we don't have to scan through p5Constructors\n\n                if (p5C === undefined) {\n                  // if there isn't an entry yet for func\n                  // make an entry of empty object\n                  p5C = funcSpecificConstructors[func] = {};\n                }\n\n                for (var _key2 in p5C) {\n                  // search on the constructors we have already seen (smaller search space)\n                  if (value instanceof p5C[_key2]) {\n                    obj = obj[_key2] || (obj[_key2] = {});\n                    return obj;\n                  }\n                }\n\n                for (var _key3 in p5Constructors) {\n                  // if the above search didn't work, search on all p5 constructors\n                  if (value instanceof p5Constructors[_key3]) {\n                    obj = obj[_key3] || (obj[_key3] = {});\n                    // if found, add to known constructors for this function\n                    p5C[_key3] = p5Constructors[_key3];\n                    return obj;\n                  }\n                }\n                // nothing worked, put the type as is\n                obj = obj[type] || (obj[type] = {});\n              }\n\n              return obj;\n            };\n            var buildArgTypeCache = function buildArgTypeCache(func, arr) {\n              // get the if an argument tree for current function already exists\n              var obj = argumentTree[func];\n              if (obj === undefined) {\n                // if it doesn't, create an empty tree\n                obj = argumentTree[func] = {};\n              }\n\n              for (var i = 0, len = arr.length; i < len; ++i) {\n                var value = arr[i];\n                if (value instanceof Array) {\n                  // an array is passed as an argument, expand it and get the type of\n                  // each of its element. We distinguish the start of an array with 'as'\n                  // or arraystart. This would help distinguish between the arguments\n                  // (number, number, number) and (number, [number, number])\n                  obj = obj['as'] || (obj['as'] = {});\n                  for (var j = 0, lenA = value.length; j < lenA; ++j) {\n                    obj = addType(value[j], obj, func);\n                  }\n                } else {\n                  obj = addType(value, obj, func);\n                }\n              }\n              return obj;\n            };\n\n            // validateParameters() helper functions:\n            // lookupParamDoc() for querying data.json\n            var lookupParamDoc = function lookupParamDoc(func) {\n              // look for the docs in the `data.json` datastructure\n\n              var ichDot = func.lastIndexOf('.');\n              var funcName = func.substr(ichDot + 1);\n              var funcClass = func.substr(0, ichDot) || 'p5';\n\n              var classitems = arrDoc;\n              var queryResult = classitems[funcClass][funcName];\n\n              // different JSON structure for funct with multi-format\n              var overloads = [];\n              if (queryResult.hasOwnProperty('overloads')) {\n                // add all the overloads\n                for (var i = 0; i < queryResult.overloads.length; i++) {\n                  overloads.push({ formats: queryResult.overloads[i].params });\n                }\n              } else {\n                // no overloads, just add the main method definition\n                overloads.push({ formats: queryResult.params || [] });\n              }\n\n              // parse the parameter types for each overload\n              var mapConstants = {};\n              var maxParams = 0;\n              overloads.forEach(function(overload) {\n                var formats = overload.formats;\n\n                // keep a record of the maximum number of arguments\n                // this method requires.\n                if (maxParams < formats.length) {\n                  maxParams = formats.length;\n                }\n\n                // calculate the minimum number of arguments\n                // this overload requires.\n                var minParams = formats.length;\n                while (minParams > 0 && formats[minParams - 1].optional) {\n                  minParams--;\n                }\n                overload.minParams = minParams;\n\n                // loop through each parameter position, and parse its types\n                formats.forEach(function(format) {\n                  // split this parameter's types\n                  format.types = format.type.split('|').map(function ct(type) {\n                    // array\n                    if (type.substr(type.length - 2, 2) === '[]') {\n                      return {\n                        name: type,\n                        array: ct(type.substr(0, type.length - 2))\n                      };\n                    }\n\n                    var lowerType = type.toLowerCase();\n\n                    // contant\n                    if (lowerType === 'constant') {\n                      var constant;\n                      if (mapConstants.hasOwnProperty(format.name)) {\n                        constant = mapConstants[format.name];\n                      } else {\n                        // parse possible constant values from description\n                        var myRe = /either\\s+(?:[A-Z0-9_]+\\s*,?\\s*(?:or)?\\s*)+/g;\n                        var values = {};\n                        var names = [];\n\n                        constant = mapConstants[format.name] = {\n                          values: values,\n                          names: names\n                        };\n\n                        var myArray = myRe.exec(format.description);\n                        if (func === 'endShape' && format.name === 'mode') {\n                          values[constants.CLOSE] = true;\n                          names.push('CLOSE');\n                        } else {\n                          var match = myArray[0];\n                          var reConst = /[A-Z0-9_]+/g;\n                          var matchConst;\n                          while ((matchConst = reConst.exec(match)) !== null) {\n                            var name = matchConst[0];\n                            if (constants.hasOwnProperty(name)) {\n                              values[constants[name]] = true;\n                              names.push(name);\n                            }\n                          }\n                        }\n                      }\n                      return {\n                        name: type,\n                        builtin: lowerType,\n                        names: constant.names,\n                        values: constant.values\n                      };\n                    }\n\n                    // function\n                    if (lowerType.substr(0, 'function'.length) === 'function') {\n                      lowerType = 'function';\n                    }\n                    // builtin\n                    if (builtinTypes.has(lowerType)) {\n                      return { name: type, builtin: lowerType };\n                    }\n\n                    // find type's prototype\n                    var t = window;\n                    var typeParts = type.split('.');\n\n                    // special-case 'p5' since it may be non-global\n                    if (typeParts[0] === 'p5') {\n                      t = _main.default;\n                      typeParts.shift();\n                    }\n\n                    typeParts.forEach(function(p) {\n                      t = t && t[p];\n                    });\n                    if (t) {\n                      return { name: type, prototype: t };\n                    }\n\n                    return { name: type, type: lowerType };\n                  });\n                });\n              });\n              return {\n                overloads: overloads,\n                maxParams: maxParams\n              };\n            };\n\n            var isNumber = function isNumber(param) {\n              switch (_typeof(param)) {\n                case 'number':\n                  return true;\n                case 'string':\n                  return !isNaN(param);\n                default:\n                  return false;\n              }\n            };\n\n            var testParamType = function testParamType(param, type) {\n              var isArray = param instanceof Array;\n              var matches = true;\n              if (type.array && isArray) {\n                for (var i = 0; i < param.length; i++) {\n                  var error = testParamType(param[i], type.array);\n                  if (error) return error / 2; // half error for elements\n                }\n              } else if (type.prototype) {\n                matches = param instanceof type.prototype;\n              } else if (type.builtin) {\n                switch (type.builtin) {\n                  case 'number':\n                    matches = isNumber(param);\n                    break;\n                  case 'integer':\n                    matches = isNumber(param) && Number(param) === Math.floor(param);\n                    break;\n                  case 'boolean':\n                  case 'any':\n                    matches = true;\n                    break;\n                  case 'array':\n                    matches = isArray;\n                    break;\n                  case 'string':\n                    matches = /*typeof param === 'number' ||*/ typeof param === 'string';\n                    break;\n                  case 'constant':\n                    matches = type.values.hasOwnProperty(param);\n                    break;\n                  case 'function':\n                    matches = param instanceof Function;\n                    break;\n                  case 'null':\n                    matches = param === null;\n                    break;\n                }\n              } else {\n                matches = _typeof(param) === type.t;\n              }\n              return matches ? 0 : 1;\n            };\n\n            // testType() for non-object type parameter validation\n            var testParamTypes = function testParamTypes(param, types) {\n              var minScore = 9999;\n              for (var i = 0; minScore > 0 && i < types.length; i++) {\n                var score = testParamType(param, types[i]);\n                if (minScore > score) minScore = score;\n              }\n              return minScore;\n            };\n\n            // generate a score (higher is worse) for applying these args to\n            // this overload.\n            var scoreOverload = function scoreOverload(args, argCount, overload, minScore) {\n              var score = 0;\n              var formats = overload.formats;\n              var minParams = overload.minParams;\n\n              // check for too few/many args\n              // the score is double number of extra/missing args\n              if (argCount < minParams) {\n                score = (minParams - argCount) * 2;\n              } else if (argCount > formats.length) {\n                score = (argCount - formats.length) * 2;\n              }\n\n              // loop through the formats, adding up the error score for each arg.\n              // quit early if the score gets higher than the previous best overload.\n              for (var p = 0; score <= minScore && p < formats.length; p++) {\n                var arg = args[p];\n                var format = formats[p];\n                // '== null' checks for 'null' and typeof 'undefined'\n                if (arg == null) {\n                  // handle undefined args\n                  if (!format.optional || p < minParams || p < argCount) {\n                    score += 1;\n                  }\n                } else {\n                  score += testParamTypes(arg, format.types);\n                }\n              }\n              return score;\n            };\n\n            // gets a list of errors for this overload\n            var getOverloadErrors = function getOverloadErrors(args, argCount, overload) {\n              var formats = overload.formats;\n              var minParams = overload.minParams;\n\n              // check for too few/many args\n              if (argCount < minParams) {\n                return [\n                  {\n                    type: 'TOO_FEW_ARGUMENTS',\n                    argCount: argCount,\n                    minParams: minParams\n                  }\n                ];\n              } else if (argCount > formats.length) {\n                return [\n                  {\n                    type: 'TOO_MANY_ARGUMENTS',\n                    argCount: argCount,\n                    maxParams: formats.length\n                  }\n                ];\n              }\n\n              var errorArray = [];\n              for (var p = 0; p < formats.length; p++) {\n                var arg = args[p];\n                var format = formats[p];\n                // '== null' checks for 'null' and typeof 'undefined'\n                if (arg == null) {\n                  // handle undefined args\n                  if (!format.optional || p < minParams || p < argCount) {\n                    errorArray.push({\n                      type: 'EMPTY_VAR',\n                      position: p,\n                      format: format\n                    });\n                  }\n                } else if (testParamTypes(arg, format.types) > 0) {\n                  errorArray.push({\n                    type: 'WRONG_TYPE',\n                    position: p,\n                    format: format,\n                    arg: arg\n                  });\n                }\n              }\n\n              return errorArray;\n            };\n\n            // a custom error type, used by the mocha\n            // tests when expecting validation errors\n            _main.default.ValidationError = (function(name) {\n              var err = /*#__PURE__*/ (function(_Error) {\n                _inherits(err, _Error);\n                function err(message, func, type) {\n                  var _this;\n                  _classCallCheck(this, err);\n                  _this = _possibleConstructorReturn(this, _getPrototypeOf(err).call(this));\n                  _this.message = message;\n                  _this.func = func;\n                  _this.type = type;\n                  if ('captureStackTrace' in Error)\n                    Error.captureStackTrace(_assertThisInitialized(_this), err);\n                  else _this.stack = new Error().stack;\n                  return _this;\n                }\n                return err;\n              })(_wrapNativeSuper(Error));\n\n              err.prototype.name = name;\n              return err;\n            })('ValidationError');\n\n            // function for generating console.log() msg\n            _main.default._friendlyParamError = function(errorObj, func) {\n              var message;\n              var translationObj;\n\n              function formatType() {\n                var format = errorObj.format;\n                return format.types\n                  .map(function(type) {\n                    return type.names ? type.names.join('|') : type.name;\n                  })\n                  .join('|');\n              }\n\n              switch (errorObj.type) {\n                case 'EMPTY_VAR': {\n                  translationObj = {\n                    func: func,\n                    formatType: formatType(),\n                    // It needs to be this way for i18next-extract to work. The comment\n                    // specifies the values that the context can take so that it can\n                    // statically prepare the translation files with them.\n                    /* i18next-extract-mark-context-next-line [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"] */\n                    position: (0, _internationalization.translator)('fes.positions.p', {\n                      context: (errorObj.position + 1).toString(),\n                      defaultValue: (errorObj.position + 1).toString()\n                    }),\n\n                    link: '[https://p5js.org/examples/data-variable-scope.html]'\n                  };\n\n                  break;\n                }\n                case 'WRONG_TYPE': {\n                  var arg = errorObj.arg;\n                  var argType =\n                    arg instanceof Array\n                      ? 'array'\n                      : arg === null ? 'null' : arg.name || _typeof(arg);\n\n                  translationObj = {\n                    func: func,\n                    formatType: formatType(),\n                    argType: argType,\n                    /* i18next-extract-mark-context-next-line [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"] */\n                    position: (0, _internationalization.translator)('fes.positions.p', {\n                      context: (errorObj.position + 1).toString(),\n                      defaultValue: (errorObj.position + 1).toString()\n                    })\n                  };\n\n                  break;\n                }\n                case 'TOO_FEW_ARGUMENTS': {\n                  translationObj = {\n                    func: func,\n                    minParams: errorObj.minParams,\n                    argCount: errorObj.argCount\n                  };\n\n                  break;\n                }\n                case 'TOO_MANY_ARGUMENTS': {\n                  translationObj = {\n                    func: func,\n                    maxParams: errorObj.maxParams,\n                    argCount: errorObj.argCount\n                  };\n\n                  break;\n                }\n              }\n\n              if (translationObj) {\n                try {\n                  // const re = /Function\\.validateParameters.*[\\r\\n].*[\\r\\n].*\\(([^)]*)/;\n                  var myError = new Error();\n                  var parsed = _main.default._getErrorStackParser().parse(myError);\n                  if (\n                    parsed[3] &&\n                    parsed[3].functionName &&\n                    parsed[3].functionName.includes('.') &&\n                    _main.default.prototype[parsed[3].functionName.split('.').slice(-1)[0]]\n                  ) {\n                    return;\n                  }\n                  if (_main.default._throwValidationErrors) {\n                    throw new _main.default.ValidationError(message, func, errorObj.type);\n                  }\n\n                  // try to extract the location from where the function was called\n                  if (\n                    parsed[3] &&\n                    parsed[3].fileName &&\n                    parsed[3].lineNumber &&\n                    parsed[3].columnNumber\n                  ) {\n                    var location = ''\n                      .concat(parsed[3].fileName, ':')\n                      .concat(parsed[3].lineNumber, ':')\n                      .concat(parsed[3].columnNumber);\n\n                    translationObj.location = (0, _internationalization.translator)(\n                      'fes.location',\n                      {\n                        location: location,\n                        // for e.g. get \"sketch.js\" from \"https://example.com/abc/sketch.js\"\n                        file: parsed[3].fileName.split('/').slice(-1),\n                        line: parsed[3].lineNumber\n                      }\n                    );\n\n                    // tell fesErrorMonitor that we have already given a friendly message\n                    // for this line, so it need not to do the same in case of an error\n                    _main.default._fesLogCache[location] = true;\n                  }\n                } catch (err) {\n                  if (err instanceof _main.default.ValidationError) {\n                    throw err;\n                  }\n                }\n\n                translationObj.context = errorObj.type;\n                // i18next-extract-mark-context-next-line [\"EMPTY_VAR\", \"TOO_MANY_ARGUMENTS\", \"TOO_FEW_ARGUMENTS\", \"WRONG_TYPE\"]\n                message = (0, _internationalization.translator)(\n                  'fes.friendlyParamError.type',\n                  translationObj\n                );\n\n                _main.default._friendlyError(''.concat(message, '.'), func, 3);\n              }\n            };\n\n            // if a function is called with some set of wrong arguments, and then called\n            // again with the same set of arguments, the messages due to the second call\n            // will be supressed. If two tests test on the same wrong arguments, the\n            // second test won't see the validationError. clearing argumentTree solves it\n            _main.default._clearValidateParamsCache = function clearValidateParamsCache() {\n              for (\n                var _i2 = 0, _Object$keys2 = Object.keys(argumentTree);\n                _i2 < _Object$keys2.length;\n                _i2++\n              ) {\n                var _key4 = _Object$keys2[_i2];\n                delete argumentTree[_key4];\n              }\n            };\n\n            // allowing access to argumentTree for testing\n            _main.default._getValidateParamsArgTree = function getValidateParamsArgTree() {\n              return argumentTree;\n            };\n\n            /**\n             * Validates parameters\n             * param  {String}               func    the name of the function\n             * param  {Array}                args    user input arguments\n             *\n             * example:\n             *  const a;\n             *  ellipse(10,10,a,5);\n             * console ouput:\n             *  \"It looks like ellipse received an empty variable in spot #2.\"\n             *\n             * example:\n             *  ellipse(10,\"foo\",5,5);\n             * console output:\n             *  \"ellipse was expecting a number for parameter #1,\n             *           received \"foo\" instead.\"\n             */\n            _main.default._validateParameters = function validateParameters(func, args) {\n              if (_main.default.disableFriendlyErrors) {\n                return; // skip FES\n              }\n\n              // query / build the argument type tree and check if this sequence\n              // has already been seen before.\n              var obj = buildArgTypeCache(func, args);\n              if (obj.seen) {\n                return;\n              }\n              // mark this sequence as seen\n              obj.seen = true;\n              // lookup the docs in the 'data.json' file\n              var docs = docCache[func] || (docCache[func] = lookupParamDoc(func));\n              var overloads = docs.overloads;\n\n              var argCount = args.length;\n\n              // the following line ignores trailing undefined arguments, commenting\n              // it to resolve https://github.com/processing/p5.js/issues/4571\n              // '== null' checks for 'null' and typeof 'undefined'\n              // while (argCount > 0 && args[argCount - 1] == null) argCount--;\n\n              // find the overload with the best score\n              var minScore = 99999;\n              var minOverload;\n              for (var i = 0; i < overloads.length; i++) {\n                var score = scoreOverload(args, argCount, overloads[i], minScore);\n                if (score === 0) {\n                  return; // done!\n                } else if (minScore > score) {\n                  // this score is better that what we have so far...\n                  minScore = score;\n                  minOverload = i;\n                }\n              }\n\n              // this should _always_ be true here...\n              if (minScore > 0) {\n                // get the errors for the best overload\n                var errorArray = getOverloadErrors(args, argCount, overloads[minOverload]);\n\n                // generate err msg\n                for (var n = 0; n < errorArray.length; n++) {\n                  _main.default._friendlyParamError(errorArray[n], func);\n                }\n              }\n            };\n            _main.default.prototype._validateParameters = _main.default.validateParameters;\n          }\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../../../docs/parameterData.json': 1,\n          '../constants': 48,\n          '../internationalization': 57,\n          '../main': 59\n        }\n      ],\n      55: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var constants = _interopRequireWildcard(_dereq_('./constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          /**\n           * @requires constants\n           */ function modeAdjust(a, b, c, d, mode) {\n            if (mode === constants.CORNER) {\n              return { x: a, y: b, w: c, h: d };\n            } else if (mode === constants.CORNERS) {\n              return { x: a, y: b, w: c - a, h: d - b };\n            } else if (mode === constants.RADIUS) {\n              return { x: a - c, y: b - d, w: 2 * c, h: 2 * d };\n            } else if (mode === constants.CENTER) {\n              return { x: a - c * 0.5, y: b - d * 0.5, w: c, h: d };\n            }\n          }\n          var _default = { modeAdjust: modeAdjust };\n          exports.default = _default;\n        },\n        { './constants': 48 }\n      ],\n      56: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var _internationalization = _dereq_('./internationalization');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n\n          /**\n           * _globalInit\n           *\n           * TODO: ???\n           * if sketch is on window\n           * assume \"global\" mode\n           * and instantiate p5 automatically\n           * otherwise do nothing\n           *\n           * @private\n           * @return {Undefined}\n           */\n          var _globalInit = function _globalInit() {\n            // Could have been any property defined within the p5 constructor.\n            // If that property is already a part of the global object,\n            // this code has already run before, likely due to a duplicate import\n            if (typeof window._setupDone !== 'undefined') {\n              console.warn(\n                'p5.js seems to have been imported multiple times. Please remove the duplicate import'\n              );\n\n              return;\n            }\n\n            if (!window.mocha) {\n              // If there is a setup or draw function on the window\n              // then instantiate p5 in \"global\" mode\n              if (\n                ((window.setup && typeof window.setup === 'function') ||\n                  (window.draw && typeof window.draw === 'function')) &&\n                !_main.default.instance\n              ) {\n                new _main.default();\n              }\n            }\n          };\n\n          // make a promise that resolves when the document is ready\n          var waitForDocumentReady = function waitForDocumentReady() {\n            return new Promise(function(resolve, reject) {\n              // if the page is ready, initialize p5 immediately\n              if (document.readyState === 'complete') {\n                resolve();\n                // if the page is still loading, add an event listener\n                // and initialize p5 as soon as it finishes loading\n              } else {\n                window.addEventListener('load', resolve, false);\n              }\n            });\n          };\n\n          // only load translations if we're using the full, un-minified library\n          var waitingForTranslator =\n            typeof IS_MINIFIED === 'undefined'\n              ? (0, _internationalization.initialize)()\n              : Promise.resolve();\n\n          Promise.all([waitForDocumentReady(), waitingForTranslator]).then(_globalInit);\n        },\n        { '../core/main': 59, './internationalization': 57 }\n      ],\n      57: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.initialize = exports.translator = void 0;\n          var _i18next = _interopRequireDefault(_dereq_('i18next'));\n          var _i18nextBrowserLanguagedetector = _interopRequireDefault(\n            _dereq_('i18next-browser-languagedetector')\n          );\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError('Cannot call a class as a function');\n            }\n          }\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if ('value' in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n          }\n\n          var fallbackResources, languages;\n          if (typeof IS_MINIFIED === 'undefined') {\n            // internationalization is only for the unminified build\n\n            var translationsModule = _dereq_('../../translations');\n            fallbackResources = translationsModule.default;\n            languages = translationsModule.languages;\n\n            if (typeof P5_DEV_BUILD !== 'undefined') {\n              // When the library is built in development mode ( using npm run dev )\n              // we want to use the current translation files on the disk, which may have\n              // been updated but not yet pushed to the CDN.\n              var completeResources = _dereq_('../../translations/dev');\n              for (\n                var _i = 0, _Object$keys = Object.keys(completeResources);\n                _i < _Object$keys.length;\n                _i++\n              ) {\n                var language = _Object$keys[_i];\n                // In es_translation, language is es and namespace is translation\n                // In es_MX_translation, language is es-MX and namespace is translation\n                var parts = language.split('_');\n                var lng = parts.slice(0, parts.length - 1).join('-');\n                var ns = parts[parts.length - 1];\n\n                fallbackResources[lng] = fallbackResources[lng] || {};\n                fallbackResources[lng][ns] = completeResources[language];\n              }\n            }\n          }\n\n          /**\n           * This is our i18next \"backend\" plugin. It tries to fetch languages\n           * from a CDN.\n           */ var FetchResources = /*#__PURE__*/ (function() {\n            function FetchResources(services, options) {\n              _classCallCheck(this, FetchResources);\n              this.init(services, options);\n            }\n\n            // run fetch with a timeout. Automatically rejects on timeout\n            // default timeout = 2000 ms\n            _createClass(FetchResources, [\n              {\n                key: 'fetchWithTimeout',\n                value: function fetchWithTimeout(url, options) {\n                  var timeout =\n                    arguments.length > 2 && arguments[2] !== undefined\n                      ? arguments[2]\n                      : 2000;\n                  return Promise.race([\n                    fetch(url, options),\n                    new Promise(function(_, reject) {\n                      return setTimeout(function() {\n                        return reject(new Error('timeout'));\n                      }, timeout);\n                    })\n                  ]);\n                }\n              },\n              {\n                key: 'init',\n                value: function init(services) {\n                  var options =\n                    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                  this.services = services;\n                  this.options = options;\n                }\n              },\n              {\n                key: 'read',\n                value: function read(language, namespace, callback) {\n                  var loadPath = this.options.loadPath;\n\n                  if (language === this.options.fallback) {\n                    // if the default language of the user is the same as our inbuilt fallback,\n                    // there's no need to fetch resources from the cdn. This won't actually\n                    // need to run when we use \"partialBundledLanguages\" in the init\n                    // function.\n                    callback(null, fallbackResources[language][namespace]);\n                  } else if (languages.includes(language)) {\n                    // The user's language is included in the list of languages\n                    // that we so far added translations for.\n\n                    var url = this.services.interpolator.interpolate(loadPath, {\n                      lng: language,\n                      ns: namespace\n                    });\n\n                    this.loadUrl(url, callback);\n                  } else {\n                    // We don't have translations for this language. i18next will use\n                    // the default language instead.\n                    callback('Not found', false);\n                  }\n                }\n              },\n              {\n                key: 'loadUrl',\n                value: function loadUrl(url, callback) {\n                  this.fetchWithTimeout(url)\n                    .then(\n                      function(response) {\n                        var ok = response.ok;\n\n                        if (!ok) {\n                          // caught in the catch() below\n                          throw new Error('failed loading '.concat(url));\n                        }\n                        return response.json();\n                      },\n                      function() {\n                        // caught in the catch() below\n                        throw new Error('failed loading '.concat(url));\n                      }\n                    )\n                    .then(function(data) {\n                      return callback(null, data);\n                    })\n                    .catch(callback);\n                }\n              }\n            ]);\n            return FetchResources;\n          })();\n\n          FetchResources.type = 'backend';\n\n          /**\n           * This is our translation function. Give it a key and\n           * it will retreive the appropriate string\n           * (within supported languages) according to the\n           * user's browser's language settings.\n           * @function translator\n           * @param {String} key a key that corresponds to a message in our translation files\n           * @param {Object} values values for use in the message under the given `key`\n           * @returns {String} message (with values inserted) in the user's browser language\n           * @private\n           */\n          var translator = function translator(key, values) {\n            console.debug('p5.js translator called before translations were loaded');\n\n            // Certain FES functionality may trigger before translations are downloaded.\n            // Using \"partialBundledLanguages\" option during initialization, we can\n            // still use our fallback language to display messages\n            _i18next.default.t(key, values); /* i18next-extract-disable-line */\n          };\n          // (We'll set this to a real value in the init function below!)\n\n          /**\n           * Set up our translation function, with loaded languages\n           */ exports.translator = translator;\n          var initialize = function initialize() {\n            var i18init = _i18next.default\n              .use(_i18nextBrowserLanguagedetector.default)\n              .use(FetchResources)\n              .init({\n                fallbackLng: 'en',\n                nestingPrefix: '$tr(',\n                nestingSuffix: ')',\n                defaultNS: 'translation',\n                returnEmptyString: false,\n                interpolation: {\n                  escapeValue: false\n                },\n\n                detection: {\n                  checkWhitelist: false,\n\n                  // prevent storing or locating language from cookie or localStorage\n                  // more info on https://github.com/processing/p5.js/issues/4862\n                  order: ['querystring', 'navigator', 'htmlTag', 'path', 'subdomain'],\n                  caches: []\n                },\n\n                backend: {\n                  fallback: 'en',\n                  loadPath:\n                    'https://cdn.jsdelivr.net/npm/p5/translations/{{lng}}/{{ns}}.json'\n                },\n\n                partialBundledLanguages: true,\n                resources: fallbackResources\n              })\n              .then(\n                function(translateFn) {\n                  exports.translator = translator = translateFn;\n                },\n                function(e) {\n                  return console.debug('Translations failed to load ('.concat(e, ')'));\n                }\n              );\n\n            // i18next.init() returns a promise that resolves when the translations\n            // are loaded. We use this in core/init.js to hold p5 initialization until\n            // we have the translation files.\n            return i18init;\n          };\n          exports.initialize = initialize;\n        },\n        {\n          '../../translations': 118,\n          '../../translations/dev': undefined,\n          i18next: 30,\n          'i18next-browser-languagedetector': 27\n        }\n      ],\n      58: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @for p5\n           * @requires core\n           * These are functions that are part of the Processing API but are not part of\n           * the p5.js API. In some cases they have a new name, in others, they are\n           * removed completely. Not all unsupported Processing functions are listed here\n           * but we try to include ones that a user coming from Processing might likely\n           * call.\n           */ _main.default.prototype.pushStyle = function() {\n            throw new Error('pushStyle() not used, see push()');\n          };\n          _main.default.prototype.popStyle = function() {\n            throw new Error('popStyle() not used, see pop()');\n          };\n\n          _main.default.prototype.popMatrix = function() {\n            throw new Error('popMatrix() not used, see pop()');\n          };\n\n          _main.default.prototype.pushMatrix = function() {\n            throw new Error('pushMatrix() not used, see push()');\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { './main': 59 }\n      ],\n      59: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          _dereq_('./shim');\n\n          var constants = _interopRequireWildcard(_dereq_('./constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError('Cannot call a class as a function');\n            }\n          }\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if ('value' in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n          }\n\n          /**\n           * This is the p5 instance constructor.\n           *\n           * A p5 instance holds all the properties and methods related to\n           * a p5 sketch.  It expects an incoming sketch closure and it can also\n           * take an optional node parameter for attaching the generated p5 canvas\n           * to a node.  The sketch closure takes the newly created p5 instance as\n           * its sole argument and may optionally set <a href=\"#/p5/preload\">preload()</a>,\n           * <a href=\"#/p5/setup\">setup()</a>, and/or\n           * <a href=\"#/p5/draw\">draw()</a> properties on it for running a sketch.\n           *\n           * A p5 sketch can run in \"global\" or \"instance\" mode:\n           * \"global\"   - all properties and methods are attached to the window\n           * \"instance\" - all properties and methods are bound to this p5 object\n           *\n           * @class p5\n           * @constructor\n           * @param  {function}           sketch a closure that can set optional <a href=\"#/p5/preload\">preload()</a>,\n           *                              <a href=\"#/p5/setup\">setup()</a>, and/or <a href=\"#/p5/draw\">draw()</a> properties on the\n           *                              given p5 instance\n           * @param  {HTMLElement}        [node] element to attach canvas to\n           * @return {p5}                 a p5 instance\n           */ var p5 = /*#__PURE__*/ (function() {\n            function p5(sketch, node, sync) {\n              var _this = this;\n              _classCallCheck(this, p5);\n              //////////////////////////////////////////////\n              // PUBLIC p5 PROPERTIES AND METHODS\n              //////////////////////////////////////////////\n\n              /**\n               * Called directly before <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/preload\">preload()</a> function is used to handle\n               * asynchronous loading of external files in a blocking way. If a preload\n               * function is defined, <a href=\"#/p5/setup\">setup()</a> will wait until any load calls within have\n               * finished. Nothing besides load calls (<a href=\"#/p5/loadImage\">loadImage</a>, <a href=\"#/p5/loadJSON\">loadJSON</a>, <a href=\"#/p5/loadFont\">loadFont</a>,\n               * <a href=\"#/p5/loadStrings\">loadStrings</a>, etc.) should be inside the preload function. If asynchronous\n               * loading is preferred, the load methods can instead be called in <a href=\"#/p5/setup\">setup()</a>\n               * or anywhere else with the use of a callback parameter.\n               *\n               * By default the text \"loading...\" will be displayed. To make your own\n               * loading page, include an HTML element with id \"p5_loading\" in your\n               * page. More information <a href=\"http://bit.ly/2kQ6Nio\">here</a>.\n               *\n               * @method preload\n               * @example\n               * <div><code>\n               * let img;\n               * let c;\n               * function preload() {\n               *   // preload() runs once\n               *   img = loadImage('assets/laDefense.jpg');\n               * }\n               *\n               * function setup() {\n               *   // setup() waits until preload() is done\n               *   img.loadPixels();\n               *   // get color of middle pixel\n               *   c = img.get(img.width / 2, img.height / 2);\n               * }\n               *\n               * function draw() {\n               *   background(c);\n               *   image(img, 25, 25, 50, 50);\n               * }\n               * </code></div>\n               *\n               * @alt\n               * nothing displayed\n               *\n               */\n\n              /**\n               * The <a href=\"#/p5/setup\">setup()</a> function is called once when the program starts. It's used to\n               * define initial environment properties such as screen size and background\n               * color and to load media such as images and fonts as the program starts.\n               * There can only be one <a href=\"#/p5/setup\">setup()</a> function for each program and it shouldn't\n               * be called again after its initial execution.\n               *\n               * Note: Variables declared within <a href=\"#/p5/setup\">setup()</a> are not accessible within other\n               * functions, including <a href=\"#/p5/draw\">draw()</a>.\n               *\n               * @method setup\n               * @example\n               * <div><code>\n               * let a = 0;\n               *\n               * function setup() {\n               *   background(0);\n               *   noStroke();\n               *   fill(102);\n               * }\n               *\n               * function draw() {\n               *   rect(a++ % width, 10, 2, 80);\n               * }\n               * </code></div>\n               *\n               * @alt\n               * nothing displayed\n               *\n               */\n\n              /**\n               * Called directly after <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/draw\">draw()</a> function continuously executes\n               * the lines of code contained inside its block until the program is stopped\n               * or <a href=\"#/p5/noLoop\">noLoop()</a> is called. Note if <a href=\"#/p5/noLoop\">noLoop()</a> is called in <a href=\"#/p5/setup\">setup()</a>, <a href=\"#/p5/draw\">draw()</a> will\n               * still be executed once before stopping. <a href=\"#/p5/draw\">draw()</a> is called automatically and\n               * should never be called explicitly.\n               *\n               * It should always be controlled with <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> and <a href=\"#/p5/loop\">loop()</a>. After\n               * <a href=\"#/p5/noLoop\">noLoop()</a> stops the code in <a href=\"#/p5/draw\">draw()</a> from executing, <a href=\"#/p5/redraw\">redraw()</a> causes the\n               * code inside <a href=\"#/p5/draw\">draw()</a> to execute once, and <a href=\"#/p5/loop\">loop()</a> will cause the code\n               * inside <a href=\"#/p5/draw\">draw()</a> to resume executing continuously.\n               *\n               * The number of times <a href=\"#/p5/draw\">draw()</a> executes in each second may be controlled with\n               * the <a href=\"#/p5/frameRate\">frameRate()</a> function.\n               *\n               * There can only be one <a href=\"#/p5/draw\">draw()</a> function for each sketch, and <a href=\"#/p5/draw\">draw()</a> must\n               * exist if you want the code to run continuously, or to process events such\n               * as <a href=\"#/p5/mousePressed\">mousePressed()</a>. Sometimes, you might have an empty call to <a href=\"#/p5/draw\">draw()</a> in\n               * your program, as shown in the above example.\n               *\n               * It is important to note that the drawing coordinate system will be reset\n               * at the beginning of each <a href=\"#/p5/draw\">draw()</a> call. If any transformations are performed\n               * within <a href=\"#/p5/draw\">draw()</a> (ex: scale, rotate, translate), their effects will be\n               * undone at the beginning of <a href=\"#/p5/draw\">draw()</a>, so transformations will not accumulate\n               * over time. On the other hand, styling applied (ex: fill, stroke, etc) will\n               * remain in effect.\n               *\n               * @method draw\n               * @example\n               * <div><code>\n               * let yPos = 0;\n               * function setup() {\n               *   // setup() runs once\n               *   frameRate(30);\n               * }\n               * function draw() {\n               *   // draw() loops forever, until stopped\n               *   background(204);\n               *   yPos = yPos - 1;\n               *   if (yPos < 0) {\n               *     yPos = height;\n               *   }\n               *   line(0, yPos, width, yPos);\n               * }\n               * </code></div>\n               *\n               * @alt\n               * nothing displayed\n               *\n               */\n\n              //////////////////////////////////////////////\n              // PRIVATE p5 PROPERTIES AND METHODS\n              //////////////////////////////////////////////\n\n              this._accessibleOutputs = {\n                text: false,\n                grid: false,\n                textLabel: false,\n                gridLabel: false\n              };\n\n              this._setupDone = false;\n              // for handling hidpi\n              this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1;\n              this._userNode = node;\n              this._curElement = null;\n              this._elements = [];\n              this._glAttributes = null;\n              this._requestAnimId = 0;\n              this._preloadCount = 0;\n              this._isGlobal = false;\n              this._loop = true;\n              this._initializeInstanceVariables();\n              this._defaultCanvasSize = {\n                width: 100,\n                height: 100\n              };\n\n              this._events = {\n                // keep track of user-events for unregistering later\n                mousemove: null,\n                mousedown: null,\n                mouseup: null,\n                dragend: null,\n                dragover: null,\n                click: null,\n                dblclick: null,\n                mouseover: null,\n                mouseout: null,\n                keydown: null,\n                keyup: null,\n                keypress: null,\n                touchstart: null,\n                touchmove: null,\n                touchend: null,\n                resize: null,\n                blur: null\n              };\n\n              this._millisStart = -1;\n\n              // States used in the custom random generators\n              this._lcg_random_state = null;\n              this._gaussian_previous = false;\n\n              this._events.wheel = null;\n              this._loadingScreenId = 'p5_loading';\n\n              // Allows methods to be registered on an instance that\n              // are instance-specific.\n              this._registeredMethods = {};\n              var methods = Object.getOwnPropertyNames(p5.prototype._registeredMethods);\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n              try {\n                for (\n                  var _iterator = methods[Symbol.iterator](), _step;\n                  !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                  _iteratorNormalCompletion = true\n                ) {\n                  var prop = _step.value;\n                  this._registeredMethods[prop] = p5.prototype._registeredMethods[\n                    prop\n                  ].slice();\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              if (window.DeviceOrientationEvent) {\n                this._events.deviceorientation = null;\n              }\n              if (window.DeviceMotionEvent && !window._isNodeWebkit) {\n                this._events.devicemotion = null;\n              }\n\n              this._start = function() {\n                // Find node if id given\n                if (_this._userNode) {\n                  if (typeof _this._userNode === 'string') {\n                    _this._userNode = document.getElementById(_this._userNode);\n                  }\n                }\n\n                var context = _this._isGlobal ? window : _this;\n                if (context.preload) {\n                  // Setup loading screen\n                  // Set loading screen into dom if not present\n                  // Otherwise displays and removes user provided loading screen\n                  var loadingScreen = document.getElementById(_this._loadingScreenId);\n                  if (!loadingScreen) {\n                    loadingScreen = document.createElement('div');\n                    loadingScreen.innerHTML = 'Loading...';\n                    loadingScreen.style.position = 'absolute';\n                    loadingScreen.id = _this._loadingScreenId;\n                    var _node = _this._userNode || document.body;\n                    _node.appendChild(loadingScreen);\n                  }\n                  var _methods = _this._preloadMethods;\n                  for (var method in _methods) {\n                    // default to p5 if no object defined\n                    _methods[method] = _methods[method] || p5;\n                    var obj = _methods[method];\n                    //it's p5, check if it's global or instance\n                    if (obj === p5.prototype || obj === p5) {\n                      if (_this._isGlobal) {\n                        window[method] = _this._wrapPreload(_this, method);\n                      }\n                      obj = _this;\n                    }\n                    _this._registeredPreloadMethods[method] = obj[method];\n                    obj[method] = _this._wrapPreload(obj, method);\n                  }\n\n                  context.preload();\n                  _this._runIfPreloadsAreDone();\n                } else {\n                  _this._setup();\n                  _this._draw();\n                }\n              };\n\n              this._runIfPreloadsAreDone = function() {\n                var context = this._isGlobal ? window : this;\n                if (context._preloadCount === 0) {\n                  var loadingScreen = document.getElementById(context._loadingScreenId);\n                  if (loadingScreen) {\n                    loadingScreen.parentNode.removeChild(loadingScreen);\n                  }\n                  if (!this._setupDone) {\n                    this._lastFrameTime = window.performance.now();\n                    context._setup();\n                    context._draw();\n                  }\n                }\n              };\n\n              this._decrementPreload = function() {\n                var context = this._isGlobal ? window : this;\n                if (typeof context.preload === 'function') {\n                  context._setProperty('_preloadCount', context._preloadCount - 1);\n                  context._runIfPreloadsAreDone();\n                }\n              };\n\n              this._wrapPreload = function(obj, fnName) {\n                var _this2 = this;\n                return function() {\n                  //increment counter\n                  _this2._incrementPreload();\n                  //call original function\n                  for (\n                    var _len = arguments.length, args = new Array(_len), _key = 0;\n                    _key < _len;\n                    _key++\n                  ) {\n                    args[_key] = arguments[_key];\n                  }\n                  return _this2._registeredPreloadMethods[fnName].apply(obj, args);\n                };\n              };\n\n              this._incrementPreload = function() {\n                var context = this._isGlobal ? window : this;\n                context._setProperty('_preloadCount', context._preloadCount + 1);\n              };\n\n              this._setup = function() {\n                // Always create a default canvas.\n                // Later on if the user calls createCanvas, this default one\n                // will be replaced\n                _this.createCanvas(\n                  _this._defaultCanvasSize.width,\n                  _this._defaultCanvasSize.height,\n                  'p2d'\n                );\n\n                // return preload functions to their normal vals if switched by preload\n                var context = _this._isGlobal ? window : _this;\n                if (typeof context.preload === 'function') {\n                  for (var f in _this._preloadMethods) {\n                    context[f] = _this._preloadMethods[f][f];\n                    if (context[f] && _this) {\n                      context[f] = context[f].bind(_this);\n                    }\n                  }\n                }\n\n                // Record the time when sketch starts\n                _this._millisStart = window.performance.now();\n\n                // Short-circuit on this, in case someone used the library in \"global\"\n                // mode earlier\n                if (typeof context.setup === 'function') {\n                  context.setup();\n                }\n\n                // unhide any hidden canvases that were created\n                var canvases = document.getElementsByTagName('canvas');\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n                try {\n                  for (\n                    var _iterator2 = canvases[Symbol.iterator](), _step2;\n                    !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n                    _iteratorNormalCompletion2 = true\n                  ) {\n                    var k = _step2.value;\n                    if (k.dataset.hidden === 'true') {\n                      k.style.visibility = '';\n                      delete k.dataset.hidden;\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError2 = true;\n                  _iteratorError2 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                      _iterator2.return();\n                    }\n                  } finally {\n                    if (_didIteratorError2) {\n                      throw _iteratorError2;\n                    }\n                  }\n                }\n\n                _this._lastFrameTime = window.performance.now();\n                _this._setupDone = true;\n                if (_this._accessibleOutputs.grid || _this._accessibleOutputs.text) {\n                  _this._updateAccsOutput();\n                }\n              };\n\n              this._draw = function() {\n                var now = window.performance.now();\n                var time_since_last = now - _this._lastFrameTime;\n                var target_time_between_frames = 1000 / _this._targetFrameRate;\n\n                // only draw if we really need to; don't overextend the browser.\n                // draw if we're within 5ms of when our next frame should paint\n                // (this will prevent us from giving up opportunities to draw\n                // again when it's really about time for us to do so). fixes an\n                // issue where the frameRate is too low if our refresh loop isn't\n                // in sync with the browser. note that we have to draw once even\n                // if looping is off, so we bypass the time delay if that\n                // is the case.\n                var epsilon = 5;\n                if (\n                  !_this._loop ||\n                  time_since_last >= target_time_between_frames - epsilon\n                ) {\n                  //mandatory update values(matrixs and stack)\n                  _this.redraw();\n                  _this._frameRate = 1000.0 / (now - _this._lastFrameTime);\n                  _this.deltaTime = now - _this._lastFrameTime;\n                  _this._setProperty('deltaTime', _this.deltaTime);\n                  _this._lastFrameTime = now;\n\n                  // If the user is actually using mouse module, then update\n                  // coordinates, otherwise skip. We can test this by simply\n                  // checking if any of the mouse functions are available or not.\n                  // NOTE : This reflects only in complete build or modular build.\n                  if (typeof _this._updateMouseCoords !== 'undefined') {\n                    _this._updateMouseCoords();\n\n                    //reset delta values so they reset even if there is no mouse event to set them\n                    // for example if the mouse is outside the screen\n                    _this._setProperty('movedX', 0);\n                    _this._setProperty('movedY', 0);\n                  }\n                }\n\n                // get notified the next time the browser gives us\n                // an opportunity to draw.\n                if (_this._loop) {\n                  _this._requestAnimId = window.requestAnimationFrame(_this._draw);\n                }\n              };\n\n              this._setProperty = function(prop, value) {\n                _this[prop] = value;\n                if (_this._isGlobal) {\n                  window[prop] = value;\n                }\n              };\n\n              /**\n               * Removes the entire p5 sketch. This will remove the canvas and any\n               * elements created by p5.js. It will also stop the draw loop and unbind\n               * any properties or methods from the window global scope. It will\n               * leave a variable p5 in case you wanted to create a new p5 sketch.\n               * If you like, you can set p5 = null to erase it. While all functions and\n               * variables and objects created by the p5 library will be removed, any\n               * other global variables created by your code will remain.\n               *\n               * @method remove\n               * @example\n               * <div class='norender'><code>\n               * function draw() {\n               *   ellipse(50, 50, 10, 10);\n               * }\n               *\n               * function mousePressed() {\n               *   remove(); // remove whole sketch on mouse press\n               * }\n               * </code></div>\n               *\n               * @alt\n               * nothing displayed\n               *\n               */\n              this.remove = function() {\n                var loadingScreen = document.getElementById(_this._loadingScreenId);\n                if (loadingScreen) {\n                  loadingScreen.parentNode.removeChild(loadingScreen);\n                  // Add 1 to preload counter to prevent the sketch ever executing setup()\n                  _this._incrementPreload();\n                }\n                if (_this._curElement) {\n                  // stop draw\n                  _this._loop = false;\n                  if (_this._requestAnimId) {\n                    window.cancelAnimationFrame(_this._requestAnimId);\n                  }\n\n                  // unregister events sketch-wide\n                  for (var ev in _this._events) {\n                    window.removeEventListener(ev, _this._events[ev]);\n                  }\n\n                  // remove DOM elements created by p5, and listeners\n                  var _iteratorNormalCompletion3 = true;\n                  var _didIteratorError3 = false;\n                  var _iteratorError3 = undefined;\n                  try {\n                    for (\n                      var _iterator3 = _this._elements[Symbol.iterator](), _step3;\n                      !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);\n                      _iteratorNormalCompletion3 = true\n                    ) {\n                      var e = _step3.value;\n                      if (e.elt && e.elt.parentNode) {\n                        e.elt.parentNode.removeChild(e.elt);\n                      }\n                      for (var elt_ev in e._events) {\n                        e.elt.removeEventListener(elt_ev, e._events[elt_ev]);\n                      }\n                    }\n\n                    // call any registered remove functions\n                  } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                        _iterator3.return();\n                      }\n                    } finally {\n                      if (_didIteratorError3) {\n                        throw _iteratorError3;\n                      }\n                    }\n                  }\n                  var self = _this;\n                  _this._registeredMethods.remove.forEach(function(f) {\n                    if (typeof f !== 'undefined') {\n                      f.call(self);\n                    }\n                  });\n                }\n                // remove window bound properties and methods\n                if (_this._isGlobal) {\n                  for (var p in p5.prototype) {\n                    try {\n                      delete window[p];\n                    } catch (x) {\n                      window[p] = undefined;\n                    }\n                  }\n                  for (var p2 in _this) {\n                    if (_this.hasOwnProperty(p2)) {\n                      try {\n                        delete window[p2];\n                      } catch (x) {\n                        window[p2] = undefined;\n                      }\n                    }\n                  }\n                  p5.instance = null;\n                }\n              };\n\n              // call any registered init functions\n              this._registeredMethods.init.forEach(function(f) {\n                if (typeof f !== 'undefined') {\n                  f.call(this);\n                }\n              }, this);\n              // Set up promise preloads\n              this._setupPromisePreloads();\n\n              var friendlyBindGlobal = this._createFriendlyGlobalFunctionBinder();\n\n              // If the user has created a global setup or draw function,\n              // assume \"global\" mode and make everything global (i.e. on the window)\n              if (!sketch) {\n                this._isGlobal = true;\n                p5.instance = this;\n                // Loop through methods on the prototype and attach them to the window\n                for (var p in p5.prototype) {\n                  if (typeof p5.prototype[p] === 'function') {\n                    var ev = p.substring(2);\n                    if (!this._events.hasOwnProperty(ev)) {\n                      if (Math.hasOwnProperty(p) && Math[p] === p5.prototype[p]) {\n                        // Multiple p5 methods are just native Math functions. These can be\n                        // called without any binding.\n                        friendlyBindGlobal(p, p5.prototype[p]);\n                      } else {\n                        friendlyBindGlobal(p, p5.prototype[p].bind(this));\n                      }\n                    }\n                  } else {\n                    friendlyBindGlobal(p, p5.prototype[p]);\n                  }\n                }\n                // Attach its properties to the window\n                for (var p2 in this) {\n                  if (this.hasOwnProperty(p2)) {\n                    friendlyBindGlobal(p2, this[p2]);\n                  }\n                }\n              } else {\n                // Else, the user has passed in a sketch closure that may set\n                // user-provided 'setup', 'draw', etc. properties on this instance of p5\n                sketch(this);\n\n                // Run a check to see if the user has misspelled 'setup', 'draw', etc\n                // detects capitalization mistakes only ( Setup, SETUP, MouseClicked, etc)\n                p5._checkForUserDefinedFunctions(this);\n              }\n\n              // Bind events to window (not using container div bc key events don't work)\n\n              for (var e in this._events) {\n                var f = this['_on'.concat(e)];\n                if (f) {\n                  var m = f.bind(this);\n                  window.addEventListener(e, m, { passive: false });\n                  this._events[e] = m;\n                }\n              }\n\n              var focusHandler = function focusHandler() {\n                _this._setProperty('focused', true);\n              };\n              var blurHandler = function blurHandler() {\n                _this._setProperty('focused', false);\n              };\n              window.addEventListener('focus', focusHandler);\n              window.addEventListener('blur', blurHandler);\n              this.registerMethod('remove', function() {\n                window.removeEventListener('focus', focusHandler);\n                window.removeEventListener('blur', blurHandler);\n              });\n\n              if (document.readyState === 'complete') {\n                this._start();\n              } else {\n                window.addEventListener('load', this._start.bind(this), false);\n              }\n            }\n            _createClass(p5, [\n              {\n                key: '_initializeInstanceVariables',\n                value: function _initializeInstanceVariables() {\n                  this._styles = [];\n\n                  this._bezierDetail = 20;\n                  this._curveDetail = 20;\n\n                  this._colorMode = constants.RGB;\n                  this._colorMaxes = {\n                    rgb: [255, 255, 255, 255],\n                    hsb: [360, 100, 100, 1],\n                    hsl: [360, 100, 100, 1]\n                  };\n\n                  this._downKeys = {}; //Holds the key codes of currently pressed keys\n                }\n              },\n              {\n                key: 'registerPreloadMethod',\n                value: function registerPreloadMethod(fnString, obj) {\n                  // obj = obj || p5.prototype;\n                  if (!p5.prototype._preloadMethods.hasOwnProperty(fnString)) {\n                    p5.prototype._preloadMethods[fnString] = obj;\n                  }\n                }\n              },\n              {\n                key: 'registerMethod',\n                value: function registerMethod(name, m) {\n                  var target = this || p5.prototype;\n                  if (!target._registeredMethods.hasOwnProperty(name)) {\n                    target._registeredMethods[name] = [];\n                  }\n                  target._registeredMethods[name].push(m);\n                }\n\n                // create a function which provides a standardized process for binding\n                // globals; this is implemented as a factory primarily so that there's a\n                // way to redefine what \"global\" means for the binding function so it\n                // can be used in scenarios like unit testing where the window object\n                // might not exist\n              },\n              {\n                key: '_createFriendlyGlobalFunctionBinder',\n                value: function _createFriendlyGlobalFunctionBinder() {\n                  var options =\n                    arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                  var globalObject = options.globalObject || window;\n                  var log = options.log || console.log.bind(console);\n                  var propsToForciblyOverwrite = {\n                    // p5.print actually always overwrites an existing global function,\n                    // albeit one that is very unlikely to be used:\n                    //\n                    //   https://developer.mozilla.org/en-US/docs/Web/API/Window/print\n                    print: true\n                  };\n\n                  return function(prop, value) {\n                    if (\n                      !p5.disableFriendlyErrors &&\n                      typeof IS_MINIFIED === 'undefined' &&\n                      typeof value === 'function' &&\n                      !(prop in p5.prototype._preloadMethods)\n                    ) {\n                      try {\n                        // Because p5 has so many common function names, it's likely\n                        // that users may accidentally overwrite global p5 functions with\n                        // their own variables. Let's allow this but log a warning to\n                        // help users who may be doing this unintentionally.\n                        //\n                        // For more information, see:\n                        //\n                        //   https://github.com/processing/p5.js/issues/1317\n\n                        if (prop in globalObject && !(prop in propsToForciblyOverwrite)) {\n                          throw new Error('global \"'.concat(prop, '\" already exists'));\n                        }\n\n                        // It's possible that this might throw an error because there\n                        // are a lot of edge-cases in which `Object.defineProperty` might\n                        // not succeed; since this functionality is only intended to\n                        // help beginners anyways, we'll just catch such an exception\n                        // if it occurs, and fall back to legacy behavior.\n                        Object.defineProperty(globalObject, prop, {\n                          configurable: true,\n                          enumerable: true,\n                          get: function get() {\n                            return value;\n                          },\n                          set: function set(newValue) {\n                            Object.defineProperty(globalObject, prop, {\n                              configurable: true,\n                              enumerable: true,\n                              value: newValue,\n                              writable: true\n                            });\n\n                            log(\n                              'You just changed the value of \"'.concat(\n                                prop,\n                                '\", which was a p5 function. This could cause problems later if you\\'re not careful.'\n                              )\n                            );\n                          }\n                        });\n                      } catch (e) {\n                        log(\n                          'p5 had problems creating the global function \"'.concat(\n                            prop,\n                            '\", possibly because your code is already using that name as a variable. You may want to rename your variable to something else.'\n                          )\n                        );\n\n                        globalObject[prop] = value;\n                      }\n                    } else {\n                      globalObject[prop] = value;\n                    }\n                  };\n                }\n              }\n            ]);\n            return p5;\n          })();\n\n          // This is a pointer to our global mode p5 instance, if we're in\n          // global mode.\n          p5.instance = null;\n\n          /**\n           * Allows for the friendly error system (FES) to be turned off when creating a sketch,\n           * which can give a significant boost to performance when needed.\n           * See <a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'>\n           * disabling the friendly error system</a>.\n           *\n           * @property {Boolean} disableFriendlyErrors\n           * @example\n           * <div class=\"norender notest\"><code>\n           * p5.disableFriendlyErrors = true;\n           *\n           * function setup() {\n           *   createCanvas(100, 50);\n           * }\n           * </code></div>\n           */\n          p5.disableFriendlyErrors = false;\n\n          // attach constants to p5 prototype\n          for (var k in constants) {\n            p5.prototype[k] = constants[k];\n          }\n\n          // functions that cause preload to wait\n          // more can be added by using registerPreloadMethod(func)\n          p5.prototype._preloadMethods = {\n            loadJSON: p5.prototype,\n            loadImage: p5.prototype,\n            loadStrings: p5.prototype,\n            loadXML: p5.prototype,\n            loadBytes: p5.prototype,\n            loadTable: p5.prototype,\n            loadFont: p5.prototype,\n            loadModel: p5.prototype,\n            loadShader: p5.prototype\n          };\n\n          p5.prototype._registeredMethods = { init: [], pre: [], post: [], remove: [] };\n\n          p5.prototype._registeredPreloadMethods = {};\n          var _default = p5;\n          exports.default = _default;\n        },\n        { './constants': 48, './shim': 70 }\n      ],\n      60: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module DOM\n           * @submodule DOM\n           * @for p5.Element\n           */ /**\n           * Base class for all elements added to a sketch, including canvas,\n           * graphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\n           * objects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\n           * <a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.\n           *\n           * @class p5.Element\n           * @constructor\n           * @param {String} elt DOM node that is wrapped\n           * @param {p5} [pInst] pointer to p5 instance\n           */ _main.default.Element = function(elt, pInst) {\n            /**\n             * Underlying HTML element. All normal HTML methods can be called on this.\n             * @example\n             * <div>\n             * <code>\n             * function setup() {\n             *   let c = createCanvas(50, 50);\n             *   c.elt.style.border = '5px solid red';\n             * }\n             *\n             * function draw() {\n             *   background(220);\n             * }\n             * </code>\n             * </div>\n             *\n             * @property elt\n             * @readOnly\n             */\n            this.elt = elt;\n            this._pInst = this._pixelsState = pInst;\n            this._events = {};\n            this.width = this.elt.offsetWidth;\n            this.height = this.elt.offsetHeight;\n          };\n\n          /**\n           *\n           * Attaches the element to the parent specified. A way of setting\n           * the container for the element. Accepts either a string ID, DOM\n           * node, or <a href=\"#/p5.Element\">p5.Element</a>. If no arguments given, parent node is returned.\n           * For more ways to position the canvas, see the\n           * <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\n           * positioning the canvas</a> wiki page.\n           *\n           * @method parent\n           * @param  {String|p5.Element|Object} parent the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n           *                         of desired parent element\n           * @chainable\n           *\n           * @example\n           * <div class=\"norender notest\"><code>\n           * // Add the following comment to html file.\n           * // &lt;div id=\"myContainer\">&lt;/div>\n           *\n           * // The js code\n           * let cnv = createCanvas(100, 100);\n           * cnv.parent('myContainer');\n           * </code></div>\n           *\n           * <div class='norender'><code>\n           * let div0 = createDiv('this is the parent');\n           * let div1 = createDiv('this is the child');\n           * div1.parent(div0); // use p5.Element\n           * </code></div>\n           *\n           * <div class='norender'><code>\n           * let div0 = createDiv('this is the parent');\n           * div0.id('apples');\n           * let div1 = createDiv('this is the child');\n           * div1.parent('apples'); // use id\n           * </code></div>\n           *\n           * <div class='norender notest'><code>\n           * let elt = document.getElementById('myParentDiv');\n           * let div1 = createDiv('this is the child');\n           * div1.parent(elt); // use element from page\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          /**\n           * @method parent\n           * @return {p5.Element}\n           */\n          _main.default.Element.prototype.parent = function(p) {\n            if (typeof p === 'undefined') {\n              return this.elt.parentNode;\n            }\n\n            if (typeof p === 'string') {\n              if (p[0] === '#') {\n                p = p.substring(1);\n              }\n              p = document.getElementById(p);\n            } else if (p instanceof _main.default.Element) {\n              p = p.elt;\n            }\n            p.appendChild(this.elt);\n            return this;\n          };\n\n          /**\n           *\n           * Sets the ID of the element. If no ID argument is passed in, it instead\n           * returns the current ID of the element.\n           * Note that only one element can have a particular id in a page.\n           * The <a href=\"#/p5.Element/class\">.class()</a> function can be used\n           * to identify multiple elements with the same class name.\n           *\n           * @method id\n           * @param  {String} id ID of the element\n           * @chainable\n           *\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let cnv = createCanvas(100, 100);\n           *   // Assigns a CSS selector ID to\n           *   // the canvas element.\n           *   cnv.id('mycanvas');\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          /**\n           * @method id\n           * @return {String} the id of the element\n           */\n          _main.default.Element.prototype.id = function(id) {\n            if (typeof id === 'undefined') {\n              return this.elt.id;\n            }\n\n            this.elt.id = id;\n            this.width = this.elt.offsetWidth;\n            this.height = this.elt.offsetHeight;\n            return this;\n          };\n\n          /**\n           *\n           * Adds given class to the element. If no class argument is passed in, it\n           * instead returns a string containing the current class(es) of the element.\n           *\n           * @method class\n           * @param  {String} class class to add\n           * @chainable\n           *\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let cnv = createCanvas(100, 100);\n           *   // Assigns a CSS selector class 'small'\n           *   // to the canvas element.\n           *   cnv.class('small');\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          /**\n           * @method class\n           * @return {String} the class of the element\n           */\n          _main.default.Element.prototype.class = function(c) {\n            if (typeof c === 'undefined') {\n              return this.elt.className;\n            }\n\n            this.elt.className = c;\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mousePressed\">mousePressed()</a> function is called\n           * once after every time a mouse button is pressed over the element. Some mobile\n           * browsers may also trigger this event on a touch screen, if the user performs\n           * a quick tap. This can be used to attach element specific event listeners.\n           *\n           * @method mousePressed\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                pressed over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv, d, g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mousePressed(changeGray); // attach listener for\n           *   // canvas click only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with any click anywhere\n           * function mousePressed() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires only when cnv is clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.mousePressed = function(fxn) {\n            // Prepend the mouse property setters to the event-listener.\n            // This is required so that mouseButton is set correctly prior to calling the callback (fxn).\n            // For details, see https://github.com/processing/p5.js/issues/3087.\n            var eventPrependedFxn = function eventPrependedFxn(event) {\n              this._pInst._setProperty('mouseIsPressed', true);\n              this._pInst._setMouseButton(event);\n              // Pass along the return-value of the callback:\n              return fxn.call(this);\n            };\n            // Pass along the event-prepended form of the callback.\n            _main.default.Element._adjustListener('mousedown', eventPrependedFxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> function is called once after every time a\n           * mouse button is pressed twice over the element. This can be used to\n           * attach element and action specific event listeners.\n           *\n           * @method doubleClicked\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                double clicked over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @return {p5.Element}\n           * @example\n           * <div class='norender'><code>\n           * let cnv, d, g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.doubleClicked(changeGray); // attach listener for\n           *   // canvas double click only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with any double click anywhere\n           * function doubleClicked() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires only when cnv is double clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.doubleClicked = function(fxn) {\n            _main.default.Element._adjustListener('dblclick', fxn, this);\n            return this;\n          };\n\n          /**\n           * The <a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> function is called\n           * once after every time a mouse wheel is scrolled over the element. This can\n           * be used to attach element specific event listeners.\n           *\n           * The function accepts a callback function as argument which will be executed\n           * when the `wheel` event is triggered on the element, the callback function is\n           * passed one argument `event`. The `event.deltaY` property returns negative\n           * values if the mouse wheel is rotated up or away from the user and positive\n           * in the other direction. The `event.deltaX` does the same as `event.deltaY`\n           * except it reads the horizontal wheel scroll of the mouse wheel.\n           *\n           * On OS X with \"natural\" scrolling enabled, the `event.deltaY` values are\n           * reversed.\n           *\n           * @method mouseWheel\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                scrolled over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv, d, g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseWheel(changeSize); // attach listener for\n           *   // activity on canvas only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with mousewheel movement\n           * // anywhere on screen\n           * function mouseWheel() {\n           *   g = g + 10;\n           * }\n           *\n           * // this function fires with mousewheel movement\n           * // over canvas only\n           * function changeSize(event) {\n           *   if (event.deltaY > 0) {\n           *     d = d + 10;\n           *   } else {\n           *     d = d - 10;\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.mouseWheel = function(fxn) {\n            _main.default.Element._adjustListener('wheel', fxn, this);\n            return this;\n          };\n\n          /**\n           * The <a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> function is\n           * called once after every time a mouse button is released over the element.\n           * Some mobile browsers may also trigger this event on a touch screen, if the\n           * user performs a quick tap. This can be used to attach element specific event listeners.\n           *\n           * @method mouseReleased\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                released over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv, d, g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseReleased(changeGray); // attach listener for\n           *   // activity on canvas only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires after the mouse has been\n           * // released\n           * function mouseReleased() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires after the mouse has been\n           * // released while on canvas\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.mouseReleased = function(fxn) {\n            _main.default.Element._adjustListener('mouseup', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> function is\n           * called once after a mouse button is pressed and released over the element.\n           * Some mobile browsers may also trigger this event on a touch screen, if the\n           * user performs a quick tap.This can be used to attach element specific event listeners.\n           *\n           * @method mouseClicked\n           * @param  {Function|Boolean} fxn function to be fired when mouse is\n           *                                clicked over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let cnv, d, g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseClicked(changeGray); // attach listener for\n           *   // activity on canvas only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires after the mouse has been\n           * // clicked anywhere\n           * function mouseClicked() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires after the mouse has been\n           * // clicked on canvas\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.mouseClicked = function(fxn) {\n            _main.default.Element._adjustListener('click', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> function is called once every time a\n           * mouse moves over the element. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method mouseMoved\n           * @param  {Function|Boolean} fxn function to be fired when a mouse moves\n           *                                over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d = 30;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseMoved(changeSize); // attach listener for\n           *   // activity on canvas only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   fill(200);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires when mouse moves anywhere on\n           * // page\n           * function mouseMoved() {\n           *   g = g + 5;\n           *   if (g > 255) {\n           *     g = 0;\n           *   }\n           * }\n           *\n           * // this function fires when mouse moves over canvas\n           * function changeSize() {\n           *   d = d + 2;\n           *   if (d > 100) {\n           *     d = 0;\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.mouseMoved = function(fxn) {\n            _main.default.Element._adjustListener('mousemove', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseOver\">mouseOver()</a> function is called once after every time a\n           * mouse moves onto the element. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method mouseOver\n           * @param  {Function|Boolean} fxn function to be fired when a mouse moves\n           *                                onto the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseOver(changeGray);\n           *   d = 10;\n           * }\n           *\n           * function draw() {\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * function changeGray() {\n           *   d = d + 10;\n           *   if (d > 100) {\n           *     d = 0;\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.mouseOver = function(fxn) {\n            _main.default.Element._adjustListener('mouseover', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/mouseOut\">mouseOut()</a> function is called once after every time a\n           * mouse moves off the element. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method mouseOut\n           * @param  {Function|Boolean} fxn function to be fired when a mouse\n           *                                moves off of an element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.mouseOut(changeGray);\n           *   d = 10;\n           * }\n           *\n           * function draw() {\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * function changeGray() {\n           *   d = d + 10;\n           *   if (d > 100) {\n           *     d = 0;\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.mouseOut = function(fxn) {\n            _main.default.Element._adjustListener('mouseout', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/touchStarted\">touchStarted()</a> function is called once after every time a touch is\n           * registered. This can be used to attach element specific event listeners.\n           *\n           * @method touchStarted\n           * @param  {Function|Boolean} fxn function to be fired when a touch\n           *                                starts over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.touchStarted(changeGray); // attach listener for\n           *   // canvas click only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with any touch anywhere\n           * function touchStarted() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires only when cnv is clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.touchStarted = function(fxn) {\n            _main.default.Element._adjustListener('touchstart', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/touchMoved\">touchMoved()</a> function is called once after every time a touch move is\n           * registered. This can be used to attach element specific event listeners.\n           *\n           * @method touchMoved\n           * @param  {Function|Boolean} fxn function to be fired when a touch moves over\n           *                                the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.touchMoved(changeGray); // attach listener for\n           *   // canvas click only\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           * }\n           *\n           * // this function fires only when cnv is clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.touchMoved = function(fxn) {\n            _main.default.Element._adjustListener('touchmove', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/touchEnded\">touchEnded()</a> function is called once after every time a touch is\n           * registered. This can be used to attach element specific event listeners.\n           *\n           * @method touchEnded\n           * @param  {Function|Boolean} fxn function to be fired when a touch ends\n           *                                over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let cnv;\n           * let d;\n           * let g;\n           * function setup() {\n           *   cnv = createCanvas(100, 100);\n           *   cnv.touchEnded(changeGray); // attach listener for\n           *   // canvas click only\n           *   d = 10;\n           *   g = 100;\n           * }\n           *\n           * function draw() {\n           *   background(g);\n           *   ellipse(width / 2, height / 2, d, d);\n           * }\n           *\n           * // this function fires with any touch anywhere\n           * function touchEnded() {\n           *   d = d + 10;\n           * }\n           *\n           * // this function fires only when cnv is clicked\n           * function changeGray() {\n           *   g = random(0, 255);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.touchEnded = function(fxn) {\n            _main.default.Element._adjustListener('touchend', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/dragOver\">dragOver()</a> function is called once after every time a\n           * file is dragged over the element. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method dragOver\n           * @param  {Function|Boolean} fxn function to be fired when a file is\n           *                                dragged over the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div><code>\n           * // To test this sketch, simply drag a\n           * // file over the canvas\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Drag file', width / 2, height / 2);\n           *   c.dragOver(dragOverCallback);\n           * }\n           *\n           * // This function will be called whenever\n           * // a file is dragged over the canvas\n           * function dragOverCallback() {\n           *   background(240);\n           *   text('Dragged over', width / 2, height / 2);\n           * }\n           * </code></div>\n           * @alt\n           * nothing displayed\n           */\n          _main.default.Element.prototype.dragOver = function(fxn) {\n            _main.default.Element._adjustListener('dragover', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .dragLeave() function is called once after every time a\n           * dragged file leaves the element area. This can be used to attach an\n           * element specific event listener.\n           *\n           * @method dragLeave\n           * @param  {Function|Boolean} fxn function to be fired when a file is\n           *                                dragged off the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div><code>\n           * // To test this sketch, simply drag a file\n           * // over and then out of the canvas area\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Drag file', width / 2, height / 2);\n           *   c.dragLeave(dragLeaveCallback);\n           * }\n           *\n           * // This function will be called whenever\n           * // a file is dragged out of the canvas\n           * function dragLeaveCallback() {\n           *   background(240);\n           *   text('Dragged off', width / 2, height / 2);\n           * }\n           * </code></div>\n           * @alt\n           * nothing displayed\n           */\n          _main.default.Element.prototype.dragLeave = function(fxn) {\n            _main.default.Element._adjustListener('dragleave', fxn, this);\n            return this;\n          };\n\n          // General handler for event attaching and detaching\n          _main.default.Element._adjustListener = function(ev, fxn, ctx) {\n            if (fxn === false) {\n              _main.default.Element._detachListener(ev, ctx);\n            } else {\n              _main.default.Element._attachListener(ev, fxn, ctx);\n            }\n            return this;\n          };\n\n          _main.default.Element._attachListener = function(ev, fxn, ctx) {\n            // detach the old listener if there was one\n            if (ctx._events[ev]) {\n              _main.default.Element._detachListener(ev, ctx);\n            }\n            var f = fxn.bind(ctx);\n            ctx.elt.addEventListener(ev, f, false);\n            ctx._events[ev] = f;\n          };\n\n          _main.default.Element._detachListener = function(ev, ctx) {\n            var f = ctx._events[ev];\n            ctx.elt.removeEventListener(ev, f, false);\n            ctx._events[ev] = null;\n          };\n\n          /**\n           * Helper fxn for sharing pixel methods\n           */\n          _main.default.Element.prototype._setProperty = function(prop, value) {\n            this[prop] = value;\n          };\n          var _default = _main.default.Element;\n          exports.default = _default;\n        },\n        { './main': 59 }\n      ],\n      61: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          var constants = _interopRequireWildcard(_dereq_('./constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Rendering\n           * @submodule Rendering\n           * @for p5\n           */ /**\n           * Thin wrapper around a renderer, to be used for creating a\n           * graphics buffer object. Use this class if you need\n           * to draw into an off-screen graphics buffer. The two parameters define the\n           * width and height in pixels. The fields and methods for this class are\n           * extensive, but mirror the normal drawing API for p5.\n           *\n           * @class p5.Graphics\n           * @constructor\n           * @extends p5.Element\n           * @param {Number} w            width\n           * @param {Number} h            height\n           * @param {Constant} renderer   the renderer to use, either P2D or WEBGL\n           * @param {p5} [pInst]          pointer to p5 instance\n           */ _main.default.Graphics = function(w, h, renderer, pInst) {\n            var r = renderer || constants.P2D;\n\n            this.canvas = document.createElement('canvas');\n            var node = pInst._userNode || document.body;\n            node.appendChild(this.canvas);\n\n            _main.default.Element.call(this, this.canvas, pInst);\n\n            // bind methods and props of p5 to the new object\n            for (var p in _main.default.prototype) {\n              if (!this[p]) {\n                if (typeof _main.default.prototype[p] === 'function') {\n                  this[p] = _main.default.prototype[p].bind(this);\n                } else {\n                  this[p] = _main.default.prototype[p];\n                }\n              }\n            }\n\n            _main.default.prototype._initializeInstanceVariables.apply(this);\n            this.width = w;\n            this.height = h;\n            this._pixelDensity = pInst._pixelDensity;\n\n            if (r === constants.WEBGL) {\n              this._renderer = new _main.default.RendererGL(this.canvas, this, false);\n            } else {\n              this._renderer = new _main.default.Renderer2D(this.canvas, this, false);\n            }\n            pInst._elements.push(this);\n\n            Object.defineProperty(this, 'deltaTime', {\n              get: function get() {\n                return this._pInst.deltaTime;\n              }\n            });\n\n            this._renderer.resize(w, h);\n            this._renderer._applyDefaults();\n            return this;\n          };\n\n          _main.default.Graphics.prototype = Object.create(_main.default.Element.prototype);\n\n          /**\n           * Resets certain values such as those modified by functions in the Transform category\n           * and in the Lights category that are not automatically reset\n           * with graphics buffer objects. Calling this in <a href='#/p5/draw'>draw()</a> will copy the behavior\n           * of the standard canvas.\n           *\n           * @method reset\n           * @example\n           *\n           * <div><code>\n           * let pg;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(0);\n           *   pg = createGraphics(50, 100);\n           *   pg.fill(0);\n           *   frameRate(5);\n           * }\n           *\n           * function draw() {\n           *   image(pg, width / 2, 0);\n           *   pg.background(255);\n           *   // p5.Graphics object behave a bit differently in some cases\n           *   // The normal canvas on the left resets the translate\n           *   // with every loop through draw()\n           *   // the graphics object on the right doesn't automatically reset\n           *   // so translate() is additive and it moves down the screen\n           *   rect(0, 0, width / 2, 5);\n           *   pg.rect(0, 0, width / 2, 5);\n           *   translate(0, 5, 0);\n           *   pg.translate(0, 5, 0);\n           * }\n           * function mouseClicked() {\n           *   // if you click you will see that\n           *   // reset() resets the translate back to the initial state\n           *   // of the Graphics object\n           *   pg.reset();\n           * }\n           * </code></div>\n           *\n           * @alt\n           * A white line on a black background stays still on the top-left half.\n           * A black line animates from top to bottom on a white background on the right half.\n           * When clicked, the black line starts back over at the top.\n           */\n          _main.default.Graphics.prototype.reset = function() {\n            this._renderer.resetMatrix();\n            if (this._renderer.isP3D) {\n              this._renderer._update();\n            }\n          };\n\n          /**\n           * Removes a Graphics object from the page and frees any resources\n           * associated with it.\n           *\n           * @method remove\n           *\n           * @example\n           * <div class='norender'><code>\n           * let bg;\n           * function setup() {\n           *   bg = createCanvas(100, 100);\n           *   bg.background(0);\n           *   image(bg, 0, 0);\n           *   bg.remove();\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let bg;\n           * function setup() {\n           *   pixelDensity(1);\n           *   createCanvas(100, 100);\n           *   stroke(255);\n           *   fill(0);\n           *\n           *   // create and draw the background image\n           *   bg = createGraphics(100, 100);\n           *   bg.background(200);\n           *   bg.ellipse(50, 50, 80, 80);\n           * }\n           * function draw() {\n           *   let t = millis() / 1000;\n           *   // draw the background\n           *   if (bg) {\n           *     image(bg, frameCount % 100, 0);\n           *     image(bg, frameCount % 100 - 100, 0);\n           *   }\n           *   // draw the foreground\n           *   let p = p5.Vector.fromAngle(t, 35).add(50, 50);\n           *   ellipse(p.x, p.y, 30);\n           * }\n           * function mouseClicked() {\n           *   // remove the background\n           *   if (bg) {\n           *     bg.remove();\n           *     bg = null;\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image\n           * a multi-colored circle moving back and forth over a scrolling background.\n           */\n          _main.default.Graphics.prototype.remove = function() {\n            if (this.elt.parentNode) {\n              this.elt.parentNode.removeChild(this.elt);\n            }\n            var idx = this._pInst._elements.indexOf(this);\n            if (idx !== -1) {\n              this._pInst._elements.splice(idx, 1);\n            }\n            for (var elt_ev in this._events) {\n              this.elt.removeEventListener(elt_ev, this._events[elt_ev]);\n            }\n          };\n          var _default = _main.default.Graphics;\n          exports.default = _default;\n        },\n        { './constants': 48, './main': 59 }\n      ],\n      62: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          /**\n           * Main graphics and rendering context, as well as the base API\n           * implementation for p5.js \"core\". To be used as the superclass for\n           * Renderer2D and Renderer3D classes, respectively.\n           *\n           * @class p5.Renderer\n           * @constructor\n           * @extends p5.Element\n           * @param {String} elt DOM node that is wrapped\n           * @param {p5} [pInst] pointer to p5 instance\n           * @param {Boolean} [isMainCanvas] whether we're using it as main canvas\n           */\n          _main.default.Renderer = function(elt, pInst, isMainCanvas) {\n            _main.default.Element.call(this, elt, pInst);\n            this.canvas = elt;\n            this._pixelsState = pInst;\n            if (isMainCanvas) {\n              this._isMainCanvas = true;\n              // for pixel method sharing with pimage\n              this._pInst._setProperty('_curElement', this);\n              this._pInst._setProperty('canvas', this.canvas);\n              this._pInst._setProperty('width', this.width);\n              this._pInst._setProperty('height', this.height);\n            } else {\n              // hide if offscreen buffer by default\n              this.canvas.style.display = 'none';\n              this._styles = []; // non-main elt styles stored in p5.Renderer\n            }\n\n            this._textSize = 12;\n            this._textLeading = 15;\n            this._textFont = 'sans-serif';\n            this._textStyle = constants.NORMAL;\n            this._textAscent = null;\n            this._textDescent = null;\n            this._textAlign = constants.LEFT;\n            this._textBaseline = constants.BASELINE;\n\n            this._rectMode = constants.CORNER;\n            this._ellipseMode = constants.CENTER;\n            this._curveTightness = 0;\n            this._imageMode = constants.CORNER;\n\n            this._tint = null;\n            this._doStroke = true;\n            this._doFill = true;\n            this._strokeSet = false;\n            this._fillSet = false;\n          };\n\n          _main.default.Renderer.prototype = Object.create(_main.default.Element.prototype);\n\n          // the renderer should return a 'style' object that it wishes to\n          // store on the push stack.\n          _main.default.Renderer.prototype.push = function() {\n            return {\n              properties: {\n                _doStroke: this._doStroke,\n                _strokeSet: this._strokeSet,\n                _doFill: this._doFill,\n                _fillSet: this._fillSet,\n                _tint: this._tint,\n                _imageMode: this._imageMode,\n                _rectMode: this._rectMode,\n                _ellipseMode: this._ellipseMode,\n                _textFont: this._textFont,\n                _textLeading: this._textLeading,\n                _textSize: this._textSize,\n                _textAlign: this._textAlign,\n                _textBaseline: this._textBaseline,\n                _textStyle: this._textStyle\n              }\n            };\n          };\n\n          // a pop() operation is in progress\n          // the renderer is passed the 'style' object that it returned\n          // from its push() method.\n          _main.default.Renderer.prototype.pop = function(style) {\n            if (style.properties) {\n              // copy the style properties back into the renderer\n              Object.assign(this, style.properties);\n            }\n          };\n\n          /**\n           * Resize our canvas element.\n           */\n          _main.default.Renderer.prototype.resize = function(w, h) {\n            this.width = w;\n            this.height = h;\n            this.elt.width = w * this._pInst._pixelDensity;\n            this.elt.height = h * this._pInst._pixelDensity;\n            this.elt.style.width = ''.concat(w, 'px');\n            this.elt.style.height = ''.concat(h, 'px');\n            if (this._isMainCanvas) {\n              this._pInst._setProperty('width', this.width);\n              this._pInst._setProperty('height', this.height);\n            }\n          };\n\n          _main.default.Renderer.prototype.get = function(x, y, w, h) {\n            var pixelsState = this._pixelsState;\n            var pd = pixelsState._pixelDensity;\n            var canvas = this.canvas;\n\n            if (typeof x === 'undefined' && typeof y === 'undefined') {\n              // get()\n              x = y = 0;\n              w = pixelsState.width;\n              h = pixelsState.height;\n            } else {\n              x *= pd;\n              y *= pd;\n\n              if (typeof w === 'undefined' && typeof h === 'undefined') {\n                // get(x,y)\n                if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\n                  return [0, 0, 0, 0];\n                }\n\n                return this._getPixel(x, y);\n              }\n              // get(x,y,w,h)\n            }\n\n            var region = new _main.default.Image(w, h);\n            region.canvas\n              .getContext('2d')\n              .drawImage(canvas, x, y, w * pd, h * pd, 0, 0, w, h);\n\n            return region;\n          };\n\n          _main.default.Renderer.prototype.textLeading = function(l) {\n            if (typeof l === 'number') {\n              this._setProperty('_textLeading', l);\n              return this._pInst;\n            }\n\n            return this._textLeading;\n          };\n\n          _main.default.Renderer.prototype.textSize = function(s) {\n            if (typeof s === 'number') {\n              this._setProperty('_textSize', s);\n              this._setProperty('_textLeading', s * constants._DEFAULT_LEADMULT);\n              return this._applyTextProperties();\n            }\n\n            return this._textSize;\n          };\n\n          _main.default.Renderer.prototype.textStyle = function(s) {\n            if (s) {\n              if (\n                s === constants.NORMAL ||\n                s === constants.ITALIC ||\n                s === constants.BOLD ||\n                s === constants.BOLDITALIC\n              ) {\n                this._setProperty('_textStyle', s);\n              }\n\n              return this._applyTextProperties();\n            }\n\n            return this._textStyle;\n          };\n\n          _main.default.Renderer.prototype.textAscent = function() {\n            if (this._textAscent === null) {\n              this._updateTextMetrics();\n            }\n            return this._textAscent;\n          };\n\n          _main.default.Renderer.prototype.textDescent = function() {\n            if (this._textDescent === null) {\n              this._updateTextMetrics();\n            }\n            return this._textDescent;\n          };\n\n          _main.default.Renderer.prototype.textAlign = function(h, v) {\n            if (typeof h !== 'undefined') {\n              this._setProperty('_textAlign', h);\n\n              if (typeof v !== 'undefined') {\n                this._setProperty('_textBaseline', v);\n              }\n\n              return this._applyTextProperties();\n            } else {\n              return {\n                horizontal: this._textAlign,\n                vertical: this._textBaseline\n              };\n            }\n          };\n\n          _main.default.Renderer.prototype.text = function(str, x, y, maxWidth, maxHeight) {\n            var p = this._pInst;\n            var cars;\n            var n;\n            var ii;\n            var jj;\n            var line;\n            var testLine;\n            var testWidth;\n            var words;\n            var totalHeight;\n            var shiftedY;\n            var finalMaxHeight = Number.MAX_VALUE;\n\n            if (!(this._doFill || this._doStroke)) {\n              return;\n            }\n\n            if (typeof str === 'undefined') {\n              return;\n            } else if (typeof str !== 'string') {\n              str = str.toString();\n            }\n\n            str = str.replace(/(\\t)/g, '  ');\n            cars = str.split('\\n');\n\n            if (typeof maxWidth !== 'undefined') {\n              totalHeight = 0;\n              for (ii = 0; ii < cars.length; ii++) {\n                line = '';\n                words = cars[ii].split(' ');\n                for (n = 0; n < words.length; n++) {\n                  testLine = ''.concat(line + words[n], ' ');\n                  testWidth = this.textWidth(testLine);\n                  if (testWidth > maxWidth) {\n                    var currentWord = words[n];\n                    for (var index = 0; index < currentWord.length; index++) {\n                      testLine = ''.concat(line + currentWord[index]);\n                      testWidth = this.textWidth(testLine);\n                      if (testWidth > maxWidth && line.length > 0) {\n                        line = ''.concat(currentWord[index]);\n                        totalHeight += p.textLeading();\n                      } else {\n                        line = testLine;\n                      }\n                    }\n                    line = ''.concat(line, ' ');\n                  } else {\n                    line = testLine;\n                  }\n                }\n                if (ii < cars.length - 1) {\n                  totalHeight += p.textLeading();\n                }\n              }\n\n              if (this._rectMode === constants.CENTER) {\n                x -= maxWidth / 2;\n                y -= maxHeight / 2;\n              }\n\n              switch (this._textAlign) {\n                case constants.CENTER:\n                  x += maxWidth / 2;\n                  break;\n                case constants.RIGHT:\n                  x += maxWidth;\n                  break;\n              }\n\n              var baselineHacked = false;\n              if (typeof maxHeight !== 'undefined') {\n                switch (this._textBaseline) {\n                  case constants.BOTTOM:\n                    shiftedY = y + (maxHeight - totalHeight);\n                    y = Math.max(shiftedY, y);\n                    break;\n                  case constants.CENTER:\n                    shiftedY = y + (maxHeight - totalHeight) / 2;\n                    y = Math.max(shiftedY, y);\n                    break;\n                  case constants.BASELINE:\n                    baselineHacked = true;\n                    this._textBaseline = constants.TOP;\n                    break;\n                }\n\n                // remember the max-allowed y-position for any line (fix to #928)\n                finalMaxHeight = y + maxHeight - p.textAscent();\n              }\n\n              for (ii = 0; ii < cars.length; ii++) {\n                line = '';\n                words = cars[ii].split(' ');\n                for (n = 0; n < words.length; n++) {\n                  testLine = ''.concat(line + words[n], ' ');\n                  testWidth = this.textWidth(testLine);\n                  if (testWidth > maxWidth) {\n                    var _currentWord = words[n];\n                    for (var _index = 0; _index < _currentWord.length; _index++) {\n                      testLine = ''.concat(line + _currentWord[_index]);\n                      testWidth = this.textWidth(testLine);\n                      if (testWidth > maxWidth && line.length > 0) {\n                        var lastChar = line.slice(-1);\n                        var shouldAddHyphen = lastChar !== '\\n' && lastChar !== ' ';\n                        line = ''.concat(line).concat(shouldAddHyphen ? '-' : '');\n\n                        this._renderText(p, line, x, y, finalMaxHeight);\n                        y += p.textLeading();\n\n                        line = ''.concat(_currentWord[_index]);\n                      } else {\n                        line = testLine;\n                      }\n                    }\n                    line = ''.concat(line, ' ');\n                  } else {\n                    line = testLine;\n                  }\n                }\n\n                this._renderText(p, line, x, y, finalMaxHeight);\n                y += p.textLeading();\n\n                if (baselineHacked) {\n                  this._textBaseline = constants.BASELINE;\n                }\n              }\n            } else {\n              // Offset to account for vertically centering multiple lines of text - no\n              // need to adjust anything for vertical align top or baseline\n              var offset = 0;\n\n              var vAlign = p.textAlign().vertical;\n              if (vAlign === constants.CENTER) {\n                offset = (cars.length - 1) * p.textLeading() / 2;\n              } else if (vAlign === constants.BOTTOM) {\n                offset = (cars.length - 1) * p.textLeading();\n              }\n\n              for (jj = 0; jj < cars.length; jj++) {\n                this._renderText(p, cars[jj], x, y - offset, finalMaxHeight);\n                y += p.textLeading();\n              }\n            }\n\n            return p;\n          };\n\n          _main.default.Renderer.prototype._applyDefaults = function() {\n            return this;\n          };\n\n          /**\n           * Helper fxn to check font type (system or otf)\n           */\n          _main.default.Renderer.prototype._isOpenType = function() {\n            var f =\n              arguments.length > 0 && arguments[0] !== undefined\n                ? arguments[0]\n                : this._textFont;\n            return _typeof(f) === 'object' && f.font && f.font.supported;\n          };\n\n          _main.default.Renderer.prototype._updateTextMetrics = function() {\n            if (this._isOpenType()) {\n              this._setProperty('_textAscent', this._textFont._textAscent());\n              this._setProperty('_textDescent', this._textFont._textDescent());\n              return this;\n            }\n\n            // Adapted from http://stackoverflow.com/a/25355178\n            var text = document.createElement('span');\n            text.style.fontFamily = this._textFont;\n            text.style.fontSize = ''.concat(this._textSize, 'px');\n            text.innerHTML = 'ABCjgq|';\n\n            var block = document.createElement('div');\n            block.style.display = 'inline-block';\n            block.style.width = '1px';\n            block.style.height = '0px';\n\n            var container = document.createElement('div');\n            container.appendChild(text);\n            container.appendChild(block);\n\n            container.style.height = '0px';\n            container.style.overflow = 'hidden';\n            document.body.appendChild(container);\n\n            block.style.verticalAlign = 'baseline';\n            var blockOffset = calculateOffset(block);\n            var textOffset = calculateOffset(text);\n            var ascent = blockOffset[1] - textOffset[1];\n\n            block.style.verticalAlign = 'bottom';\n            blockOffset = calculateOffset(block);\n            textOffset = calculateOffset(text);\n            var height = blockOffset[1] - textOffset[1];\n            var descent = height - ascent;\n\n            document.body.removeChild(container);\n\n            this._setProperty('_textAscent', ascent);\n            this._setProperty('_textDescent', descent);\n\n            return this;\n          };\n\n          /**\n           * Helper fxn to measure ascent and descent.\n           * Adapted from http://stackoverflow.com/a/25355178\n           */\n          function calculateOffset(object) {\n            var currentLeft = 0,\n              currentTop = 0;\n            if (object.offsetParent) {\n              do {\n                currentLeft += object.offsetLeft;\n                currentTop += object.offsetTop;\n              } while ((object = object.offsetParent));\n            } else {\n              currentLeft += object.offsetLeft;\n              currentTop += object.offsetTop;\n            }\n            return [currentLeft, currentTop];\n          }\n          var _default = _main.default.Renderer;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, './main': 59 }\n      ],\n      63: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          var constants = _interopRequireWildcard(_dereq_('./constants'));\n          var _filters = _interopRequireDefault(_dereq_('../image/filters'));\n\n          _dereq_('./p5.Renderer');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n\n          /**\n           * p5.Renderer2D\n           * The 2D graphics canvas renderer class.\n           * extends p5.Renderer\n           */\n          var styleEmpty = 'rgba(0,0,0,0)';\n          // const alphaThreshold = 0.00125; // minimum visible\n\n          _main.default.Renderer2D = function(elt, pInst, isMainCanvas) {\n            _main.default.Renderer.call(this, elt, pInst, isMainCanvas);\n            this.drawingContext = this.canvas.getContext('2d');\n            this._pInst._setProperty('drawingContext', this.drawingContext);\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype = Object.create(\n            _main.default.Renderer.prototype\n          );\n\n          _main.default.Renderer2D.prototype._applyDefaults = function() {\n            this._cachedFillStyle = this._cachedStrokeStyle = undefined;\n            this._cachedBlendMode = constants.BLEND;\n            this._setFill(constants._DEFAULT_FILL);\n            this._setStroke(constants._DEFAULT_STROKE);\n            this.drawingContext.lineCap = constants.ROUND;\n            this.drawingContext.font = 'normal 12px sans-serif';\n          };\n\n          _main.default.Renderer2D.prototype.resize = function(w, h) {\n            _main.default.Renderer.prototype.resize.call(this, w, h);\n            this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n          };\n\n          //////////////////////////////////////////////\n          // COLOR | Setting\n          //////////////////////////////////////////////\n\n          _main.default.Renderer2D.prototype.background = function() {\n            this.drawingContext.save();\n            this.resetMatrix();\n\n            if (\n              (arguments.length <= 0 ? undefined : arguments[0]) instanceof\n              _main.default.Image\n            ) {\n              this._pInst.image(\n                arguments.length <= 0 ? undefined : arguments[0],\n                0,\n                0,\n                this.width,\n                this.height\n              );\n            } else {\n              var _this$_pInst;\n              var curFill = this._getFill();\n              // create background rect\n              var color = (_this$_pInst = this._pInst).color.apply(_this$_pInst, arguments);\n\n              //accessible Outputs\n              if (this._pInst._addAccsOutput()) {\n                this._pInst._accsBackground(color.levels);\n              }\n\n              var newFill = color.toString();\n              this._setFill(newFill);\n\n              if (this._isErasing) {\n                this.blendMode(this._cachedBlendMode);\n              }\n\n              this.drawingContext.fillRect(0, 0, this.width, this.height);\n              // reset fill\n              this._setFill(curFill);\n\n              if (this._isErasing) {\n                this._pInst.erase();\n              }\n            }\n            this.drawingContext.restore();\n          };\n\n          _main.default.Renderer2D.prototype.clear = function() {\n            this.drawingContext.save();\n            this.resetMatrix();\n            this.drawingContext.clearRect(0, 0, this.width, this.height);\n            this.drawingContext.restore();\n          };\n\n          _main.default.Renderer2D.prototype.fill = function() {\n            var _this$_pInst2;\n            var color = (_this$_pInst2 = this._pInst).color.apply(_this$_pInst2, arguments);\n            this._setFill(color.toString());\n\n            //accessible Outputs\n            if (this._pInst._addAccsOutput()) {\n              this._pInst._accsCanvasColors('fill', color.levels);\n            }\n          };\n\n          _main.default.Renderer2D.prototype.stroke = function() {\n            var _this$_pInst3;\n            var color = (_this$_pInst3 = this._pInst).color.apply(_this$_pInst3, arguments);\n            this._setStroke(color.toString());\n\n            //accessible Outputs\n            if (this._pInst._addAccsOutput()) {\n              this._pInst._accsCanvasColors('stroke', color.levels);\n            }\n          };\n\n          _main.default.Renderer2D.prototype.erase = function(opacityFill, opacityStroke) {\n            if (!this._isErasing) {\n              // cache the fill style\n              this._cachedFillStyle = this.drawingContext.fillStyle;\n              var newFill = this._pInst.color(255, opacityFill).toString();\n              this.drawingContext.fillStyle = newFill;\n\n              //cache the stroke style\n              this._cachedStrokeStyle = this.drawingContext.strokeStyle;\n              var newStroke = this._pInst.color(255, opacityStroke).toString();\n              this.drawingContext.strokeStyle = newStroke;\n\n              //cache blendMode\n              var tempBlendMode = this._cachedBlendMode;\n              this.blendMode(constants.REMOVE);\n              this._cachedBlendMode = tempBlendMode;\n\n              this._isErasing = true;\n            }\n          };\n\n          _main.default.Renderer2D.prototype.noErase = function() {\n            if (this._isErasing) {\n              this.drawingContext.fillStyle = this._cachedFillStyle;\n              this.drawingContext.strokeStyle = this._cachedStrokeStyle;\n\n              this.blendMode(this._cachedBlendMode);\n              this._isErasing = false;\n            }\n          };\n\n          //////////////////////////////////////////////\n          // IMAGE | Loading & Displaying\n          //////////////////////////////////////////////\n\n          _main.default.Renderer2D.prototype.image = function(\n            img,\n            sx,\n            sy,\n            sWidth,\n            sHeight,\n            dx,\n            dy,\n            dWidth,\n            dHeight\n          ) {\n            var cnv;\n            if (img.gifProperties) {\n              img._animateGif(this._pInst);\n            }\n\n            try {\n              if (this._tint) {\n                if (\n                  _main.default.MediaElement &&\n                  img instanceof _main.default.MediaElement\n                ) {\n                  img.loadPixels();\n                }\n                if (img.canvas) {\n                  cnv = this._getTintedImageCanvas(img);\n                }\n              }\n              if (!cnv) {\n                cnv = img.canvas || img.elt;\n              }\n              var s = 1;\n              if (img.width && img.width > 0) {\n                s = cnv.width / img.width;\n              }\n              if (this._isErasing) {\n                this.blendMode(this._cachedBlendMode);\n              }\n              this.drawingContext.drawImage(\n                cnv,\n                s * sx,\n                s * sy,\n                s * sWidth,\n                s * sHeight,\n                dx,\n                dy,\n                dWidth,\n                dHeight\n              );\n\n              if (this._isErasing) {\n                this._pInst.erase();\n              }\n            } catch (e) {\n              if (e.name !== 'NS_ERROR_NOT_AVAILABLE') {\n                throw e;\n              }\n            }\n          };\n\n          _main.default.Renderer2D.prototype._getTintedImageCanvas = function(img) {\n            if (!img.canvas) {\n              return img;\n            }\n            var pixels = _filters.default._toPixels(img.canvas);\n            var tmpCanvas = document.createElement('canvas');\n            tmpCanvas.width = img.canvas.width;\n            tmpCanvas.height = img.canvas.height;\n            var tmpCtx = tmpCanvas.getContext('2d');\n            var id = tmpCtx.createImageData(img.canvas.width, img.canvas.height);\n            var newPixels = id.data;\n            for (var i = 0; i < pixels.length; i += 4) {\n              var r = pixels[i];\n              var g = pixels[i + 1];\n              var b = pixels[i + 2];\n              var a = pixels[i + 3];\n              newPixels[i] = r * this._tint[0] / 255;\n              newPixels[i + 1] = g * this._tint[1] / 255;\n              newPixels[i + 2] = b * this._tint[2] / 255;\n              newPixels[i + 3] = a * this._tint[3] / 255;\n            }\n            tmpCtx.putImageData(id, 0, 0);\n            return tmpCanvas;\n          };\n\n          //////////////////////////////////////////////\n          // IMAGE | Pixels\n          //////////////////////////////////////////////\n\n          _main.default.Renderer2D.prototype.blendMode = function(mode) {\n            if (mode === constants.SUBTRACT) {\n              console.warn('blendMode(SUBTRACT) only works in WEBGL mode.');\n            } else if (\n              mode === constants.BLEND ||\n              mode === constants.REMOVE ||\n              mode === constants.DARKEST ||\n              mode === constants.LIGHTEST ||\n              mode === constants.DIFFERENCE ||\n              mode === constants.MULTIPLY ||\n              mode === constants.EXCLUSION ||\n              mode === constants.SCREEN ||\n              mode === constants.REPLACE ||\n              mode === constants.OVERLAY ||\n              mode === constants.HARD_LIGHT ||\n              mode === constants.SOFT_LIGHT ||\n              mode === constants.DODGE ||\n              mode === constants.BURN ||\n              mode === constants.ADD\n            ) {\n              this._cachedBlendMode = mode;\n              this.drawingContext.globalCompositeOperation = mode;\n            } else {\n              throw new Error('Mode '.concat(mode, ' not recognized.'));\n            }\n          };\n\n          _main.default.Renderer2D.prototype.blend = function() {\n            var currBlend = this.drawingContext.globalCompositeOperation;\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            var blendMode = args[args.length - 1];\n\n            var copyArgs = Array.prototype.slice.call(args, 0, args.length - 1);\n\n            this.drawingContext.globalCompositeOperation = blendMode;\n\n            _main.default.prototype.copy.apply(this, copyArgs);\n\n            this.drawingContext.globalCompositeOperation = currBlend;\n          };\n\n          // p5.Renderer2D.prototype.get = p5.Renderer.prototype.get;\n          // .get() is not overridden\n\n          // x,y are canvas-relative (pre-scaled by _pixelDensity)\n          _main.default.Renderer2D.prototype._getPixel = function(x, y) {\n            var imageData, index;\n            imageData = this.drawingContext.getImageData(x, y, 1, 1).data;\n            index = 0;\n            return [\n              imageData[index + 0],\n              imageData[index + 1],\n              imageData[index + 2],\n              imageData[index + 3]\n            ];\n          };\n\n          _main.default.Renderer2D.prototype.loadPixels = function() {\n            var pixelsState = this._pixelsState; // if called by p5.Image\n\n            var pd = pixelsState._pixelDensity;\n            var w = this.width * pd;\n            var h = this.height * pd;\n            var imageData = this.drawingContext.getImageData(0, 0, w, h);\n            // @todo this should actually set pixels per object, so diff buffers can\n            // have diff pixel arrays.\n            pixelsState._setProperty('imageData', imageData);\n            pixelsState._setProperty('pixels', imageData.data);\n          };\n\n          _main.default.Renderer2D.prototype.set = function(x, y, imgOrCol) {\n            // round down to get integer numbers\n            x = Math.floor(x);\n            y = Math.floor(y);\n            var pixelsState = this._pixelsState;\n            if (imgOrCol instanceof _main.default.Image) {\n              this.drawingContext.save();\n              this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);\n              this.drawingContext.scale(\n                pixelsState._pixelDensity,\n                pixelsState._pixelDensity\n              );\n\n              this.drawingContext.clearRect(x, y, imgOrCol.width, imgOrCol.height);\n              this.drawingContext.drawImage(imgOrCol.canvas, x, y);\n              this.drawingContext.restore();\n            } else {\n              var r = 0,\n                g = 0,\n                b = 0,\n                a = 0;\n              var idx =\n                4 *\n                (y * pixelsState._pixelDensity * (this.width * pixelsState._pixelDensity) +\n                  x * pixelsState._pixelDensity);\n              if (!pixelsState.imageData) {\n                pixelsState.loadPixels.call(pixelsState);\n              }\n              if (typeof imgOrCol === 'number') {\n                if (idx < pixelsState.pixels.length) {\n                  r = imgOrCol;\n                  g = imgOrCol;\n                  b = imgOrCol;\n                  a = 255;\n                  //this.updatePixels.call(this);\n                }\n              } else if (imgOrCol instanceof Array) {\n                if (imgOrCol.length < 4) {\n                  throw new Error('pixel array must be of the form [R, G, B, A]');\n                }\n                if (idx < pixelsState.pixels.length) {\n                  r = imgOrCol[0];\n                  g = imgOrCol[1];\n                  b = imgOrCol[2];\n                  a = imgOrCol[3];\n                  //this.updatePixels.call(this);\n                }\n              } else if (imgOrCol instanceof _main.default.Color) {\n                if (idx < pixelsState.pixels.length) {\n                  r = imgOrCol.levels[0];\n                  g = imgOrCol.levels[1];\n                  b = imgOrCol.levels[2];\n                  a = imgOrCol.levels[3];\n                  //this.updatePixels.call(this);\n                }\n              }\n              // loop over pixelDensity * pixelDensity\n              for (var i = 0; i < pixelsState._pixelDensity; i++) {\n                for (var j = 0; j < pixelsState._pixelDensity; j++) {\n                  // loop over\n                  idx =\n                    4 *\n                    ((y * pixelsState._pixelDensity + j) *\n                      this.width *\n                      pixelsState._pixelDensity +\n                      (x * pixelsState._pixelDensity + i));\n                  pixelsState.pixels[idx] = r;\n                  pixelsState.pixels[idx + 1] = g;\n                  pixelsState.pixels[idx + 2] = b;\n                  pixelsState.pixels[idx + 3] = a;\n                }\n              }\n            }\n          };\n\n          _main.default.Renderer2D.prototype.updatePixels = function(x, y, w, h) {\n            var pixelsState = this._pixelsState;\n            var pd = pixelsState._pixelDensity;\n            if (x === undefined && y === undefined && w === undefined && h === undefined) {\n              x = 0;\n              y = 0;\n              w = this.width;\n              h = this.height;\n            }\n            x *= pd;\n            y *= pd;\n            w *= pd;\n            h *= pd;\n\n            if (this.gifProperties) {\n              this.gifProperties.frames[this.gifProperties.displayIndex].image =\n                pixelsState.imageData;\n            }\n\n            this.drawingContext.putImageData(pixelsState.imageData, x, y, 0, 0, w, h);\n          };\n\n          //////////////////////////////////////////////\n          // SHAPE | 2D Primitives\n          //////////////////////////////////////////////\n\n          /**\n           * Generate a cubic Bezier representing an arc on the unit circle of total\n           * angle `size` radians, beginning `start` radians above the x-axis. Up to\n           * four of these curves are combined to make a full arc.\n           *\n           * See www.joecridge.me/bezier.pdf for an explanation of the method.\n           */\n          _main.default.Renderer2D.prototype._acuteArcToBezier = function _acuteArcToBezier(\n            start,\n            size\n          ) {\n            // Evaluate constants.\n            var alpha = size / 2.0,\n              cos_alpha = Math.cos(alpha),\n              sin_alpha = Math.sin(alpha),\n              cot_alpha = 1.0 / Math.tan(alpha),\n              // This is how far the arc needs to be rotated.\n              phi = start + alpha,\n              cos_phi = Math.cos(phi),\n              sin_phi = Math.sin(phi),\n              lambda = (4.0 - cos_alpha) / 3.0,\n              mu = sin_alpha + (cos_alpha - lambda) * cot_alpha;\n\n            // Return rotated waypoints.\n            return {\n              ax: Math.cos(start).toFixed(7),\n              ay: Math.sin(start).toFixed(7),\n              bx: (lambda * cos_phi + mu * sin_phi).toFixed(7),\n              by: (lambda * sin_phi - mu * cos_phi).toFixed(7),\n              cx: (lambda * cos_phi - mu * sin_phi).toFixed(7),\n              cy: (lambda * sin_phi + mu * cos_phi).toFixed(7),\n              dx: Math.cos(start + size).toFixed(7),\n              dy: Math.sin(start + size).toFixed(7)\n            };\n          };\n\n          /*\n    * This function requires that:\n    *\n    *   0 <= start < TWO_PI\n    *\n    *   start <= stop < start + TWO_PI\n    */\n          _main.default.Renderer2D.prototype.arc = function(x, y, w, h, start, stop, mode) {\n            var ctx = this.drawingContext;\n            var rx = w / 2.0;\n            var ry = h / 2.0;\n            var epsilon = 0.00001; // Smallest visible angle on displays up to 4K.\n            var arcToDraw = 0;\n            var curves = [];\n\n            x += rx;\n            y += ry;\n\n            // Create curves\n            while (stop - start >= epsilon) {\n              arcToDraw = Math.min(stop - start, constants.HALF_PI);\n              curves.push(this._acuteArcToBezier(start, arcToDraw));\n              start += arcToDraw;\n            }\n\n            // Fill curves\n            if (this._doFill) {\n              ctx.beginPath();\n              curves.forEach(function(curve, index) {\n                if (index === 0) {\n                  ctx.moveTo(x + curve.ax * rx, y + curve.ay * ry);\n                }\n                // prettier-ignore\n                ctx.bezierCurveTo(x + curve.bx * rx, y + curve.by * ry,\n      x + curve.cx * rx, y + curve.cy * ry,\n      x + curve.dx * rx, y + curve.dy * ry);\n              });\n              if (mode === constants.PIE || mode == null) {\n                ctx.lineTo(x, y);\n              }\n              ctx.closePath();\n              ctx.fill();\n            }\n\n            // Stroke curves\n            if (this._doStroke) {\n              ctx.beginPath();\n              curves.forEach(function(curve, index) {\n                if (index === 0) {\n                  ctx.moveTo(x + curve.ax * rx, y + curve.ay * ry);\n                }\n                // prettier-ignore\n                ctx.bezierCurveTo(x + curve.bx * rx, y + curve.by * ry,\n      x + curve.cx * rx, y + curve.cy * ry,\n      x + curve.dx * rx, y + curve.dy * ry);\n              });\n              if (mode === constants.PIE) {\n                ctx.lineTo(x, y);\n                ctx.closePath();\n              } else if (mode === constants.CHORD) {\n                ctx.closePath();\n              }\n              ctx.stroke();\n            }\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.ellipse = function(args) {\n            var ctx = this.drawingContext;\n            var doFill = this._doFill,\n              doStroke = this._doStroke;\n            var x = parseFloat(args[0]),\n              y = parseFloat(args[1]),\n              w = parseFloat(args[2]),\n              h = parseFloat(args[3]);\n            if (doFill && !doStroke) {\n              if (this._getFill() === styleEmpty) {\n                return this;\n              }\n            } else if (!doFill && doStroke) {\n              if (this._getStroke() === styleEmpty) {\n                return this;\n              }\n            }\n            var kappa = 0.5522847498,\n              // control point offset horizontal\n              ox = w / 2 * kappa,\n              // control point offset vertical\n              oy = h / 2 * kappa,\n              // x-end\n              xe = x + w,\n              // y-end\n              ye = y + h,\n              // x-middle\n              xm = x + w / 2,\n              ym = y + h / 2; // y-middle\n            ctx.beginPath();\n            ctx.moveTo(x, ym);\n            ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n            ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n            ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n            ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n            if (doFill) {\n              ctx.fill();\n            }\n            if (doStroke) {\n              ctx.stroke();\n            }\n          };\n\n          _main.default.Renderer2D.prototype.line = function(x1, y1, x2, y2) {\n            var ctx = this.drawingContext;\n            if (!this._doStroke) {\n              return this;\n            } else if (this._getStroke() === styleEmpty) {\n              return this;\n            }\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.point = function(x, y) {\n            var ctx = this.drawingContext;\n            if (!this._doStroke) {\n              return this;\n            } else if (this._getStroke() === styleEmpty) {\n              return this;\n            }\n            var s = this._getStroke();\n            var f = this._getFill();\n            x = Math.round(x);\n            y = Math.round(y);\n            // swapping fill color to stroke and back after for correct point rendering\n            this._setFill(s);\n            if (ctx.lineWidth > 1) {\n              ctx.beginPath();\n              ctx.arc(x, y, ctx.lineWidth / 2, 0, constants.TWO_PI, false);\n              ctx.fill();\n            } else {\n              ctx.fillRect(x, y, 1, 1);\n            }\n            this._setFill(f);\n          };\n\n          _main.default.Renderer2D.prototype.quad = function(\n            x1,\n            y1,\n            x2,\n            y2,\n            x3,\n            y3,\n            x4,\n            y4\n          ) {\n            var ctx = this.drawingContext;\n            var doFill = this._doFill,\n              doStroke = this._doStroke;\n            if (doFill && !doStroke) {\n              if (this._getFill() === styleEmpty) {\n                return this;\n              }\n            } else if (!doFill && doStroke) {\n              if (this._getStroke() === styleEmpty) {\n                return this;\n              }\n            }\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.lineTo(x3, y3);\n            ctx.lineTo(x4, y4);\n            ctx.closePath();\n            if (doFill) {\n              ctx.fill();\n            }\n            if (doStroke) {\n              ctx.stroke();\n            }\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.rect = function(args) {\n            var x = args[0];\n            var y = args[1];\n            var w = args[2];\n            var h = args[3];\n            var tl = args[4];\n            var tr = args[5];\n            var br = args[6];\n            var bl = args[7];\n            var ctx = this.drawingContext;\n            var doFill = this._doFill,\n              doStroke = this._doStroke;\n            if (doFill && !doStroke) {\n              if (this._getFill() === styleEmpty) {\n                return this;\n              }\n            } else if (!doFill && doStroke) {\n              if (this._getStroke() === styleEmpty) {\n                return this;\n              }\n            }\n            ctx.beginPath();\n\n            if (typeof tl === 'undefined') {\n              // No rounded corners\n              ctx.rect(x, y, w, h);\n            } else {\n              // At least one rounded corner\n              // Set defaults when not specified\n              if (typeof tr === 'undefined') {\n                tr = tl;\n              }\n              if (typeof br === 'undefined') {\n                br = tr;\n              }\n              if (typeof bl === 'undefined') {\n                bl = br;\n              }\n\n              // corner rounding must always be positive\n              var absW = Math.abs(w);\n              var absH = Math.abs(h);\n              var hw = absW / 2;\n              var hh = absH / 2;\n\n              // Clip radii\n              if (absW < 2 * tl) {\n                tl = hw;\n              }\n              if (absH < 2 * tl) {\n                tl = hh;\n              }\n              if (absW < 2 * tr) {\n                tr = hw;\n              }\n              if (absH < 2 * tr) {\n                tr = hh;\n              }\n              if (absW < 2 * br) {\n                br = hw;\n              }\n              if (absH < 2 * br) {\n                br = hh;\n              }\n              if (absW < 2 * bl) {\n                bl = hw;\n              }\n              if (absH < 2 * bl) {\n                bl = hh;\n              }\n\n              // Draw shape\n              ctx.beginPath();\n              ctx.moveTo(x + tl, y);\n              ctx.arcTo(x + w, y, x + w, y + h, tr);\n              ctx.arcTo(x + w, y + h, x, y + h, br);\n              ctx.arcTo(x, y + h, x, y, bl);\n              ctx.arcTo(x, y, x + w, y, tl);\n              ctx.closePath();\n            }\n            if (this._doFill) {\n              ctx.fill();\n            }\n            if (this._doStroke) {\n              ctx.stroke();\n            }\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.triangle = function(args) {\n            var ctx = this.drawingContext;\n            var doFill = this._doFill,\n              doStroke = this._doStroke;\n            var x1 = args[0],\n              y1 = args[1];\n            var x2 = args[2],\n              y2 = args[3];\n            var x3 = args[4],\n              y3 = args[5];\n            if (doFill && !doStroke) {\n              if (this._getFill() === styleEmpty) {\n                return this;\n              }\n            } else if (!doFill && doStroke) {\n              if (this._getStroke() === styleEmpty) {\n                return this;\n              }\n            }\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.lineTo(x3, y3);\n            ctx.closePath();\n            if (doFill) {\n              ctx.fill();\n            }\n            if (doStroke) {\n              ctx.stroke();\n            }\n          };\n\n          _main.default.Renderer2D.prototype.endShape = function(\n            mode,\n            vertices,\n            isCurve,\n            isBezier,\n            isQuadratic,\n            isContour,\n            shapeKind\n          ) {\n            if (vertices.length === 0) {\n              return this;\n            }\n            if (!this._doStroke && !this._doFill) {\n              return this;\n            }\n            var closeShape = mode === constants.CLOSE;\n            var v;\n            if (closeShape && !isContour) {\n              vertices.push(vertices[0]);\n            }\n            var i, j;\n            var numVerts = vertices.length;\n            if (isCurve && (shapeKind === constants.POLYGON || shapeKind === null)) {\n              if (numVerts > 3) {\n                var b = [],\n                  s = 1 - this._curveTightness;\n                this.drawingContext.beginPath();\n                this.drawingContext.moveTo(vertices[1][0], vertices[1][1]);\n                for (i = 1; i + 2 < numVerts; i++) {\n                  v = vertices[i];\n                  b[0] = [v[0], v[1]];\n                  b[1] = [\n                    v[0] + (s * vertices[i + 1][0] - s * vertices[i - 1][0]) / 6,\n                    v[1] + (s * vertices[i + 1][1] - s * vertices[i - 1][1]) / 6\n                  ];\n\n                  b[2] = [\n                    vertices[i + 1][0] + (s * vertices[i][0] - s * vertices[i + 2][0]) / 6,\n                    vertices[i + 1][1] + (s * vertices[i][1] - s * vertices[i + 2][1]) / 6\n                  ];\n\n                  b[3] = [vertices[i + 1][0], vertices[i + 1][1]];\n                  this.drawingContext.bezierCurveTo(\n                    b[1][0],\n                    b[1][1],\n                    b[2][0],\n                    b[2][1],\n                    b[3][0],\n                    b[3][1]\n                  );\n                }\n                if (closeShape) {\n                  this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);\n                }\n                this._doFillStrokeClose(closeShape);\n              }\n            } else if (\n              isBezier &&\n              (shapeKind === constants.POLYGON || shapeKind === null)\n            ) {\n              this.drawingContext.beginPath();\n              for (i = 0; i < numVerts; i++) {\n                if (vertices[i].isVert) {\n                  if (vertices[i].moveTo) {\n                    this.drawingContext.moveTo(vertices[i][0], vertices[i][1]);\n                  } else {\n                    this.drawingContext.lineTo(vertices[i][0], vertices[i][1]);\n                  }\n                } else {\n                  this.drawingContext.bezierCurveTo(\n                    vertices[i][0],\n                    vertices[i][1],\n                    vertices[i][2],\n                    vertices[i][3],\n                    vertices[i][4],\n                    vertices[i][5]\n                  );\n                }\n              }\n              this._doFillStrokeClose(closeShape);\n            } else if (\n              isQuadratic &&\n              (shapeKind === constants.POLYGON || shapeKind === null)\n            ) {\n              this.drawingContext.beginPath();\n              for (i = 0; i < numVerts; i++) {\n                if (vertices[i].isVert) {\n                  if (vertices[i].moveTo) {\n                    this.drawingContext.moveTo(vertices[i][0], vertices[i][1]);\n                  } else {\n                    this.drawingContext.lineTo(vertices[i][0], vertices[i][1]);\n                  }\n                } else {\n                  this.drawingContext.quadraticCurveTo(\n                    vertices[i][0],\n                    vertices[i][1],\n                    vertices[i][2],\n                    vertices[i][3]\n                  );\n                }\n              }\n              this._doFillStrokeClose(closeShape);\n            } else {\n              if (shapeKind === constants.POINTS) {\n                for (i = 0; i < numVerts; i++) {\n                  v = vertices[i];\n                  if (this._doStroke) {\n                    this._pInst.stroke(v[6]);\n                  }\n                  this._pInst.point(v[0], v[1]);\n                }\n              } else if (shapeKind === constants.LINES) {\n                for (i = 0; i + 1 < numVerts; i += 2) {\n                  v = vertices[i];\n                  if (this._doStroke) {\n                    this._pInst.stroke(vertices[i + 1][6]);\n                  }\n                  this._pInst.line(v[0], v[1], vertices[i + 1][0], vertices[i + 1][1]);\n                }\n              } else if (shapeKind === constants.TRIANGLES) {\n                for (i = 0; i + 2 < numVerts; i += 3) {\n                  v = vertices[i];\n                  this.drawingContext.beginPath();\n                  this.drawingContext.moveTo(v[0], v[1]);\n                  this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);\n                  this.drawingContext.lineTo(vertices[i + 2][0], vertices[i + 2][1]);\n                  this.drawingContext.closePath();\n                  if (this._doFill) {\n                    this._pInst.fill(vertices[i + 2][5]);\n                    this.drawingContext.fill();\n                  }\n                  if (this._doStroke) {\n                    this._pInst.stroke(vertices[i + 2][6]);\n                    this.drawingContext.stroke();\n                  }\n                }\n              } else if (shapeKind === constants.TRIANGLE_STRIP) {\n                for (i = 0; i + 1 < numVerts; i++) {\n                  v = vertices[i];\n                  this.drawingContext.beginPath();\n                  this.drawingContext.moveTo(vertices[i + 1][0], vertices[i + 1][1]);\n                  this.drawingContext.lineTo(v[0], v[1]);\n                  if (this._doStroke) {\n                    this._pInst.stroke(vertices[i + 1][6]);\n                  }\n                  if (this._doFill) {\n                    this._pInst.fill(vertices[i + 1][5]);\n                  }\n                  if (i + 2 < numVerts) {\n                    this.drawingContext.lineTo(vertices[i + 2][0], vertices[i + 2][1]);\n                    if (this._doStroke) {\n                      this._pInst.stroke(vertices[i + 2][6]);\n                    }\n                    if (this._doFill) {\n                      this._pInst.fill(vertices[i + 2][5]);\n                    }\n                  }\n                  this._doFillStrokeClose(closeShape);\n                }\n              } else if (shapeKind === constants.TRIANGLE_FAN) {\n                if (numVerts > 2) {\n                  // For performance reasons, try to batch as many of the\n                  // fill and stroke calls as possible.\n                  this.drawingContext.beginPath();\n                  for (i = 2; i < numVerts; i++) {\n                    v = vertices[i];\n                    this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);\n                    this.drawingContext.lineTo(vertices[i - 1][0], vertices[i - 1][1]);\n                    this.drawingContext.lineTo(v[0], v[1]);\n                    this.drawingContext.lineTo(vertices[0][0], vertices[0][1]);\n                    // If the next colour is going to be different, stroke / fill now\n                    if (i < numVerts - 1) {\n                      if (\n                        (this._doFill && v[5] !== vertices[i + 1][5]) ||\n                        (this._doStroke && v[6] !== vertices[i + 1][6])\n                      ) {\n                        if (this._doFill) {\n                          this._pInst.fill(v[5]);\n                          this.drawingContext.fill();\n                          this._pInst.fill(vertices[i + 1][5]);\n                        }\n                        if (this._doStroke) {\n                          this._pInst.stroke(v[6]);\n                          this.drawingContext.stroke();\n                          this._pInst.stroke(vertices[i + 1][6]);\n                        }\n                        this.drawingContext.closePath();\n                        this.drawingContext.beginPath(); // Begin the next one\n                      }\n                    }\n                  }\n                  this._doFillStrokeClose(closeShape);\n                }\n              } else if (shapeKind === constants.QUADS) {\n                for (i = 0; i + 3 < numVerts; i += 4) {\n                  v = vertices[i];\n                  this.drawingContext.beginPath();\n                  this.drawingContext.moveTo(v[0], v[1]);\n                  for (j = 1; j < 4; j++) {\n                    this.drawingContext.lineTo(vertices[i + j][0], vertices[i + j][1]);\n                  }\n                  this.drawingContext.lineTo(v[0], v[1]);\n                  if (this._doFill) {\n                    this._pInst.fill(vertices[i + 3][5]);\n                  }\n                  if (this._doStroke) {\n                    this._pInst.stroke(vertices[i + 3][6]);\n                  }\n                  this._doFillStrokeClose(closeShape);\n                }\n              } else if (shapeKind === constants.QUAD_STRIP) {\n                if (numVerts > 3) {\n                  for (i = 0; i + 1 < numVerts; i += 2) {\n                    v = vertices[i];\n                    this.drawingContext.beginPath();\n                    if (i + 3 < numVerts) {\n                      this.drawingContext.moveTo(vertices[i + 2][0], vertices[i + 2][1]);\n                      this.drawingContext.lineTo(v[0], v[1]);\n                      this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);\n                      this.drawingContext.lineTo(vertices[i + 3][0], vertices[i + 3][1]);\n                      if (this._doFill) {\n                        this._pInst.fill(vertices[i + 3][5]);\n                      }\n                      if (this._doStroke) {\n                        this._pInst.stroke(vertices[i + 3][6]);\n                      }\n                    } else {\n                      this.drawingContext.moveTo(v[0], v[1]);\n                      this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);\n                    }\n                    this._doFillStrokeClose(closeShape);\n                  }\n                }\n              } else {\n                this.drawingContext.beginPath();\n                this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);\n                for (i = 1; i < numVerts; i++) {\n                  v = vertices[i];\n                  if (v.isVert) {\n                    if (v.moveTo) {\n                      this.drawingContext.moveTo(v[0], v[1]);\n                    } else {\n                      this.drawingContext.lineTo(v[0], v[1]);\n                    }\n                  }\n                }\n                this._doFillStrokeClose(closeShape);\n              }\n            }\n            isCurve = false;\n            isBezier = false;\n            isQuadratic = false;\n            isContour = false;\n            if (closeShape) {\n              vertices.pop();\n            }\n\n            return this;\n          };\n          //////////////////////////////////////////////\n          // SHAPE | Attributes\n          //////////////////////////////////////////////\n\n          _main.default.Renderer2D.prototype.strokeCap = function(cap) {\n            if (\n              cap === constants.ROUND ||\n              cap === constants.SQUARE ||\n              cap === constants.PROJECT\n            ) {\n              this.drawingContext.lineCap = cap;\n            }\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.strokeJoin = function(join) {\n            if (\n              join === constants.ROUND ||\n              join === constants.BEVEL ||\n              join === constants.MITER\n            ) {\n              this.drawingContext.lineJoin = join;\n            }\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.strokeWeight = function(w) {\n            if (typeof w === 'undefined' || w === 0) {\n              // hack because lineWidth 0 doesn't work\n              this.drawingContext.lineWidth = 0.0001;\n            } else {\n              this.drawingContext.lineWidth = w;\n            }\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype._getFill = function() {\n            if (!this._cachedFillStyle) {\n              this._cachedFillStyle = this.drawingContext.fillStyle;\n            }\n            return this._cachedFillStyle;\n          };\n\n          _main.default.Renderer2D.prototype._setFill = function(fillStyle) {\n            if (fillStyle !== this._cachedFillStyle) {\n              this.drawingContext.fillStyle = fillStyle;\n              this._cachedFillStyle = fillStyle;\n            }\n          };\n\n          _main.default.Renderer2D.prototype._getStroke = function() {\n            if (!this._cachedStrokeStyle) {\n              this._cachedStrokeStyle = this.drawingContext.strokeStyle;\n            }\n            return this._cachedStrokeStyle;\n          };\n\n          _main.default.Renderer2D.prototype._setStroke = function(strokeStyle) {\n            if (strokeStyle !== this._cachedStrokeStyle) {\n              this.drawingContext.strokeStyle = strokeStyle;\n              this._cachedStrokeStyle = strokeStyle;\n            }\n          };\n\n          //////////////////////////////////////////////\n          // SHAPE | Curves\n          //////////////////////////////////////////////\n          _main.default.Renderer2D.prototype.bezier = function(\n            x1,\n            y1,\n            x2,\n            y2,\n            x3,\n            y3,\n            x4,\n            y4\n          ) {\n            this._pInst.beginShape();\n            this._pInst.vertex(x1, y1);\n            this._pInst.bezierVertex(x2, y2, x3, y3, x4, y4);\n            this._pInst.endShape();\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.curve = function(\n            x1,\n            y1,\n            x2,\n            y2,\n            x3,\n            y3,\n            x4,\n            y4\n          ) {\n            this._pInst.beginShape();\n            this._pInst.curveVertex(x1, y1);\n            this._pInst.curveVertex(x2, y2);\n            this._pInst.curveVertex(x3, y3);\n            this._pInst.curveVertex(x4, y4);\n            this._pInst.endShape();\n            return this;\n          };\n\n          //////////////////////////////////////////////\n          // SHAPE | Vertex\n          //////////////////////////////////////////////\n\n          _main.default.Renderer2D.prototype._doFillStrokeClose = function(closeShape) {\n            if (closeShape) {\n              this.drawingContext.closePath();\n            }\n            if (this._doFill) {\n              this.drawingContext.fill();\n            }\n            if (this._doStroke) {\n              this.drawingContext.stroke();\n            }\n          };\n\n          //////////////////////////////////////////////\n          // TRANSFORM\n          //////////////////////////////////////////////\n\n          _main.default.Renderer2D.prototype.applyMatrix = function(a, b, c, d, e, f) {\n            this.drawingContext.transform(a, b, c, d, e, f);\n          };\n\n          _main.default.Renderer2D.prototype.resetMatrix = function() {\n            this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);\n            this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.rotate = function(rad) {\n            this.drawingContext.rotate(rad);\n          };\n\n          _main.default.Renderer2D.prototype.scale = function(x, y) {\n            this.drawingContext.scale(x, y);\n            return this;\n          };\n\n          _main.default.Renderer2D.prototype.translate = function(x, y) {\n            // support passing a vector as the 1st parameter\n            if (x instanceof _main.default.Vector) {\n              y = x.y;\n              x = x.x;\n            }\n            this.drawingContext.translate(x, y);\n            return this;\n          };\n\n          //////////////////////////////////////////////\n          // TYPOGRAPHY\n          //\n          //////////////////////////////////////////////\n\n          _main.default.Renderer2D.prototype.text = function(\n            str,\n            x,\n            y,\n            maxWidth,\n            maxHeight\n          ) {\n            var baselineHacked;\n\n            // baselineHacked: (HACK)\n            // A temporary fix to conform to Processing's implementation\n            // of BASELINE vertical alignment in a bounding box\n\n            if (typeof maxWidth !== 'undefined') {\n              if (this.drawingContext.textBaseline === constants.BASELINE) {\n                baselineHacked = true;\n                this.drawingContext.textBaseline = constants.TOP;\n              }\n            }\n\n            var p = _main.default.Renderer.prototype.text.apply(this, arguments);\n\n            if (baselineHacked) {\n              this.drawingContext.textBaseline = constants.BASELINE;\n            }\n\n            return p;\n          };\n\n          _main.default.Renderer2D.prototype._renderText = function(p, line, x, y, maxY) {\n            if (y >= maxY) {\n              return; // don't render lines beyond our maxY position\n            }\n\n            p.push(); // fix to #803\n\n            if (!this._isOpenType()) {\n              // a system/browser font\n\n              // no stroke unless specified by user\n              if (this._doStroke && this._strokeSet) {\n                this.drawingContext.strokeText(line, x, y);\n              }\n\n              if (this._doFill) {\n                // if fill hasn't been set by user, use default text fill\n                if (!this._fillSet) {\n                  this._setFill(constants._DEFAULT_TEXT_FILL);\n                }\n\n                this.drawingContext.fillText(line, x, y);\n              }\n            } else {\n              // an opentype font, let it handle the rendering\n\n              this._textFont._renderPath(line, x, y, { renderer: this });\n            }\n\n            p.pop();\n            return p;\n          };\n\n          _main.default.Renderer2D.prototype.textWidth = function(s) {\n            if (this._isOpenType()) {\n              return this._textFont._textWidth(s, this._textSize);\n            }\n\n            return this.drawingContext.measureText(s).width;\n          };\n\n          _main.default.Renderer2D.prototype._applyTextProperties = function() {\n            var font;\n            var p = this._pInst;\n\n            this._setProperty('_textAscent', null);\n            this._setProperty('_textDescent', null);\n\n            font = this._textFont;\n\n            if (this._isOpenType()) {\n              font = this._textFont.font.familyName;\n              this._setProperty('_textStyle', this._textFont.font.styleName);\n            }\n\n            this.drawingContext.font = ''\n              .concat(this._textStyle || 'normal', ' ')\n              .concat(this._textSize || 12, 'px ')\n              .concat(font || 'sans-serif');\n\n            this.drawingContext.textAlign = this._textAlign;\n            if (this._textBaseline === constants.CENTER) {\n              this.drawingContext.textBaseline = constants._CTX_MIDDLE;\n            } else {\n              this.drawingContext.textBaseline = this._textBaseline;\n            }\n\n            return p;\n          };\n\n          //////////////////////////////////////////////\n          // STRUCTURE\n          //////////////////////////////////////////////\n\n          // a push() operation is in progress.\n          // the renderer should return a 'style' object that it wishes to\n          // store on the push stack.\n          // derived renderers should call the base class' push() method\n          // to fetch the base style object.\n          _main.default.Renderer2D.prototype.push = function() {\n            this.drawingContext.save();\n\n            // get the base renderer style\n            return _main.default.Renderer.prototype.push.apply(this);\n          };\n\n          // a pop() operation is in progress\n          // the renderer is passed the 'style' object that it returned\n          // from its push() method.\n          // derived renderers should pass this object to their base\n          // class' pop method\n          _main.default.Renderer2D.prototype.pop = function(style) {\n            this.drawingContext.restore();\n            // Re-cache the fill / stroke state\n            this._cachedFillStyle = this.drawingContext.fillStyle;\n            this._cachedStrokeStyle = this.drawingContext.strokeStyle;\n\n            _main.default.Renderer.prototype.pop.call(this, style);\n          };\n          var _default = _main.default.Renderer2D;\n          exports.default = _default;\n        },\n        { '../image/filters': 80, './constants': 48, './main': 59, './p5.Renderer': 62 }\n      ],\n      64: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n\n          _main.default.prototype._promisePreloads = [\n            /* Example object\n                                            {\n                                              target: p5.prototype, // The target object to have the method modified\n                                              method: 'loadXAsync', // The name of the preload function to wrap\n                                              addCallbacks: true,   // Whether to automatically handle the p5 callbacks\n                                              legacyPreloadSetup: { // Optional object to generate a legacy-style preload\n                                                method: 'loadX',    // The name of the legacy preload function to generate\n                                                createBaseObject: function() {\n                                                  return {};\n                                                } // An optional function to create the base object for the legacy preload.\n                                              }\n                                            }\n                                            */\n          ];\n\n          _main.default.prototype.registerPromisePreload = function(setup) {\n            _main.default.prototype._promisePreloads.push(setup);\n          };\n\n          var initialSetupRan = false;\n\n          _main.default.prototype._setupPromisePreloads = function() {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n            try {\n              for (\n                var _iterator = this._promisePreloads[Symbol.iterator](), _step;\n                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                _iteratorNormalCompletion = true\n              ) {\n                var preloadSetup = _step.value;\n                var thisValue = this;\n                var method = preloadSetup.method,\n                  addCallbacks = preloadSetup.addCallbacks,\n                  legacyPreloadSetup = preloadSetup.legacyPreloadSetup;\n                // Get the target object that the preload gets assigned to by default,\n                // that is the current object.\n                var target = preloadSetup.target || this;\n                var sourceFunction = target[method].bind(target);\n                // If the target is the p5 prototype, then only set it up on the first run per page\n                if (target === _main.default.prototype) {\n                  if (initialSetupRan) {\n                    continue;\n                  }\n                  thisValue = null;\n                  sourceFunction = target[method];\n                }\n\n                // Replace the original method with a wrapped version\n                target[method] = this._wrapPromisePreload(\n                  thisValue,\n                  sourceFunction,\n                  addCallbacks\n                );\n\n                // If a legacy preload is required\n                if (legacyPreloadSetup) {\n                  // What is the name for this legacy preload\n                  var legacyMethod = legacyPreloadSetup.method;\n                  // Wrap the already wrapped Promise-returning method with the legacy setup\n                  target[legacyMethod] = this._legacyPreloadGenerator(\n                    thisValue,\n                    legacyPreloadSetup,\n                    target[method]\n                  );\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n            initialSetupRan = true;\n          };\n\n          _main.default.prototype._wrapPromisePreload = function(\n            thisValue,\n            fn,\n            addCallbacks\n          ) {\n            var replacementFunction = function replacementFunction() {\n              var _this = this;\n              // Uses the current preload counting mechanism for now.\n              this._incrementPreload();\n              // A variable for the callback function if specified\n              var callback = null;\n              // A variable for the errorCallback function if specified\n              var errorCallback = null;\n              for (\n                var _len = arguments.length, args = new Array(_len), _key = 0;\n                _key < _len;\n                _key++\n              ) {\n                args[_key] = arguments[_key];\n              }\n              if (addCallbacks) {\n                // Loop from the end of the args array, pulling up to two functions off of\n                // the end and putting them in fns\n                for (var i = args.length - 1; i >= 0 && !errorCallback; i--) {\n                  if (typeof args[i] !== 'function') {\n                    break;\n                  }\n                  errorCallback = callback;\n                  callback = args.pop();\n                }\n              }\n              // Call the underlying funciton and pass it to Promise.resolve,\n              // so that even if it didn't return a promise we can still\n              // act on the result as if it did.\n              var promise = Promise.resolve(fn.apply(this, args));\n              // Add the optional callbacks\n              if (callback) {\n                promise.then(callback);\n              }\n              if (errorCallback) {\n                promise.catch(errorCallback);\n              }\n              // Decrement the preload counter only if the promise resolved\n              promise.then(function() {\n                return _this._decrementPreload();\n              });\n              // Return the original promise so that neither callback changes the result.\n              return promise;\n            };\n            if (thisValue) {\n              replacementFunction = replacementFunction.bind(thisValue);\n            }\n            return replacementFunction;\n          };\n\n          var objectCreator = function objectCreator() {\n            return {};\n          };\n\n          _main.default.prototype._legacyPreloadGenerator = function(\n            thisValue,\n            legacyPreloadSetup,\n            fn\n          ) {\n            // Create a function that will generate an object before the preload is\n            // launched. For example, if the object should be an array or be an instance\n            // of a specific class.\n            var baseValueGenerator = legacyPreloadSetup.createBaseObject || objectCreator;\n            var returnedFunction = function returnedFunction() {\n              var _this2 = this;\n              // Our then clause needs to run before setup, so we also increment the preload counter\n              this._incrementPreload();\n              // Generate the return value based on the generator.\n              var returnValue = baseValueGenerator.apply(this, arguments);\n              // Run the original wrapper\n              fn.apply(this, arguments).then(function(data) {\n                // Copy each key from the resolved value into returnValue\n                Object.assign(returnValue, data);\n                // Decrement the preload counter, to allow setup to continue.\n                _this2._decrementPreload();\n              });\n              return returnValue;\n            };\n            if (thisValue) {\n              returnedFunction = returnedFunction.bind(thisValue);\n            }\n            return returnedFunction;\n          };\n        },\n        { './main': 59 }\n      ],\n      65: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          var constants = _interopRequireWildcard(_dereq_('./constants'));\n          _dereq_('./p5.Graphics');\n          _dereq_('./p5.Renderer2D');\n          _dereq_('../webgl/p5.RendererGL');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          var defaultId = 'defaultCanvas0'; // this gets set again in createCanvas\n          var defaultClass = 'p5Canvas';\n\n          /**\n           * Creates a canvas element in the document, and sets the dimensions of it\n           * in pixels. This method should be called only once at the start of setup.\n           * Calling <a href=\"#/p5/createCanvas\">createCanvas</a> more than once in a\n           * sketch will result in very unpredictable behavior. If you want more than\n           * one drawing canvas you could use <a href=\"#/p5/createGraphics\">createGraphics</a>\n           * (hidden by default but it can be shown).\n           *\n           * Important note: in 2D mode (i.e. when `p5.Renderer` is not set) the origin (0,0)\n           * is positioned at the top left of the screen. In 3D mode (i.e. when `p5.Renderer`\n           * is set to `WEBGL`), the origin is positioned at the center of the canvas.\n           * See [this issue](https://github.com/processing/p5.js/issues/1545) for more information.\n           *\n           * The system variables width and height are set by the parameters passed to this\n           * function. If <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used, the\n           * window will be given a default size of 100x100 pixels.\n           *\n           * For more ways to position the canvas, see the\n           * <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\n           * positioning the canvas</a> wiki page.\n           *\n           * @method createCanvas\n           * @param  {Number} w width of the canvas\n           * @param  {Number} h height of the canvas\n           * @param  {Constant} [renderer] either P2D or WEBGL\n           * @return {p5.Renderer}\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 50);\n           *   background(153);\n           *   line(0, 0, width, height);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Black line extending from top-left of canvas to bottom right.\n           */\n          _main.default.prototype.createCanvas = function(w, h, renderer) {\n            _main.default._validateParameters('createCanvas', arguments);\n            //optional: renderer, otherwise defaults to p2d\n            var r = renderer || constants.P2D;\n            var c;\n\n            if (r === constants.WEBGL) {\n              c = document.getElementById(defaultId);\n              if (c) {\n                //if defaultCanvas already exists\n                c.parentNode.removeChild(c); //replace the existing defaultCanvas\n                var thisRenderer = this._renderer;\n                this._elements = this._elements.filter(function(e) {\n                  return e !== thisRenderer;\n                });\n              }\n              c = document.createElement('canvas');\n              c.id = defaultId;\n              c.classList.add(defaultClass);\n            } else {\n              if (!this._defaultGraphicsCreated) {\n                c = document.createElement('canvas');\n                var i = 0;\n                while (document.getElementById('defaultCanvas'.concat(i))) {\n                  i++;\n                }\n                defaultId = 'defaultCanvas'.concat(i);\n                c.id = defaultId;\n                c.classList.add(defaultClass);\n              } else {\n                // resize the default canvas if new one is created\n                c = this.canvas;\n              }\n            }\n\n            // set to invisible if still in setup (to prevent flashing with manipulate)\n            if (!this._setupDone) {\n              c.dataset.hidden = true; // tag to show later\n              c.style.visibility = 'hidden';\n            }\n\n            if (this._userNode) {\n              // user input node case\n              this._userNode.appendChild(c);\n            } else {\n              //create main element\n              if (document.getElementsByTagName('main').length === 0) {\n                var m = document.createElement('main');\n                document.body.appendChild(m);\n              }\n              //append canvas to main\n              document.getElementsByTagName('main')[0].appendChild(c);\n            }\n\n            // Init our graphics renderer\n            //webgl mode\n            if (r === constants.WEBGL) {\n              this._setProperty('_renderer', new _main.default.RendererGL(c, this, true));\n              this._elements.push(this._renderer);\n            } else {\n              //P2D mode\n              if (!this._defaultGraphicsCreated) {\n                this._setProperty('_renderer', new _main.default.Renderer2D(c, this, true));\n                this._defaultGraphicsCreated = true;\n                this._elements.push(this._renderer);\n              }\n            }\n            this._renderer.resize(w, h);\n            this._renderer._applyDefaults();\n            return this._renderer;\n          };\n\n          /**\n           * Resizes the canvas to given width and height. The canvas will be cleared\n           * and draw will be called immediately, allowing the sketch to re-render itself\n           * in the resized canvas.\n           * @method resizeCanvas\n           * @param  {Number} w width of the canvas\n           * @param  {Number} h height of the canvas\n           * @param  {Boolean} [noRedraw] don't redraw the canvas immediately\n           * @example\n           * <div class=\"norender\"><code>\n           * function setup() {\n           *   createCanvas(windowWidth, windowHeight);\n           * }\n           *\n           * function draw() {\n           *   background(0, 100, 200);\n           * }\n           *\n           * function windowResized() {\n           *   resizeCanvas(windowWidth, windowHeight);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * No image displayed.\n           */\n          _main.default.prototype.resizeCanvas = function(w, h, noRedraw) {\n            _main.default._validateParameters('resizeCanvas', arguments);\n            if (this._renderer) {\n              // save canvas properties\n              var props = {};\n              for (var key in this.drawingContext) {\n                var val = this.drawingContext[key];\n                if (_typeof(val) !== 'object' && typeof val !== 'function') {\n                  props[key] = val;\n                }\n              }\n              this._renderer.resize(w, h);\n              this.width = w;\n              this.height = h;\n              // reset canvas properties\n              for (var savedKey in props) {\n                try {\n                  this.drawingContext[savedKey] = props[savedKey];\n                } catch (err) {\n                  // ignore read-only property errors\n                }\n              }\n              if (!noRedraw) {\n                this.redraw();\n              }\n            }\n            //accessible Outputs\n            if (this._addAccsOutput()) {\n              this._updateAccsOutput();\n            }\n          };\n\n          /**\n           * Removes the default canvas for a p5 sketch that doesn't require a canvas\n           * @method noCanvas\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   noCanvas();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.prototype.noCanvas = function() {\n            if (this.canvas) {\n              this.canvas.parentNode.removeChild(this.canvas);\n            }\n          };\n\n          /**\n           * Creates and returns a new p5.Renderer object. Use this class if you need\n           * to draw into an off-screen graphics buffer. The two parameters define the\n           * width and height in pixels.\n           *\n           * @method createGraphics\n           * @param  {Number} w width of the offscreen graphics buffer\n           * @param  {Number} h height of the offscreen graphics buffer\n           * @param  {Constant} [renderer] either P2D or WEBGL\n           *                               undefined defaults to p2d\n           * @return {p5.Graphics} offscreen graphics buffer\n           * @example\n           * <div>\n           * <code>\n           * let pg;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   pg = createGraphics(100, 100);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   pg.background(100);\n           *   pg.noStroke();\n           *   pg.ellipse(pg.width / 2, pg.height / 2, 50, 50);\n           *   image(pg, 50, 50);\n           *   image(pg, 0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 4 grey squares alternating light and dark grey. White quarter circle mid-left.\n           */\n          _main.default.prototype.createGraphics = function(w, h, renderer) {\n            _main.default._validateParameters('createGraphics', arguments);\n            return new _main.default.Graphics(w, h, renderer, this);\n          };\n\n          /**\n           * Blends the pixels in the display window according to the defined mode.\n           * There is a choice of the following modes to blend the source pixels (A)\n           * with the ones of pixels already in the display window (B):\n           * <ul>\n           * <li><code>BLEND</code> - linear interpolation of colours: C =\n           * A\\*factor + B. <b>This is the default blending mode.</b></li>\n           * <li><code>ADD</code> - sum of A and B</li>\n           * <li><code>DARKEST</code> - only the darkest colour succeeds: C =\n           * min(A\\*factor, B).</li>\n           * <li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\n           * max(A\\*factor, B).</li>\n           * <li><code>DIFFERENCE</code> - subtract colors from underlying image.</li>\n           * <li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\n           * extreme.</li>\n           * <li><code>MULTIPLY</code> - multiply the colors, result will always be\n           * darker.</li>\n           * <li><code>SCREEN</code> - opposite multiply, uses inverse values of the\n           * colors.</li>\n           * <li><code>REPLACE</code> - the pixels entirely replace the others and\n           * don't utilize alpha (transparency) values.</li>\n           * <li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n           * <li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n           * </code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n           * <li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\n           * gray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n           * <li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n           * <code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n           * </li>\n           * <li><code>DODGE</code> - lightens light tones and increases contrast,\n           * ignores darks. <em>(2D)</em></li>\n           * <li><code>BURN</code> - darker areas are applied, increasing contrast,\n           * ignores lights. <em>(2D)</em></li>\n           * <li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n           * </ul>\n           *\n           * <em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n           * <em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.\n           *\n           * @method blendMode\n           * @param  {Constant} mode blend mode to set for canvas.\n           *                either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n           *                EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n           *                SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT\n           * @example\n           * <div>\n           * <code>\n           * blendMode(LIGHTEST);\n           * strokeWeight(30);\n           * stroke(80, 150, 255);\n           * line(25, 25, 75, 75);\n           * stroke(255, 50, 50);\n           * line(75, 25, 25, 75);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * blendMode(MULTIPLY);\n           * strokeWeight(30);\n           * stroke(80, 150, 255);\n           * line(25, 25, 75, 75);\n           * stroke(255, 50, 50);\n           * line(75, 25, 25, 75);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * translucent image thick red & blue diagonal rounded lines intersecting center\n           * Thick red & blue diagonal rounded lines intersecting center. dark at overlap\n           */\n          _main.default.prototype.blendMode = function(mode) {\n            _main.default._validateParameters('blendMode', arguments);\n            if (mode === constants.NORMAL) {\n              // Warning added 3/26/19, can be deleted in future (1.0 release?)\n              console.warn(\n                'NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead.'\n              );\n\n              mode = constants.BLEND;\n            }\n            this._renderer.blendMode(mode);\n          };\n\n          /**\n           * The p5.js API provides a lot of functionality for creating graphics, but there is\n           * some native HTML5 Canvas functionality that is not exposed by p5. You can still call\n           * it directly using the variable `drawingContext`, as in the example shown. This is\n           * the equivalent of calling `canvas.getContext('2d');` or `canvas.getContext('webgl');`.\n           * See this\n           * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\n           * reference for the native canvas API</a> for possible drawing functions you can call.\n           *\n           * @property drawingContext\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   drawingContext.shadowOffsetX = 5;\n           *   drawingContext.shadowOffsetY = -5;\n           *   drawingContext.shadowBlur = 10;\n           *   drawingContext.shadowColor = 'black';\n           *   background(200);\n           *   ellipse(width / 2, height / 2, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white ellipse with shadow blur effect around edges\n           */ var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../webgl/p5.RendererGL': 113,\n          './constants': 48,\n          './main': 59,\n          './p5.Graphics': 61,\n          './p5.Renderer2D': 63\n        }\n      ],\n      66: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../main'));\n          var constants = _interopRequireWildcard(_dereq_('../constants'));\n          var _helpers = _interopRequireDefault(_dereq_('../helpers'));\n          _dereq_('../friendly_errors/fes_core');\n          _dereq_('../friendly_errors/file_errors');\n          _dereq_('../friendly_errors/validate_params');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Shape\n           * @submodule 2D Primitives\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ /**\n           * This function does 3 things:\n           *\n           *   1. Bounds the desired start/stop angles for an arc (in radians) so that:\n           *\n           *          0 <= start < TWO_PI ;    start <= stop < start + TWO_PI\n           *\n           *      This means that the arc rendering functions don't have to be concerned\n           *      with what happens if stop is smaller than start, or if the arc 'goes\n           *      round more than once', etc.: they can just start at start and increase\n           *      until stop and the correct arc will be drawn.\n           *\n           *   2. Optionally adjusts the angles within each quadrant to counter the naive\n           *      scaling of the underlying ellipse up from the unit circle.  Without\n           *      this, the angles become arbitrary when width != height: 45 degrees\n           *      might be drawn at 5 degrees on a 'wide' ellipse, or at 85 degrees on\n           *      a 'tall' ellipse.\n           *\n           *   3. Flags up when start and stop correspond to the same place on the\n           *      underlying ellipse.  This is useful if you want to do something special\n           *      there (like rendering a whole ellipse instead).\n           */ _main.default.prototype._normalizeArcAngles = function(\n            start,\n            stop,\n            width,\n            height,\n            correctForScaling\n          ) {\n            var epsilon = 0.00001; // Smallest visible angle on displays up to 4K.\n            var separation;\n\n            // The order of the steps is important here: each one builds upon the\n            // adjustments made in the steps that precede it.\n\n            // Constrain both start and stop to [0,TWO_PI).\n            start = start - constants.TWO_PI * Math.floor(start / constants.TWO_PI);\n            stop = stop - constants.TWO_PI * Math.floor(stop / constants.TWO_PI);\n\n            // Get the angular separation between the requested start and stop points.\n            //\n            // Technically this separation only matches what gets drawn if\n            // correctForScaling is enabled.  We could add a more complicated calculation\n            // for when the scaling is uncorrected (in which case the drawn points could\n            // end up pushed together or pulled apart quite dramatically relative to what\n            // was requested), but it would make things more opaque for little practical\n            // benefit.\n            //\n            // (If you do disable correctForScaling and find that correspondToSamePoint\n            // is set too aggressively, the easiest thing to do is probably to just make\n            // epsilon smaller...)\n            separation = Math.min(\n              Math.abs(start - stop),\n              constants.TWO_PI - Math.abs(start - stop)\n            );\n\n            // Optionally adjust the angles to counter linear scaling.\n            if (correctForScaling) {\n              if (start <= constants.HALF_PI) {\n                start = Math.atan(width / height * Math.tan(start));\n              } else if (start > constants.HALF_PI && start <= 3 * constants.HALF_PI) {\n                start = Math.atan(width / height * Math.tan(start)) + constants.PI;\n              } else {\n                start = Math.atan(width / height * Math.tan(start)) + constants.TWO_PI;\n              }\n              if (stop <= constants.HALF_PI) {\n                stop = Math.atan(width / height * Math.tan(stop));\n              } else if (stop > constants.HALF_PI && stop <= 3 * constants.HALF_PI) {\n                stop = Math.atan(width / height * Math.tan(stop)) + constants.PI;\n              } else {\n                stop = Math.atan(width / height * Math.tan(stop)) + constants.TWO_PI;\n              }\n            }\n\n            // Ensure that start <= stop < start + TWO_PI.\n            if (start > stop) {\n              stop += constants.TWO_PI;\n            }\n\n            return {\n              start: start,\n              stop: stop,\n              correspondToSamePoint: separation < epsilon\n            };\n          };\n\n          /**\n           * Draw an arc to the screen. If called with only x, y, w, h, start and stop,\n           * the arc will be drawn and filled as an open pie segment. If a mode parameter\n           * is provided, the arc will be filled like an open semi-circle (OPEN), a closed\n           * semi-circle (CHORD), or as a closed pie segment (PIE). The origin may be changed\n           * with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.\n           *\n           * The arc is always drawn clockwise from wherever start falls to wherever stop\n           * falls on the ellipse.Adding or subtracting TWO_PI to either angle does not\n           * change where they fall. If both start and stop fall at the same place, a full\n           * ellipse will be drawn. Be aware that the y-axis increases in the downward\n           * direction, therefore angles are measured clockwise from the positive\n           * x-direction (\"3 o'clock\").\n           *\n           * @method arc\n           * @param  {Number} x      x-coordinate of the arc's ellipse\n           * @param  {Number} y      y-coordinate of the arc's ellipse\n           * @param  {Number} w      width of the arc's ellipse by default\n           * @param  {Number} h      height of the arc's ellipse by default\n           * @param  {Number} start  angle to start the arc, specified in radians\n           * @param  {Number} stop   angle to stop the arc, specified in radians\n           * @param  {Constant} [mode] optional parameter to determine the way of drawing\n           *                         the arc. either CHORD, PIE or OPEN\n           * @param  {Number} [detail] optional parameter for WebGL mode only. This is to\n           *                         specify the number of vertices that makes up the\n           *                         perimeter of the arc. Default value is 25.\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * arc(50, 55, 50, 50, 0, HALF_PI);\n           * noFill();\n           * arc(50, 55, 60, 60, HALF_PI, PI);\n           * arc(50, 55, 70, 70, PI, PI + QUARTER_PI);\n           * arc(50, 55, 80, 80, PI + QUARTER_PI, TWO_PI);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * arc(50, 50, 80, 80, 0, PI + QUARTER_PI);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * arc(50, 50, 80, 80, 0, PI + QUARTER_PI, CHORD);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * arc(50, 50, 80, 80, 0, PI + QUARTER_PI, PIE);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *shattered outline of an ellipse with a quarter of a white circle bottom-right.\n           *white ellipse with top right quarter missing.\n           *white ellipse with black outline with top right missing.\n           *white ellipse with top right missing with black outline around shape.\n           *white ellipse with top right quarter missing with black outline around the shape.\n           */\n          _main.default.prototype.arc = function(x, y, w, h, start, stop, mode, detail) {\n            _main.default._validateParameters('arc', arguments);\n\n            // if the current stroke and fill settings wouldn't result in something\n            // visible, exit immediately\n            if (!this._renderer._doStroke && !this._renderer._doFill) {\n              return this;\n            }\n\n            if (start === stop) {\n              return this;\n            }\n\n            start = this._toRadians(start);\n            stop = this._toRadians(stop);\n\n            // p5 supports negative width and heights for ellipses\n            w = Math.abs(w);\n            h = Math.abs(h);\n\n            var vals = _helpers.default.modeAdjust(x, y, w, h, this._renderer._ellipseMode);\n            var angles = this._normalizeArcAngles(start, stop, vals.w, vals.h, true);\n\n            if (angles.correspondToSamePoint) {\n              // If the arc starts and ends at (near enough) the same place, we choose to\n              // draw an ellipse instead.  This is preferable to faking an ellipse (by\n              // making stop ever-so-slightly less than start + TWO_PI) because the ends\n              // join up to each other rather than at a vertex at the centre (leaving\n              // an unwanted spike in the stroke/fill).\n              this._renderer.ellipse([vals.x, vals.y, vals.w, vals.h, detail]);\n            } else {\n              this._renderer.arc(\n                vals.x,\n                vals.y,\n                vals.w,\n                vals.h,\n                angles.start, // [0, TWO_PI)\n                angles.stop, // [start, start + TWO_PI)\n                mode,\n                detail\n              );\n\n              //accessible Outputs\n              if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n                this._accsOutput('arc', [\n                  vals.x,\n                  vals.y,\n                  vals.w,\n                  vals.h,\n                  angles.start,\n                  angles.stop,\n                  mode\n                ]);\n              }\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws an ellipse (oval) to the screen. By default, the first two parameters\n           * set the location of the center of the ellipse, and the third and fourth\n           * parameters set the shape's width and height. If no height is specified, the\n           * value of width is used for both the width and height. If a negative height or\n           * width is specified, the absolute value is taken.\n           *\n           * An ellipse with equal width and height is a circle.The origin may be changed\n           * with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.\n           *\n           * @method ellipse\n           * @param  {Number} x x-coordinate of the center of ellipse.\n           * @param  {Number} y y-coordinate of the center of ellipse.\n           * @param  {Number} w width of the ellipse.\n           * @param  {Number} [h] height of the ellipse.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * ellipse(56, 46, 55, 55);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *white ellipse with black outline in middle-right of canvas that is 55x55\n           */\n\n          /**\n           * @method ellipse\n           * @param  {Number} x\n           * @param  {Number} y\n           * @param  {Number} w\n           * @param  {Number} h\n           * @param  {Integer} detail number of radial sectors to draw (for WebGL mode)\n           */\n          _main.default.prototype.ellipse = function(x, y, w, h, detailX) {\n            _main.default._validateParameters('ellipse', arguments);\n            return this._renderEllipse.apply(this, arguments);\n          };\n\n          /**\n           * Draws a circle to the screen. A circle is a simple closed shape. It is the set\n           * of all points in a plane that are at a given distance from a given point,\n           * the centre. This function is a special case of the ellipse() function, where\n           * the width and height of the ellipse are the same. Height and width of the\n           * ellipse correspond to the diameter of the circle. By default, the first two\n           * parameters set the location of the centre of the circle, the third sets the\n           * diameter of the circle.\n           *\n           * @method circle\n           * @param  {Number} x  x-coordinate of the centre of the circle.\n           * @param  {Number} y  y-coordinate of the centre of the circle.\n           * @param  {Number} d  diameter of the circle.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Draw a circle at location (30, 30) with a diameter of 20.\n           * circle(30, 30, 20);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white circle with black outline in mid of canvas that is 55x55.\n           */\n          _main.default.prototype.circle = function() {\n            _main.default._validateParameters('circle', arguments);\n            var args = Array.prototype.slice.call(arguments, 0, 2);\n            args.push(arguments[2]);\n            args.push(arguments[2]);\n            return this._renderEllipse.apply(this, args);\n          };\n\n          // internal method for drawing ellipses (without parameter validation)\n          _main.default.prototype._renderEllipse = function(x, y, w, h, detailX) {\n            // if the current stroke and fill settings wouldn't result in something\n            // visible, exit immediately\n            if (!this._renderer._doStroke && !this._renderer._doFill) {\n              return this;\n            }\n\n            // p5 supports negative width and heights for rects\n            if (w < 0) {\n              w = Math.abs(w);\n            }\n\n            if (typeof h === 'undefined') {\n              // Duplicate 3rd argument if only 3 given.\n              h = w;\n            } else if (h < 0) {\n              h = Math.abs(h);\n            }\n\n            var vals = _helpers.default.modeAdjust(x, y, w, h, this._renderer._ellipseMode);\n            this._renderer.ellipse([vals.x, vals.y, vals.w, vals.h, detailX]);\n\n            //accessible Outputs\n            if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n              this._accsOutput('ellipse', [vals.x, vals.y, vals.w, vals.h]);\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws a line (a direct path between two points) to the screen. If called with\n           * only 4 parameters, it will draw a line in 2D with a default width of 1 pixel.\n           * This width can be modified by using the <a href=\"#/p5/strokeWeight\">\n           * strokeWeight()</a> function. A line cannot be filled, therefore the <a\n           * href=\"#/p5/fill\">fill()</a> function will not affect the color of a line. So to\n           * color a line, use the <a href=\"#/p5/stroke\">stroke()</a> function.\n           *\n           * @method line\n           * @param  {Number} x1 the x-coordinate of the first point\n           * @param  {Number} y1 the y-coordinate of the first point\n           * @param  {Number} x2 the x-coordinate of the second point\n           * @param  {Number} y2 the y-coordinate of the second point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * line(30, 20, 85, 75);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * line(30, 20, 85, 20);\n           * stroke(126);\n           * line(85, 20, 85, 75);\n           * stroke(255);\n           * line(85, 75, 30, 75);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * An example showing a line 78 pixels long running from mid-top to bottom-right of canvas.\n           * An example showing 3 lines of various stroke sizes. Form top, bottom and right sides of a square.\n           */\n\n          /**\n           * @method line\n           * @param  {Number} x1\n           * @param  {Number} y1\n           * @param  {Number} z1 the z-coordinate of the first point\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 the z-coordinate of the second point\n           * @chainable\n           */\n          _main.default.prototype.line = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('line', args);\n\n            if (this._renderer._doStroke) {\n              var _this$_renderer;\n              (_this$_renderer = this._renderer).line.apply(_this$_renderer, args);\n            }\n\n            //accessible Outputs\n            if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n              this._accsOutput('line', args);\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws a point, a coordinate in space at the dimension of one pixel.\n           * The first parameter is the horizontal value for the point, the second\n           * param is the vertical value for the point. The color of the point is\n           * changed with the <a href=\"#/p5/stroke\">stroke()</a> function. The size of the point\n           * can be changed with the <a href=\"#/p5/strokeWeight\">strokeWeight()</a> function.\n           *\n           * @method point\n           * @param  {Number} x the x-coordinate\n           * @param  {Number} y the y-coordinate\n           * @param  {Number} [z] the z-coordinate (for WebGL mode)\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * point(30, 20);\n           * point(85, 20);\n           * point(85, 75);\n           * point(30, 75);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * point(30, 20);\n           * point(85, 20);\n           * stroke('purple'); // Change the color\n           * strokeWeight(10); // Make the points 10 pixels in size\n           * point(85, 75);\n           * point(30, 75);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let a = createVector(10, 10);\n           * point(a);\n           * let b = createVector(10, 20);\n           * point(b);\n           * point(createVector(20, 10));\n           * point(createVector(20, 20));\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 4 points centered in the middle-right of the canvas.\n           * 2 large points and 2 large purple points centered in the middle-right of the canvas.\n           * Vertices of a square of length 10 pixels towards the top-left of the canvas.\n           */\n\n          /**\n           * @method point\n           * @param {p5.Vector} coordinate_vector the coordinate vector\n           * @chainable\n           */\n          _main.default.prototype.point = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('point', args);\n\n            if (this._renderer._doStroke) {\n              if (args.length === 1 && args[0] instanceof _main.default.Vector) {\n                this._renderer.point.call(this._renderer, args[0].x, args[0].y, args[0].z);\n              } else {\n                var _this$_renderer2;\n                (_this$_renderer2 = this._renderer).point.apply(_this$_renderer2, args);\n                //accessible Outputs\n                if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n                  this._accsOutput('point', args);\n                }\n              }\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws a quad on the canvas. A quad is a quadrilateral, a four sided polygon. It is\n           * similar to a rectangle, but the angles between its edges are not\n           * constrained to ninety degrees. The first pair of parameters (x1,y1)\n           * sets the first vertex and the subsequent pairs should proceed\n           * clockwise or counter-clockwise around the defined shape.\n           * z-arguments only work when quad() is used in WEBGL mode.\n           *\n           * @method quad\n           * @param {Number} x1 the x-coordinate of the first point\n           * @param {Number} y1 the y-coordinate of the first point\n           * @param {Number} x2 the x-coordinate of the second point\n           * @param {Number} y2 the y-coordinate of the second point\n           * @param {Number} x3 the x-coordinate of the third point\n           * @param {Number} y3 the y-coordinate of the third point\n           * @param {Number} x4 the x-coordinate of the fourth point\n           * @param {Number} y4 the y-coordinate of the fourth point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * quad(38, 31, 86, 20, 69, 63, 30, 76);\n           * </code>\n           * </div>\n           *\n           * @alt\n           *irregular white quadrilateral shape with black outline mid-right of canvas.\n           */\n          /**\n           * @method quad\n           * @param {Number} x1\n           * @param {Number} y1\n           * @param {Number} z1 the z-coordinate of the first point\n           * @param {Number} x2\n           * @param {Number} y2\n           * @param {Number} z2 the z-coordinate of the second point\n           * @param {Number} x3\n           * @param {Number} y3\n           * @param {Number} z3 the z-coordinate of the third point\n           * @param {Number} x4\n           * @param {Number} y4\n           * @param {Number} z4 the z-coordinate of the fourth point\n           * @chainable\n           */\n          _main.default.prototype.quad = function() {\n            for (\n              var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n              _key3 < _len3;\n              _key3++\n            ) {\n              args[_key3] = arguments[_key3];\n            }\n            _main.default._validateParameters('quad', args);\n\n            if (this._renderer._doStroke || this._renderer._doFill) {\n              if (this._renderer.isP3D && args.length !== 12) {\n                // if 3D and we weren't passed 12 args, assume Z is 0\n                // prettier-ignore\n                this._renderer.quad.call(\n      this._renderer,\n      args[0], args[1], 0,\n      args[2], args[3], 0,\n      args[4], args[5], 0,\n      args[6], args[7], 0);\n              } else {\n                var _this$_renderer3;\n                (_this$_renderer3 = this._renderer).quad.apply(_this$_renderer3, args);\n                //accessibile outputs\n                if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n                  this._accsOutput('quadrilateral', args);\n                }\n              }\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws a rectangle on the canvas. A rectangle is a four-sided closed shape with\n           * every angle at ninety degrees. By default, the first two parameters set\n           * the location of the upper-left corner, the third sets the width, and the\n           * fourth sets the height. The way these parameters are interpreted, may be\n           * changed with the <a href=\"#/p5/rectMode\">rectMode()</a> function.\n           *\n           * The fifth, sixth, seventh and eighth parameters, if specified,\n           * determine corner radius for the top-left, top-right, lower-right and\n           * lower-left corners, respectively. An omitted corner radius parameter is set\n           * to the value of the previously specified radius value in the parameter list.\n           *\n           * @method rect\n           * @param  {Number} x  x-coordinate of the rectangle.\n           * @param  {Number} y  y-coordinate of the rectangle.\n           * @param  {Number} w  width of the rectangle.\n           * @param  {Number} [h]  height of the rectangle.\n           * @param  {Number} [tl] optional radius of top-left corner.\n           * @param  {Number} [tr] optional radius of top-right corner.\n           * @param  {Number} [br] optional radius of bottom-right corner.\n           * @param  {Number} [bl] optional radius of bottom-left corner.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Draw a rectangle at location (30, 20) with a width and height of 55.\n           * rect(30, 20, 55, 55);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Draw a rectangle with rounded corners, each having a radius of 20.\n           * rect(30, 20, 55, 55, 20);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Draw a rectangle with rounded corners having the following radii:\n           * // top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\n           * rect(30, 20, 55, 55, 20, 15, 10, 5);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 55x55 white rect with black outline in mid-right of canvas.\n           * 55x55 white rect with black outline and rounded edges in mid-right of canvas.\n           * 55x55 white rect with black outline and rounded edges of different radii.\n           */\n\n          /**\n           * @method rect\n           * @param  {Number} x\n           * @param  {Number} y\n           * @param  {Number} w\n           * @param  {Number} h\n           * @param  {Integer} [detailX] number of segments in the x-direction (for WebGL mode)\n           * @param  {Integer} [detailY] number of segments in the y-direction (for WebGL mode)\n           * @chainable\n           */\n          _main.default.prototype.rect = function() {\n            _main.default._validateParameters('rect', arguments);\n            return this._renderRect.apply(this, arguments);\n          };\n\n          /**\n           * Draws a square to the screen. A square is a four-sided shape with every angle\n           * at ninety degrees, and equal side size. This function is a special case of the\n           * rect() function, where the width and height are the same, and the parameter\n           * is called \"s\" for side size. By default, the first two parameters set the\n           * location of the upper-left corner, the third sets the side size of the square.\n           * The way these parameters are interpreted, may be changed with the <a\n           * href=\"#/p5/rectMode\">rectMode()</a> function.\n           *\n           * The fourth, fifth, sixth and seventh parameters, if specified,\n           * determine corner radius for the top-left, top-right, lower-right and\n           * lower-left corners, respectively. An omitted corner radius parameter is set\n           * to the value of the previously specified radius value in the parameter list.\n           *\n           * @method square\n           * @param  {Number} x  x-coordinate of the square.\n           * @param  {Number} y  y-coordinate of the square.\n           * @param  {Number} s  side size of the square.\n           * @param  {Number} [tl] optional radius of top-left corner.\n           * @param  {Number} [tr] optional radius of top-right corner.\n           * @param  {Number} [br] optional radius of bottom-right corner.\n           * @param  {Number} [bl] optional radius of bottom-left corner.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Draw a square at location (30, 20) with a side size of 55.\n           * square(30, 20, 55);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Draw a square with rounded corners, each having a radius of 20.\n           * square(30, 20, 55, 20);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Draw a square with rounded corners having the following radii:\n           * // top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\n           * square(30, 20, 55, 20, 15, 10, 5);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 55x55 white square with black outline in mid-right of canvas.\n           * 55x55 white square with black outline and rounded edges in mid-right of canvas.\n           * 55x55 white square with black outline and rounded edges of different radii.\n           */\n          _main.default.prototype.square = function(x, y, s, tl, tr, br, bl) {\n            _main.default._validateParameters('square', arguments);\n            // duplicate width for height in case of square\n            return this._renderRect.call(this, x, y, s, s, tl, tr, br, bl);\n          };\n\n          // internal method to have renderer draw a rectangle\n          _main.default.prototype._renderRect = function() {\n            if (this._renderer._doStroke || this._renderer._doFill) {\n              // duplicate width for height in case only 3 arguments is provided\n              if (arguments.length === 3) {\n                arguments[3] = arguments[2];\n              }\n              var vals = _helpers.default.modeAdjust(\n                arguments[0],\n                arguments[1],\n                arguments[2],\n                arguments[3],\n                this._renderer._rectMode\n              );\n\n              var args = [vals.x, vals.y, vals.w, vals.h];\n              // append the additional arguments (either cornder radii, or\n              // segment details) to the argument list\n              for (var i = 4; i < arguments.length; i++) {\n                args[i] = arguments[i];\n              }\n              this._renderer.rect(args);\n\n              //accessible outputs\n              if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n                this._accsOutput('rectangle', [vals.x, vals.y, vals.w, vals.h]);\n              }\n            }\n\n            return this;\n          };\n\n          /**\n           * Draws a triangle to the canvas. A triangle is a plane created by connecting\n           * three points. The first two arguments specify the first point, the middle two\n           * arguments specify the second point, and the last two arguments specify the\n           * third point.\n           *\n           * @method triangle\n           * @param  {Number} x1 x-coordinate of the first point\n           * @param  {Number} y1 y-coordinate of the first point\n           * @param  {Number} x2 x-coordinate of the second point\n           * @param  {Number} y2 y-coordinate of the second point\n           * @param  {Number} x3 x-coordinate of the third point\n           * @param  {Number} y3 y-coordinate of the third point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * triangle(30, 75, 58, 20, 86, 75);\n           * </code>\n           * </div>\n           *\n           *@alt\n           * white triangle with black outline in mid-right of canvas.\n           */\n          _main.default.prototype.triangle = function() {\n            for (\n              var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;\n              _key4 < _len4;\n              _key4++\n            ) {\n              args[_key4] = arguments[_key4];\n            }\n            _main.default._validateParameters('triangle', args);\n\n            if (this._renderer._doStroke || this._renderer._doFill) {\n              this._renderer.triangle(args);\n            }\n\n            //accessible outputs\n            if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n              this._accsOutput('triangle', args);\n            }\n\n            return this;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../constants': 48,\n          '../friendly_errors/fes_core': 51,\n          '../friendly_errors/file_errors': 52,\n          '../friendly_errors/validate_params': 54,\n          '../helpers': 55,\n          '../main': 59\n        }\n      ],\n      67: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../main'));\n          var constants = _interopRequireWildcard(_dereq_('../constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Shape\n           * @submodule Attributes\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ /**\n           * Modifies the location from which ellipses are drawn by changing the way in\n           * which parameters given to <a href=\"#/p5/ellipse\">ellipse()</a>,\n           * <a href=\"#/p5/circle\">circle()</a> and <a href=\"#/p5/arc\">arc()</a> are interpreted.\n           *\n           * The default mode is CENTER, in which the first two parameters are interpreted\n           * as the shape's center point's x and y coordinates respectively, while the third\n           * and fourth parameters are its width and height.\n           *\n           * ellipseMode(RADIUS) also uses the first two parameters as the shape's center\n           * point's x and y coordinates, but uses the third and fourth parameters to\n           * specify half of the shapes's width and height.\n           *\n           * ellipseMode(CORNER) interprets the first two parameters as the upper-left\n           * corner of the shape, while the third and fourth parameters are its width\n           * and height.\n           *\n           * ellipseMode(CORNERS) interprets the first two parameters as the location of\n           * one corner of the ellipse's bounding box, and the third and fourth parameters\n           * as the location of the opposite corner.\n           *\n           * The parameter to this method must be written in ALL CAPS because they are\n           * predefined as constants in ALL CAPS and Javascript is a case-sensitive language.\n           *\n           * @method ellipseMode\n           * @param  {Constant} mode either CENTER, RADIUS, CORNER, or CORNERS\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Example showing RADIUS and CENTER ellipsemode with 2 overlaying ellipses\n           * ellipseMode(RADIUS);\n           * fill(255);\n           * ellipse(50, 50, 30, 30); // Outer white ellipse\n           * ellipseMode(CENTER);\n           * fill(100);\n           * ellipse(50, 50, 30, 30); // Inner gray ellipse\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Example showing CORNER and CORNERS ellipseMode with 2 overlaying ellipses\n           * ellipseMode(CORNER);\n           * fill(255);\n           * ellipse(25, 25, 50, 50); // Outer white ellipse\n           * ellipseMode(CORNERS);\n           * fill(100);\n           * ellipse(25, 25, 50, 50); // Inner gray ellipse\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 white ellipse and 30x30 grey ellipse with black outlines at center.\n           * 60x60 white ellipse and 30x30 grey ellipse top-right with black outlines.\n           */ _main.default.prototype.ellipseMode = function(m) {\n            _main.default._validateParameters('ellipseMode', arguments);\n            if (\n              m === constants.CORNER ||\n              m === constants.CORNERS ||\n              m === constants.RADIUS ||\n              m === constants.CENTER\n            ) {\n              this._renderer._ellipseMode = m;\n            }\n            return this;\n          };\n\n          /**\n           * Draws all geometry with jagged (aliased) edges. Note that <a href=\"#/p5/smooth\">smooth()</a> is\n           * active by default in 2D mode, so it is necessary to call <a href=\"#/p5/noSmooth\">noSmooth()</a> to disable\n           * smoothing of geometry, images, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\n           * by default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\n           * smooth (antialiased) edges on your geometry.\n           *\n           * @method noSmooth\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * background(0);\n           * noStroke();\n           * smooth();\n           * ellipse(30, 48, 36, 36);\n           * noSmooth();\n           * ellipse(70, 48, 36, 36);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 pixelated 36x36 white ellipses to left & right of center, black background\n           */\n          _main.default.prototype.noSmooth = function() {\n            this.setAttributes('antialias', false);\n            if (!this._renderer.isP3D) {\n              if ('imageSmoothingEnabled' in this.drawingContext) {\n                this.drawingContext.imageSmoothingEnabled = false;\n              }\n            }\n            return this;\n          };\n\n          /**\n           * Modifies the location from which rectangles are drawn by changing the way\n           * in which parameters given to <a href=\"#/p5/rect\">rect()</a> are interpreted.\n           *\n           * The default mode is CORNER, which interprets the first two parameters as the\n           * upper-left corner of the shape, while the third and fourth parameters are its\n           * width and height.\n           *\n           * rectMode(CORNERS) interprets the first two parameters as the location of\n           * one of the corners, and the third and fourth parameters as the location of\n           * the diagonally opposite corner. Note, the rectangle is drawn between the\n           * coordinates, so it is not neccesary that the first corner be the upper left\n           * corner.\n           *\n           * rectMode(CENTER) interprets the first two parameters as the shape's center\n           * point, while the third and fourth parameters are its width and height.\n           *\n           * rectMode(RADIUS) also uses the first two parameters as the shape's center\n           * point, but uses the third and fourth parameters to specify half of the shape's\n           * width and height respectively.\n           *\n           * The parameter to this method must be written in ALL CAPS because they are\n           * predefined as constants in ALL CAPS and Javascript is a case-sensitive language.\n           *\n           * @method rectMode\n           * @param  {Constant} mode either CORNER, CORNERS, CENTER, or RADIUS\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * rectMode(CORNER);\n           * fill(255);\n           * rect(25, 25, 50, 50); // Draw white rectangle using CORNER mode\n           *\n           * rectMode(CORNERS);\n           * fill(100);\n           * rect(25, 25, 50, 50); // Draw gray rectangle using CORNERS mode\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * rectMode(RADIUS);\n           * fill(255);\n           * rect(50, 50, 30, 30); // Draw white rectangle using RADIUS mode\n           *\n           * rectMode(CENTER);\n           * fill(100);\n           * rect(50, 50, 30, 30); // Draw gray rectangle using CENTER mode\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 white rect at center and 25x25 grey rect in the top left of the other.\n           * 50x50 white rect at center and 25x25 grey rect in the center of the other.\n           */\n          _main.default.prototype.rectMode = function(m) {\n            _main.default._validateParameters('rectMode', arguments);\n            if (\n              m === constants.CORNER ||\n              m === constants.CORNERS ||\n              m === constants.RADIUS ||\n              m === constants.CENTER\n            ) {\n              this._renderer._rectMode = m;\n            }\n            return this;\n          };\n\n          /**\n           * Draws all geometry with smooth (anti-aliased) edges. <a href=\"#/p5/smooth\">smooth()</a> will also\n           * improve image quality of resized images. Note that <a href=\"#/p5/smooth\">smooth()</a> is active by\n           * default in 2D mode; <a href=\"#/p5/noSmooth\">noSmooth()</a> can be used to disable smoothing of geometry,\n           * images, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\n           * by default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\n           * smooth (antialiased) edges on your geometry.\n           *\n           * @method smooth\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * background(0);\n           * noStroke();\n           * smooth();\n           * ellipse(30, 48, 36, 36);\n           * noSmooth();\n           * ellipse(70, 48, 36, 36);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 pixelated 36x36 white ellipses one left one right of center. On black.\n           */\n          _main.default.prototype.smooth = function() {\n            this.setAttributes('antialias', true);\n            if (!this._renderer.isP3D) {\n              if ('imageSmoothingEnabled' in this.drawingContext) {\n                this.drawingContext.imageSmoothingEnabled = true;\n              }\n            }\n            return this;\n          };\n\n          /**\n           * Sets the style for rendering line endings. These ends are either rounded,\n           * squared or extended, each of which specified with the corresponding\n           * parameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\n           *\n           * The parameter to this method must be written in ALL CAPS because they are\n           * predefined as constants in ALL CAPS and Javascript is a case-sensitive language.\n           *\n           * @method strokeCap\n           * @param  {Constant} cap either ROUND, SQUARE or PROJECT\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Example of different strokeCaps\n           * strokeWeight(12.0);\n           * strokeCap(ROUND);\n           * line(20, 30, 80, 30);\n           * strokeCap(SQUARE);\n           * line(20, 50, 80, 50);\n           * strokeCap(PROJECT);\n           * line(20, 70, 80, 70);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3 lines. Top line: rounded ends, mid: squared, bottom:longer squared ends.\n           */\n          _main.default.prototype.strokeCap = function(cap) {\n            _main.default._validateParameters('strokeCap', arguments);\n            if (\n              cap === constants.ROUND ||\n              cap === constants.SQUARE ||\n              cap === constants.PROJECT\n            ) {\n              this._renderer.strokeCap(cap);\n            }\n            return this;\n          };\n\n          /**\n           * Sets the style of the joints which connect line segments. These joints\n           * are either mitered, beveled or rounded and specified with the\n           * corresponding parameters MITER, BEVEL and ROUND. The default joint is\n           * MITER.\n           *\n           * The parameter to this method must be written in ALL CAPS because they are\n           * predefined as constants in ALL CAPS and Javascript is a case-sensitive language.\n           *\n           * @method strokeJoin\n           * @param  {Constant} join either MITER, BEVEL, ROUND\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Example of MITER type of joints\n           * noFill();\n           * strokeWeight(10.0);\n           * strokeJoin(MITER);\n           * beginShape();\n           * vertex(35, 20);\n           * vertex(65, 50);\n           * vertex(35, 80);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Example of BEVEL type of joints\n           * noFill();\n           * strokeWeight(10.0);\n           * strokeJoin(BEVEL);\n           * beginShape();\n           * vertex(35, 20);\n           * vertex(65, 50);\n           * vertex(35, 80);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Example of ROUND type of joints\n           * noFill();\n           * strokeWeight(10.0);\n           * strokeJoin(ROUND);\n           * beginShape();\n           * vertex(35, 20);\n           * vertex(65, 50);\n           * vertex(35, 80);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Right-facing arrowhead shape with pointed tip in center of canvas.\n           * Right-facing arrowhead shape with flat tip in center of canvas.\n           * Right-facing arrowhead shape with rounded tip in center of canvas.\n           */\n          _main.default.prototype.strokeJoin = function(join) {\n            _main.default._validateParameters('strokeJoin', arguments);\n            if (\n              join === constants.ROUND ||\n              join === constants.BEVEL ||\n              join === constants.MITER\n            ) {\n              this._renderer.strokeJoin(join);\n            }\n            return this;\n          };\n\n          /**\n           * Sets the width of the stroke used for lines, points and the border around\n           * shapes. All widths are set in units of pixels.\n           *\n           * @method strokeWeight\n           * @param  {Number} weight the weight of the stroke (in pixels)\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Example of different stroke weights\n           * strokeWeight(1); // Default\n           * line(20, 20, 80, 20);\n           * strokeWeight(4); // Thicker\n           * line(20, 40, 80, 40);\n           * strokeWeight(10); // Beastly\n           * line(20, 70, 80, 70);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3 horizontal black lines. Top line: thin, mid: medium, bottom:thick.\n           */\n          _main.default.prototype.strokeWeight = function(w) {\n            _main.default._validateParameters('strokeWeight', arguments);\n            this._renderer.strokeWeight(w);\n            return this;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../constants': 48, '../main': 59 }\n      ],\n      68: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../main'));\n          _dereq_('../friendly_errors/fes_core');\n          _dereq_('../friendly_errors/file_errors');\n          _dereq_('../friendly_errors/validate_params');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Shape\n           * @submodule Curves\n           * @for p5\n           * @requires core\n           */ /**\n           * Draws a cubic Bezier curve on the screen. These curves are defined by a\n           * series of anchor and control points. The first two parameters specify\n           * the first anchor point and the last two parameters specify the other\n           * anchor point, which become the first and last points on the curve. The\n           * middle parameters specify the two control points which define the shape\n           * of the curve. Approximately speaking, control points \"pull\" the curve\n           * towards them.\n           *\n           * Bezier curves were developed by French automotive engineer Pierre Bezier,\n           * and are commonly used in computer graphics to define gently sloping curves.\n           * See also <a href=\"#/p5/curve\">curve()</a>.\n           *\n           * @method bezier\n           * @param  {Number} x1 x-coordinate for the first anchor point\n           * @param  {Number} y1 y-coordinate for the first anchor point\n           * @param  {Number} x2 x-coordinate for the first control point\n           * @param  {Number} y2 y-coordinate for the first control point\n           * @param  {Number} x3 x-coordinate for the second control point\n           * @param  {Number} y3 y-coordinate for the second control point\n           * @param  {Number} x4 x-coordinate for the second anchor point\n           * @param  {Number} y4 y-coordinate for the second anchor point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * stroke(255, 102, 0);\n           * line(85, 20, 10, 10);\n           * line(90, 90, 15, 80);\n           * stroke(0, 0, 0);\n           * bezier(85, 20, 10, 10, 90, 90, 15, 80);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * background(0, 0, 0);\n           * noFill();\n           * stroke(255);\n           * bezier(250, 250, 0, 100, 100, 0, 100, 0, 0, 0, 100, 0);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * stretched black s-shape in center with orange lines extending from end points.\n           * a white colored curve on black background from the upper-right corner to the lower right corner.\n           */ /**\n           * @method bezier\n           * @param  {Number} x1\n           * @param  {Number} y1\n           * @param  {Number} z1 z-coordinate for the first anchor point\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 z-coordinate for the first control point\n           * @param  {Number} x3\n           * @param  {Number} y3\n           * @param  {Number} z3 z-coordinate for the second control point\n           * @param  {Number} x4\n           * @param  {Number} y4\n           * @param  {Number} z4 z-coordinate for the second anchor point\n           * @chainable\n           */ _main.default.prototype.bezier = function() {\n            var _this$_renderer;\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('bezier', args);\n\n            // if the current stroke and fill settings wouldn't result in something\n            // visible, exit immediately\n            if (!this._renderer._doStroke && !this._renderer._doFill) {\n              return this;\n            }\n\n            (_this$_renderer = this._renderer).bezier.apply(_this$_renderer, args);\n\n            return this;\n          };\n\n          /**\n           * Sets the resolution at which Bezier's curve is displayed. The default value is 20.\n           *\n           * Note, This function is only useful when using the WEBGL renderer\n           * as the default canvas renderer does not use this information.\n           *\n           * @method bezierDetail\n           * @param {Number} detail resolution of the curves\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noFill();\n           *   bezierDetail(5);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   // prettier-ignore\n           *   bezier(-40, -40, 0,\n           *           90, -40, 0,\n           *          -90,  40, 0,\n           *           40,  40, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * stretched black s-shape with a low level of bezier detail\n           */\n          _main.default.prototype.bezierDetail = function(d) {\n            _main.default._validateParameters('bezierDetail', arguments);\n            this._bezierDetail = d;\n            return this;\n          };\n\n          /**\n    * Given the x or y co-ordinate values of control and anchor points of a bezier\n    * curve, it evaluates the x or y coordinate of the bezier at position t. The\n    * parameters a and d are the x or y coordinates of first and last points on the\n    * curve while b and c are of the control points.The final parameter t is the\n    * position of the resultant point which is given between 0 and 1.\n    * This can be done once with the x coordinates and a second time\n    * with the y coordinates to get the location of a bezier curve at t.\n    *\n    * @method bezierPoint\n    * @param {Number} a coordinate of first point on the curve\n    * @param {Number} b coordinate of first control point\n    * @param {Number} c coordinate of second control point\n    * @param {Number} d coordinate of second point on the curve\n    * @param {Number} t value between 0 and 1\n    * @return {Number} the value of the Bezier at position t\n    * @example\n    * <div>\n    * <code>\n    * noFill();\n    * let x1 = 85,\n     x2 = 10,\n     x3 = 90,\n     x4 = 15;\n    * let y1 = 20,\n     y2 = 10,\n     y3 = 90,\n     y4 = 80;\n    * bezier(x1, y1, x2, y2, x3, y3, x4, y4);\n    * fill(255);\n    * let steps = 10;\n    * for (let i = 0; i <= steps; i++) {\n    *   let t = i / steps;\n    *   let x = bezierPoint(x1, x2, x3, x4, t);\n    *   let y = bezierPoint(y1, y2, y3, y4, t);\n    *   circle(x, y, 5);\n    * }\n    * </code>\n    * </div>\n    *\n    * @alt\n    * 10 points plotted on a given bezier at equal distances.\n    */\n          _main.default.prototype.bezierPoint = function(a, b, c, d, t) {\n            _main.default._validateParameters('bezierPoint', arguments);\n\n            var adjustedT = 1 - t;\n            return (\n              Math.pow(adjustedT, 3) * a +\n              3 * Math.pow(adjustedT, 2) * t * b +\n              3 * adjustedT * Math.pow(t, 2) * c +\n              Math.pow(t, 3) * d\n            );\n          };\n\n          /**\n           * Evaluates the tangent to the Bezier at position t for points a, b, c, d.\n           * The parameters a and d are the first and last points\n           * on the curve, and b and c are the control points.\n           * The final parameter t varies between 0 and 1.\n           *\n           * @method bezierTangent\n           * @param {Number} a coordinate of first point on the curve\n           * @param {Number} b coordinate of first control point\n           * @param {Number} c coordinate of second control point\n           * @param {Number} d coordinate of second point on the curve\n           * @param {Number} t value between 0 and 1\n           * @return {Number} the tangent at position t\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * bezier(85, 20, 10, 10, 90, 90, 15, 80);\n           * let steps = 6;\n           * fill(255);\n           * for (let i = 0; i <= steps; i++) {\n           *   let t = i / steps;\n           *   // Get the location of the point\n           *   let x = bezierPoint(85, 10, 90, 15, t);\n           *   let y = bezierPoint(20, 10, 90, 80, t);\n           *   // Get the tangent points\n           *   let tx = bezierTangent(85, 10, 90, 15, t);\n           *   let ty = bezierTangent(20, 10, 90, 80, t);\n           *   // Calculate an angle from the tangent points\n           *   let a = atan2(ty, tx);\n           *   a += PI;\n           *   stroke(255, 102, 0);\n           *   line(x, y, cos(a) * 30 + x, sin(a) * 30 + y);\n           *   // The following line of code makes a line\n           *   // inverse of the above line\n           *   //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);\n           *   stroke(0);\n           *   ellipse(x, y, 5, 5);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * bezier(85, 20, 10, 10, 90, 90, 15, 80);\n           * stroke(255, 102, 0);\n           * let steps = 16;\n           * for (let i = 0; i <= steps; i++) {\n           *   let t = i / steps;\n           *   let x = bezierPoint(85, 10, 90, 15, t);\n           *   let y = bezierPoint(20, 10, 90, 80, t);\n           *   let tx = bezierTangent(85, 10, 90, 15, t);\n           *   let ty = bezierTangent(20, 10, 90, 80, t);\n           *   let a = atan2(ty, tx);\n           *   a -= HALF_PI;\n           *   line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * s-shaped line with 6 short orange lines showing the tangents at those points.\n           * s-shaped line with 6 short orange lines showing lines coming out the underside of the bezier.\n           */\n          _main.default.prototype.bezierTangent = function(a, b, c, d, t) {\n            _main.default._validateParameters('bezierTangent', arguments);\n\n            var adjustedT = 1 - t;\n            return (\n              3 * d * Math.pow(t, 2) -\n              3 * c * Math.pow(t, 2) +\n              6 * c * adjustedT * t -\n              6 * b * adjustedT * t +\n              3 * b * Math.pow(adjustedT, 2) -\n              3 * a * Math.pow(adjustedT, 2)\n            );\n          };\n\n          /**\n           * Draws a curved line on the screen between two points, given as the\n           * middle four parameters. The first two parameters are a control point, as\n           * if the curve came from this point even though it's not drawn. The last\n           * two parameters similarly describe the other control point. <br /><br />\n           * Longer curves can be created by putting a series of <a href=\"#/p5/curve\">curve()</a> functions\n           * together or using <a href=\"#/p5/curveVertex\">curveVertex()</a>. An additional function called\n           * <a href=\"#/p5/curveTightness\">curveTightness()</a> provides control for the visual quality of the curve.\n           * The <a href=\"#/p5/curve\">curve()</a> function is an implementation of Catmull-Rom splines.\n           *\n           * @method curve\n           * @param  {Number} x1 x-coordinate for the beginning control point\n           * @param  {Number} y1 y-coordinate for the beginning control point\n           * @param  {Number} x2 x-coordinate for the first point\n           * @param  {Number} y2 y-coordinate for the first point\n           * @param  {Number} x3 x-coordinate for the second point\n           * @param  {Number} y3 y-coordinate for the second point\n           * @param  {Number} x4 x-coordinate for the ending control point\n           * @param  {Number} y4 y-coordinate for the ending control point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * stroke(255, 102, 0);\n           * curve(5, 26, 5, 26, 73, 24, 73, 61);\n           * stroke(0);\n           * curve(5, 26, 73, 24, 73, 61, 15, 65);\n           * stroke(255, 102, 0);\n           * curve(73, 24, 73, 61, 15, 65, 15, 65);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Define the curve points as JavaScript objects\n           * let p1 = { x: 5, y: 26 };\n           * let p2 = { x: 73, y: 24 };\n           * let p3 = { x: 73, y: 61 };\n           * let p4 = { x: 15, y: 65 };\n           * noFill();\n           * stroke(255, 102, 0);\n           * curve(p1.x, p1.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);\n           * stroke(0);\n           * curve(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y);\n           * stroke(255, 102, 0);\n           * curve(p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, p4.x, p4.y);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * stroke(255, 102, 0);\n           * curve(5, 26, 0, 5, 26, 0, 73, 24, 0, 73, 61, 0);\n           * stroke(0);\n           * curve(5, 26, 0, 73, 24, 0, 73, 61, 0, 15, 65, 0);\n           * stroke(255, 102, 0);\n           * curve(73, 24, 0, 73, 61, 0, 15, 65, 0, 15, 65, 0);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * horseshoe shape with orange ends facing left and black curved center.\n           * horseshoe shape with orange ends facing left and black curved center.\n           * curving black and orange lines.\n           */\n\n          /**\n           * @method curve\n           * @param  {Number} x1\n           * @param  {Number} y1\n           * @param  {Number} z1 z-coordinate for the beginning control point\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 z-coordinate for the first point\n           * @param  {Number} x3\n           * @param  {Number} y3\n           * @param  {Number} z3 z-coordinate for the second point\n           * @param  {Number} x4\n           * @param  {Number} y4\n           * @param  {Number} z4 z-coordinate for the ending control point\n           * @chainable\n           */\n          _main.default.prototype.curve = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('curve', args);\n\n            if (this._renderer._doStroke) {\n              var _this$_renderer2;\n              (_this$_renderer2 = this._renderer).curve.apply(_this$_renderer2, args);\n            }\n\n            return this;\n          };\n\n          /**\n           * Sets the resolution at which curves display. The default value is 20 while\n           * the minimum value is 3.\n           *\n           * This function is only useful when using the WEBGL renderer\n           * as the default canvas renderer does not use this\n           * information.\n           *\n           * @method curveDetail\n           * @param {Number} resolution resolution of the curves\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *\n           *   curveDetail(5);\n           * }\n           * function draw() {\n           *   background(200);\n           *\n           *   curve(250, 600, 0, -30, 40, 0, 30, 30, 0, -250, 600, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white arch shape with a low level of curve detail.\n           */\n          _main.default.prototype.curveDetail = function(d) {\n            _main.default._validateParameters('curveDetail', arguments);\n            if (d < 3) {\n              this._curveDetail = 3;\n            } else {\n              this._curveDetail = d;\n            }\n            return this;\n          };\n\n          /**\n           * Modifies the quality of forms created with <a href=\"#/p5/curve\">curve()</a>\n           * and <a href=\"#/p5/curveVertex\">curveVertex()</a>.The parameter tightness\n           * determines how the curve fits to the vertex points. The value 0.0 is the\n           * default value for tightness (this value defines the curves to be Catmull-Rom\n           * splines) and the value 1.0 connects all the points with straight lines.\n           * Values within the range -5.0 and 5.0 will deform the curves but will leave\n           * them recognizable and as values increase in magnitude, they will continue to deform.\n           *\n           * @method curveTightness\n           * @param {Number} amount amount of deformation from the original vertices\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse left and right to see the curve change\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   noFill();\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *   let t = map(mouseX, 0, width, -5, 5);\n           *   curveTightness(t);\n           *   beginShape();\n           *   curveVertex(10, 26);\n           *   curveVertex(10, 26);\n           *   curveVertex(83, 24);\n           *   curveVertex(83, 61);\n           *   curveVertex(25, 65);\n           *   curveVertex(25, 65);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Line shaped like right-facing arrow,points move with mouse-x and warp shape.\n           */\n          _main.default.prototype.curveTightness = function(t) {\n            _main.default._validateParameters('curveTightness', arguments);\n            this._renderer._curveTightness = t;\n            return this;\n          };\n\n          /**\n           * Evaluates the curve at position t for points a, b, c, d.\n           * The parameter t varies between 0 and 1, a and d are control points\n           * of the curve, and b and c are the start and end points of the curve.\n           * This can be done once with the x coordinates and a second time\n           * with the y coordinates to get the location of a curve at t.\n           *\n           * @method curvePoint\n           * @param {Number} a coordinate of first control point of the curve\n           * @param {Number} b coordinate of first point\n           * @param {Number} c coordinate of second point\n           * @param {Number} d coordinate of second control point\n           * @param {Number} t value between 0 and 1\n           * @return {Number} bezier value at position t\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * curve(5, 26, 5, 26, 73, 24, 73, 61);\n           * curve(5, 26, 73, 24, 73, 61, 15, 65);\n           * fill(255);\n           * ellipseMode(CENTER);\n           * let steps = 6;\n           * for (let i = 0; i <= steps; i++) {\n           *   let t = i / steps;\n           *   let x = curvePoint(5, 5, 73, 73, t);\n           *   let y = curvePoint(26, 26, 24, 61, t);\n           *   ellipse(x, y, 5, 5);\n           *   x = curvePoint(5, 73, 73, 15, t);\n           *   y = curvePoint(26, 24, 61, 65, t);\n           *   ellipse(x, y, 5, 5);\n           * }\n           * </code>\n           * </div>\n           *\n           *line hooking down to right-bottom with 13 5x5 white ellipse points\n           */\n          _main.default.prototype.curvePoint = function(a, b, c, d, t) {\n            _main.default._validateParameters('curvePoint', arguments);\n\n            var t3 = t * t * t,\n              t2 = t * t,\n              f1 = -0.5 * t3 + t2 - 0.5 * t,\n              f2 = 1.5 * t3 - 2.5 * t2 + 1.0,\n              f3 = -1.5 * t3 + 2.0 * t2 + 0.5 * t,\n              f4 = 0.5 * t3 - 0.5 * t2;\n            return a * f1 + b * f2 + c * f3 + d * f4;\n          };\n\n          /**\n           * Evaluates the tangent to the curve at position t for points a, b, c, d.\n           * The parameter t varies between 0 and 1, a and d are points on the curve,\n           * and b and c are the control points.\n           *\n           * @method curveTangent\n           * @param {Number} a coordinate of first control point\n           * @param {Number} b coordinate of first point on the curve\n           * @param {Number} c coordinate of second point on the curve\n           * @param {Number} d coordinate of second conrol point\n           * @param {Number} t value between 0 and 1\n           * @return {Number} the tangent at position t\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * curve(5, 26, 73, 24, 73, 61, 15, 65);\n           * let steps = 6;\n           * for (let i = 0; i <= steps; i++) {\n           *   let t = i / steps;\n           *   let x = curvePoint(5, 73, 73, 15, t);\n           *   let y = curvePoint(26, 24, 61, 65, t);\n           *   //ellipse(x, y, 5, 5);\n           *   let tx = curveTangent(5, 73, 73, 15, t);\n           *   let ty = curveTangent(26, 24, 61, 65, t);\n           *   let a = atan2(ty, tx);\n           *   a -= PI / 2.0;\n           *   line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * right curving line mid-right of canvas with 7 short lines radiating from it.\n           */\n          _main.default.prototype.curveTangent = function(a, b, c, d, t) {\n            _main.default._validateParameters('curveTangent', arguments);\n\n            var t2 = t * t,\n              f1 = -3 * t2 / 2 + 2 * t - 0.5,\n              f2 = 9 * t2 / 2 - 5 * t,\n              f3 = -9 * t2 / 2 + 4 * t + 0.5,\n              f4 = 3 * t2 / 2 - t;\n            return a * f1 + b * f2 + c * f3 + d * f4;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../friendly_errors/fes_core': 51,\n          '../friendly_errors/file_errors': 52,\n          '../friendly_errors/validate_params': 54,\n          '../main': 59\n        }\n      ],\n      69: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../main'));\n          var constants = _interopRequireWildcard(_dereq_('../constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Shape\n           * @submodule Vertex\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ var shapeKind = null;\n          var vertices = [];\n          var contourVertices = [];\n          var isBezier = false;\n          var isCurve = false;\n          var isQuadratic = false;\n          var isContour = false;\n          var isFirstContour = true;\n\n          /**\n           * Use the <a href=\"#/p5/beginContour\">beginContour()</a> and\n           * <a href=\"#/p5/endContour\">endContour()</a> functions to create negative shapes\n           * within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\n           * begins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\n           * The vertices that define a negative shape must \"wind\" in the opposite direction\n           * from the exterior shape. First draw vertices for the exterior clockwise order, then for internal shapes, draw vertices\n           * shape in counter-clockwise.\n           *\n           * These functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\n           * transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\n           * within a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\n           * other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.\n           *\n           * @method beginContour\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(50, 50);\n           * stroke(255, 0, 0);\n           * beginShape();\n           * // Exterior part of shape, clockwise winding\n           * vertex(-40, -40);\n           * vertex(40, -40);\n           * vertex(40, 40);\n           * vertex(-40, 40);\n           * // Interior part of shape, counter-clockwise winding\n           * beginContour();\n           * vertex(-20, -20);\n           * vertex(-20, 20);\n           * vertex(20, 20);\n           * vertex(20, -20);\n           * endContour();\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white rect and smaller grey rect with red outlines in center of canvas.\n           */\n          _main.default.prototype.beginContour = function() {\n            contourVertices = [];\n            isContour = true;\n            return this;\n          };\n\n          /**\n           * Using the <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> functions allow creating more\n           * complex forms. <a href=\"#/p5/beginShape\">beginShape()</a> begins recording vertices for a shape and\n           * <a href=\"#/p5/endShape\">endShape()</a> stops recording. The value of the kind parameter tells it which\n           * types of shapes to create from the provided vertices. With no mode\n           * specified, the shape can be any irregular polygon.\n           *\n           * The parameters available for <a href=\"#/p5/beginShape\">beginShape()</a> are POINTS, LINES, TRIANGLES,\n           * TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP, and TESS (WebGL only). After calling the\n           * <a href=\"#/p5/beginShape\">beginShape()</a> function, a series of <a href=\"#/p5/vertex\">vertex()</a> commands must follow. To stop\n           * drawing the shape, call <a href=\"#/p5/endShape\">endShape()</a>. Each shape will be outlined with the\n           * current stroke color and filled with the fill color.\n           *\n           * Transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\n           * within <a href=\"#/p5/beginShape\">beginShape()</a>. It is also not possible to use other shapes, such as\n           * <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within <a href=\"#/p5/beginShape\">beginShape()</a>.\n           *\n           * @method beginShape\n           * @param  {Constant} [kind] either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n           *                                TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * beginShape();\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(POINTS);\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(LINES);\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * beginShape();\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * noFill();\n           * beginShape();\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(TRIANGLES);\n           * vertex(30, 75);\n           * vertex(40, 20);\n           * vertex(50, 75);\n           * vertex(60, 20);\n           * vertex(70, 75);\n           * vertex(80, 20);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(TRIANGLE_STRIP);\n           * vertex(30, 75);\n           * vertex(40, 20);\n           * vertex(50, 75);\n           * vertex(60, 20);\n           * vertex(70, 75);\n           * vertex(80, 20);\n           * vertex(90, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(TRIANGLE_FAN);\n           * vertex(57.5, 50);\n           * vertex(57.5, 15);\n           * vertex(92, 50);\n           * vertex(57.5, 85);\n           * vertex(22, 50);\n           * vertex(57.5, 15);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(QUADS);\n           * vertex(30, 20);\n           * vertex(30, 75);\n           * vertex(50, 75);\n           * vertex(50, 20);\n           * vertex(65, 20);\n           * vertex(65, 75);\n           * vertex(85, 75);\n           * vertex(85, 20);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape(QUAD_STRIP);\n           * vertex(30, 20);\n           * vertex(30, 75);\n           * vertex(50, 20);\n           * vertex(50, 75);\n           * vertex(65, 20);\n           * vertex(65, 75);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape();\n           * vertex(20, 20);\n           * vertex(40, 20);\n           * vertex(40, 40);\n           * vertex(60, 40);\n           * vertex(60, 60);\n           * vertex(20, 60);\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white square-shape with black outline in middle-right of canvas.\n           * 4 black points in a square shape in middle-right of canvas.\n           * 2 horizontal black lines. In the top-right and bottom-right of canvas.\n           * 3 line shape with horizontal on top, vertical in middle and horizontal bottom.\n           * square line shape in middle-right of canvas.\n           * 2 white triangle shapes mid-right canvas. left one pointing up and right down.\n           * 5 horizontal interlocking and alternating white triangles in mid-right canvas.\n           * 4 interlocking white triangles in 45 degree rotated square-shape.\n           * 2 white rectangle shapes in mid-right canvas. Both 20x55.\n           * 3 side-by-side white rectangles center rect is smaller in mid-right canvas.\n           * Thick white l-shape with black outline mid-top-left of canvas.\n           */\n          _main.default.prototype.beginShape = function(kind) {\n            _main.default._validateParameters('beginShape', arguments);\n            if (this._renderer.isP3D) {\n              var _this$_renderer;\n              (_this$_renderer = this._renderer).beginShape.apply(\n                _this$_renderer,\n                arguments\n              );\n            } else {\n              if (\n                kind === constants.POINTS ||\n                kind === constants.LINES ||\n                kind === constants.TRIANGLES ||\n                kind === constants.TRIANGLE_FAN ||\n                kind === constants.TRIANGLE_STRIP ||\n                kind === constants.QUADS ||\n                kind === constants.QUAD_STRIP\n              ) {\n                shapeKind = kind;\n              } else {\n                shapeKind = null;\n              }\n\n              vertices = [];\n              contourVertices = [];\n            }\n            return this;\n          };\n\n          /**\n           * Specifies vertex coordinates for Bezier curves. Each call to\n           * bezierVertex() defines the position of two control points and\n           * one anchor point of a Bezier curve, adding a new segment to a\n           * line or shape. For WebGL mode bezierVertex() can be used in 2D\n           * as well as 3D mode. 2D mode expects 6 parameters, while 3D mode\n           * expects 9 parameters (including z coordinates).\n           *\n           * The first time bezierVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a>\n           * call, it must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor\n           * point. This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\n           * and only when there is no MODE or POINTS parameter specified to\n           * <a href=\"#/p5/beginShape\">beginShape()</a>.\n           *\n           * @method bezierVertex\n           * @param  {Number} x2 x-coordinate for the first control point\n           * @param  {Number} y2 y-coordinate for the first control point\n           * @param  {Number} x3 x-coordinate for the second control point\n           * @param  {Number} y3 y-coordinate for the second control point\n           * @param  {Number} x4 x-coordinate for the anchor point\n           * @param  {Number} y4 y-coordinate for the anchor point\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           * beginShape();\n           * vertex(30, 20);\n           * bezierVertex(80, 0, 80, 75, 30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * beginShape();\n           * vertex(30, 20);\n           * bezierVertex(80, 0, 80, 75, 30, 75);\n           * bezierVertex(50, 80, 60, 25, 30, 20);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           * }\n           * function draw() {\n           *   orbitControl();\n           *   background(50);\n           *   strokeWeight(4);\n           *   stroke(255);\n           *   point(-25, 30);\n           *   point(25, 30);\n           *   point(25, -30);\n           *   point(-25, -30);\n           *\n           *   strokeWeight(1);\n           *   noFill();\n           *\n           *   beginShape();\n           *   vertex(-25, 30);\n           *   bezierVertex(25, 30, 25, -30, -25, -30);\n           *   endShape();\n           *\n           *   beginShape();\n           *   vertex(-25, 30, 20);\n           *   bezierVertex(25, 30, 20, 25, -30, 20, -25, -30, 20);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * crescent-shaped line in middle of canvas. Points facing left.\n           * white crescent shape in middle of canvas. Points facing left.\n           * crescent shape in middle of canvas with another crescent shape on positive z-axis.\n           */\n\n          /**\n           * @method bezierVertex\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 z-coordinate for the first control point (for WebGL mode)\n           * @param  {Number} x3\n           * @param  {Number} y3\n           * @param  {Number} z3 z-coordinate for the second control point (for WebGL mode)\n           * @param  {Number} x4\n           * @param  {Number} y4\n           * @param  {Number} z4 z-coordinate for the anchor point (for WebGL mode)\n           * @chainable\n           */\n          _main.default.prototype.bezierVertex = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('bezierVertex', args);\n            if (this._renderer.isP3D) {\n              var _this$_renderer2;\n              (_this$_renderer2 = this._renderer).bezierVertex.apply(\n                _this$_renderer2,\n                args\n              );\n            } else {\n              if (vertices.length === 0) {\n                _main.default._friendlyError(\n                  'vertex() must be used once before calling bezierVertex()',\n                  'bezierVertex'\n                );\n              } else {\n                isBezier = true;\n                var vert = [];\n                for (var i = 0; i < args.length; i++) {\n                  vert[i] = args[i];\n                }\n                vert.isVert = false;\n                if (isContour) {\n                  contourVertices.push(vert);\n                } else {\n                  vertices.push(vert);\n                }\n              }\n            }\n            return this;\n          };\n\n          /**\n           * Specifies vertex coordinates for curves. This function may only\n           * be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there\n           * is no MODE parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>.\n           * For WebGL mode curveVertex() can be used in 2D as well as 3D mode.\n           * 2D mode expects 2 parameters, while 3D mode expects 3 parameters.\n           *\n           * The first and last points in a series of curveVertex() lines will be used to\n           * guide the beginning and end of a the curve. A minimum of four\n           * points is required to draw a tiny curve between the second and\n           * third points. Adding a fifth point with curveVertex() will draw\n           * the curve between the second, third, and fourth points. The\n           * curveVertex() function is an implementation of Catmull-Rom\n           * splines.\n           *\n           * @method curveVertex\n           * @param {Number} x x-coordinate of the vertex\n           * @param {Number} y y-coordinate of the vertex\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(5);\n           * point(84, 91);\n           * point(68, 19);\n           * point(21, 17);\n           * point(32, 91);\n           * strokeWeight(1);\n           *\n           * noFill();\n           * beginShape();\n           * curveVertex(84, 91);\n           * curveVertex(84, 91);\n           * curveVertex(68, 19);\n           * curveVertex(21, 17);\n           * curveVertex(32, 91);\n           * curveVertex(32, 91);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Upside-down u-shape line, mid canvas. left point extends beyond canvas view.\n           */\n\n          /**\n           * @method curveVertex\n           * @param {Number} x\n           * @param {Number} y\n           * @param {Number} [z] z-coordinate of the vertex (for WebGL mode)\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           * }\n           * function draw() {\n           *   orbitControl();\n           *   background(50);\n           *   strokeWeight(4);\n           *   stroke(255);\n           *\n           *   point(-25, 25);\n           *   point(-25, 25);\n           *   point(-25, -25);\n           *   point(25, -25);\n           *   point(25, 25);\n           *   point(25, 25);\n           *\n           *   strokeWeight(1);\n           *   noFill();\n           *\n           *   beginShape();\n           *   curveVertex(-25, 25);\n           *   curveVertex(-25, 25);\n           *   curveVertex(-25, -25);\n           *   curveVertex(25, -25);\n           *   curveVertex(25, 25);\n           *   curveVertex(25, 25);\n           *   endShape();\n           *\n           *   beginShape();\n           *   curveVertex(-25, 25, 20);\n           *   curveVertex(-25, 25, 20);\n           *   curveVertex(-25, -25, 20);\n           *   curveVertex(25, -25, 20);\n           *   curveVertex(25, 25, 20);\n           *   curveVertex(25, 25, 20);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Upside-down u-shape line, mid canvas with the same shape in positive z-axis.\n           */\n          _main.default.prototype.curveVertex = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('curveVertex', args);\n            if (this._renderer.isP3D) {\n              var _this$_renderer3;\n              (_this$_renderer3 = this._renderer).curveVertex.apply(_this$_renderer3, args);\n            } else {\n              isCurve = true;\n              this.vertex(args[0], args[1]);\n            }\n            return this;\n          };\n\n          /**\n           * Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\n           * shapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\n           * begins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\n           * The vertices that define a negative shape must \"wind\" in the opposite\n           * direction from the exterior shape. First draw vertices for the exterior\n           * clockwise order, then for internal shapes, draw vertices\n           * shape in counter-clockwise.\n           *\n           * These functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\n           * transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\n           * within a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\n           * other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.\n           *\n           * @method endContour\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(50, 50);\n           * stroke(255, 0, 0);\n           * beginShape();\n           * // Exterior part of shape, clockwise winding\n           * vertex(-40, -40);\n           * vertex(40, -40);\n           * vertex(40, 40);\n           * vertex(-40, 40);\n           * // Interior part of shape, counter-clockwise winding\n           * beginContour();\n           * vertex(-20, -20);\n           * vertex(-20, 20);\n           * vertex(20, 20);\n           * vertex(20, -20);\n           * endContour();\n           * endShape(CLOSE);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white rect and smaller grey rect with red outlines in center of canvas.\n           */\n          _main.default.prototype.endContour = function() {\n            var vert = contourVertices[0].slice(); // copy all data\n            vert.isVert = contourVertices[0].isVert;\n            vert.moveTo = false;\n            contourVertices.push(vert);\n\n            // prevent stray lines with multiple contours\n            if (isFirstContour) {\n              vertices.push(vertices[0]);\n              isFirstContour = false;\n            }\n\n            for (var i = 0; i < contourVertices.length; i++) {\n              vertices.push(contourVertices[i]);\n            }\n            return this;\n          };\n\n          /**\n           * The <a href=\"#/p5/endShape\">endShape()</a> function is the companion to <a href=\"#/p5/beginShape\">beginShape()</a> and may only be\n           * called after <a href=\"#/p5/beginShape\">beginShape()</a>. When <a href=\"#/p5/endshape\">endShape()</a> is called, all of image data\n           * defined since the previous call to <a href=\"#/p5/beginShape\">beginShape()</a> is written into the image\n           * buffer. The constant CLOSE as the value for the MODE parameter to close\n           * the shape (to connect the beginning and the end).\n           *\n           * @method endShape\n           * @param  {Constant} [mode] use CLOSE to close the shape\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * noFill();\n           *\n           * beginShape();\n           * vertex(20, 20);\n           * vertex(45, 20);\n           * vertex(45, 80);\n           * endShape(CLOSE);\n           *\n           * beginShape();\n           * vertex(50, 20);\n           * vertex(75, 20);\n           * vertex(75, 80);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Triangle line shape with smallest interior angle on bottom and upside-down L.\n           */\n          _main.default.prototype.endShape = function(mode) {\n            _main.default._validateParameters('endShape', arguments);\n            if (this._renderer.isP3D) {\n              this._renderer.endShape(\n                mode,\n                isCurve,\n                isBezier,\n                isQuadratic,\n                isContour,\n                shapeKind\n              );\n            } else {\n              if (vertices.length === 0) {\n                return this;\n              }\n              if (!this._renderer._doStroke && !this._renderer._doFill) {\n                return this;\n              }\n\n              var closeShape = mode === constants.CLOSE;\n\n              // if the shape is closed, the first element is also the last element\n              if (closeShape && !isContour) {\n                vertices.push(vertices[0]);\n              }\n\n              this._renderer.endShape(\n                mode,\n                vertices,\n                isCurve,\n                isBezier,\n                isQuadratic,\n                isContour,\n                shapeKind\n              );\n\n              // Reset some settings\n              isCurve = false;\n              isBezier = false;\n              isQuadratic = false;\n              isContour = false;\n              isFirstContour = true;\n\n              // If the shape is closed, the first element was added as last element.\n              // We must remove it again to prevent the list of vertices from growing\n              // over successive calls to endShape(CLOSE)\n              if (closeShape) {\n                vertices.pop();\n              }\n            }\n            return this;\n          };\n\n          /**\n           * Specifies vertex coordinates for quadratic Bezier curves. Each call to\n           * quadraticVertex() defines the position of one control points and one\n           * anchor point of a Bezier curve, adding a new segment to a line or shape.\n           * The first time quadraticVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a> call, it\n           * must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor point.\n           * For WebGL mode quadraticVertex() can be used in 2D as well as 3D mode.\n           * 2D mode expects 4 parameters, while 3D mode expects 6 parameters\n           * (including z coordinates).\n           *\n           * This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\n           * and only when there is no MODE or POINTS parameter specified to\n           * <a href=\"#/p5/beginShape\">beginShape()</a>.\n           *\n           * @method quadraticVertex\n           * @param  {Number} cx x-coordinate for the control point\n           * @param  {Number} cy y-coordinate for the control point\n           * @param  {Number} x3 x-coordinate for the anchor point\n           * @param  {Number} y3 y-coordinate for the anchor point\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(5);\n           * point(20, 20);\n           * point(80, 20);\n           * point(50, 50);\n           *\n           * noFill();\n           * strokeWeight(1);\n           * beginShape();\n           * vertex(20, 20);\n           * quadraticVertex(80, 20, 50, 50);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * strokeWeight(5);\n           * point(20, 20);\n           * point(80, 20);\n           * point(50, 50);\n           *\n           * point(20, 80);\n           * point(80, 80);\n           * point(80, 60);\n           *\n           * noFill();\n           * strokeWeight(1);\n           * beginShape();\n           * vertex(20, 20);\n           * quadraticVertex(80, 20, 50, 50);\n           * quadraticVertex(20, 80, 80, 80);\n           * vertex(80, 60);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * arched-shaped black line with 4 pixel thick stroke weight.\n           * backwards s-shaped black line with 4 pixel thick stroke weight.\n           */\n\n          /**\n           * @method quadraticVertex\n           * @param  {Number} cx\n           * @param  {Number} cy\n           * @param  {Number} cz z-coordinate for the control point (for WebGL mode)\n           * @param  {Number} x3\n           * @param  {Number} y3\n           * @param  {Number} z3 z-coordinate for the anchor point (for WebGL mode)\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           * }\n           * function draw() {\n           *   orbitControl();\n           *   background(50);\n           *   strokeWeight(4);\n           *   stroke(255);\n           *\n           *   point(-35, -35);\n           *   point(35, -35);\n           *   point(0, 0);\n           *   point(-35, 35);\n           *   point(35, 35);\n           *   point(35, 10);\n           *\n           *   strokeWeight(1);\n           *   noFill();\n           *\n           *   beginShape();\n           *   vertex(-35, -35);\n           *   quadraticVertex(35, -35, 0, 0);\n           *   quadraticVertex(-35, 35, 35, 35);\n           *   vertex(35, 10);\n           *   endShape();\n           *\n           *   beginShape();\n           *   vertex(-35, -35, 20);\n           *   quadraticVertex(35, -35, 20, 0, 0, 20);\n           *   quadraticVertex(-35, 35, 20, 35, 35, 20);\n           *   vertex(35, 10, 20);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * backwards s-shaped black line with the same s-shaped line in postive z-axis.\n           */\n          _main.default.prototype.quadraticVertex = function() {\n            for (\n              var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n              _key3 < _len3;\n              _key3++\n            ) {\n              args[_key3] = arguments[_key3];\n            }\n            _main.default._validateParameters('quadraticVertex', args);\n            if (this._renderer.isP3D) {\n              var _this$_renderer4;\n              (_this$_renderer4 = this._renderer).quadraticVertex.apply(\n                _this$_renderer4,\n                args\n              );\n            } else {\n              //if we're drawing a contour, put the points into an\n              // array for inside drawing\n              if (this._contourInited) {\n                var pt = {};\n                pt.x = args[0];\n                pt.y = args[1];\n                pt.x3 = args[2];\n                pt.y3 = args[3];\n                pt.type = constants.QUADRATIC;\n                this._contourVertices.push(pt);\n\n                return this;\n              }\n              if (vertices.length > 0) {\n                isQuadratic = true;\n                var vert = [];\n                for (var i = 0; i < args.length; i++) {\n                  vert[i] = args[i];\n                }\n                vert.isVert = false;\n                if (isContour) {\n                  contourVertices.push(vert);\n                } else {\n                  vertices.push(vert);\n                }\n              } else {\n                _main.default._friendlyError(\n                  'vertex() must be used once before calling quadraticVertex()',\n                  'quadraticVertex'\n                );\n              }\n            }\n            return this;\n          };\n\n          /**\n           * All shapes are constructed by connecting a series of vertices. <a href=\"#/p5/vertex\">vertex()</a>\n           * is used to specify the vertex coordinates for points, lines, triangles,\n           * quads, and polygons. It is used exclusively within the <a href=\"#/p5/beginShape\">beginShape()</a> and\n           * <a href=\"#/p5/endShape\">endShape()</a> functions.\n           *\n           * @method vertex\n           * @param  {Number} x x-coordinate of the vertex\n           * @param  {Number} y y-coordinate of the vertex\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(3);\n           * beginShape(POINTS);\n           * vertex(30, 20);\n           * vertex(85, 20);\n           * vertex(85, 75);\n           * vertex(30, 75);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * createCanvas(100, 100, WEBGL);\n           * background(240, 240, 240);\n           * fill(237, 34, 93);\n           * noStroke();\n           * beginShape();\n           * vertex(0, 35);\n           * vertex(35, 0);\n           * vertex(0, -35);\n           * vertex(-35, 0);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * createCanvas(100, 100, WEBGL);\n           * background(240, 240, 240);\n           * fill(237, 34, 93);\n           * noStroke();\n           * beginShape();\n           * vertex(-10, 10);\n           * vertex(0, 35);\n           * vertex(10, 10);\n           * vertex(35, 0);\n           * vertex(10, -8);\n           * vertex(0, -35);\n           * vertex(-10, -8);\n           * vertex(-35, 0);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * strokeWeight(3);\n           * stroke(237, 34, 93);\n           * beginShape(LINES);\n           * vertex(10, 35);\n           * vertex(90, 35);\n           * vertex(10, 65);\n           * vertex(90, 65);\n           * vertex(35, 10);\n           * vertex(35, 90);\n           * vertex(65, 10);\n           * vertex(65, 90);\n           * endShape();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // Click to change the number of sides.\n           * // In WebGL mode, custom shapes will only\n           * // display hollow fill sections when\n           * // all calls to vertex() use the same z-value.\n           *\n           * let sides = 3;\n           * let angle, px, py;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           *   fill(237, 34, 93);\n           *   strokeWeight(3);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateZ(frameCount * 0.01);\n           *   ngon(sides, 0, 0, 80);\n           * }\n           *\n           * function mouseClicked() {\n           *   if (sides > 6) {\n           *     sides = 3;\n           *   } else {\n           *     sides++;\n           *   }\n           * }\n           *\n           * function ngon(n, x, y, d) {\n           *   beginShape(TESS);\n           *   for (let i = 0; i < n + 1; i++) {\n           *     angle = TWO_PI / n * i;\n           *     px = x + sin(angle) * d / 2;\n           *     py = y - cos(angle) * d / 2;\n           *     vertex(px, py, 0);\n           *   }\n           *   for (let i = 0; i < n + 1; i++) {\n           *     angle = TWO_PI / n * i;\n           *     px = x + sin(angle) * d / 4;\n           *     py = y - cos(angle) * d / 4;\n           *     vertex(px, py, 0);\n           *   }\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * 4 black points in a square shape in middle-right of canvas.\n           * 4 points making a diamond shape.\n           * 8 points making a star.\n           * 8 points making 4 lines.\n           * A rotating 3D shape with a hollow section in the middle.\n           */\n          /**\n           * @method vertex\n           * @param  {Number} x\n           * @param  {Number} y\n           * @param  {Number} z   z-coordinate of the vertex\n           * @param  {Number} [u] the vertex's texture u-coordinate\n           * @param  {Number} [v] the vertex's texture v-coordinate\n           * @chainable\n           */\n          _main.default.prototype.vertex = function(x, y, moveTo, u, v) {\n            if (this._renderer.isP3D) {\n              var _this$_renderer5;\n              (_this$_renderer5 = this._renderer).vertex.apply(_this$_renderer5, arguments);\n            } else {\n              var vert = [];\n              vert.isVert = true;\n              vert[0] = x;\n              vert[1] = y;\n              vert[2] = 0;\n              vert[3] = 0;\n              vert[4] = 0;\n              vert[5] = this._renderer._getFill();\n              vert[6] = this._renderer._getStroke();\n\n              if (moveTo) {\n                vert.moveTo = moveTo;\n              }\n              if (isContour) {\n                if (contourVertices.length === 0) {\n                  vert.moveTo = true;\n                }\n                contourVertices.push(vert);\n              } else {\n                vertices.push(vert);\n              }\n            }\n            return this;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../constants': 48, '../main': 59 }\n      ],\n      70: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          } // requestAnim shim layer by Paul Irish\n          // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n          // http://my.opera.com/emoller/blog/2011/12/20/\n          // requestanimationframe-for-smart-er-animating\n          // requestAnimationFrame polyfill by Erik Möller\n          // fixes from Paul Irish and Tino Zijdel\n          window.requestAnimationFrame = (function() {\n            return (\n              window.requestAnimationFrame ||\n              window.webkitRequestAnimationFrame ||\n              window.mozRequestAnimationFrame ||\n              window.oRequestAnimationFrame ||\n              window.msRequestAnimationFrame ||\n              function(callback, element) {\n                // should '60' here be framerate?\n                window.setTimeout(callback, 1000 / 60);\n              }\n            );\n          })();\n\n          /**\n           * shim for Uint8ClampedArray.slice\n           * (allows arrayCopy to work with pixels[])\n           * with thanks to http://halfpapstudios.com/blog/tag/html5-canvas/\n           * Enumerable set to false to protect for...in from\n           * Uint8ClampedArray.prototype pollution.\n           */\n          (function() {\n            if (\n              typeof Uint8ClampedArray !== 'undefined' &&\n              !Uint8ClampedArray.prototype.slice\n            ) {\n              Object.defineProperty(Uint8ClampedArray.prototype, 'slice', {\n                value: Array.prototype.slice,\n                writable: true,\n                configurable: true,\n                enumerable: false\n              });\n            }\n          })();\n\n          /**\n           * this is implementation of Object.assign() which is unavailable in\n           * IE11 and (non-Chrome) Android browsers.\n           * The assign() method is used to copy the values of all enumerable\n           * own properties from one or more source objects to a target object.\n           * It will return the target object.\n           * Modified from https://github.com/ljharb/object.assign\n           */\n          (function() {\n            if (!Object.assign) {\n              var keys = Object.keys;\n              var defineProperty = Object.defineProperty;\n              var canBeObject = function canBeObject(obj) {\n                return typeof obj !== 'undefined' && obj !== null;\n              };\n              var hasSymbols =\n                typeof Symbol === 'function' && _typeof(Symbol()) === 'symbol';\n              var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n              var isEnumerableOn = function isEnumerableOn(obj) {\n                return function isEnumerable(prop) {\n                  return propIsEnumerable.call(obj, prop);\n                };\n              };\n\n              // per ES6 spec, this function has to have a length of 2\n              var assignShim = function assign(target, source1) {\n                if (!canBeObject(target)) {\n                  throw new TypeError('target must be an object');\n                }\n                var objTarget = Object(target);\n                var s, source, i, props;\n                for (s = 1; s < arguments.length; ++s) {\n                  source = Object(arguments[s]);\n                  props = keys(source);\n                  if (hasSymbols && Object.getOwnPropertySymbols) {\n                    props.push.apply(\n                      props,\n                      Object.getOwnPropertySymbols(source).filter(isEnumerableOn(source))\n                    );\n                  }\n                  for (i = 0; i < props.length; ++i) {\n                    objTarget[props[i]] = source[props[i]];\n                  }\n                }\n                return objTarget;\n              };\n\n              defineProperty(Object, 'assign', {\n                value: assignShim,\n                configurable: true,\n                enumerable: false,\n                writable: true\n              });\n            }\n          })();\n        },\n        {}\n      ],\n      71: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Structure\n           * @submodule Structure\n           * @for p5\n           * @requires core\n           */ /**\n                                                                                                                                                         * Stops p5.js from continuously executing the code within <a href=\"#/p5/draw\">draw()</a>.\n                                                                                                                                                         * If <a href=\"#/p5/loop\">loop()</a> is called, the code in <a href=\"#/p5/draw\">draw()</a>\n                                                                                                                                                         * begins to run continuously again. If using <a href=\"#/p5/noLoop\">noLoop()</a>\n                                                                                                                                                         * in <a href=\"#/p5/setup\">setup()</a>, it should be the last line inside the block.\n                                                                                                                                                         *\n                                                                                                                                                         * When <a href=\"#/p5/noLoop\">noLoop()</a> is used, it's not possible to manipulate\n                                                                                                                                                         * or access the screen inside event handling functions such as\n                                                                                                                                                         * <a href=\"#/p5/mousePressed\">mousePressed()</a> or\n                                                                                                                                                         * <a href=\"#/p5/keyPressed\">keyPressed()</a>. Instead, use those functions to\n                                                                                                                                                         * call <a href=\"#/p5/redraw\">redraw()</a> or <a href=\"#/p5/loop\">loop()</a>,\n                                                                                                                                                         * which will run <a href=\"#/p5/draw\">draw()</a>, which can update the screen\n                                                                                                                                                         * properly. This means that when <a href=\"#/p5/noLoop\">noLoop()</a> has been\n                                                                                                                                                         * called, no drawing can happen, and functions like <a href=\"#/p5/saveFrame\">saveFrame()</a>\n                                                                                                                                                         * or <a href=\"#/p5/loadPixels\">loadPixels()</a> may not be used.\n                                                                                                                                                         *\n                                                                                                                                                         * Note that if the sketch is resized, <a href=\"#/p5/redraw\">redraw()</a> will\n                                                                                                                                                         * be called to update the sketch, even after <a href=\"#/p5/noLoop\">noLoop()</a>\n                                                                                                                                                         * has been specified. Otherwise, the sketch would enter an odd state until\n                                                                                                                                                         * <a href=\"#/p5/loop\">loop()</a> was called.\n                                                                                                                                                         *\n                                                                                                                                                         * Use <a href=\"#/p5/isLooping\">isLooping()</a> to check current state of loop().\n                                                                                                                                                         *\n                                                                                                                                                         * @method noLoop\n                                                                                                                                                         * @example\n                                                                                                                                                         * <div>\n                                                                                                                                                         * <code>\n                                                                                                                                                         * function setup() {\n                                                                                                                                                         *   createCanvas(100, 100);\n                                                                                                                                                         *   background(200);\n                                                                                                                                                         *   noLoop();\n                                                                                                                                                         * }\n                                                                                                                                                        \n                                                                                                                                                         * function draw() {\n                                                                                                                                                         *   line(10, 10, 90, 90);\n                                                                                                                                                         * }\n                                                                                                                                                         * </code>\n                                                                                                                                                         * </div>\n                                                                                                                                                         *\n                                                                                                                                                         * <div>\n                                                                                                                                                         * <code>\n                                                                                                                                                         * let x = 0;\n                                                                                                                                                         * function setup() {\n                                                                                                                                                         *   createCanvas(100, 100);\n                                                                                                                                                         * }\n                                                                                                                                                         *\n                                                                                                                                                         * function draw() {\n                                                                                                                                                         *   background(204);\n                                                                                                                                                         *   x = x + 0.1;\n                                                                                                                                                         *   if (x > width) {\n                                                                                                                                                         *     x = 0;\n                                                                                                                                                         *   }\n                                                                                                                                                         *   line(x, 0, x, height);\n                                                                                                                                                         * }\n                                                                                                                                                         *\n                                                                                                                                                         * function mousePressed() {\n                                                                                                                                                         *   noLoop();\n                                                                                                                                                         * }\n                                                                                                                                                         *\n                                                                                                                                                         * function mouseReleased() {\n                                                                                                                                                         *   loop();\n                                                                                                                                                         * }\n                                                                                                                                                         * </code>\n                                                                                                                                                         * </div>\n                                                                                                                                                         *\n                                                                                                                                                         * @alt\n                                                                                                                                                         * 113 pixel long line extending from top-left to bottom right of canvas.\n                                                                                                                                                         * horizontal line moves slowly from left. Loops but stops on mouse press.\n                                                                                                                                                         */ _main.default.prototype.noLoop = function() {\n            this._loop = false;\n          };\n\n          /**\n           * By default, p5.js loops through draw() continuously, executing the code within\n           * it. However, the <a href=\"#/p5/draw\">draw()</a> loop may be stopped by calling\n           * <a href=\"#/p5/noLoop\">noLoop()</a>. In that case, the <a href=\"#/p5/draw\">draw()</a>\n           * loop can be resumed with loop().\n           *\n           * Avoid calling loop() from inside setup().\n           *\n           * Use <a href=\"#/p5/isLooping\">isLooping()</a> to check current state of loop().\n           *\n           * @method loop\n           * @example\n           * <div>\n           * <code>\n           * let x = 0;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   noLoop();\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *   x = x + 0.1;\n           *   if (x > width) {\n           *     x = 0;\n           *   }\n           *   line(x, 0, x, height);\n           * }\n           *\n           * function mousePressed() {\n           *   loop();\n           * }\n           *\n           * function mouseReleased() {\n           *   noLoop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * horizontal line moves slowly from left. Loops but stops on mouse press.\n           */\n          _main.default.prototype.loop = function() {\n            if (!this._loop) {\n              this._loop = true;\n              if (this._setupDone) {\n                this._draw();\n              }\n            }\n          };\n\n          /**\n           * By default, p5.js loops through <a href=\"#/p5/draw\">draw()</a> continuously,\n           * executing the code within it. If the sketch is stopped with\n           * <a href=\"#/p5/noLoop\">noLoop()</a> or resumed with <a href=\"#/p5/loop\">loop()</a>,\n           * isLooping() returns the current state for use within custom event handlers.\n           *\n           * @method isLooping\n           * @example\n           * <div>\n           * <code>\n           * let checkbox, button, colBG, colFill;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *\n           *   button = createButton('Colorize if loop()');\n           *   button.position(0, 120);\n           *   button.mousePressed(changeBG);\n           *\n           *   checkbox = createCheckbox('loop()', true);\n           *   checkbox.changed(checkLoop);\n           *\n           *   colBG = color(0);\n           *   colFill = color(255);\n           * }\n           *\n           * function changeBG() {\n           *   if (isLooping()) {\n           *     colBG = color(random(255), random(255), random(255));\n           *     colFill = color(random(255), random(255), random(255));\n           *   }\n           * }\n           *\n           * function checkLoop() {\n           *   if (this.checked()) {\n           *     loop();\n           *   } else {\n           *     noLoop();\n           *   }\n           * }\n           *\n           * function draw() {\n           *   background(colBG);\n           *   fill(colFill);\n           *   ellipse(frameCount % width, height / 2, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Ellipse moves slowly from left. Checkbox toggles loop()/noLoop().\n           * Button colorizes sketch if isLooping().\n           *\n           */\n          _main.default.prototype.isLooping = function() {\n            return this._loop;\n          };\n\n          /**\n           * The <a href=\"#/p5/push\">push()</a> function saves the current drawing style\n           * settings and transformations, while <a href=\"#/p5/pop\">pop()</a> restores these\n           * settings. Note that these functions are always used together. They allow you to\n           * change the style and transformation settings and later return to what you had.\n           * When a new state is started with <a href=\"#/p5/push\">push()</a>, it builds on\n           * the current style and transform information. The <a href=\"#/p5/push\">push()</a>\n           * and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide more\n           * control. (See the second example for a demonstration.)\n           *\n           * <a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\n           * and style settings controlled by the following functions:\n           * <a href=\"#/p5/fill\">fill()</a>,\n           * <a href=\"#/p5/noFill\">noFill()</a>,\n           * <a href=\"#/p5/noStroke\">noStroke()</a>,\n           * <a href=\"#/p5/stroke\">stroke()</a>,\n           * <a href=\"#/p5/tint\">tint()</a>,\n           * <a href=\"#/p5/noTint\">noTint()</a>,\n           * <a href=\"#/p5/strokeWeight\">strokeWeight()</a>,\n           * <a href=\"#/p5/strokeCap\">strokeCap()</a>,\n           * <a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n           * <a href=\"#/p5/imageMode\">imageMode()</a>,\n           * <a href=\"#/p5/rectMode\">rectMode()</a>,\n           * <a href=\"#/p5/ellipseMode\">ellipseMode()</a>,\n           * <a href=\"#/p5/colorMode\">colorMode()</a>,\n           * <a href=\"#/p5/textAlign\">textAlign()</a>,\n           * <a href=\"#/p5/textFont\">textFont()</a>,\n           * <a href=\"#/p5/textSize\">textSize()</a>,\n           * <a href=\"#/p5/textLeading\">textLeading()</a>,\n           * <a href=\"#/p5/applyMatrix\">applyMatrix()</a>,\n           * <a href=\"#/p5/resetMatrix\">resetMatrix()</a>,\n           * <a href=\"#/p5/rotate\">rotate()</a>,\n           * <a href=\"#/p5/scale\">scale()</a>,\n           * <a href=\"#/p5/shearX\">shearX()</a>,\n           * <a href=\"#/p5/shearY\">shearY()</a>,\n           * <a href=\"#/p5/translate\">translate()</a>,\n           * <a href=\"#/p5/noiseSeed\">noiseSeed()</a>.\n           *\n           * In WEBGL mode additional style settings are stored. These are controlled by the\n           * following functions: <a href=\"#/p5/setCamera\">setCamera()</a>,\n           * <a href=\"#/p5/ambientLight\">ambientLight()</a>,\n           * <a href=\"#/p5/directionalLight\">directionalLight()</a>,\n           * <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>,\n           * <a href=\"#/p5/specularMaterial\">specularMaterial()</a>,\n           * <a href=\"#/p5/shininess\">shininess()</a>,\n           * <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n           * and <a href=\"#/p5/shader\">shader()</a>.\n           *\n           * @method push\n           * @example\n           * <div>\n           * <code>\n           * ellipse(0, 50, 33, 33); // Left circle\n           *\n           * push(); // Start a new drawing state\n           * strokeWeight(10);\n           * fill(204, 153, 0);\n           * translate(50, 0);\n           * ellipse(0, 50, 33, 33); // Middle circle\n           * pop(); // Restore original state\n           *\n           * ellipse(100, 50, 33, 33); // Right circle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * ellipse(0, 50, 33, 33); // Left circle\n           *\n           * push(); // Start a new drawing state\n           * strokeWeight(10);\n           * fill(204, 153, 0);\n           * ellipse(33, 50, 33, 33); // Left-middle circle\n           *\n           * push(); // Start another new drawing state\n           * stroke(0, 102, 153);\n           * ellipse(66, 50, 33, 33); // Right-middle circle\n           * pop(); // Restore previous state\n           *\n           * pop(); // Restore original state\n           *\n           * ellipse(100, 50, 33, 33); // Right circle\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Gold ellipse + thick black outline @center 2 white ellipses on left and right.\n           * 2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.\n           */\n          _main.default.prototype.push = function() {\n            this._styles.push({\n              props: {\n                _colorMode: this._colorMode\n              },\n\n              renderer: this._renderer.push()\n            });\n          };\n\n          /**\n           * The <a href=\"#/p5/push\">push()</a> function saves the current drawing style\n           * settings and transformations, while <a href=\"#/p5/pop\">pop()</a> restores\n           * these settings. Note that these functions are always used together. They allow\n           * you to change the style and transformation settings and later return to what\n           * you had. When a new state is started with <a href=\"#/p5/push\">push()</a>, it\n           * builds on the current style and transform information. The <a href=\"#/p5/push\">push()</a>\n           * and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide more\n           * control. (See the second example for a demonstration.)\n           *\n           * <a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\n           * and style settings controlled by the following functions:\n           * <a href=\"#/p5/fill\">fill()</a>,\n           * <a href=\"#/p5/noFill\">noFill()</a>,\n           * <a href=\"#/p5/noStroke\">noStroke()</a>,\n           * <a href=\"#/p5/stroke\">stroke()</a>,\n           * <a href=\"#/p5/tint\">tint()</a>,\n           * <a href=\"#/p5/noTint\">noTint()</a>,\n           * <a href=\"#/p5/strokeWeight\">strokeWeight()</a>,\n           * <a href=\"#/p5/strokeCap\">strokeCap()</a>,\n           * <a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n           * <a href=\"#/p5/imageMode\">imageMode()</a>,\n           * <a href=\"#/p5/rectMode\">rectMode()</a>,\n           * <a href=\"#/p5/ellipseMode\">ellipseMode()</a>,\n           * <a href=\"#/p5/colorMode\">colorMode()</a>,\n           * <a href=\"#/p5/textAlign\">textAlign()</a>,\n           * <a href=\"#/p5/textFont\">textFont()</a>,\n           * <a href=\"#/p5/textSize\">textSize()</a>,\n           * <a href=\"#/p5/textLeading\">textLeading()</a>,\n           * <a href=\"#/p5/applyMatrix\">applyMatrix()</a>,\n           * <a href=\"#/p5/resetMatrix\">resetMatrix()</a>,\n           * <a href=\"#/p5/rotate\">rotate()</a>,\n           * <a href=\"#/p5/scale\">scale()</a>,\n           * <a href=\"#/p5/shearX\">shearX()</a>,\n           * <a href=\"#/p5/shearY\">shearY()</a>,\n           * <a href=\"#/p5/translate\">translate()</a>,\n           * <a href=\"#/p5/noiseSeed\">noiseSeed()</a>.\n           *\n           * In WEBGL mode additional style settings are stored. These are controlled by\n           * the following functions:\n           * <a href=\"#/p5/setCamera\">setCamera()</a>,\n           * <a href=\"#/p5/ambientLight\">ambientLight()</a>,\n           * <a href=\"#/p5/directionalLight\">directionalLight()</a>,\n           * <a href=\"#/p5/pointLight\">pointLight()</a>,\n           * <a href=\"#/p5/texture\">texture()</a>,\n           * <a href=\"#/p5/specularMaterial\">specularMaterial()</a>,\n           * <a href=\"#/p5/shininess\">shininess()</a>,\n           * <a href=\"#/p5/normalMaterial\">normalMaterial()</a> and\n           * <a href=\"#/p5/shader\">shader()</a>.\n           *\n           * @method pop\n           * @example\n           * <div>\n           * <code>\n           * ellipse(0, 50, 33, 33); // Left circle\n           *\n           * push(); // Start a new drawing state\n           * translate(50, 0);\n           * strokeWeight(10);\n           * fill(204, 153, 0);\n           * ellipse(0, 50, 33, 33); // Middle circle\n           * pop(); // Restore original state\n           *\n           * ellipse(100, 50, 33, 33); // Right circle\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * ellipse(0, 50, 33, 33); // Left circle\n           *\n           * push(); // Start a new drawing state\n           * strokeWeight(10);\n           * fill(204, 153, 0);\n           * ellipse(33, 50, 33, 33); // Left-middle circle\n           *\n           * push(); // Start another new drawing state\n           * stroke(0, 102, 153);\n           * ellipse(66, 50, 33, 33); // Right-middle circle\n           * pop(); // Restore previous state\n           *\n           * pop(); // Restore original state\n           *\n           * ellipse(100, 50, 33, 33); // Right circle\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Gold ellipse + thick black outline @center 2 white ellipses on left and right.\n           * 2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.\n           */\n          _main.default.prototype.pop = function() {\n            var style = this._styles.pop();\n            if (style) {\n              this._renderer.pop(style.renderer);\n              Object.assign(this, style.props);\n            } else {\n              console.warn('pop() was called without matching push()');\n            }\n          };\n\n          /**\n           * Executes the code within <a href=\"#/p5/draw\">draw()</a> one time. This\n           * function allows the program to update the display window only when necessary,\n           * for example when an event registered by <a href=\"#/p5/mousePressed\">mousePressed()</a>\n           * or <a href=\"#/p5/keyPressed\">keyPressed()</a> occurs.\n           *\n           * In structuring a program, it only makes sense to call <a href=\"#/p5/redraw\">redraw()</a>\n           * within events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. This\n           * is because <a href=\"#/p5/redraw\">redraw()</a> does not run\n           * <a href=\"#/p5/draw\">draw()</a> immediately (it only sets a flag that indicates\n           * an update is needed).\n           *\n           * The <a href=\"#/p5/redraw\">redraw()</a> function does not work properly when\n           * called inside <a href=\"#/p5/draw\">draw()</a>.To enable/disable animations,\n           * use <a href=\"#/p5/loop\">loop()</a> and <a href=\"#/p5/noLoop\">noLoop()</a>.\n           *\n           * In addition you can set the number of redraws per method call. Just\n           * add an integer as single parameter for the number of redraws.\n           *\n           * @method redraw\n           * @param  {Integer} [n] Redraw for n-times. The default value is 1.\n           * @example\n           * <div><code>\n           * let x = 0;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   noLoop();\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *   line(x, 0, x, height);\n           * }\n           *\n           * function mousePressed() {\n           *   x += 1;\n           *   redraw();\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class='norender'>\n           * <code>\n           * let x = 0;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   noLoop();\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *   x += 1;\n           *   line(x, 0, x, height);\n           * }\n           *\n           * function mousePressed() {\n           *   redraw(5);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black line on far left of canvas\n           * black line on far left of canvas\n           */\n          _main.default.prototype.redraw = function(n) {\n            if (this._inUserDraw || !this._setupDone) {\n              return;\n            }\n\n            var numberOfRedraws = parseInt(n);\n            if (isNaN(numberOfRedraws) || numberOfRedraws < 1) {\n              numberOfRedraws = 1;\n            }\n\n            var context = this._isGlobal ? window : this;\n            if (typeof context.draw === 'function') {\n              if (typeof context.setup === 'undefined') {\n                context.scale(context._pixelDensity, context._pixelDensity);\n              }\n              var callMethod = function callMethod(f) {\n                f.call(context);\n              };\n              for (var idxRedraw = 0; idxRedraw < numberOfRedraws; idxRedraw++) {\n                context.resetMatrix();\n                if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {\n                  this._updateAccsOutput();\n                }\n                if (context._renderer.isP3D) {\n                  context._renderer._update();\n                }\n                context._setProperty('frameCount', context.frameCount + 1);\n                context._registeredMethods.pre.forEach(callMethod);\n                this._inUserDraw = true;\n                try {\n                  context.draw();\n                } finally {\n                  this._inUserDraw = false;\n                }\n                context._registeredMethods.post.forEach(callMethod);\n              }\n            }\n          };\n\n          /**\n           * The `p5()` constructor enables you to activate \"instance mode\" instead of normal\n           * \"global mode\". This is an advanced topic. A short description and example is\n           * included below. Please see\n           * <a target=\"blank\" href=\"https://www.youtube.com/watch?v=Su792jEauZg&feature=youtu.be\">\n           * Dan Shiffman's Coding Train video tutorial</a> or this\n           * <a target=\"blank\" href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace\">tutorial page</a>\n           * for more info.\n           *\n           * By default, all p5.js functions are in the global namespace (i.e. bound to the window\n           * object), meaning you can call them simply `ellipse()`, `fill()`, etc. However, this\n           * might be inconvenient if you are mixing with other JS libraries (synchronously or\n           * asynchronously) or writing long programs of your own. p5.js currently supports a\n           * way around this problem called \"instance mode\". In instance mode, all p5 functions\n           * are bound up in a single variable instead of polluting your global namespace.\n           *\n           * Optionally, you can specify a default container for the canvas and any other elements\n           * to append to with a second argument. You can give the ID of an element in your html,\n           * or an html node itself.\n           *\n           * Note that creating instances like this also allows you to have more than one p5 sketch on\n           * a single web page, as they will each be wrapped up with their own set up variables. Of\n           * course, you could also use iframes to have multiple sketches in global mode.\n           *\n           * @method p5\n           * @param {Object} sketch a function containing a p5.js sketch\n           * @param {String|Object} node ID or pointer to HTML DOM node to contain sketch in\n           * @example\n           * <div class='norender'><code>\n           * const s = p => {\n           *   let x = 100;\n           *   let y = 100;\n           *\n           *   p.setup = function() {\n           *     p.createCanvas(700, 410);\n           *   };\n           *\n           *   p.draw = function() {\n           *     p.background(0);\n           *     p.fill(255);\n           *     p.rect(x, y, 50, 50);\n           *   };\n           * };\n           *\n           * new p5(s); // invoke p5\n           * </code></div>\n           *\n           * @alt\n           * white rectangle on black background\n           */ var _default = _main.default;\n          exports.default = _default;\n        },\n        { './main': 59 }\n      ],\n      72: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('./main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Transform\n           * @submodule Transform\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ /**\n           * Multiplies the current matrix by the one specified through the parameters.\n           * This is a powerful operation that can perform the equivalent of translate,\n           * scale, shear and rotate all at once. You can learn more about transformation\n           * matrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\n           * Wikipedia</a>.\n           *\n           * The naming of the arguments here follows the naming of the <a href=\n           * \"https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform\">\n           * WHATWG specification</a> and corresponds to a\n           * transformation matrix of the\n           * form:\n           *\n           * > <img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\"\n           * alt=\"The transformation matrix used when applyMatrix is called\"/>\n           *\n           * @method applyMatrix\n           * @param  {Number} a numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} b numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} c numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} d numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} e numbers which define the 2x3 matrix to be multiplied\n           * @param  {Number} f numbers which define the 2x3 matrix to be multiplied\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(10);\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   let step = frameCount % 20;\n           *   background(200);\n           *   // Equivalent to translate(x, y);\n           *   applyMatrix(1, 0, 0, 1, 40 + step, 50);\n           *   rect(0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(10);\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   let step = frameCount % 20;\n           *   background(200);\n           *   translate(50, 50);\n           *   // Equivalent to scale(x, y);\n           *   applyMatrix(1 / step, 0, 0, 1 / step, 0, 0);\n           *   rect(0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(10);\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   let step = frameCount % 20;\n           *   let angle = map(step, 0, 20, 0, TWO_PI);\n           *   let cos_a = cos(angle);\n           *   let sin_a = sin(angle);\n           *   background(200);\n           *   translate(50, 50);\n           *   // Equivalent to rotate(angle);\n           *   applyMatrix(cos_a, sin_a, -sin_a, cos_a, 0, 0);\n           *   rect(0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(10);\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   let step = frameCount % 20;\n           *   let angle = map(step, 0, 20, -PI / 4, PI / 4);\n           *   background(200);\n           *   translate(50, 50);\n           *   // equivalent to shearX(angle);\n           *   let shear_factor = 1 / tan(PI / 2 - angle);\n           *   applyMatrix(1, 0, shear_factor, 1, 0, 0);\n           *   rect(0, 0, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noFill();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateY(PI / 6);\n           *   stroke(153);\n           *   box(35);\n           *   let rad = millis() / 1000;\n           *   // Set rotation angles\n           *   let ct = cos(rad);\n           *   let st = sin(rad);\n           *   // Matrix for rotation around the Y axis\n           *   // prettier-ignore\n           *   applyMatrix(  ct, 0.0,  st,  0.0,\n           *                0.0, 1.0, 0.0,  0.0,\n           *                -st, 0.0,  ct,  0.0,\n           *                0.0, 0.0, 0.0,  1.0);\n           *   stroke(255);\n           *   box(50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * A rectangle translating to the right\n           * A rectangle shrinking to the center\n           * A rectangle rotating clockwise about the center\n           * A rectangle shearing\n           */ _main.default.prototype.applyMatrix = function(a, b, c, d, e, f) {\n            var _this$_renderer;\n            (_this$_renderer = this._renderer).applyMatrix.apply(\n              _this$_renderer,\n              arguments\n            );\n            return this;\n          };\n\n          /**\n           * Replaces the current matrix with the identity matrix.\n           *\n           * @method resetMatrix\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(50, 50);\n           * applyMatrix(0.5, 0.5, -0.5, 0.5, 0, 0);\n           * rect(0, 0, 20, 20);\n           * // Note that the translate is also reset.\n           * resetMatrix();\n           * rect(0, 0, 20, 20);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * A rotated retangle in the center with another at the top left corner\n           */\n          _main.default.prototype.resetMatrix = function() {\n            this._renderer.resetMatrix();\n            return this;\n          };\n\n          /**\n           * Rotates a shape by the amount specified by the angle parameter. This\n           * function accounts for <a href=\"#/p5/angleMode\">angleMode</a>, so angles\n           * can be entered in either RADIANS or DEGREES.\n           *\n           * Objects are always rotated around their relative position to the\n           * origin and positive numbers rotate objects in a clockwise direction.\n           * Transformations apply to everything that happens after and subsequent\n           * calls to the function accumulates the effect. For example, calling\n           * rotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\n           * All tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\n           *\n           * Technically, <a href=\"#/p5/rotate\">rotate()</a> multiplies the current transformation matrix\n           * by a rotation matrix. This function can be further controlled by\n           * the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.\n           *\n           * @method rotate\n           * @param  {Number} angle the angle of rotation, specified in radians\n           *                        or degrees, depending on current angleMode\n           * @param  {p5.Vector|Number[]} [axis] (in 3d) the axis to rotate around\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(width / 2, height / 2);\n           * rotate(PI / 3.0);\n           * rect(-26, -26, 52, 52);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white 52x52 rect with black outline at center rotated counter 45 degrees\n           */\n          _main.default.prototype.rotate = function(angle, axis) {\n            _main.default._validateParameters('rotate', arguments);\n            this._renderer.rotate(this._toRadians(angle), axis);\n            return this;\n          };\n\n          /**\n           * Rotates a shape around X axis by the amount specified in angle parameter.\n           * The angles can be entered in either RADIANS or DEGREES.\n           *\n           * Objects are always rotated around their relative position to the\n           * origin and positive numbers rotate objects in a clockwise direction.\n           * All tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\n           *\n           * @method  rotateX\n           * @param  {Number} angle the angle of rotation, specified in radians\n           *                        or degrees, depending on current angleMode\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(255);\n           *   rotateX(millis() / 1000);\n           *   box();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3d box rotating around the x axis.\n           */\n          _main.default.prototype.rotateX = function(angle) {\n            this._assert3d('rotateX');\n            _main.default._validateParameters('rotateX', arguments);\n            this._renderer.rotateX(this._toRadians(angle));\n            return this;\n          };\n\n          /**\n           * Rotates a shape around Y axis by the amount specified in angle parameter.\n           * The angles can be entered in either RADIANS or DEGREES.\n           *\n           * Objects are always rotated around their relative position to the\n           * origin and positive numbers rotate objects in a clockwise direction.\n           * All tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\n           *\n           * @method rotateY\n           * @param  {Number} angle the angle of rotation, specified in radians\n           *                        or degrees, depending on current angleMode\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(255);\n           *   rotateY(millis() / 1000);\n           *   box();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3d box rotating around the y axis.\n           */\n          _main.default.prototype.rotateY = function(angle) {\n            this._assert3d('rotateY');\n            _main.default._validateParameters('rotateY', arguments);\n            this._renderer.rotateY(this._toRadians(angle));\n            return this;\n          };\n\n          /**\n           * Rotates a shape around Z axis by the amount specified in angle parameter.\n           * The angles can be entered in either RADIANS or DEGREES.\n           *\n           * This method works in WEBGL mode only.\n           *\n           * Objects are always rotated around their relative position to the\n           * origin and positive numbers rotate objects in a clockwise direction.\n           * All tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\n           *\n           * @method rotateZ\n           * @param  {Number} angle the angle of rotation, specified in radians\n           *                        or degrees, depending on current angleMode\n           * @chainable\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(255);\n           *   rotateZ(millis() / 1000);\n           *   box();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3d box rotating around the z axis.\n           */\n          _main.default.prototype.rotateZ = function(angle) {\n            this._assert3d('rotateZ');\n            _main.default._validateParameters('rotateZ', arguments);\n            this._renderer.rotateZ(this._toRadians(angle));\n            return this;\n          };\n\n          /**\n           * Increases or decreases the size of a shape by expanding or contracting\n           * vertices. Objects always scale from their relative origin to the\n           * coordinate system. Scale values are specified as decimal percentages.\n           * For example, the function call scale(2.0) increases the dimension of a\n           * shape by 200%.\n           *\n           * Transformations apply to everything that happens after and subsequent\n           * calls to the function multiply the effect. For example, calling scale(2.0)\n           * and then scale(1.5) is the same as scale(3.0). If <a href=\"#/p5/scale\">scale()</a> is called\n           * within <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.\n           *\n           * Using this function with the z parameter is only available in WEBGL mode.\n           * This function can be further controlled with <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.\n           *\n           * @method scale\n           * @param  {Number|p5.Vector|Number[]} s\n           *                      percent to scale the object, or percentage to\n           *                      scale the object in the x-axis if multiple arguments\n           *                      are given\n           * @param  {Number} [y] percent to scale the object in the y-axis\n           * @param  {Number} [z] percent to scale the object in the z-axis (webgl only)\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * rect(30, 20, 50, 50);\n           * scale(0.5);\n           * rect(30, 20, 50, 50);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * rect(30, 20, 50, 50);\n           * scale(0.5, 1.3);\n           * rect(30, 20, 50, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white 52x52 rect with black outline at center rotated counter 45 degrees\n           * 2 white rects with black outline- 1 50x50 at center. other 25x65 bottom left\n           */\n          /**\n           * @method scale\n           * @param  {p5.Vector|Number[]} scales per-axis percents to scale the object\n           * @chainable\n           */\n          _main.default.prototype.scale = function(x, y, z) {\n            _main.default._validateParameters('scale', arguments);\n            // Only check for Vector argument type if Vector is available\n            if (x instanceof _main.default.Vector) {\n              var v = x;\n              x = v.x;\n              y = v.y;\n              z = v.z;\n            } else if (x instanceof Array) {\n              var rg = x;\n              x = rg[0];\n              y = rg[1];\n              z = rg[2] || 1;\n            }\n            if (isNaN(y)) {\n              y = z = x;\n            } else if (isNaN(z)) {\n              z = 1;\n            }\n\n            this._renderer.scale.call(this._renderer, x, y, z);\n\n            return this;\n          };\n\n          /**\n           * Shears a shape around the x-axis by the amount specified by the angle\n           * parameter. Angles should be specified in the current angleMode.\n           * Objects are always sheared around their relative position to the origin\n           * and positive numbers shear objects in a clockwise direction.\n           *\n           * Transformations apply to everything that happens after and subsequent\n           * calls to the function accumulates the effect. For example, calling\n           * shearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\n           * If <a href=\"#/p5/shearX\">shearX()</a> is called within the <a href=\"#/p5/draw\">draw()</a>,\n           * the transformation is reset when the loop begins again.\n           *\n           * Technically, <a href=\"#/p5/shearX\">shearX()</a> multiplies the current\n           * transformation matrix by a rotation matrix. This function can be further\n           * controlled by the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.\n           *\n           * @method shearX\n           * @param  {Number} angle angle of shear specified in radians or degrees,\n           *                        depending on current angleMode\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(width / 4, height / 4);\n           * shearX(PI / 4.0);\n           * rect(0, 0, 30, 30);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white irregular quadrilateral with black outline at top middle.\n           */\n          _main.default.prototype.shearX = function(angle) {\n            _main.default._validateParameters('shearX', arguments);\n            var rad = this._toRadians(angle);\n            this._renderer.applyMatrix(1, 0, Math.tan(rad), 1, 0, 0);\n            return this;\n          };\n\n          /**\n           * Shears a shape around the y-axis the amount specified by the angle\n           * parameter. Angles should be specified in the current angleMode. Objects\n           * are always sheared around their relative position to the origin and\n           * positive numbers shear objects in a clockwise direction.\n           *\n           * Transformations apply to everything that happens after and subsequent\n           * calls to the function accumulates the effect. For example, calling\n           * shearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\n           * <a href=\"#/p5/shearY\">shearY()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\n           * the loop begins again.\n           *\n           * Technically, <a href=\"#/p5/shearY\">shearY()</a> multiplies the current transformation matrix by a\n           * rotation matrix. This function can be further controlled by the\n           * <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.\n           *\n           * @method shearY\n           * @param  {Number} angle angle of shear specified in radians or degrees,\n           *                        depending on current angleMode\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * translate(width / 4, height / 4);\n           * shearY(PI / 4.0);\n           * rect(0, 0, 30, 30);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * white irregular quadrilateral with black outline at middle bottom.\n           */\n          _main.default.prototype.shearY = function(angle) {\n            _main.default._validateParameters('shearY', arguments);\n            var rad = this._toRadians(angle);\n            this._renderer.applyMatrix(1, Math.tan(rad), 0, 1, 0, 0);\n            return this;\n          };\n\n          /**\n    * Specifies an amount to displace objects within the display window.\n    * The x parameter specifies left/right translation, the y parameter\n    * specifies up/down translation.\n    *\n    * Transformations are cumulative and apply to everything that happens after\n    * and subsequent calls to the function accumulates the effect. For example,\n    * calling translate(50, 0) and then translate(20, 0) is the same as\n    * translate(70, 0). If <a href=\"#/p5/translate\">translate()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the\n    * transformation is reset when the loop begins again. This function can be\n    * further controlled by using <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.\n    *\n    * @method translate\n    * @param  {Number} x left/right translation\n    * @param  {Number} y up/down translation\n    * @param  {Number} [z] forward/backward translation (webgl only)\n    * @chainable\n    * @example\n    * <div>\n    * <code>\n    * translate(30, 20);\n    * rect(0, 0, 55, 55);\n    * </code>\n    * </div>\n    *\n    * <div>\n    * <code>\n    * rect(0, 0, 55, 55); // Draw rect at original 0,0\n    * translate(30, 20);\n    * rect(0, 0, 55, 55); // Draw rect at new 0,0\n    * translate(14, 14);\n    * rect(0, 0, 55, 55); // Draw rect at new 0,0\n    * </code>\n    * </div>\n    *\n   \n    * <div>\n    * <code>\n    * function draw() {\n    *   background(200);\n    *   rectMode(CENTER);\n    *   translate(width / 2, height / 2);\n    *   translate(p5.Vector.fromAngle(millis() / 1000, 40));\n    *   rect(0, 0, 20, 20);\n    * }\n    * </code>\n    * </div>\n    *\n    * @alt\n    * white 55x55 rect with black outline at center right.\n    * 3 white 55x55 rects with black outlines at top-l, center-r and bottom-r.\n    * a 20x20 white rect moving in a circle around the canvas\n    */\n          /**\n           * @method translate\n           * @param  {p5.Vector} vector the vector to translate by\n           * @chainable\n           */\n          _main.default.prototype.translate = function(x, y, z) {\n            _main.default._validateParameters('translate', arguments);\n            if (this._renderer.isP3D) {\n              this._renderer.translate(x, y, z);\n            } else {\n              this._renderer.translate(x, y);\n            }\n            return this;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { './main': 59 }\n      ],\n      73: [\n        function(_dereq_, module, exports) {\n          'use strict';\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _toConsumableArray(arr) {\n            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n          }\n          function _nonIterableSpread() {\n            throw new TypeError('Invalid attempt to spread non-iterable instance');\n          }\n          function _iterableToArray(iter) {\n            if (\n              Symbol.iterator in Object(iter) ||\n              Object.prototype.toString.call(iter) === '[object Arguments]'\n            )\n              return Array.from(iter);\n          }\n          function _arrayWithoutHoles(arr) {\n            if (Array.isArray(arr)) {\n              for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n                arr2[i] = arr[i];\n              }\n              return arr2;\n            }\n          }\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          /**\n           *\n           * Stores a value in local storage under the key name.\n           * Local storage is saved in the browser and persists\n           * between browsing sessions and page reloads.\n           * The key can be the name of the variable but doesn't\n           * have to be. To retrieve stored items\n           * see <a href=\"#/p5/getItem\">getItem</a>.\n           *\n           * Sensitive data such as passwords or personal information\n           * should not be stored in local storage.\n           *\n           * @method storeItem\n           * @for p5\n           * @param {String} key\n           * @param {String|Number|Object|Boolean|p5.Color|p5.Vector} value\n           *\n           * @example\n           * <div><code>\n           * // Type to change the letter in the\n           * // center of the canvas.\n           * // If you reload the page, it will\n           * // still display the last key you entered\n           *\n           * let myText;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   myText = getItem('myText');\n           *   if (myText === null) {\n           *     myText = '';\n           *   }\n           * }\n           *\n           * function draw() {\n           *   textSize(40);\n           *   background(255);\n           *   text(myText, width / 2, height / 2);\n           * }\n           *\n           * function keyPressed() {\n           *   myText = key;\n           *   storeItem('myText', myText);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * When you type the key name is displayed as black text on white background.\n           * If you reload the page, the last letter typed is still displaying.\n           */\n          _main.default.prototype.storeItem = function(key, value) {\n            if (typeof key !== 'string') {\n              console.log(\n                'The argument that you passed to storeItem() - '.concat(\n                  key,\n                  ' is not a string.'\n                )\n              );\n            }\n            if (key.endsWith('p5TypeID')) {\n              console.log(\n                'The argument that you passed to storeItem() - '.concat(\n                  key,\n                  \" must not end with 'p5TypeID'.\"\n                )\n              );\n            }\n\n            if (typeof value === 'undefined') {\n              console.log('You cannot store undefined variables using storeItem().');\n            }\n            var type = _typeof(value);\n            switch (type) {\n              case 'number':\n              case 'boolean':\n                value = value.toString();\n                break;\n              case 'object':\n                if (value instanceof _main.default.Color) {\n                  type = 'p5.Color';\n                } else if (value instanceof _main.default.Vector) {\n                  type = 'p5.Vector';\n                  var coord = [value.x, value.y, value.z];\n                  value = coord;\n                }\n                value = JSON.stringify(value);\n                break;\n              case 'string':\n              default:\n                break;\n            }\n\n            localStorage.setItem(key, value);\n            var typeKey = ''.concat(key, 'p5TypeID');\n            localStorage.setItem(typeKey, type);\n          };\n\n          /**\n           *\n           * Returns the value of an item that was stored in local storage\n           * using storeItem()\n           *\n           * @method getItem\n           * @for p5\n           * @param {String} key name that you wish to use to store in local storage\n           * @return {Number|Object|String|Boolean|p5.Color|p5.Vector} Value of stored item\n           *\n           * @example\n           * <div><code>\n           * // Click the mouse to change\n           * // the color of the background\n           * // Once you have changed the color\n           * // it will stay changed even when you\n           * // reload the page.\n           *\n           * let myColor;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   myColor = getItem('myColor');\n           * }\n           *\n           * function draw() {\n           *   if (myColor !== null) {\n           *     background(myColor);\n           *   }\n           * }\n           *\n           * function mousePressed() {\n           *   myColor = color(random(255), random(255), random(255));\n           *   storeItem('myColor', myColor);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * If you click, the canvas changes to a random color.\n           * If you reload the page, the canvas is still the color it\n           * was when the page was previously loaded.\n           */\n          _main.default.prototype.getItem = function(key) {\n            var value = localStorage.getItem(key);\n            var type = localStorage.getItem(''.concat(key, 'p5TypeID'));\n            if (typeof type === 'undefined') {\n              console.log(\n                'Unable to determine type of item stored under '.concat(\n                  key,\n                  'in local storage. Did you save the item with something other than setItem()?'\n                )\n              );\n            } else if (value !== null) {\n              switch (type) {\n                case 'number':\n                  value = parseFloat(value);\n                  break;\n                case 'boolean':\n                  value = value === 'true';\n                  break;\n                case 'object':\n                  value = JSON.parse(value);\n                  break;\n                case 'p5.Color':\n                  value = JSON.parse(value);\n                  value = this.color.apply(this, _toConsumableArray(value.levels));\n                  break;\n                case 'p5.Vector':\n                  value = JSON.parse(value);\n                  value = this.createVector.apply(this, _toConsumableArray(value));\n                  break;\n                case 'string':\n                default:\n                  break;\n              }\n            }\n            return value;\n          };\n\n          /**\n           *\n           * Clears all local storage items set with storeItem()\n           * for the current domain.\n           *\n           * @method clearStorage\n           * @for p5\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myNum = 10;\n           *   let myBool = false;\n           *   storeItem('myNum', myNum);\n           *   storeItem('myBool', myBool);\n           *   print(getItem('myNum')); // logs 10 to the console\n           *   print(getItem('myBool')); // logs false to the console\n           *   clearStorage();\n           *   print(getItem('myNum')); // logs null to the console\n           *   print(getItem('myBool')); // logs null to the console\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.clearStorage = function() {\n            localStorage.clear();\n          };\n\n          /**\n           *\n           * Removes an item that was stored with storeItem()\n           *\n           * @method removeItem\n           * @param {String} key\n           * @for p5\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myVar = 10;\n           *   storeItem('myVar', myVar);\n           *   print(getItem('myVar')); // logs 10 to the console\n           *   removeItem('myVar');\n           *   print(getItem('myVar')); // logs null to the console\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.removeItem = function(key) {\n            if (typeof key !== 'string') {\n              console.log(\n                'The argument that you passed to removeItem() - '.concat(\n                  key,\n                  ' is not a string.'\n                )\n              );\n            }\n            localStorage.removeItem(key);\n            localStorage.removeItem(''.concat(key, 'p5TypeID'));\n          };\n        },\n        { '../core/main': 59 }\n      ],\n      74: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Data\n           * @submodule Dictionary\n           * @for p5.TypedDict\n           * @requires core\n           *\n           * This module defines the p5 methods for the p5 Dictionary classes.\n           * The classes StringDict and NumberDict are for storing and working\n           * with key-value pairs.\n           */ /**\n           *\n           * Creates a new instance of p5.StringDict using the key-value pair\n           * or the object you provide.\n           *\n           * @method createStringDict\n           * @for p5\n           * @param {String} key\n           * @param {String} value\n           * @return {p5.StringDict}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   print(myDictionary.hasKey('p5')); // logs true to console\n           *\n           *   let anotherDictionary = createStringDict({ happy: 'coding' });\n           *   print(anotherDictionary.hasKey('happy')); // logs true to console\n           * }\n           * </code></div>\n           */ /**\n           * @method createStringDict\n           * @param {Object} object object\n           * @return {p5.StringDict}\n           */ _main.default.prototype.createStringDict = function(key, value) {\n            _main.default._validateParameters('createStringDict', arguments);\n            return new _main.default.StringDict(key, value);\n          };\n          /**\n           *\n           * Creates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\n           * or object you provide.\n           *\n           * @method createNumberDict\n           * @for p5\n           * @param {Number} key\n           * @param {Number} value\n           * @return {p5.NumberDict}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(100, 42);\n           *   print(myDictionary.hasKey(100)); // logs true to console\n           *\n           *   let anotherDictionary = createNumberDict({ 200: 84 });\n           *   print(anotherDictionary.hasKey(200)); // logs true to console\n           * }\n           * </code></div>\n           */\n          /**\n           * @method createNumberDict\n           * @param {Object} object object\n           * @return {p5.NumberDict}\n           */\n\n          _main.default.prototype.createNumberDict = function(key, value) {\n            _main.default._validateParameters('createNumberDict', arguments);\n            return new _main.default.NumberDict(key, value);\n          };\n\n          /**\n           *\n           * Base class for all p5.Dictionary types. Specifically\n           * typed Dictionary classes inherit from this class.\n           *\n           * @class p5.TypedDict\n           * @constructor\n           */\n\n          _main.default.TypedDict = function(key, value) {\n            if (key instanceof Object) {\n              this.data = key;\n            } else {\n              this.data = {};\n              this.data[key] = value;\n            }\n            return this;\n          };\n\n          /**\n           * Returns the number of key-value pairs currently stored in the Dictionary.\n           *\n           * @method size\n           * @return {Integer} the number of key-value pairs in the Dictionary\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(1, 10);\n           *   myDictionary.create(2, 20);\n           *   myDictionary.create(3, 30);\n           *   print(myDictionary.size()); // logs 3 to the console\n           * }\n           * </code></div>\n           */\n          _main.default.TypedDict.prototype.size = function() {\n            return Object.keys(this.data).length;\n          };\n\n          /**\n           * Returns true if the given key exists in the Dictionary,\n           * otherwise returns false.\n           *\n           * @method hasKey\n           * @param {Number|String} key that you want to look up\n           * @return {Boolean} whether that key exists in Dictionary\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   print(myDictionary.hasKey('p5')); // logs true to console\n           * }\n           * </code></div>\n           */\n\n          _main.default.TypedDict.prototype.hasKey = function(key) {\n            return this.data.hasOwnProperty(key);\n          };\n\n          /**\n           * Returns the value stored at the given key.\n           *\n           * @method get\n           * @param {Number|String} the key you want to access\n           * @return {Number|String} the value stored at that key\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   let myValue = myDictionary.get('p5');\n           *   print(myValue === 'js'); // logs true to console\n           * }\n           * </code></div>\n           */\n\n          _main.default.TypedDict.prototype.get = function(key) {\n            if (this.data.hasOwnProperty(key)) {\n              return this.data[key];\n            } else {\n              console.log(''.concat(key, ' does not exist in this Dictionary'));\n            }\n          };\n\n          /**\n           * Updates the value associated with the given key in case it already exists\n           * in the Dictionary. Otherwise a new key-value pair is added.\n           *\n           * @method set\n           * @param {Number|String} key\n           * @param {Number|String} value\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   myDictionary.set('p5', 'JS');\n           *   myDictionary.print(); // logs \"key: p5 - value: JS\" to console\n           * }\n           * </code></div>\n           */\n\n          _main.default.TypedDict.prototype.set = function(key, value) {\n            if (this._validate(value)) {\n              this.data[key] = value;\n            } else {\n              console.log('Those values dont work for this dictionary type.');\n            }\n          };\n\n          /**\n           * private helper function to handle the user passing in objects\n           * during construction or calls to create()\n           */\n\n          _main.default.TypedDict.prototype._addObj = function(obj) {\n            for (var key in obj) {\n              this.set(key, obj[key]);\n            }\n          };\n\n          /**\n           * Creates a new key-value pair in the Dictionary.\n           *\n           * @method create\n           * @param {Number|String} key\n           * @param {Number|String} value\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   myDictionary.create('happy', 'coding');\n           *   myDictionary.print();\n           *   // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n           * }\n           * </code></div>\n           */\n          /**\n           * @method create\n           * @param {Object} obj key/value pair\n           */\n\n          _main.default.TypedDict.prototype.create = function(key, value) {\n            if (key instanceof Object && typeof value === 'undefined') {\n              this._addObj(key);\n            } else if (typeof key !== 'undefined') {\n              this.set(key, value);\n            } else {\n              console.log(\n                'In order to create a new Dictionary entry you must pass ' +\n                  'an object or a key, value pair'\n              );\n            }\n          };\n\n          /**\n           * Removes all previously stored key-value pairs from the Dictionary.\n           *\n           * @method clear\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   print(myDictionary.hasKey('p5')); // prints 'true'\n           *   myDictionary.clear();\n           *   print(myDictionary.hasKey('p5')); // prints 'false'\n           * }\n           * </code>\n           * </div>\n           */\n\n          _main.default.TypedDict.prototype.clear = function() {\n            this.data = {};\n          };\n\n          /**\n           * Removes the key-value pair stored at the given key from the Dictionary.\n           *\n           * @method remove\n           * @param {Number|String} key for the pair to remove\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   myDictionary.create('happy', 'coding');\n           *   myDictionary.print();\n           *   // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n           *   myDictionary.remove('p5');\n           *   myDictionary.print();\n           *   // above logs \"key: happy value: coding\" to console\n           * }\n           * </code></div>\n           */\n\n          _main.default.TypedDict.prototype.remove = function(key) {\n            if (this.data.hasOwnProperty(key)) {\n              delete this.data[key];\n            } else {\n              throw new Error(''.concat(key, ' does not exist in this Dictionary'));\n            }\n          };\n\n          /**\n           * Logs the set of items currently stored in the Dictionary to the console.\n           *\n           * @method print\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let myDictionary = createStringDict('p5', 'js');\n           *   myDictionary.create('happy', 'coding');\n           *   myDictionary.print();\n           *   // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n           * }\n           * </code>\n           * </div>\n           */\n\n          _main.default.TypedDict.prototype.print = function() {\n            for (var item in this.data) {\n              console.log('key:'.concat(item, ' value:').concat(this.data[item]));\n            }\n          };\n\n          /**\n           * Converts the Dictionary into a CSV file for local download.\n           *\n           * @method saveTable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     createStringDict({\n           *       john: 1940,\n           *       paul: 1942,\n           *       george: 1943,\n           *       ringo: 1940\n           *     }).saveTable('beatles');\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n\n          _main.default.TypedDict.prototype.saveTable = function(filename) {\n            var output = '';\n\n            for (var key in this.data) {\n              output += ''.concat(key, ',').concat(this.data[key], '\\n');\n            }\n\n            var blob = new Blob([output], { type: 'text/csv' });\n            _main.default.prototype.downloadFile(blob, filename || 'mycsv', 'csv');\n          };\n\n          /**\n           * Converts the Dictionary into a JSON file for local download.\n           *\n           * @method saveJSON\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     createStringDict({\n           *       john: 1940,\n           *       paul: 1942,\n           *       george: 1943,\n           *       ringo: 1940\n           *     }).saveJSON('beatles');\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n\n          _main.default.TypedDict.prototype.saveJSON = function(filename, opt) {\n            _main.default.prototype.saveJSON(this.data, filename, opt);\n          };\n\n          /**\n           * private helper function to ensure that the user passed in valid\n           * values for the Dictionary type\n           */\n\n          _main.default.TypedDict.prototype._validate = function(value) {\n            return true;\n          };\n\n          /**\n           *\n           * A simple Dictionary class for Strings.\n           *\n           * @class p5.StringDict\n           * @extends p5.TypedDict\n           */\n\n          _main.default.StringDict = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default.TypedDict.apply(this, args);\n          };\n\n          _main.default.StringDict.prototype = Object.create(\n            _main.default.TypedDict.prototype\n          );\n\n          _main.default.StringDict.prototype._validate = function(value) {\n            return typeof value === 'string';\n          };\n\n          /**\n           *\n           * A simple Dictionary class for Numbers.\n           *\n           * @class p5.NumberDict\n           * @constructor\n           * @extends p5.TypedDict\n           */\n\n          _main.default.NumberDict = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default.TypedDict.apply(this, args);\n          };\n\n          _main.default.NumberDict.prototype = Object.create(\n            _main.default.TypedDict.prototype\n          );\n\n          /**\n           * private helper function to ensure that the user passed in valid\n           * values for the Dictionary type\n           */\n\n          _main.default.NumberDict.prototype._validate = function(value) {\n            return typeof value === 'number';\n          };\n\n          /**\n           * Add the given number to the value currently stored at the given key.\n           * The sum then replaces the value previously stored in the Dictionary.\n           *\n           * @method add\n           * @param {Number} Key for the value you wish to add to\n           * @param {Number} Number to add to the value\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(2, 5);\n           *   myDictionary.add(2, 2);\n           *   print(myDictionary.get(2)); // logs 7 to console.\n           * }\n           * </code></div>\n           *\n           */\n\n          _main.default.NumberDict.prototype.add = function(key, amount) {\n            if (this.data.hasOwnProperty(key)) {\n              this.data[key] += amount;\n            } else {\n              console.log('The key - '.concat(key, ' does not exist in this dictionary.'));\n            }\n          };\n\n          /**\n           * Subtract the given number from the value currently stored at the given key.\n           * The difference then replaces the value previously stored in the Dictionary.\n           *\n           * @method sub\n           * @param {Number} Key for the value you wish to subtract from\n           * @param {Number} Number to subtract from the value\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(2, 5);\n           *   myDictionary.sub(2, 2);\n           *   print(myDictionary.get(2)); // logs 3 to console.\n           * }\n           * </code></div>\n           *\n           */\n\n          _main.default.NumberDict.prototype.sub = function(key, amount) {\n            this.add(key, -amount);\n          };\n\n          /**\n           * Multiply the given number with the value currently stored at the given key.\n           * The product then replaces the value previously stored in the Dictionary.\n           *\n           * @method mult\n           * @param {Number} Key for value you wish to multiply\n           * @param {Number} Amount to multiply the value by\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(2, 4);\n           *   myDictionary.mult(2, 2);\n           *   print(myDictionary.get(2)); // logs 8 to console.\n           * }\n           * </code></div>\n           *\n           */\n\n          _main.default.NumberDict.prototype.mult = function(key, amount) {\n            if (this.data.hasOwnProperty(key)) {\n              this.data[key] *= amount;\n            } else {\n              console.log('The key - '.concat(key, ' does not exist in this dictionary.'));\n            }\n          };\n\n          /**\n           * Divide the given number with the value currently stored at the given key.\n           * The quotient then replaces the value previously stored in the Dictionary.\n           *\n           * @method div\n           * @param {Number} Key for value you wish to divide\n           * @param {Number} Amount to divide the value by\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict(2, 8);\n           *   myDictionary.div(2, 2);\n           *   print(myDictionary.get(2)); // logs 4 to console.\n           * }\n           * </code></div>\n           *\n           */\n\n          _main.default.NumberDict.prototype.div = function(key, amount) {\n            if (this.data.hasOwnProperty(key)) {\n              this.data[key] /= amount;\n            } else {\n              console.log('The key - '.concat(key, ' does not exist in this dictionary.'));\n            }\n          };\n\n          /**\n           * private helper function for finding lowest or highest value\n           * the argument 'flip' is used to flip the comparison arrow\n           * from 'less than' to 'greater than'\n           */\n\n          _main.default.NumberDict.prototype._valueTest = function(flip) {\n            if (Object.keys(this.data).length === 0) {\n              throw new Error(\n                'Unable to search for a minimum or maximum value on an empty NumberDict'\n              );\n            } else if (Object.keys(this.data).length === 1) {\n              return this.data[Object.keys(this.data)[0]];\n            } else {\n              var result = this.data[Object.keys(this.data)[0]];\n              for (var key in this.data) {\n                if (this.data[key] * flip < result * flip) {\n                  result = this.data[key];\n                }\n              }\n              return result;\n            }\n          };\n\n          /**\n           * Return the lowest number currently stored in the Dictionary.\n           *\n           * @method minValue\n           * @return {Number}\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\n           *   let lowestValue = myDictionary.minValue(); // value is -10\n           *   print(lowestValue);\n           * }\n           * </code></div>\n           */\n\n          _main.default.NumberDict.prototype.minValue = function() {\n            return this._valueTest(1);\n          };\n\n          /**\n           * Return the highest number currently stored in the Dictionary.\n           *\n           * @method maxValue\n           * @return {Number}\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\n           *   let highestValue = myDictionary.maxValue(); // value is 3\n           *   print(highestValue);\n           * }\n           * </code></div>\n           */\n\n          _main.default.NumberDict.prototype.maxValue = function() {\n            return this._valueTest(-1);\n          };\n\n          /**\n           * private helper function for finding lowest or highest key\n           * the argument 'flip' is used to flip the comparison arrow\n           * from 'less than' to 'greater than'\n           */\n\n          _main.default.NumberDict.prototype._keyTest = function(flip) {\n            if (Object.keys(this.data).length === 0) {\n              throw new Error('Unable to use minValue on an empty NumberDict');\n            } else if (Object.keys(this.data).length === 1) {\n              return Object.keys(this.data)[0];\n            } else {\n              var result = Object.keys(this.data)[0];\n              for (var i = 1; i < Object.keys(this.data).length; i++) {\n                if (Object.keys(this.data)[i] * flip < result * flip) {\n                  result = Object.keys(this.data)[i];\n                }\n              }\n              return result;\n            }\n          };\n\n          /**\n           * Return the lowest key currently used in the Dictionary.\n           *\n           * @method minKey\n           * @return {Number}\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\n           *   let lowestKey = myDictionary.minKey(); // value is 1.2\n           *   print(lowestKey);\n           * }\n           * </code></div>\n           */\n\n          _main.default.NumberDict.prototype.minKey = function() {\n            return this._keyTest(1);\n          };\n\n          /**\n           * Return the highest key currently used in the Dictionary.\n           *\n           * @method maxKey\n           * @return {Number}\n           * @example\n           * <div class='norender'>\n           * <code>\n           * function setup() {\n           *   let myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\n           *   let highestKey = myDictionary.maxKey(); // value is 4\n           *   print(highestKey);\n           * }\n           * </code></div>\n           */\n\n          _main.default.NumberDict.prototype.maxKey = function() {\n            return this._keyTest(-1);\n          };\n          var _default = _main.default.TypedDict;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      75: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          /**\n           * Searches the page for the first element that matches the given CSS selector string (can be an\n           * ID, class, tag name or a combination) and returns it as a <a href=\"#/p5.Element\">p5.Element</a>.\n           * The DOM node itself can be accessed with .elt.\n           * Returns null if none found. You can also specify a container to search within.\n           *\n           * @method select\n           * @param  {String} selectors CSS selector string of element to search for\n           * @param  {String|p5.Element|HTMLElement} [container] CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\n           *                                             HTML element to search within\n           * @return {p5.Element|null} <a href=\"#/p5.Element\">p5.Element</a> containing node found\n           * @example\n           * <div><code>\n           * function setup() {\n           *   createCanvas(50, 50);\n           *   background(30);\n           *   // move canvas down and right\n           *   select('canvas').position(10, 30);\n           * }\n           * </code></div>\n           *\n           * <div class=\"norender\"><code>\n           * // select using ID\n           * let a = select('#container');\n           * let b = select('#beep', '#container');\n           * let c;\n           * if (a) {\n           *   // select using class\n           *   c = select('.boop', a);\n           * }\n           * // select using CSS selector string\n           * let d = select('#container #bleep');\n           * let e = select('#container p');\n           * [a, b, c, d, e]; // unused\n           * </code></div>\n           */\n          _main.default.prototype.select = function(e, p) {\n            _main.default._validateParameters('select', arguments);\n            var container = this._getContainer(p);\n            var res = container.querySelector(e);\n            if (res) {\n              return this._wrapElement(res);\n            } else {\n              return null;\n            }\n          };\n\n          /**\n           * Searches the page for elements that match the given CSS selector string (can be an ID a class,\n           * tag name or a combination) and returns them as <a href=\"#/p5.Element\">p5.Element</a>s in\n           * an array.\n           * The DOM node itself can be accessed with .elt.\n           * Returns an empty array if none found.\n           * You can also specify a container to search within.\n           *\n           * @method selectAll\n           * @param  {String} selectors CSS selector string of elements to search for\n           * @param  {String|p5.Element|HTMLElement} [container] CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>\n           *                                             , or HTML element to search within\n           * @return {p5.Element[]} Array of <a href=\"#/p5.Element\">p5.Element</a>s containing nodes found\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   createButton('btn');\n           *   createButton('2nd btn');\n           *   createButton('3rd btn');\n           *   let buttons = selectAll('button');\n           *\n           *   for (let i = 0; i < buttons.length; i++) {\n           *     buttons[i].size(100, 100);\n           *   }\n           * }\n           * </code></div>\n           * <div class='norender'><code>\n           * // these are all valid calls to selectAll()\n           * let a = selectAll('.beep');\n           * a = selectAll('div');\n           * a = selectAll('button', '#container');\n           *\n           * let b = createDiv();\n           * b.id('container');\n           * let c = select('#container');\n           * a = selectAll('p', c);\n           * a = selectAll('#container p');\n           *\n           * let d = document.getElementById('container');\n           * a = selectAll('.boop', d);\n           * a = selectAll('#container .boop');\n           * console.log(a);\n           * </code></div>\n           */\n          _main.default.prototype.selectAll = function(e, p) {\n            _main.default._validateParameters('selectAll', arguments);\n            var arr = [];\n            var container = this._getContainer(p);\n            var res = container.querySelectorAll(e);\n            if (res) {\n              for (var j = 0; j < res.length; j++) {\n                var obj = this._wrapElement(res[j]);\n                arr.push(obj);\n              }\n            }\n            return arr;\n          };\n\n          /**\n           * Helper function for select and selectAll\n           */\n          _main.default.prototype._getContainer = function(p) {\n            var container = document;\n            if (typeof p === 'string') {\n              container = document.querySelector(p) || document;\n            } else if (p instanceof _main.default.Element) {\n              container = p.elt;\n            } else if (p instanceof HTMLElement) {\n              container = p;\n            }\n            return container;\n          };\n\n          /**\n           * Helper function for getElement and getElements.\n           */\n          _main.default.prototype._wrapElement = function(elt) {\n            var children = Array.prototype.slice.call(elt.children);\n            if (elt.tagName === 'INPUT' && elt.type === 'checkbox') {\n              var converted = new _main.default.Element(elt, this);\n              converted.checked = function() {\n                if (arguments.length === 0) {\n                  return this.elt.checked;\n                } else if (arguments[0]) {\n                  this.elt.checked = true;\n                } else {\n                  this.elt.checked = false;\n                }\n                return this;\n              };\n              return converted;\n            } else if (elt.tagName === 'VIDEO' || elt.tagName === 'AUDIO') {\n              return new _main.default.MediaElement(elt, this);\n            } else if (elt.tagName === 'SELECT') {\n              return this.createSelect(new _main.default.Element(elt, this));\n            } else if (\n              children.length > 0 &&\n              children.every(function(c) {\n                return c.tagName === 'INPUT' || c.tagName === 'LABEL';\n              })\n            ) {\n              return this.createRadio(new _main.default.Element(elt, this));\n            } else {\n              return new _main.default.Element(elt, this);\n            }\n          };\n\n          /**\n           * Removes all elements created by p5, except any canvas / graphics\n           * elements created by <a href=\"#/p5/createCanvas\">createCanvas</a> or <a href=\"#/p5/createGraphics\">createGraphics</a>.\n           * Event handlers are removed, and element is removed from the DOM.\n           * @method removeElements\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   createDiv('this is some text');\n           *   createP('this is a paragraph');\n           * }\n           * function mousePressed() {\n           *   removeElements(); // this will remove the div and p, not canvas\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.removeElements = function(e) {\n            _main.default._validateParameters('removeElements', arguments);\n            // el.remove splices from this._elements, so don't mix iteration with it\n            var isNotCanvasElement = function isNotCanvasElement(el) {\n              return !(el.elt instanceof HTMLCanvasElement);\n            };\n            var removeableElements = this._elements.filter(isNotCanvasElement);\n            removeableElements.map(function(el) {\n              return el.remove();\n            });\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/changed\">changed()</a> function is called when the value of an\n           * element changes.\n           * This can be used to attach an element specific event listener.\n           *\n           * @method changed\n           * @param  {Function|Boolean} fxn function to be fired when the value of\n           *                                an element changes.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div><code>\n           * let sel;\n           *\n           * function setup() {\n           *   textAlign(CENTER);\n           *   background(200);\n           *   sel = createSelect();\n           *   sel.position(10, 10);\n           *   sel.option('pear');\n           *   sel.option('kiwi');\n           *   sel.option('grape');\n           *   sel.changed(mySelectEvent);\n           * }\n           *\n           * function mySelectEvent() {\n           *   let item = sel.value();\n           *   background(200);\n           *   text(\"it's a \" + item + '!', 50, 50);\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let checkbox;\n           * let cnv;\n           *\n           * function setup() {\n           *   checkbox = createCheckbox(' fill');\n           *   checkbox.changed(changeFill);\n           *   cnv = createCanvas(100, 100);\n           *   cnv.position(0, 30);\n           *   noFill();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   ellipse(50, 50, 50, 50);\n           * }\n           *\n           * function changeFill() {\n           *   if (checkbox.checked()) {\n           *     fill(0);\n           *   } else {\n           *     noFill();\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * dropdown: pear, kiwi, grape. When selected text \"its a\" + selection shown.\n           */\n          _main.default.Element.prototype.changed = function(fxn) {\n            _main.default.Element._adjustListener('change', fxn, this);\n            return this;\n          };\n\n          /**\n           * The .<a href=\"#/p5.Element/input\">input()</a> function is called when any user input is\n           * detected with an element. The input event is often used\n           * to detect keystrokes in a input element, or changes on a\n           * slider element. This can be used to attach an element specific\n           * event listener.\n           *\n           * @method input\n           * @param  {Function|Boolean} fxn function to be fired when any user input is\n           *                                detected within the element.\n           *                                if `false` is passed instead, the previously\n           *                                firing function will no longer fire.\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * // Open your console to see the output\n           * function setup() {\n           *   let inp = createInput('');\n           *   inp.input(myInputEvent);\n           * }\n           *\n           * function myInputEvent() {\n           *   console.log('you are typing: ', this.value());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no display.\n           */\n          _main.default.Element.prototype.input = function(fxn) {\n            _main.default.Element._adjustListener('input', fxn, this);\n            return this;\n          };\n\n          /**\n           * Helpers for create methods.\n           */\n          function addElement(elt, pInst, media) {\n            var node = pInst._userNode ? pInst._userNode : document.body;\n            node.appendChild(elt);\n            var c = media\n              ? new _main.default.MediaElement(elt, pInst)\n              : new _main.default.Element(elt, pInst);\n            pInst._elements.push(c);\n            return c;\n          }\n\n          /**\n           * Creates a `&lt;div&gt;&lt;/div&gt;` element in the DOM with given inner HTML.\n           *\n           * @method createDiv\n           * @param  {String} [html] inner HTML for element created\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * createDiv('this is some text');\n           * </code></div>\n           */\n          _main.default.prototype.createDiv = function() {\n            var html =\n              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n            var elt = document.createElement('div');\n            elt.innerHTML = html;\n            return addElement(elt, this);\n          };\n\n          /**\n           * Creates a `&lt;p&gt;&lt;/p&gt;` element in the DOM with given inner HTML. Used\n           * for paragraph length text.\n           *\n           * @method createP\n           * @param  {String} [html] inner HTML for element created\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * createP('this is some text');\n           * </code></div>\n           */\n          _main.default.prototype.createP = function() {\n            var html =\n              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n            var elt = document.createElement('p');\n            elt.innerHTML = html;\n            return addElement(elt, this);\n          };\n\n          /**\n           * Creates a `&lt;span&gt;&lt;/span&gt;` element in the DOM with given inner HTML.\n           *\n           * @method createSpan\n           * @param  {String} [html] inner HTML for element created\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * createSpan('this is some text');\n           * </code></div>\n           */\n          _main.default.prototype.createSpan = function() {\n            var html =\n              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n            var elt = document.createElement('span');\n            elt.innerHTML = html;\n            return addElement(elt, this);\n          };\n\n          /**\n           * Creates an `&lt;img&gt;` element in the DOM with given src and\n           * alternate text.\n           *\n           * @method createImg\n           * @param  {String} src src path or url for image\n           * @param  {String} alt <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes\">alternate text</a> to be used if image does not load. You can use also an empty string (`\"\"`) if that an image is not intended to be viewed.\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * createImg(\n           *   'https://p5js.org/assets/img/asterisk-01.png',\n           *   'the p5 magenta asterisk'\n           * );\n           * </code></div>\n           */\n          /**\n           * @method createImg\n           * @param  {String} src\n           * @param  {String} alt\n           * @param  {String} crossOrigin <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">crossOrigin property</a> of the `img` element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with `canvas`. if an empty string(`\"\"`) is passed, CORS is not used\n           * @param  {Function} [successCallback] callback to be called once image data is loaded with the <a href=\"#/p5.Element\">p5.Element</a> as argument\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           */\n          _main.default.prototype.createImg = function() {\n            _main.default._validateParameters('createImg', arguments);\n            var elt = document.createElement('img');\n            var args = arguments;\n            var self;\n            if (args.length > 1 && typeof args[1] === 'string') {\n              elt.alt = args[1];\n            }\n            if (args.length > 2 && typeof args[2] === 'string') {\n              elt.crossOrigin = args[2];\n            }\n            elt.src = args[0];\n            self = addElement(elt, this);\n            elt.addEventListener('load', function() {\n              self.width = elt.offsetWidth || elt.width;\n              self.height = elt.offsetHeight || elt.height;\n              var last = args[args.length - 1];\n              if (typeof last === 'function') last(self);\n            });\n            return self;\n          };\n\n          /**\n           * Creates an `&lt;a&gt;&lt;/a&gt;` element in the DOM for including a hyperlink.\n           *\n           * @method createA\n           * @param  {String} href       url of page to link to\n           * @param  {String} html       inner html of link element to display\n           * @param  {String} [target]   target where new link should open,\n           *                             could be _blank, _self, _parent, _top.\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * createA('http://p5js.org/', 'this is a link');\n           * </code></div>\n           */\n          _main.default.prototype.createA = function(href, html, target) {\n            _main.default._validateParameters('createA', arguments);\n            var elt = document.createElement('a');\n            elt.href = href;\n            elt.innerHTML = html;\n            if (target) elt.target = target;\n            return addElement(elt, this);\n          };\n\n          /** INPUT **/\n\n          /**\n           * Creates a slider `&lt;input&gt;&lt;/input&gt;` element in the DOM.\n           * Use .size() to set the display length of the slider.\n           *\n           * @method createSlider\n           * @param  {Number} min minimum value of the slider\n           * @param  {Number} max maximum value of the slider\n           * @param  {Number} [value] default value of the slider\n           * @param  {Number} [step] step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div><code>\n           * let slider;\n           * function setup() {\n           *   slider = createSlider(0, 255, 100);\n           *   slider.position(10, 10);\n           *   slider.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   let val = slider.value();\n           *   background(val);\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let slider;\n           * function setup() {\n           *   colorMode(HSB);\n           *   slider = createSlider(0, 360, 60, 40);\n           *   slider.position(10, 10);\n           *   slider.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   let val = slider.value();\n           *   background(val, 100, 100, 1);\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.createSlider = function(min, max, value, step) {\n            _main.default._validateParameters('createSlider', arguments);\n            var elt = document.createElement('input');\n            elt.type = 'range';\n            elt.min = min;\n            elt.max = max;\n            if (step === 0) {\n              elt.step = 0.000000000000000001; // smallest valid step\n            } else if (step) {\n              elt.step = step;\n            }\n            if (typeof value === 'number') elt.value = value;\n            return addElement(elt, this);\n          };\n\n          /**\n           * Creates a `&lt;button&gt;&lt;/button&gt;` element in the DOM.\n           * Use .size() to set the display size of the button.\n           * Use .mousePressed() to specify behavior on press.\n           *\n           * @method createButton\n           * @param  {String} label label displayed on the button\n           * @param  {String} [value] value of the button\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * let button;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(0);\n           *   button = createButton('click me');\n           *   button.position(19, 19);\n           *   button.mousePressed(changeBG);\n           * }\n           *\n           * function changeBG() {\n           *   let val = random(255);\n           *   background(val);\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.createButton = function(label, value) {\n            _main.default._validateParameters('createButton', arguments);\n            var elt = document.createElement('button');\n            elt.innerHTML = label;\n            if (value) elt.value = value;\n            return addElement(elt, this);\n          };\n\n          /**\n           * Creates a checkbox `&lt;input&gt;&lt;/input&gt;` element in the DOM.\n           * Calling .checked() on a checkbox returns if it is checked or not\n           *\n           * @method createCheckbox\n           * @param  {String} [label] label displayed after checkbox\n           * @param  {boolean} [value] value of the checkbox; checked is true, unchecked is false\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * let checkbox;\n           *\n           * function setup() {\n           *   checkbox = createCheckbox('label', false);\n           *   checkbox.changed(myCheckedEvent);\n           * }\n           *\n           * function myCheckedEvent() {\n           *   if (this.checked()) {\n           *     console.log('Checking!');\n           *   } else {\n           *     console.log('Unchecking!');\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.createCheckbox = function() {\n            _main.default._validateParameters('createCheckbox', arguments);\n            var elt = document.createElement('div');\n            var checkbox = document.createElement('input');\n            checkbox.type = 'checkbox';\n            elt.appendChild(checkbox);\n            //checkbox must be wrapped in p5.Element before label so that label appears after\n            var self = addElement(elt, this);\n            self.checked = function() {\n              var cb = self.elt.getElementsByTagName('input')[0];\n              if (cb) {\n                if (arguments.length === 0) {\n                  return cb.checked;\n                } else if (arguments[0]) {\n                  cb.checked = true;\n                } else {\n                  cb.checked = false;\n                }\n              }\n              return self;\n            };\n            this.value = function(val) {\n              self.value = val;\n              return this;\n            };\n            if (arguments[0]) {\n              var ran = Math.random()\n                .toString(36)\n                .slice(2);\n              var label = document.createElement('label');\n              checkbox.setAttribute('id', ran);\n              label.htmlFor = ran;\n              self.value(arguments[0]);\n              label.appendChild(document.createTextNode(arguments[0]));\n              elt.appendChild(label);\n            }\n            if (arguments[1]) {\n              checkbox.checked = true;\n            }\n            return self;\n          };\n\n          /**\n           * Creates a dropdown menu `&lt;select&gt;&lt;/select&gt;` element in the DOM.\n           * It also helps to assign select-box methods to <a href=\"#/p5.Element\">p5.Element</a> when selecting existing select box.\n           * - `.option(name, [value])` can be used to set options for the select after it is created.\n           * - `.value()` will return the currently selected option.\n           * - `.selected()` will return current dropdown element which is an instance of <a href=\"#/p5.Element\">p5.Element</a>\n           * - `.selected(value)` can be used to make given option selected by default when the page first loads.\n           * - `.disable()` marks whole of dropdown element as disabled.\n           * - `.disable(value)` marks given option as disabled\n           *\n           * @method createSelect\n           * @param {boolean} [multiple] true if dropdown should support multiple selections\n           * @return {p5.Element}\n           * @example\n           * <div><code>\n           * let sel;\n           *\n           * function setup() {\n           *   textAlign(CENTER);\n           *   background(200);\n           *   sel = createSelect();\n           *   sel.position(10, 10);\n           *   sel.option('pear');\n           *   sel.option('kiwi');\n           *   sel.option('grape');\n           *   sel.selected('kiwi');\n           *   sel.changed(mySelectEvent);\n           * }\n           *\n           * function mySelectEvent() {\n           *   let item = sel.value();\n           *   background(200);\n           *   text('It is a ' + item + '!', 50, 50);\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let sel;\n           *\n           * function setup() {\n           *   textAlign(CENTER);\n           *   background(200);\n           *   sel = createSelect();\n           *   sel.position(10, 10);\n           *   sel.option('oil');\n           *   sel.option('milk');\n           *   sel.option('bread');\n           *   sel.disable('milk');\n           * }\n           * </code></div>\n           */\n          /**\n           * @method createSelect\n           * @param {Object} existing DOM select element\n           * @return {p5.Element}\n           */\n\n          _main.default.prototype.createSelect = function() {\n            _main.default._validateParameters('createSelect', arguments);\n            var self;\n            var arg = arguments[0];\n            if (\n              arg instanceof _main.default.Element &&\n              arg.elt instanceof HTMLSelectElement\n            ) {\n              // If given argument is p5.Element of select type\n              self = arg;\n              this.elt = arg.elt;\n            } else if (arg instanceof HTMLSelectElement) {\n              self = addElement(arg, this);\n              this.elt = arg;\n            } else {\n              var elt = document.createElement('select');\n              if (arg && typeof arg === 'boolean') {\n                elt.setAttribute('multiple', 'true');\n              }\n              self = addElement(elt, this);\n              this.elt = elt;\n            }\n            self.option = function(name, value) {\n              var index;\n\n              // if no name is passed, return\n              if (name === undefined) {\n                return;\n              }\n              //see if there is already an option with this name\n              for (var i = 0; i < this.elt.length; i += 1) {\n                if (this.elt[i].innerHTML === name) {\n                  index = i;\n                  break;\n                }\n              }\n              //if there is an option with this name we will modify it\n              if (index !== undefined) {\n                //if the user passed in false then delete that option\n                if (value === false) {\n                  this.elt.remove(index);\n                } else {\n                  // Update the option at index with the value\n                  this.elt[index].value = value;\n                }\n              } else {\n                //if it doesn't exist create it\n                var opt = document.createElement('option');\n                opt.innerHTML = name;\n                opt.value = value === undefined ? name : value;\n                this.elt.appendChild(opt);\n                this._pInst._elements.push(opt);\n              }\n            };\n\n            self.selected = function(value) {\n              // Update selected status of option\n              if (value !== undefined) {\n                for (var i = 0; i < this.elt.length; i += 1) {\n                  if (this.elt[i].value.toString() === value.toString()) {\n                    this.elt.selectedIndex = i;\n                  }\n                }\n                return this;\n              } else {\n                if (this.elt.getAttribute('multiple')) {\n                  var arr = [];\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n                  try {\n                    for (\n                      var _iterator = this.elt.selectedOptions[Symbol.iterator](), _step;\n                      !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                      _iteratorNormalCompletion = true\n                    ) {\n                      var selectedOption = _step.value;\n                      arr.push(selectedOption.value);\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n                  return arr;\n                } else {\n                  return this.elt.value;\n                }\n              }\n            };\n\n            self.disable = function(value) {\n              if (typeof value === 'string') {\n                for (var i = 0; i < this.elt.length; i++) {\n                  if (this.elt[i].value.toString() === value) {\n                    this.elt[i].disabled = true;\n                    this.elt[i].selected = false;\n                  }\n                }\n              } else {\n                this.elt.disabled = true;\n              }\n              return this;\n            };\n\n            return self;\n          };\n\n          /**\n           * Creates a radio button element in the DOM.It also helps existing radio buttons\n           * assign methods of <a href=\"#/p5.Element/\">p5.Element</a>.\n           * - `.option(value, [label])` can be used to create a new option for the\n           *   element. If an option with a value already exists, it will be returned.\n           *   Optionally, a label can be provided as second argument for the option.\n           * - `.remove(value)` can be used to remove an option for the element.\n           * - `.value()` method will return the currently selected value.\n           * - `.selected()` method will return the currently selected input element.\n           * - `.selected(value)` method will select the option and return it.\n           * - `.disable(Boolean)` method will enable/disable the whole radio button element.\n           *\n           * @method createRadio\n           * @param  {Object} containerElement An container HTML Element either a div\n           * or span inside which all existing radio inputs will be considered as options.\n           * @param {string} [name] A name parameter for each Input Element.\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div><code>\n           * let radio;\n           *\n           * function setup() {\n           *   radio = createRadio();\n           *   radio.option('black');\n           *   radio.option('white');\n           *   radio.option('gray');\n           *   radio.style('width', '60px');\n           *   textAlign(CENTER);\n           *   fill(255, 0, 0);\n           * }\n           *\n           * function draw() {\n           *   let val = radio.value();\n           *   background(val);\n           *   text(val, width / 2, height / 2);\n           * }\n           * </code></div>\n           * <div><code>\n           * let radio;\n           *\n           * function setup() {\n           *   radio = createRadio();\n           *   radio.option(1, 'apple');\n           *   radio.option(2, 'bread');\n           *   radio.option(3, 'juice');\n           *   radio.style('width', '30px');\n           *   textAlign(CENTER);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   let val = radio.value();\n           *   if (val) {\n           *     text('item cost is $' + val, width / 2, height / 2);\n           *   }\n           * }\n           * </code></div>\n           */\n          /**\n           * @method createRadio\n           * @param {String} name\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           */\n          /**\n           * @method createRadio\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           */\n          _main.default.prototype.createRadio = function() {\n            // Creates a div, adds each option as an individual input inside it.\n            // If already given with a containerEl, will search for all input[radio]\n            // it, create a p5.Element out of it, add options to it and return the p5.Element.\n\n            var radioElement;\n            var name;\n            var arg0 = arguments[0];\n            // If existing radio Element is provided as argument 0\n            if (arg0 instanceof HTMLDivElement || arg0 instanceof HTMLSpanElement) {\n              radioElement = arg0;\n              if (typeof arguments[1] === 'string') name = arguments[1];\n            } else {\n              if (typeof arg0 === 'string') name = arg0;\n              radioElement = document.createElement('div');\n            }\n            this.elt = radioElement;\n            var self = addElement(radioElement, this);\n            self._name = name || 'radioOption';\n\n            // setup member functions\n            var isRadioInput = function isRadioInput(el) {\n              return el instanceof HTMLInputElement && el.type === 'radio';\n            };\n            var isNextLabel = function isNextLabel(el) {\n              return el.nextElementSibling instanceof HTMLLabelElement;\n            };\n\n            self._getOptionsArray = function() {\n              return Array.from(this.elt.children).filter(isRadioInput);\n            };\n\n            self.option = function(value, label) {\n              // return an option with this value, create if not exists.\n              var optionEl;\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n              try {\n                for (\n                  var _iterator2 = self._getOptionsArray()[Symbol.iterator](), _step2;\n                  !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n                  _iteratorNormalCompletion2 = true\n                ) {\n                  var option = _step2.value;\n                  if (option.value === value) {\n                    optionEl = option;\n                    break;\n                  }\n                }\n\n                // Create a new option, add it to radioElement and return it.\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n              if (optionEl === undefined) {\n                optionEl = document.createElement('input');\n                optionEl.setAttribute('type', 'radio');\n                optionEl.setAttribute('value', value);\n                this.elt.appendChild(optionEl);\n              }\n\n              // Check if label element exists, else create it\n              var labelElement;\n              if (!isNextLabel(optionEl)) {\n                labelElement = document.createElement('label');\n                optionEl.insertAdjacentElement('afterend', labelElement);\n              } else {\n                labelElement = optionEl.nextElementSibling;\n              }\n\n              labelElement.innerHTML = label === undefined ? value : label;\n              optionEl.setAttribute('name', self._name);\n              return optionEl;\n            };\n\n            self.remove = function(value) {\n              var _iteratorNormalCompletion3 = true;\n              var _didIteratorError3 = false;\n              var _iteratorError3 = undefined;\n              try {\n                for (\n                  var _iterator3 = self._getOptionsArray()[Symbol.iterator](), _step3;\n                  !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);\n                  _iteratorNormalCompletion3 = true\n                ) {\n                  var optionEl = _step3.value;\n                  if (optionEl.value === value) {\n                    if (isNextLabel(optionEl)) optionEl.nextElementSibling.remove();\n                    optionEl.remove();\n                    return;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                    _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n            };\n\n            self.value = function() {\n              var result = '';\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n              try {\n                for (\n                  var _iterator4 = self._getOptionsArray()[Symbol.iterator](), _step4;\n                  !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done);\n                  _iteratorNormalCompletion4 = true\n                ) {\n                  var option = _step4.value;\n                  if (option.checked) {\n                    result = option.value;\n                    break;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n              return result;\n            };\n\n            self.selected = function(value) {\n              var result = null;\n              if (value === undefined) {\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n                try {\n                  for (\n                    var _iterator5 = self._getOptionsArray()[Symbol.iterator](), _step5;\n                    !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done);\n                    _iteratorNormalCompletion5 = true\n                  ) {\n                    var option = _step5.value;\n                    if (option.checked) {\n                      result = option;\n                      break;\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError5 = true;\n                  _iteratorError5 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                      _iterator5.return();\n                    }\n                  } finally {\n                    if (_didIteratorError5) {\n                      throw _iteratorError5;\n                    }\n                  }\n                }\n              } else {\n                var _iteratorNormalCompletion6 = true;\n                var _didIteratorError6 = false;\n                var _iteratorError6 = undefined;\n                try {\n                  for (\n                    var _iterator6 = self._getOptionsArray()[Symbol.iterator](), _step6;\n                    !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done);\n                    _iteratorNormalCompletion6 = true\n                  ) {\n                    var _option = _step6.value;\n                    if (_option.value === value) {\n                      _option.setAttribute('checked', true);\n                      result = _option;\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError6 = true;\n                  _iteratorError6 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                      _iterator6.return();\n                    }\n                  } finally {\n                    if (_didIteratorError6) {\n                      throw _iteratorError6;\n                    }\n                  }\n                }\n              }\n              return result;\n            };\n\n            self.disable = function() {\n              var shouldDisable =\n                arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n              var _iteratorNormalCompletion7 = true;\n              var _didIteratorError7 = false;\n              var _iteratorError7 = undefined;\n              try {\n                for (\n                  var _iterator7 = self._getOptionsArray()[Symbol.iterator](), _step7;\n                  !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done);\n                  _iteratorNormalCompletion7 = true\n                ) {\n                  var radioInput = _step7.value;\n                  radioInput.setAttribute('disabled', shouldDisable);\n                }\n              } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                    _iterator7.return();\n                  }\n                } finally {\n                  if (_didIteratorError7) {\n                    throw _iteratorError7;\n                  }\n                }\n              }\n            };\n\n            return self;\n          };\n\n          /**\n           * Creates a colorPicker element in the DOM for color input.\n           * The .value() method will return a hex string (#rrggbb) of the color.\n           * The .color() method will return a p5.Color object with the current chosen color.\n           *\n           * @method createColorPicker\n           * @param {String|p5.Color} [value] default color of element\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div><code>\n           * let colorPicker;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   colorPicker = createColorPicker('#ed225d');\n           *   colorPicker.position(0, height + 5);\n           * }\n           *\n           * function draw() {\n           *   background(colorPicker.color());\n           * }\n           * </code></div>\n           * <div><code>\n           * let inp1, inp2;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background('grey');\n           *   inp1 = createColorPicker('#ff0000');\n           *   inp1.position(0, height + 5);\n           *   inp1.input(setShade1);\n           *   inp2 = createColorPicker(color('yellow'));\n           *   inp2.position(0, height + 30);\n           *   inp2.input(setShade2);\n           *   setMidShade();\n           * }\n           *\n           * function setMidShade() {\n           *   // Finding a shade between the two\n           *   let commonShade = lerpColor(inp1.color(), inp2.color(), 0.5);\n           *   fill(commonShade);\n           *   rect(20, 20, 60, 60);\n           * }\n           *\n           * function setShade1() {\n           *   setMidShade();\n           *   console.log('You are choosing shade 1 to be : ', this.value());\n           * }\n           * function setShade2() {\n           *   setMidShade();\n           *   console.log('You are choosing shade 2 to be : ', this.value());\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.createColorPicker = function(value) {\n            _main.default._validateParameters('createColorPicker', arguments);\n            var elt = document.createElement('input');\n            var self;\n            elt.type = 'color';\n            if (value) {\n              if (value instanceof _main.default.Color) {\n                elt.value = value.toString('#rrggbb');\n              } else {\n                _main.default.prototype._colorMode = 'rgb';\n                _main.default.prototype._colorMaxes = {\n                  rgb: [255, 255, 255, 255],\n                  hsb: [360, 100, 100, 1],\n                  hsl: [360, 100, 100, 1]\n                };\n\n                elt.value = _main.default.prototype.color(value).toString('#rrggbb');\n              }\n            } else {\n              elt.value = '#000000';\n            }\n            self = addElement(elt, this);\n            // Method to return a p5.Color object for the given color.\n            self.color = function() {\n              if (value) {\n                if (value.mode) {\n                  _main.default.prototype._colorMode = value.mode;\n                }\n                if (value.maxes) {\n                  _main.default.prototype._colorMaxes = value.maxes;\n                }\n              }\n              return _main.default.prototype.color(this.elt.value);\n            };\n            return self;\n          };\n\n          /**\n           * Creates an `&lt;input&gt;&lt;/input&gt;` element in the DOM for text input.\n           * Use .<a href=\"#/p5.Element/size\">size()</a> to set the display length of the box.\n           *\n           * @method createInput\n           * @param {String} value default value of the input box\n           * @param {String} [type] type of text, ie text, password etc. Defaults to text.\n           *   Needs a value to be specified first.\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let inp = createInput('');\n           *   inp.input(myInputEvent);\n           * }\n           *\n           * function myInputEvent() {\n           *   console.log('you are typing: ', this.value());\n           * }\n           * </code></div>\n           */\n          /**\n           * @method createInput\n           * @param {String} [value]\n           * @return {p5.Element}\n           */\n          _main.default.prototype.createInput = function() {\n            var value =\n              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n            var type =\n              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';\n            _main.default._validateParameters('createInput', arguments);\n            var elt = document.createElement('input');\n            elt.setAttribute('value', value);\n            elt.setAttribute('type', type);\n            return addElement(elt, this);\n          };\n\n          /**\n           * Creates an `&lt;input&gt;&lt;/input&gt;` element in the DOM of type 'file'.\n           * This allows users to select local files for use in a sketch.\n           *\n           * @method createFileInput\n           * @param  {Function} callback callback function for when a file is loaded\n           * @param  {Boolean} [multiple] optional, to allow multiple files to be selected\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created DOM element\n           * @example\n           * <div><code>\n           * let input;\n           * let img;\n           *\n           * function setup() {\n           *   input = createFileInput(handleFile);\n           *   input.position(0, 0);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   if (img) {\n           *     image(img, 0, 0, width, height);\n           *   }\n           * }\n           *\n           * function handleFile(file) {\n           *   print(file);\n           *   if (file.type === 'image') {\n           *     img = createImg(file.data, '');\n           *     img.hide();\n           *   } else {\n           *     img = null;\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.createFileInput = function(callback) {\n            var multiple =\n              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            _main.default._validateParameters('createFileInput', arguments);\n\n            var handleFileSelect = function handleFileSelect(event) {\n              var _iteratorNormalCompletion8 = true;\n              var _didIteratorError8 = false;\n              var _iteratorError8 = undefined;\n              try {\n                for (\n                  var _iterator8 = event.target.files[Symbol.iterator](), _step8;\n                  !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done);\n                  _iteratorNormalCompletion8 = true\n                ) {\n                  var file = _step8.value;\n                  _main.default.File._load(file, callback);\n                }\n              } catch (err) {\n                _didIteratorError8 = true;\n                _iteratorError8 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                    _iterator8.return();\n                  }\n                } finally {\n                  if (_didIteratorError8) {\n                    throw _iteratorError8;\n                  }\n                }\n              }\n            };\n\n            // If File API's are not supported, throw Error\n            if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n              console.log(\n                'The File APIs are not fully supported in this browser. Cannot create element.'\n              );\n\n              return;\n            }\n\n            var fileInput = document.createElement('input');\n            fileInput.setAttribute('type', 'file');\n            if (multiple) fileInput.setAttribute('multiple', true);\n            fileInput.addEventListener('change', handleFileSelect, false);\n            return addElement(fileInput, this);\n          };\n\n          /** VIDEO STUFF **/\n\n          // Helps perform similar tasks for media element methods.\n          function createMedia(pInst, type, src, callback) {\n            var elt = document.createElement(type);\n\n            // Create source elements from given sources\n            src = src || '';\n            if (typeof src === 'string') {\n              src = [src];\n            }\n            var _iteratorNormalCompletion9 = true;\n            var _didIteratorError9 = false;\n            var _iteratorError9 = undefined;\n            try {\n              for (\n                var _iterator9 = src[Symbol.iterator](), _step9;\n                !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done);\n                _iteratorNormalCompletion9 = true\n              ) {\n                var mediaSource = _step9.value;\n                var sourceEl = document.createElement('source');\n                sourceEl.setAttribute('src', mediaSource);\n                elt.appendChild(sourceEl);\n              }\n\n              // If callback is provided, attach to element\n            } catch (err) {\n              _didIteratorError9 = true;\n              _iteratorError9 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                  _iterator9.return();\n                }\n              } finally {\n                if (_didIteratorError9) {\n                  throw _iteratorError9;\n                }\n              }\n            }\n            if (typeof callback === 'function') {\n              var callbackHandler = function callbackHandler() {\n                callback();\n                elt.removeEventListener('canplaythrough', callbackHandler);\n              };\n              elt.addEventListener('canplaythrough', callbackHandler);\n            }\n\n            var mediaEl = addElement(elt, pInst, true);\n            mediaEl.loadedmetadata = false;\n\n            // set width and height onload metadata\n            elt.addEventListener('loadedmetadata', function() {\n              mediaEl.width = elt.videoWidth;\n              mediaEl.height = elt.videoHeight;\n\n              // set elt width and height if not set\n              if (mediaEl.elt.width === 0) mediaEl.elt.width = elt.videoWidth;\n              if (mediaEl.elt.height === 0) mediaEl.elt.height = elt.videoHeight;\n              if (mediaEl.presetPlaybackRate) {\n                mediaEl.elt.playbackRate = mediaEl.presetPlaybackRate;\n                delete mediaEl.presetPlaybackRate;\n              }\n              mediaEl.loadedmetadata = true;\n            });\n\n            return mediaEl;\n          }\n\n          /**\n           * Creates an HTML5 `&lt;video&gt;` element in the DOM for simple playback\n           * of audio/video. Shown by default, can be hidden with .<a href=\"#/p5.Element/hide\">hide()</a>\n           * and drawn into canvas using <a href=\"#/p5/image\">image()</a>. The first parameter\n           * can be either a single string path to a video file, or an array of string\n           * paths to different formats of the same video. This is useful for ensuring\n           * that your video can play across different browsers, as each supports\n           * different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this\n           * page</a> for further information about supported formats.\n           *\n           * @method createVideo\n           * @param  {String|String[]} src path to a video file, or array of paths for\n           *                             supporting different browsers\n           * @param  {Function} [callback] callback function to be called upon\n           *                             'canplaythrough' event fire, that is, when the\n           *                             browser can play the media, and estimates that\n           *                             enough data has been loaded to play the media\n           *                             up to its end without having to stop for\n           *                             further buffering of content\n           * @return {p5.MediaElement}   pointer to video <a href=\"#/p5.Element\">p5.Element</a>\n           * @example\n           * <div><code>\n           * let vid;\n           * function setup() {\n           *   noCanvas();\n           *\n           *   vid = createVideo(\n           *     ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm'],\n           *     vidLoad\n           *   );\n           *\n           *   vid.size(100, 100);\n           * }\n           *\n           * // This function is called when the video loads\n           * function vidLoad() {\n           *   vid.loop();\n           *   vid.volume(0);\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.createVideo = function(src, callback) {\n            _main.default._validateParameters('createVideo', arguments);\n            return createMedia(this, 'video', src, callback);\n          };\n\n          /** AUDIO STUFF **/\n\n          /**\n           * Creates a hidden HTML5 `&lt;audio&gt;` element in the DOM for simple audio\n           * playback. The first parameter can be either a single string path to a\n           * audio file, or an array of string paths to different formats of the same\n           * audio. This is useful for ensuring that your audio can play across\n           * different browsers, as each supports different formats.\n           * See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this\n           * page for further information about supported formats</a>.\n           *\n           * @method createAudio\n           * @param  {String|String[]} [src] path to an audio file, or array of paths\n           *                             for supporting different browsers\n           * @param  {Function} [callback] callback function to be called upon\n           *                             'canplaythrough' event fire, that is, when the\n           *                             browser can play the media, and estimates that\n           *                             enough data has been loaded to play the media\n           *                             up to its end without having to stop for\n           *                             further buffering of content\n           * @return {p5.MediaElement}   pointer to audio <a href=\"#/p5.Element\">p5.Element</a>\n           * @example\n           * <div><code>\n           * let ele;\n           * function setup() {\n           *   ele = createAudio('assets/beat.mp3');\n           *\n           *   // here we set the element to autoplay\n           *   // The element will play as soon\n           *   // as it is able to do so.\n           *   ele.autoplay(true);\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.createAudio = function(src, callback) {\n            _main.default._validateParameters('createAudio', arguments);\n            return createMedia(this, 'audio', src, callback);\n          };\n\n          /** CAMERA STUFF **/\n\n          /**\n           * @property {String} VIDEO\n           * @final\n           * @category Constants\n           */\n          _main.default.prototype.VIDEO = 'video';\n          /**\n           * @property {String} AUDIO\n           * @final\n           * @category Constants\n           */\n          _main.default.prototype.AUDIO = 'audio';\n\n          // from: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n          // Older browsers might not implement mediaDevices at all, so we set an empty object first\n          if (navigator.mediaDevices === undefined) {\n            navigator.mediaDevices = {};\n          }\n\n          // Some browsers partially implement mediaDevices. We can't just assign an object\n          // with getUserMedia as it would overwrite existing properties.\n          // Here, we will just add the getUserMedia property if it's missing.\n          if (navigator.mediaDevices.getUserMedia === undefined) {\n            navigator.mediaDevices.getUserMedia = function(constraints) {\n              // First get ahold of the legacy getUserMedia, if present\n              var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n              // Some browsers just don't implement it - return a rejected promise with an error\n              // to keep a consistent interface\n              if (!getUserMedia) {\n                return Promise.reject(\n                  new Error('getUserMedia is not implemented in this browser')\n                );\n              }\n\n              // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n              return new Promise(function(resolve, reject) {\n                getUserMedia.call(navigator, constraints, resolve, reject);\n              });\n            };\n          }\n\n          /**\n           * Creates a new HTML5 `&lt;video&gt;` element that contains the audio/video feed\n           * from a webcam. The element is separate from the canvas and is displayed by\n           * default. The element can be hidden using .<a href=\"#/p5.Element/hide\">hide()</a>.\n           * The feed can be drawn onto the canvas using <a href=\"#/p5/image\">image()</a>.\n           * The loadedmetadata property can be used to detect when the element has fully\n           * loaded (see second example).\n           *\n           * More specific properties of the feed can be passing in a Constraints object.\n           * See the <a href='http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints'>\n           * W3C spec</a> for possible properties. Note that not all of these are supported\n           * by all browsers.\n           *\n           * <em>Security note</em>: A new browser security specification requires that\n           * getUserMedia, which is behind <a href=\"#/p5/createCapture\">createCapture()</a>,\n           * only works when you're running the code locally, or on HTTPS. Learn more\n           * <a href='http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https'>here</a>\n           * and <a href='https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia'>here</a>.\n           *\n           * @method createCapture\n           * @param  {String|Constant|Object}   type type of capture, either VIDEO or\n           *                                   AUDIO if none specified, default both,\n           *                                   or a Constraints object\n           * @param  {Function}                 [callback] function to be called once\n           *                                   stream has loaded\n           * @return {p5.Element} capture video <a href=\"#/p5.Element\">p5.Element</a>\n           * @example\n           * <div class='norender notest'>\n           * <code>\n           * let capture;\n           *\n           * function setup() {\n           *   createCanvas(480, 480);\n           *   capture = createCapture(VIDEO);\n           *   capture.hide();\n           * }\n           *\n           * function draw() {\n           *   image(capture, 0, 0, width, width * capture.height / capture.width);\n           *   filter(INVERT);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class='norender notest'>\n           * <code>\n           * function setup() {\n           *   createCanvas(480, 120);\n           *   let constraints = {\n           *     video: {\n           *       mandatory: {\n           *         minWidth: 1280,\n           *         minHeight: 720\n           *       },\n           *       optional: [{ maxFrameRate: 10 }]\n           *     },\n           *     audio: true\n           *   };\n           *   createCapture(constraints, function(stream) {\n           *     console.log(stream);\n           *   });\n           * }\n           * </code>\n           * </div>\n           * <div class='norender notest'>\n           * <code>\n           * let capture;\n           *\n           * function setup() {\n           *   createCanvas(640, 480);\n           *   capture = createCapture(VIDEO);\n           * }\n           * function draw() {\n           *   background(0);\n           *   if (capture.loadedmetadata) {\n           *     let c = capture.get(0, 0, 100, 100);\n           *     image(c, 0, 0);\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.createCapture = function() {\n            _main.default._validateParameters('createCapture', arguments);\n\n            // return if getUserMedia is not supported by browser\n            if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {\n              throw new DOMException('getUserMedia not supported in this browser');\n            }\n\n            var useVideo = true;\n            var useAudio = true;\n            var constraints;\n            var callback;\n            var _iteratorNormalCompletion10 = true;\n            var _didIteratorError10 = false;\n            var _iteratorError10 = undefined;\n            try {\n              for (\n                var _iterator10 = arguments[Symbol.iterator](), _step10;\n                !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done);\n                _iteratorNormalCompletion10 = true\n              ) {\n                var arg = _step10.value;\n                if (arg === _main.default.prototype.VIDEO) useAudio = false;\n                else if (arg === _main.default.prototype.AUDIO) useVideo = false;\n                else if (_typeof(arg) === 'object') constraints = arg;\n                else if (typeof arg === 'function') callback = arg;\n              }\n            } catch (err) {\n              _didIteratorError10 = true;\n              _iteratorError10 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n                  _iterator10.return();\n                }\n              } finally {\n                if (_didIteratorError10) {\n                  throw _iteratorError10;\n                }\n              }\n            }\n            if (!constraints) constraints = { video: useVideo, audio: useAudio };\n\n            var domElement = document.createElement('video');\n            // required to work in iOS 11 & up:\n            domElement.setAttribute('playsinline', '');\n\n            navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {\n              try {\n                if ('srcObject' in domElement) {\n                  domElement.srcObject = stream;\n                } else {\n                  domElement.src = window.URL.createObjectURL(stream);\n                }\n              } catch (err) {\n                domElement.src = stream;\n              }\n            }, console.log);\n\n            var videoEl = addElement(domElement, this, true);\n            videoEl.loadedmetadata = false;\n            // set width and height onload metadata\n            domElement.addEventListener('loadedmetadata', function() {\n              domElement.play();\n              if (domElement.width) {\n                videoEl.width = domElement.width;\n                videoEl.height = domElement.height;\n              } else {\n                videoEl.width = videoEl.elt.width = domElement.videoWidth;\n                videoEl.height = videoEl.elt.height = domElement.videoHeight;\n              }\n              videoEl.loadedmetadata = true;\n\n              if (callback) callback(domElement.srcObject);\n            });\n            return videoEl;\n          };\n\n          /**\n           * Creates element with given tag in the DOM with given content.\n           *\n           * @method createElement\n           * @param  {String} tag tag for the new element\n           * @param  {String} [content] html content to be inserted into the element\n           * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n           * @example\n           * <div class='norender'><code>\n           * createElement('h2', 'im an h2 p5.element!');\n           * </code></div>\n           */\n          _main.default.prototype.createElement = function(tag, content) {\n            _main.default._validateParameters('createElement', arguments);\n            var elt = document.createElement(tag);\n            if (typeof content !== 'undefined') {\n              elt.innerHTML = content;\n            }\n            return addElement(elt, this);\n          };\n\n          // =============================================================================\n          //                         p5.Element additions\n          // =============================================================================\n          /**\n           *\n           * Adds specified class to the element.\n           *\n           * @for p5.Element\n           * @method addClass\n           * @param  {String} class name of class to add\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let div = createDiv('div');\n           * div.addClass('myClass');\n           * </code></div>\n           */\n          _main.default.Element.prototype.addClass = function(c) {\n            if (this.elt.className) {\n              if (!this.hasClass(c)) {\n                this.elt.className = this.elt.className + ' ' + c;\n              }\n            } else {\n              this.elt.className = c;\n            }\n            return this;\n          };\n\n          /**\n           *\n           * Removes specified class from the element.\n           *\n           * @method removeClass\n           * @param  {String} class name of class to remove\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * // In this example, a class is set when the div is created\n           * // and removed when mouse is pressed. This could link up\n           * // with a CSS style rule to toggle style properties.\n           *\n           * let div;\n           *\n           * function setup() {\n           *   div = createDiv('div');\n           *   div.addClass('myClass');\n           * }\n           *\n           * function mousePressed() {\n           *   div.removeClass('myClass');\n           * }\n           * </code></div>\n           */\n          _main.default.Element.prototype.removeClass = function(c) {\n            // Note: Removing a class that does not exist does NOT throw an error in classList.remove method\n            this.elt.classList.remove(c);\n            return this;\n          };\n\n          /**\n           *\n           * Checks if specified class already set to element\n           *\n           * @method hasClass\n           * @returns {boolean} a boolean value if element has specified class\n           * @param c {String} class name of class to check\n           * @example\n           * <div class='norender'><code>\n           * let div;\n           *\n           * function setup() {\n           *   div = createDiv('div');\n           *   div.addClass('show');\n           * }\n           *\n           * function mousePressed() {\n           *   if (div.hasClass('show')) {\n           *     div.addClass('show');\n           *   } else {\n           *     div.removeClass('show');\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.Element.prototype.hasClass = function(c) {\n            return this.elt.classList.contains(c);\n          };\n\n          /**\n           *\n           * Toggles element class\n           *\n           * @method toggleClass\n           * @param c {String} class name to toggle\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let div;\n           *\n           * function setup() {\n           *   div = createDiv('div');\n           *   div.addClass('show');\n           * }\n           *\n           * function mousePressed() {\n           *   div.toggleClass('show');\n           * }\n           * </code></div>\n           */\n          _main.default.Element.prototype.toggleClass = function(c) {\n            // classList also has a toggle() method, but we cannot use that yet as support is unclear.\n            // See https://github.com/processing/p5.js/issues/3631\n            // this.elt.classList.toggle(c);\n            if (this.elt.classList.contains(c)) {\n              this.elt.classList.remove(c);\n            } else {\n              this.elt.classList.add(c);\n            }\n            return this;\n          };\n\n          /**\n           *\n           * Attaches the element  as a child to the parent specified.\n           * Accepts either a string ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>.\n           * If no argument is specified, an array of children DOM nodes is returned.\n           *\n           * @method child\n           * @returns {Node[]} an array of child nodes\n           * @example\n           * <div class='norender'><code>\n           * let div0 = createDiv('this is the parent');\n           * let div1 = createDiv('this is the child');\n           * div0.child(div1); // use p5.Element\n           * </code></div>\n           * <div class='norender'><code>\n           * let div0 = createDiv('this is the parent');\n           * let div1 = createDiv('this is the child');\n           * div1.id('apples');\n           * div0.child('apples'); // use id\n           * </code></div>\n           * <div class='norender notest'><code>\n           * // this example assumes there is a div already on the page\n           * // with id \"myChildDiv\"\n           * let div0 = createDiv('this is the parent');\n           * let elt = document.getElementById('myChildDiv');\n           * div0.child(elt); // use element from page\n           * </code></div>\n           */\n          /**\n           * @method child\n           * @param  {String|p5.Element} [child] the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n           *                         to add to the current element\n           * @chainable\n           */\n          _main.default.Element.prototype.child = function(childNode) {\n            if (typeof childNode === 'undefined') {\n              return this.elt.childNodes;\n            }\n            if (typeof childNode === 'string') {\n              if (childNode[0] === '#') {\n                childNode = childNode.substring(1);\n              }\n              childNode = document.getElementById(childNode);\n            } else if (childNode instanceof _main.default.Element) {\n              childNode = childNode.elt;\n            }\n\n            if (childNode instanceof HTMLElement) {\n              this.elt.appendChild(childNode);\n            }\n            return this;\n          };\n\n          /**\n           * Centers a p5 Element either vertically, horizontally,\n           * or both, relative to its parent or according to\n           * the body if the Element has no parent. If no argument is passed\n           * the Element is aligned both vertically and horizontally.\n           *\n           * @method center\n           * @param  {String} [align]       passing 'vertical', 'horizontal' aligns element accordingly\n           * @chainable\n           *\n           * @example\n           * <div><code>\n           * function setup() {\n           *   let div = createDiv('').size(10, 10);\n           *   div.style('background-color', 'orange');\n           *   div.center();\n           * }\n           * </code></div>\n           */\n          _main.default.Element.prototype.center = function(align) {\n            var style = this.elt.style.display;\n            var hidden = this.elt.style.display === 'none';\n            var parentHidden = this.parent().style.display === 'none';\n            var pos = { x: this.elt.offsetLeft, y: this.elt.offsetTop };\n\n            if (hidden) this.show();\n            if (parentHidden) this.parent().show();\n            this.elt.style.display = 'block';\n\n            this.position(0, 0);\n            var wOffset = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth);\n            var hOffset = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);\n\n            if (align === 'both' || align === undefined) {\n              this.position(\n                wOffset / 2 + this.parent().offsetLeft,\n                hOffset / 2 + this.parent().offsetTop\n              );\n            } else if (align === 'horizontal') {\n              this.position(wOffset / 2 + this.parent().offsetLeft, pos.y);\n            } else if (align === 'vertical') {\n              this.position(pos.x, hOffset / 2 + this.parent().offsetTop);\n            }\n\n            this.style('display', style);\n            if (hidden) this.hide();\n            if (parentHidden) this.parent().hide();\n\n            return this;\n          };\n\n          /**\n           *\n           * If an argument is given, sets the inner HTML of the element,\n           * replacing any existing html. If true is included as a second\n           * argument, html is appended instead of replacing existing html.\n           * If no arguments are given, returns\n           * the inner HTML of the element.\n           *\n           * @for p5.Element\n           * @method html\n           * @returns {String} the inner HTML of the element\n           * @example\n           * <div class='norender'><code>\n           * let div = createDiv('').size(100, 100);\n           * div.html('hi');\n           * </code></div>\n           * <div class='norender'><code>\n           * let div = createDiv('Hello ').size(100, 100);\n           * div.html('World', true);\n           * </code></div>\n           */\n          /**\n           * @method html\n           * @param  {String} [html] the HTML to be placed inside the element\n           * @param  {boolean} [append] whether to append HTML to existing\n           * @chainable\n           */\n          _main.default.Element.prototype.html = function() {\n            if (arguments.length === 0) {\n              return this.elt.innerHTML;\n            } else if (arguments[1]) {\n              this.elt.insertAdjacentHTML('beforeend', arguments[0]);\n              return this;\n            } else {\n              this.elt.innerHTML = arguments[0];\n              return this;\n            }\n          };\n\n          /**\n           *\n           * Sets the position of the element. If no position type argument is given, the\n           * position will be relative to (0, 0) of the window.\n           * Essentially, this sets position:absolute and left and top\n           * properties of style. If an optional third argument specifying position type is given,\n           * the x and y coordinates will be interpreted based on the <a target=\"_blank\"\n           * href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.\n           * If no arguments given, the function returns the x and y position of the element.\n           *\n           * found documentation on how to be more specific with object type\n           * https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc\n           *\n           * @method position\n           * @returns {Object} object of form { x: 0, y: 0 } containing the position of the element in an object\n           * @example\n           * <div><code class='norender'>\n           * function setup() {\n           *   let cnv = createCanvas(100, 100);\n           *   // positions canvas 50px to the right and 100px\n           *   // below upper left corner of the window\n           *   cnv.position(50, 100);\n           * }\n           * </code></div>\n           * <div><code class='norender'>\n           * function setup() {\n           *   let cnv = createCanvas(100, 100);\n           *   // positions canvas 50px to the right and 100px\n           *   // below upper left corner of the window\n           *   cnv.position(0, 0, 'fixed');\n           * }\n           * </code></div>\n           */\n          /**\n           * @method position\n           * @param  {Number} [x] x-position relative to upper left of window (optional)\n           * @param  {Number} [y] y-position relative to upper left of window (optional)\n           * @param  {String} positionType it can be static, fixed, relative, sticky, initial or inherit (optional)\n           * @chainable\n           */\n          _main.default.Element.prototype.position = function() {\n            if (arguments.length === 0) {\n              return { x: this.elt.offsetLeft, y: this.elt.offsetTop };\n            } else {\n              var positionType = 'absolute';\n              if (\n                arguments[2] === 'static' ||\n                arguments[2] === 'fixed' ||\n                arguments[2] === 'relative' ||\n                arguments[2] === 'sticky' ||\n                arguments[2] === 'initial' ||\n                arguments[2] === 'inherit'\n              ) {\n                positionType = arguments[2];\n              }\n              this.elt.style.position = positionType;\n              this.elt.style.left = arguments[0] + 'px';\n              this.elt.style.top = arguments[1] + 'px';\n              this.x = arguments[0];\n              this.y = arguments[1];\n              return this;\n            }\n          };\n\n          /* Helper method called by p5.Element.style() */\n          _main.default.Element.prototype._translate = function() {\n            this.elt.style.position = 'absolute';\n            // save out initial non-translate transform styling\n            var transform = '';\n            if (this.elt.style.transform) {\n              transform = this.elt.style.transform.replace(/translate3d\\(.*\\)/g, '');\n              transform = transform.replace(/translate[X-Z]?\\(.*\\)/g, '');\n            }\n            if (arguments.length === 2) {\n              this.elt.style.transform =\n                'translate(' + arguments[0] + 'px, ' + arguments[1] + 'px)';\n            } else if (arguments.length > 2) {\n              this.elt.style.transform =\n                'translate3d(' +\n                arguments[0] +\n                'px,' +\n                arguments[1] +\n                'px,' +\n                arguments[2] +\n                'px)';\n              if (arguments.length === 3) {\n                this.elt.parentElement.style.perspective = '1000px';\n              } else {\n                this.elt.parentElement.style.perspective = arguments[3] + 'px';\n              }\n            }\n            // add any extra transform styling back on end\n            this.elt.style.transform += transform;\n            return this;\n          };\n\n          /* Helper method called by p5.Element.style() */\n          _main.default.Element.prototype._rotate = function() {\n            // save out initial non-rotate transform styling\n            var transform = '';\n            if (this.elt.style.transform) {\n              transform = this.elt.style.transform.replace(/rotate3d\\(.*\\)/g, '');\n              transform = transform.replace(/rotate[X-Z]?\\(.*\\)/g, '');\n            }\n\n            if (arguments.length === 1) {\n              this.elt.style.transform = 'rotate(' + arguments[0] + 'deg)';\n            } else if (arguments.length === 2) {\n              this.elt.style.transform =\n                'rotate(' + arguments[0] + 'deg, ' + arguments[1] + 'deg)';\n            } else if (arguments.length === 3) {\n              this.elt.style.transform = 'rotateX(' + arguments[0] + 'deg)';\n              this.elt.style.transform += 'rotateY(' + arguments[1] + 'deg)';\n              this.elt.style.transform += 'rotateZ(' + arguments[2] + 'deg)';\n            }\n            // add remaining transform back on\n            this.elt.style.transform += transform;\n            return this;\n          };\n\n          /**\n           * Sets the given style (css) property (1st arg) of the element with the\n           * given value (2nd arg). If a single argument is given, .style()\n           * returns the value of the given property; however, if the single argument\n           * is given in css syntax ('text-align:center'), .style() sets the css\n           * appropriately.\n           *\n           * @method style\n           * @param  {String} property   property to be set\n           * @returns {String} value of property\n           * @example\n           * <div><code class='norender'>\n           * let myDiv = createDiv('I like pandas.');\n           * myDiv.style('font-size', '18px');\n           * myDiv.style('color', '#ff0000');\n           * </code></div>\n           * <div><code class='norender'>\n           * let col = color(25, 23, 200, 50);\n           * let button = createButton('button');\n           * button.style('background-color', col);\n           * button.position(10, 10);\n           * </code></div>\n           * <div><code class='norender'>\n           * let myDiv;\n           * function setup() {\n           *   background(200);\n           *   myDiv = createDiv('I like gray.');\n           *   myDiv.position(20, 20);\n           * }\n           *\n           * function draw() {\n           *   myDiv.style('font-size', mouseX + 'px');\n           * }\n           * </code></div>\n           */\n          /**\n           * @method style\n           * @param  {String} property\n           * @param  {String|p5.Color} value     value to assign to property\n           * @return {String} current value of property, if no value is given as second argument\n           * @chainable\n           */\n          _main.default.Element.prototype.style = function(prop, val) {\n            var self = this;\n\n            if (val instanceof _main.default.Color) {\n              val =\n                'rgba(' +\n                val.levels[0] +\n                ',' +\n                val.levels[1] +\n                ',' +\n                val.levels[2] +\n                ',' +\n                val.levels[3] / 255 +\n                ')';\n            }\n\n            if (typeof val === 'undefined') {\n              if (prop.indexOf(':') === -1) {\n                // no value set, so assume requesting a value\n                var styles = window.getComputedStyle(self.elt);\n                var style = styles.getPropertyValue(prop);\n                return style;\n              } else {\n                // value set using `:` in a single line string\n                var attrs = prop.split(';');\n                for (var i = 0; i < attrs.length; i++) {\n                  var parts = attrs[i].split(':');\n                  if (parts[0] && parts[1]) {\n                    this.elt.style[parts[0].trim()] = parts[1].trim();\n                  }\n                }\n              }\n            } else {\n              // input provided as key,val pair\n              this.elt.style[prop] = val;\n              if (\n                prop === 'width' ||\n                prop === 'height' ||\n                prop === 'left' ||\n                prop === 'top'\n              ) {\n                var _styles = window.getComputedStyle(self.elt);\n                var styleVal = _styles.getPropertyValue(prop);\n                var numVal = styleVal.replace(/\\D+/g, '');\n                this[prop] = parseInt(numVal, 10);\n              }\n            }\n            return this;\n          };\n\n          /**\n           *\n           * Adds a new attribute or changes the value of an existing attribute\n           * on the specified element. If no value is specified, returns the\n           * value of the given attribute, or null if attribute is not set.\n           *\n           * @method attribute\n           * @return {String} value of attribute\n           *\n           * @example\n           * <div class='norender'><code>\n           * let myDiv = createDiv('I like pandas.');\n           * myDiv.attribute('align', 'center');\n           * </code></div>\n           */\n          /**\n           * @method attribute\n           * @param  {String} attr       attribute to set\n           * @param  {String} value      value to assign to attribute\n           * @chainable\n           */\n          _main.default.Element.prototype.attribute = function(attr, value) {\n            //handling for checkboxes and radios to ensure options get\n            //attributes not divs\n            if (\n              this.elt.firstChild != null &&\n              (this.elt.firstChild.type === 'checkbox' ||\n                this.elt.firstChild.type === 'radio')\n            ) {\n              if (typeof value === 'undefined') {\n                return this.elt.firstChild.getAttribute(attr);\n              } else {\n                for (var i = 0; i < this.elt.childNodes.length; i++) {\n                  this.elt.childNodes[i].setAttribute(attr, value);\n                }\n              }\n            } else if (typeof value === 'undefined') {\n              return this.elt.getAttribute(attr);\n            } else {\n              this.elt.setAttribute(attr, value);\n              return this;\n            }\n          };\n\n          /**\n           *\n           * Removes an attribute on the specified element.\n           *\n           * @method removeAttribute\n           * @param  {String} attr       attribute to remove\n           * @chainable\n           *\n           * @example\n           * <div><code>\n           * let button;\n           * let checkbox;\n           *\n           * function setup() {\n           *   checkbox = createCheckbox('enable', true);\n           *   checkbox.changed(enableButton);\n           *   button = createButton('button');\n           *   button.position(10, 10);\n           * }\n           *\n           * function enableButton() {\n           *   if (this.checked()) {\n           *     // Re-enable the button\n           *     button.removeAttribute('disabled');\n           *   } else {\n           *     // Disable the button\n           *     button.attribute('disabled', '');\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.Element.prototype.removeAttribute = function(attr) {\n            if (\n              this.elt.firstChild != null &&\n              (this.elt.firstChild.type === 'checkbox' ||\n                this.elt.firstChild.type === 'radio')\n            ) {\n              for (var i = 0; i < this.elt.childNodes.length; i++) {\n                this.elt.childNodes[i].removeAttribute(attr);\n              }\n            }\n            this.elt.removeAttribute(attr);\n            return this;\n          };\n\n          /**\n           * Either returns the value of the element if no arguments\n           * given, or sets the value of the element.\n           *\n           * @method value\n           * @return {String|Number} value of the element\n           * @example\n           * <div class='norender'><code>\n           * // gets the value\n           * let inp;\n           * function setup() {\n           *   inp = createInput('');\n           * }\n           *\n           * function mousePressed() {\n           *   print(inp.value());\n           * }\n           * </code></div>\n           * <div class='norender'><code>\n           * // sets the value\n           * let inp;\n           * function setup() {\n           *   inp = createInput('myValue');\n           * }\n           *\n           * function mousePressed() {\n           *   inp.value('myValue');\n           * }\n           * </code></div>\n           */\n          /**\n           * @method value\n           * @param  {String|Number}     value\n           * @chainable\n           */\n          _main.default.Element.prototype.value = function() {\n            if (arguments.length > 0) {\n              this.elt.value = arguments[0];\n              return this;\n            } else {\n              if (this.elt.type === 'range') {\n                return parseFloat(this.elt.value);\n              } else return this.elt.value;\n            }\n          };\n\n          /**\n           *\n           * Shows the current element. Essentially, setting display:block for the style.\n           *\n           * @method show\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let div = createDiv('div');\n           * div.style('display', 'none');\n           * div.show(); // turns display to block\n           * </code></div>\n           */\n          _main.default.Element.prototype.show = function() {\n            this.elt.style.display = 'block';\n            return this;\n          };\n\n          /**\n           * Hides the current element. Essentially, setting display:none for the style.\n           *\n           * @method hide\n           * @chainable\n           * @example\n           * <div class='norender'><code>\n           * let div = createDiv('this is a div');\n           * div.hide();\n           * </code></div>\n           */\n          _main.default.Element.prototype.hide = function() {\n            this.elt.style.display = 'none';\n            return this;\n          };\n\n          /**\n           *\n           * Sets the width and height of the element. AUTO can be used to\n           * only adjust one dimension at a time. If no arguments are given, it\n           * returns the width and height of the element in an object. In case of\n           * elements which need to be loaded, such as images, it is recommended\n           * to call the function after the element has finished loading.\n           *\n           * @method size\n           * @return {Object} the width and height of the element in an object\n           * @example\n           * <div class='norender'><code>\n           * let div = createDiv('this is a div');\n           * div.size(100, 100);\n           * let img = createImg(\n           *   'assets/rockies.jpg',\n           *   'A tall mountain with a small forest and field in front of it on a sunny day',\n           *   '',\n           *   () => {\n           *     img.size(10, AUTO);\n           *   }\n           * );\n           * </code></div>\n           */\n          /**\n           * @method size\n           * @param  {Number|Constant} w    width of the element, either AUTO, or a number\n           * @param  {Number|Constant} [h] height of the element, either AUTO, or a number\n           * @chainable\n           */\n          _main.default.Element.prototype.size = function(w, h) {\n            if (arguments.length === 0) {\n              return { width: this.elt.offsetWidth, height: this.elt.offsetHeight };\n            } else {\n              var aW = w;\n              var aH = h;\n              var AUTO = _main.default.prototype.AUTO;\n              if (aW !== AUTO || aH !== AUTO) {\n                if (aW === AUTO) {\n                  aW = h * this.width / this.height;\n                } else if (aH === AUTO) {\n                  aH = w * this.height / this.width;\n                }\n                // set diff for cnv vs normal div\n                if (this.elt instanceof HTMLCanvasElement) {\n                  var j = {};\n                  var k = this.elt.getContext('2d');\n                  var prop;\n                  for (prop in k) {\n                    j[prop] = k[prop];\n                  }\n                  this.elt.setAttribute('width', aW * this._pInst._pixelDensity);\n                  this.elt.setAttribute('height', aH * this._pInst._pixelDensity);\n                  this.elt.style.width = aW + 'px';\n                  this.elt.style.height = aH + 'px';\n                  this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n                  for (prop in j) {\n                    this.elt.getContext('2d')[prop] = j[prop];\n                  }\n                } else {\n                  this.elt.style.width = aW + 'px';\n                  this.elt.style.height = aH + 'px';\n                  this.elt.width = aW;\n                  this.elt.height = aH;\n                }\n\n                this.width = this.elt.offsetWidth;\n                this.height = this.elt.offsetHeight;\n\n                if (this._pInst && this._pInst._curElement) {\n                  // main canvas associated with p5 instance\n                  if (this._pInst._curElement.elt === this.elt) {\n                    this._pInst._setProperty('width', this.elt.offsetWidth);\n                    this._pInst._setProperty('height', this.elt.offsetHeight);\n                  }\n                }\n              }\n              return this;\n            }\n          };\n\n          /**\n           * Removes the element, stops all media streams, and deregisters all listeners.\n           * @method remove\n           * @example\n           * <div class='norender'><code>\n           * let myDiv = createDiv('this is some text');\n           * myDiv.remove();\n           * </code></div>\n           */\n          _main.default.Element.prototype.remove = function() {\n            // stop all audios/videos and detach all devices like microphone/camera etc\n            // used as input/output for audios/videos.\n            if (this instanceof _main.default.MediaElement) {\n              this.stop();\n              var sources = this.elt.srcObject;\n              if (sources !== null) {\n                var tracks = sources.getTracks();\n                tracks.forEach(function(track) {\n                  track.stop();\n                });\n              }\n            }\n\n            // delete the reference in this._pInst._elements\n            var index = this._pInst._elements.indexOf(this);\n            if (index !== -1) {\n              this._pInst._elements.splice(index, 1);\n            }\n\n            // deregister events\n            for (var ev in this._events) {\n              this.elt.removeEventListener(ev, this._events[ev]);\n            }\n            if (this.elt && this.elt.parentNode) {\n              this.elt.parentNode.removeChild(this.elt);\n            }\n          };\n\n          /**\n           * Registers a callback that gets called every time a file that is\n           * dropped on the element has been loaded.\n           * p5 will load every dropped file into memory and pass it as a p5.File object to the callback.\n           * Multiple files dropped at the same time will result in multiple calls to the callback.\n           *\n           * You can optionally pass a second callback which will be registered to the raw\n           * <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event.\n           * The callback will thus be provided the original\n           * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>.\n           * Dropping multiple files at the same time will trigger the second callback once per drop,\n           * whereas the first callback will trigger for each loaded file.\n           *\n           * @method drop\n           * @param  {Function} callback  callback to receive loaded file, called for each file dropped.\n           * @param  {Function} [fxn]     callback triggered once when files are dropped with the drop event.\n           * @chainable\n           * @example\n           * <div><code>\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('drop file', width / 2, height / 2);\n           *   c.drop(gotFile);\n           * }\n           *\n           * function gotFile(file) {\n           *   background(200);\n           *   text('received file:', width / 2, height / 2);\n           *   text(file.name, width / 2, height / 2 + 50);\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let img;\n           *\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('drop image', width / 2, height / 2);\n           *   c.drop(gotFile);\n           * }\n           *\n           * function draw() {\n           *   if (img) {\n           *     image(img, 0, 0, width, height);\n           *   }\n           * }\n           *\n           * function gotFile(file) {\n           *   img = createImg(file.data, '').hide();\n           * }\n           * </code></div>\n           *\n           * @alt\n           * Canvas turns into whatever image is dragged/dropped onto it.\n           */\n          _main.default.Element.prototype.drop = function(callback, fxn) {\n            // Is the file stuff supported?\n            if (window.File && window.FileReader && window.FileList && window.Blob) {\n              if (!this._dragDisabled) {\n                this._dragDisabled = true;\n\n                var preventDefault = function preventDefault(evt) {\n                  evt.preventDefault();\n                };\n\n                // If you want to be able to drop you've got to turn off\n                // a lot of default behavior.\n                // avoid `attachListener` here, since it overrides other handlers.\n                this.elt.addEventListener('dragover', preventDefault);\n\n                // If this is a drag area we need to turn off the default behavior\n                this.elt.addEventListener('dragleave', preventDefault);\n              }\n\n              // Deal with the files\n              _main.default.Element._attachListener(\n                'drop',\n                function(evt) {\n                  evt.preventDefault();\n                  // Call the second argument as a callback that receives the raw drop event\n                  if (typeof fxn === 'function') {\n                    fxn.call(this, evt);\n                  }\n                  // A FileList\n                  var files = evt.dataTransfer.files;\n\n                  // Load each one and trigger the callback\n                  for (var i = 0; i < files.length; i++) {\n                    var f = files[i];\n                    _main.default.File._load(f, callback);\n                  }\n                },\n                this\n              );\n            } else {\n              console.log('The File APIs are not fully supported in this browser.');\n            }\n\n            return this;\n          };\n\n          // =============================================================================\n          //                         p5.MediaElement additions\n          // =============================================================================\n\n          /**\n           * Extends <a href=\"#/p5.Element\">p5.Element</a> to handle audio and video. In addition to the methods\n           * of <a href=\"#/p5.Element\">p5.Element</a>, it also contains methods for controlling media. It is not\n           * called directly, but <a href=\"#/p5.MediaElement\">p5.MediaElement</a>s are created by calling <a href=\"#/p5/createVideo\">createVideo</a>,\n           * <a href=\"#/p5/createAudio\">createAudio</a>, and <a href=\"#/p5/createCapture\">createCapture</a>.\n           *\n           * @class p5.MediaElement\n           * @constructor\n           * @param {String} elt DOM node that is wrapped\n           */\n          _main.default.MediaElement = function(elt, pInst) {\n            _main.default.Element.call(this, elt, pInst);\n\n            var self = this;\n            this.elt.crossOrigin = 'anonymous';\n\n            this._prevTime = 0;\n            this._cueIDCounter = 0;\n            this._cues = [];\n            this._pixelsState = this;\n            this._pixelDensity = 1;\n            this._modified = false;\n\n            /**\n             * Path to the media element source.\n             *\n             * @property src\n             * @return {String} src\n             * @example\n             * <div><code>\n             * let ele;\n             *\n             * function setup() {\n             *   background(250);\n             *\n             *   //p5.MediaElement objects are usually created\n             *   //by calling the createAudio(), createVideo(),\n             *   //and createCapture() functions.\n             *\n             *   //In this example we create\n             *   //a new p5.MediaElement via createAudio().\n             *   ele = createAudio('assets/beat.mp3');\n             *\n             *   //We'll set up our example so that\n             *   //when you click on the text,\n             *   //an alert box displays the MediaElement's\n             *   //src field.\n             *   textAlign(CENTER);\n             *   text('Click Me!', width / 2, height / 2);\n             * }\n             *\n             * function mouseClicked() {\n             *   //here we test if the mouse is over the\n             *   //canvas element when it's clicked\n             *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n             *     //Show our p5.MediaElement's src field\n             *     alert(ele.src);\n             *   }\n             * }\n             * </code></div>\n             */\n            Object.defineProperty(self, 'src', {\n              get: function get() {\n                var firstChildSrc = self.elt.children[0].src;\n                var srcVal = self.elt.src === window.location.href ? '' : self.elt.src;\n                var ret = firstChildSrc === window.location.href ? srcVal : firstChildSrc;\n                return ret;\n              },\n              set: function set(newValue) {\n                for (var i = 0; i < self.elt.children.length; i++) {\n                  self.elt.removeChild(self.elt.children[i]);\n                }\n                var source = document.createElement('source');\n                source.src = newValue;\n                elt.appendChild(source);\n                self.elt.src = newValue;\n                self.modified = true;\n              }\n            });\n\n            // private _onended callback, set by the method: onended(callback)\n            self._onended = function() {};\n            self.elt.onended = function() {\n              self._onended(self);\n            };\n          };\n          _main.default.MediaElement.prototype = Object.create(\n            _main.default.Element.prototype\n          );\n\n          /**\n           * Play an HTML5 media element.\n           *\n           * @method play\n           * @chainable\n           * @example\n           * <div><code>\n           * let ele;\n           *\n           * function setup() {\n           *   //p5.MediaElement objects are usually created\n           *   //by calling the createAudio(), createVideo(),\n           *   //and createCapture() functions.\n           *\n           *   //In this example we create\n           *   //a new p5.MediaElement via createAudio().\n           *   ele = createAudio('assets/beat.mp3');\n           *\n           *   background(250);\n           *   textAlign(CENTER);\n           *   text('Click to Play!', width / 2, height / 2);\n           * }\n           *\n           * function mouseClicked() {\n           *   //here we test if the mouse is over the\n           *   //canvas element when it's clicked\n           *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n           *     //Here we call the play() function on\n           *     //the p5.MediaElement we created above.\n           *     //This will start the audio sample.\n           *     ele.play();\n           *\n           *     background(200);\n           *     text('You clicked Play!', width / 2, height / 2);\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.play = function() {\n            var _this = this;\n            if (this.elt.currentTime === this.elt.duration) {\n              this.elt.currentTime = 0;\n            }\n            var promise;\n            if (this.elt.readyState > 1) {\n              promise = this.elt.play();\n            } else {\n              // in Chrome, playback cannot resume after being stopped and must reload\n              this.elt.load();\n              promise = this.elt.play();\n            }\n            if (promise && promise.catch) {\n              promise.catch(function(e) {\n                // if it's an autoplay failure error\n                if (e.name === 'NotAllowedError') {\n                  _main.default._friendlyAutoplayError(_this.src);\n                } else {\n                  // any other kind of error\n                  console.error('Media play method encountered an unexpected error', e);\n                }\n              });\n            }\n            return this;\n          };\n\n          /**\n           * Stops an HTML5 media element (sets current time to zero).\n           *\n           * @method stop\n           * @chainable\n           * @example\n           * <div><code>\n           * //This example both starts\n           * //and stops a sound sample\n           * //when the user clicks the canvas\n           *\n           * //We will store the p5.MediaElement\n           * //object in here\n           * let ele;\n           *\n           * //while our audio is playing,\n           * //this will be set to true\n           * let sampleIsPlaying = false;\n           *\n           * function setup() {\n           *   //Here we create a p5.MediaElement object\n           *   //using the createAudio() function.\n           *   ele = createAudio('assets/beat.mp3');\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Click to play!', width / 2, height / 2);\n           * }\n           *\n           * function mouseClicked() {\n           *   //here we test if the mouse is over the\n           *   //canvas element when it's clicked\n           *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n           *     background(200);\n           *\n           *     if (sampleIsPlaying) {\n           *       //if the sample is currently playing\n           *       //calling the stop() function on\n           *       //our p5.MediaElement will stop\n           *       //it and reset its current\n           *       //time to 0 (i.e. it will start\n           *       //at the beginning the next time\n           *       //you play it)\n           *       ele.stop();\n           *\n           *       sampleIsPlaying = false;\n           *       text('Click to play!', width / 2, height / 2);\n           *     } else {\n           *       //loop our sound element until we\n           *       //call ele.stop() on it.\n           *       ele.loop();\n           *\n           *       sampleIsPlaying = true;\n           *       text('Click to stop!', width / 2, height / 2);\n           *     }\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.stop = function() {\n            this.elt.pause();\n            this.elt.currentTime = 0;\n            return this;\n          };\n\n          /**\n           * Pauses an HTML5 media element.\n           *\n           * @method pause\n           * @chainable\n           * @example\n           * <div><code>\n           * //This example both starts\n           * //and pauses a sound sample\n           * //when the user clicks the canvas\n           *\n           * //We will store the p5.MediaElement\n           * //object in here\n           * let ele;\n           *\n           * //while our audio is playing,\n           * //this will be set to true\n           * let sampleIsPlaying = false;\n           *\n           * function setup() {\n           *   //Here we create a p5.MediaElement object\n           *   //using the createAudio() function.\n           *   ele = createAudio('assets/lucky_dragons.mp3');\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Click to play!', width / 2, height / 2);\n           * }\n           *\n           * function mouseClicked() {\n           *   //here we test if the mouse is over the\n           *   //canvas element when it's clicked\n           *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n           *     background(200);\n           *\n           *     if (sampleIsPlaying) {\n           *       //Calling pause() on our\n           *       //p5.MediaElement will stop it\n           *       //playing, but when we call the\n           *       //loop() or play() functions\n           *       //the sample will start from\n           *       //where we paused it.\n           *       ele.pause();\n           *\n           *       sampleIsPlaying = false;\n           *       text('Click to resume!', width / 2, height / 2);\n           *     } else {\n           *       //loop our sound element until we\n           *       //call ele.pause() on it.\n           *       ele.loop();\n           *\n           *       sampleIsPlaying = true;\n           *       text('Click to pause!', width / 2, height / 2);\n           *     }\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.pause = function() {\n            this.elt.pause();\n            return this;\n          };\n\n          /**\n           * Set 'loop' to true for an HTML5 media element, and starts playing.\n           *\n           * @method loop\n           * @chainable\n           * @example\n           * <div><code>\n           * //Clicking the canvas will loop\n           * //the audio sample until the user\n           * //clicks again to stop it\n           *\n           * //We will store the p5.MediaElement\n           * //object in here\n           * let ele;\n           *\n           * //while our audio is playing,\n           * //this will be set to true\n           * let sampleIsLooping = false;\n           *\n           * function setup() {\n           *   //Here we create a p5.MediaElement object\n           *   //using the createAudio() function.\n           *   ele = createAudio('assets/lucky_dragons.mp3');\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Click to loop!', width / 2, height / 2);\n           * }\n           *\n           * function mouseClicked() {\n           *   //here we test if the mouse is over the\n           *   //canvas element when it's clicked\n           *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n           *     background(200);\n           *\n           *     if (!sampleIsLooping) {\n           *       //loop our sound element until we\n           *       //call ele.stop() on it.\n           *       ele.loop();\n           *\n           *       sampleIsLooping = true;\n           *       text('Click to stop!', width / 2, height / 2);\n           *     } else {\n           *       ele.stop();\n           *\n           *       sampleIsLooping = false;\n           *       text('Click to loop!', width / 2, height / 2);\n           *     }\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.loop = function() {\n            this.elt.setAttribute('loop', true);\n            this.play();\n            return this;\n          };\n          /**\n           * Set 'loop' to false for an HTML5 media element. Element will stop\n           * when it reaches the end.\n           *\n           * @method noLoop\n           * @chainable\n           * @example\n           * <div><code>\n           * //This example both starts\n           * //and stops loop of sound sample\n           * //when the user clicks the canvas\n           *\n           * //We will store the p5.MediaElement\n           * //object in here\n           * let ele;\n           * //while our audio is playing,\n           * //this will be set to true\n           * let sampleIsPlaying = false;\n           *\n           * function setup() {\n           *   //Here we create a p5.MediaElement object\n           *   //using the createAudio() function.\n           *   ele = createAudio('assets/beat.mp3');\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Click to play!', width / 2, height / 2);\n           * }\n           *\n           * function mouseClicked() {\n           *   //here we test if the mouse is over the\n           *   //canvas element when it's clicked\n           *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n           *     background(200);\n           *\n           *     if (sampleIsPlaying) {\n           *       ele.noLoop();\n           *       sampleIsPlaying = false;\n           *       text('No more Loops!', width / 2, height / 2);\n           *     } else {\n           *       ele.loop();\n           *       sampleIsPlaying = true;\n           *       text('Click to stop looping!', width / 2, height / 2);\n           *     }\n           *   }\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.noLoop = function() {\n            this.elt.removeAttribute('loop');\n            return this;\n          };\n\n          /**\n           * Sets up logic to check that autoplay succeeded.\n           *\n           * @method setupAutoplayFailDetection\n           * @private\n           */\n          _main.default.MediaElement.prototype._setupAutoplayFailDetection = function() {\n            var _this2 = this;\n            var timeout = setTimeout(function() {\n              return _main.default._friendlyAutoplayError(_this2.src);\n            }, 500);\n            this.elt.addEventListener(\n              'play',\n              function() {\n                return clearTimeout(timeout);\n              },\n              {\n                passive: true,\n                once: true\n              }\n            );\n          };\n\n          /**\n           * Set HTML5 media element to autoplay or not. If no argument is specified, by\n           * default it will autoplay.\n           *\n           * @method autoplay\n           * @param {Boolean} shouldAutoplay whether the element should autoplay\n           * @chainable\n           * @example\n           * <div><code>\n           * let videoElement;\n           * function setup() {\n           *   noCanvas();\n           *   videoElement = createVideo(['assets/small.mp4'], onVideoLoad);\n           * }\n           * function onVideoLoad() {\n           *   // The media will play as soon as it is loaded.\n           *   videoElement.autoplay();\n           *   videoElement.volume(0);\n           *   videoElement.size(100, 100);\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let videoElement;\n           * function setup() {\n           *   noCanvas();\n           *   videoElement = createVideo(['assets/small.mp4'], onVideoLoad);\n           * }\n           * function onVideoLoad() {\n           *   // The media will not play untill some explicitly triggered.\n           *   videoElement.autoplay(false);\n           *   videoElement.volume(0);\n           *   videoElement.size(100, 100);\n           * }\n           *\n           * function mouseClicked() {\n           *   videoElement.play();\n           * }\n           * </code></div>\n           *\n           * @alt\n           * An example of a video element which autoplays after it is loaded.\n           * An example of a video element which waits for a trigger for playing.\n           */\n\n          _main.default.MediaElement.prototype.autoplay = function(val) {\n            var _this3 = this;\n            var oldVal = this.elt.getAttribute('autoplay');\n            this.elt.setAttribute('autoplay', val);\n            // if we turned on autoplay\n            if (val && !oldVal) {\n              // bind method to this scope\n              var setupAutoplayFailDetection = function setupAutoplayFailDetection() {\n                return _this3._setupAutoplayFailDetection();\n              };\n              // if media is ready to play, schedule check now\n              if (this.elt.readyState === 4) {\n                setupAutoplayFailDetection();\n              } else {\n                // otherwise, schedule check whenever it is ready\n                this.elt.addEventListener('canplay', setupAutoplayFailDetection, {\n                  passive: true,\n                  once: true\n                });\n              }\n            }\n\n            return this;\n          };\n\n          /**\n           * Sets volume for this HTML5 media element. If no argument is given,\n           * returns the current volume.\n           *\n           * @method volume\n           * @return {Number} current volume\n           *\n           * @example\n           * <div><code>\n           * let ele;\n           * function setup() {\n           *   // p5.MediaElement objects are usually created\n           *   // by calling the createAudio(), createVideo(),\n           *   // and createCapture() functions.\n           *   // In this example we create\n           *   // a new p5.MediaElement via createAudio().\n           *   ele = createAudio('assets/lucky_dragons.mp3');\n           *   background(250);\n           *   textAlign(CENTER);\n           *   text('Click to Play!', width / 2, height / 2);\n           * }\n           * function mouseClicked() {\n           *   // Here we call the volume() function\n           *   // on the sound element to set its volume\n           *   // Volume must be between 0.0 and 1.0\n           *   ele.volume(0.2);\n           *   ele.play();\n           *   background(200);\n           *   text('You clicked Play!', width / 2, height / 2);\n           * }\n           * </code></div>\n           * <div><code>\n           * let audio;\n           * let counter = 0;\n           *\n           * function loaded() {\n           *   audio.play();\n           * }\n           *\n           * function setup() {\n           *   audio = createAudio('assets/lucky_dragons.mp3', loaded);\n           *   textAlign(CENTER);\n           * }\n           *\n           * function draw() {\n           *   if (counter === 0) {\n           *     background(0, 255, 0);\n           *     text('volume(0.9)', width / 2, height / 2);\n           *   } else if (counter === 1) {\n           *     background(255, 255, 0);\n           *     text('volume(0.5)', width / 2, height / 2);\n           *   } else if (counter === 2) {\n           *     background(255, 0, 0);\n           *     text('volume(0.1)', width / 2, height / 2);\n           *   }\n           * }\n           *\n           * function mousePressed() {\n           *   counter++;\n           *   if (counter === 0) {\n           *     audio.volume(0.9);\n           *   } else if (counter === 1) {\n           *     audio.volume(0.5);\n           *   } else if (counter === 2) {\n           *     audio.volume(0.1);\n           *   } else {\n           *     counter = 0;\n           *     audio.volume(0.9);\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method volume\n           * @param {Number}            val volume between 0.0 and 1.0\n           * @chainable\n           */\n          _main.default.MediaElement.prototype.volume = function(val) {\n            if (typeof val === 'undefined') {\n              return this.elt.volume;\n            } else {\n              this.elt.volume = val;\n            }\n          };\n\n          /**\n           * If no arguments are given, returns the current playback speed of the\n           * element. The speed parameter sets the speed where 2.0 will play the\n           * element twice as fast, 0.5 will play at half the speed, and -1 will play\n           * the element in normal speed in reverse.(Note that not all browsers support\n           * backward playback and even if they do, playback might not be smooth.)\n           *\n           * @method speed\n           * @return {Number} current playback speed of the element\n           *\n           * @example\n           * <div class='norender notest'><code>\n           * //Clicking the canvas will loop\n           * //the audio sample until the user\n           * //clicks again to stop it\n           *\n           * //We will store the p5.MediaElement\n           * //object in here\n           * let ele;\n           * let button;\n           *\n           * function setup() {\n           *   createCanvas(710, 400);\n           *   //Here we create a p5.MediaElement object\n           *   //using the createAudio() function.\n           *   ele = createAudio('assets/beat.mp3');\n           *   ele.loop();\n           *   background(200);\n           *\n           *   button = createButton('2x speed');\n           *   button.position(100, 68);\n           *   button.mousePressed(twice_speed);\n           *\n           *   button = createButton('half speed');\n           *   button.position(200, 68);\n           *   button.mousePressed(half_speed);\n           *\n           *   button = createButton('reverse play');\n           *   button.position(300, 68);\n           *   button.mousePressed(reverse_speed);\n           *\n           *   button = createButton('STOP');\n           *   button.position(400, 68);\n           *   button.mousePressed(stop_song);\n           *\n           *   button = createButton('PLAY!');\n           *   button.position(500, 68);\n           *   button.mousePressed(play_speed);\n           * }\n           *\n           * function twice_speed() {\n           *   ele.speed(2);\n           * }\n           *\n           * function half_speed() {\n           *   ele.speed(0.5);\n           * }\n           *\n           * function reverse_speed() {\n           *   ele.speed(-1);\n           * }\n           *\n           * function stop_song() {\n           *   ele.stop();\n           * }\n           *\n           * function play_speed() {\n           *   ele.play();\n           * }\n           * </code></div>\n           */\n\n          /**\n           * @method speed\n           * @param {Number} speed  speed multiplier for element playback\n           * @chainable\n           */\n          _main.default.MediaElement.prototype.speed = function(val) {\n            if (typeof val === 'undefined') {\n              return this.presetPlaybackRate || this.elt.playbackRate;\n            } else {\n              if (this.loadedmetadata) {\n                this.elt.playbackRate = val;\n              } else {\n                this.presetPlaybackRate = val;\n              }\n            }\n          };\n\n          /**\n           * If no arguments are given, returns the current time of the element.\n           * If an argument is given the current time of the element is set to it.\n           *\n           * @method time\n           * @return {Number} current time (in seconds)\n           *\n           * @example\n           * <div><code>\n           * let ele;\n           * let beginning = true;\n           * function setup() {\n           *   //p5.MediaElement objects are usually created\n           *   //by calling the createAudio(), createVideo(),\n           *   //and createCapture() functions.\n           *\n           *   //In this example we create\n           *   //a new p5.MediaElement via createAudio().\n           *   ele = createAudio('assets/lucky_dragons.mp3');\n           *   background(250);\n           *   textAlign(CENTER);\n           *   text('start at beginning', width / 2, height / 2);\n           * }\n           *\n           * // this function fires with click anywhere\n           * function mousePressed() {\n           *   if (beginning === true) {\n           *     // here we start the sound at the beginning\n           *     // time(0) is not necessary here\n           *     // as this produces the same result as\n           *     // play()\n           *     ele.play().time(0);\n           *     background(200);\n           *     text('jump 2 sec in', width / 2, height / 2);\n           *     beginning = false;\n           *   } else {\n           *     // here we jump 2 seconds into the sound\n           *     ele.play().time(2);\n           *     background(250);\n           *     text('start at beginning', width / 2, height / 2);\n           *     beginning = true;\n           *   }\n           * }\n           * </code></div>\n           */\n          /**\n           * @method time\n           * @param {Number} time time to jump to (in seconds)\n           * @chainable\n           */\n          _main.default.MediaElement.prototype.time = function(val) {\n            if (typeof val === 'undefined') {\n              return this.elt.currentTime;\n            } else {\n              this.elt.currentTime = val;\n              return this;\n            }\n          };\n\n          /**\n           * Returns the duration of the HTML5 media element.\n           *\n           * @method duration\n           * @return {Number} duration\n           *\n           * @example\n           * <div><code>\n           * let ele;\n           * function setup() {\n           *   //p5.MediaElement objects are usually created\n           *   //by calling the createAudio(), createVideo(),\n           *   //and createCapture() functions.\n           *   //In this example we create\n           *   //a new p5.MediaElement via createAudio().\n           *   ele = createAudio('assets/doorbell.mp3');\n           *   background(250);\n           *   textAlign(CENTER);\n           *   text('Click to know the duration!', 10, 25, 70, 80);\n           * }\n           * function mouseClicked() {\n           *   ele.play();\n           *   background(200);\n           *   //ele.duration dislpays the duration\n           *   text(ele.duration() + ' seconds', width / 2, height / 2);\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.duration = function() {\n            return this.elt.duration;\n          };\n          _main.default.MediaElement.prototype.pixels = [];\n          _main.default.MediaElement.prototype._ensureCanvas = function() {\n            if (!this.canvas) {\n              this.canvas = document.createElement('canvas');\n              this.drawingContext = this.canvas.getContext('2d');\n              this.setModified(true);\n            }\n            if (this.loadedmetadata) {\n              // wait for metadata for w/h\n              if (this.canvas.width !== this.elt.width) {\n                this.canvas.width = this.elt.width;\n                this.canvas.height = this.elt.height;\n                this.width = this.canvas.width;\n                this.height = this.canvas.height;\n              }\n\n              this.drawingContext.drawImage(\n                this.elt,\n                0,\n                0,\n                this.canvas.width,\n                this.canvas.height\n              );\n\n              this.setModified(true);\n            }\n          };\n          _main.default.MediaElement.prototype.loadPixels = function() {\n            this._ensureCanvas();\n            return _main.default.Renderer2D.prototype.loadPixels.apply(this, arguments);\n          };\n          _main.default.MediaElement.prototype.updatePixels = function(x, y, w, h) {\n            if (this.loadedmetadata) {\n              // wait for metadata\n              this._ensureCanvas();\n              _main.default.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);\n            }\n            this.setModified(true);\n            return this;\n          };\n          _main.default.MediaElement.prototype.get = function() {\n            this._ensureCanvas();\n            return _main.default.Renderer2D.prototype.get.apply(this, arguments);\n          };\n          _main.default.MediaElement.prototype._getPixel = function() {\n            this.loadPixels();\n            return _main.default.Renderer2D.prototype._getPixel.apply(this, arguments);\n          };\n\n          _main.default.MediaElement.prototype.set = function(x, y, imgOrCol) {\n            if (this.loadedmetadata) {\n              // wait for metadata\n              this._ensureCanvas();\n              _main.default.Renderer2D.prototype.set.call(this, x, y, imgOrCol);\n              this.setModified(true);\n            }\n          };\n          _main.default.MediaElement.prototype.copy = function() {\n            this._ensureCanvas();\n            _main.default.prototype.copy.apply(this, arguments);\n          };\n          _main.default.MediaElement.prototype.mask = function() {\n            this.loadPixels();\n            this.setModified(true);\n            _main.default.Image.prototype.mask.apply(this, arguments);\n          };\n          /**\n           * helper method for web GL mode to figure out if the element\n           * has been modified and might need to be re-uploaded to texture\n           * memory between frames.\n           * @method isModified\n           * @private\n           * @return {boolean} a boolean indicating whether or not the\n           * image has been updated or modified since last texture upload.\n           */\n          _main.default.MediaElement.prototype.isModified = function() {\n            return this._modified;\n          };\n          /**\n           * helper method for web GL mode to indicate that an element has been\n           * changed or unchanged since last upload. gl texture upload will\n           * set this value to false after uploading the texture; or might set\n           * it to true if metadata has become available but there is no actual\n           * texture data available yet..\n           * @method setModified\n           * @param {boolean} val sets whether or not the element has been\n           * modified.\n           * @private\n           */\n          _main.default.MediaElement.prototype.setModified = function(value) {\n            this._modified = value;\n          };\n          /**\n           * Schedule an event to be called when the audio or video\n           * element reaches the end. If the element is looping,\n           * this will not be called. The element is passed in\n           * as the argument to the onended callback.\n           *\n           * @method  onended\n           * @param  {Function} callback function to call when the\n           *                             soundfile has ended. The\n           *                             media element will be passed\n           *                             in as the argument to the\n           *                             callback.\n           * @chainable\n           * @example\n           * <div><code>\n           * function setup() {\n           *   let audioEl = createAudio('assets/beat.mp3');\n           *   audioEl.showControls();\n           *   audioEl.onended(sayDone);\n           * }\n           *\n           * function sayDone(elt) {\n           *   alert('done playing ' + elt.src);\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.onended = function(callback) {\n            this._onended = callback;\n            return this;\n          };\n\n          /*** CONNECT TO WEB AUDIO API / p5.sound.js ***/\n\n          /**\n           * Send the audio output of this element to a specified audioNode or\n           * p5.sound object. If no element is provided, connects to p5's main\n           * output. That connection is established when this method is first called.\n           * All connections are removed by the .disconnect() method.\n           *\n           * This method is meant to be used with the p5.sound.js addon library.\n           *\n           * @method  connect\n           * @param  {AudioNode|Object} audioNode AudioNode from the Web Audio API,\n           * or an object from the p5.sound library\n           */\n          _main.default.MediaElement.prototype.connect = function(obj) {\n            var audioContext, mainOutput;\n\n            // if p5.sound exists, same audio context\n            if (typeof _main.default.prototype.getAudioContext === 'function') {\n              audioContext = _main.default.prototype.getAudioContext();\n              mainOutput = _main.default.soundOut.input;\n            } else {\n              try {\n                audioContext = obj.context;\n                mainOutput = audioContext.destination;\n              } catch (e) {\n                throw 'connect() is meant to be used with Web Audio API or p5.sound.js';\n              }\n            }\n\n            // create a Web Audio MediaElementAudioSourceNode if none already exists\n            if (!this.audioSourceNode) {\n              this.audioSourceNode = audioContext.createMediaElementSource(this.elt);\n\n              // connect to main output when this method is first called\n              this.audioSourceNode.connect(mainOutput);\n            }\n\n            // connect to object if provided\n            if (obj) {\n              if (obj.input) {\n                this.audioSourceNode.connect(obj.input);\n              } else {\n                this.audioSourceNode.connect(obj);\n              }\n            } else {\n              // otherwise connect to main output of p5.sound / AudioContext\n              this.audioSourceNode.connect(mainOutput);\n            }\n          };\n\n          /**\n           * Disconnect all Web Audio routing, including to main output.\n           * This is useful if you want to re-route the output through\n           * audio effects, for example.\n           *\n           * @method  disconnect\n           */\n          _main.default.MediaElement.prototype.disconnect = function() {\n            if (this.audioSourceNode) {\n              this.audioSourceNode.disconnect();\n            } else {\n              throw 'nothing to disconnect';\n            }\n          };\n\n          /*** SHOW / HIDE CONTROLS ***/\n\n          /**\n           * Show the default MediaElement controls, as determined by the web browser.\n           *\n           * @method  showControls\n           * @example\n           * <div><code>\n           * let ele;\n           * function setup() {\n           *   //p5.MediaElement objects are usually created\n           *   //by calling the createAudio(), createVideo(),\n           *   //and createCapture() functions.\n           *   //In this example we create\n           *   //a new p5.MediaElement via createAudio()\n           *   ele = createAudio('assets/lucky_dragons.mp3');\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Click to Show Controls!', 10, 25, 70, 80);\n           * }\n           * function mousePressed() {\n           *   ele.showControls();\n           *   background(200);\n           *   text('Controls Shown', width / 2, height / 2);\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.showControls = function() {\n            // must set style for the element to show on the page\n            this.elt.style['text-align'] = 'inherit';\n            this.elt.controls = true;\n          };\n\n          /**\n           * Hide the default mediaElement controls.\n           * @method hideControls\n           * @example\n           * <div><code>\n           * let ele;\n           * function setup() {\n           *   //p5.MediaElement objects are usually created\n           *   //by calling the createAudio(), createVideo(),\n           *   //and createCapture() functions.\n           *   //In this example we create\n           *   //a new p5.MediaElement via createAudio()\n           *   ele = createAudio('assets/lucky_dragons.mp3');\n           *   ele.showControls();\n           *   background(200);\n           *   textAlign(CENTER);\n           *   text('Click to hide Controls!', 10, 25, 70, 80);\n           * }\n           * function mousePressed() {\n           *   ele.hideControls();\n           *   background(200);\n           *   text('Controls hidden', width / 2, height / 2);\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.hideControls = function() {\n            this.elt.controls = false;\n          };\n\n          /*** SCHEDULE EVENTS ***/\n\n          // Cue inspired by JavaScript setTimeout, and the\n          // Tone.js Transport Timeline Event, MIT License Yotam Mann 2015 tonejs.org\n          var Cue = function Cue(callback, time, id, val) {\n            this.callback = callback;\n            this.time = time;\n            this.id = id;\n            this.val = val;\n          };\n\n          /**\n           * Schedule events to trigger every time a MediaElement\n           * (audio/video) reaches a playback cue point.\n           *\n           * Accepts a callback function, a time (in seconds) at which to trigger\n           * the callback, and an optional parameter for the callback.\n           *\n           * Time will be passed as the first parameter to the callback function,\n           * and param will be the second parameter.\n           *\n           * @method  addCue\n           * @param {Number}   time     Time in seconds, relative to this media\n           *                             element's playback. For example, to trigger\n           *                             an event every time playback reaches two\n           *                             seconds, pass in the number 2. This will be\n           *                             passed as the first parameter to\n           *                             the callback function.\n           * @param {Function} callback Name of a function that will be\n           *                             called at the given time. The callback will\n           *                             receive time and (optionally) param as its\n           *                             two parameters.\n           * @param {Object} [value]    An object to be passed as the\n           *                             second parameter to the\n           *                             callback function.\n           * @return {Number} id ID of this cue,\n           *                     useful for removeCue(id)\n           * @example\n           * <div><code>\n           * //\n           * //\n           * function setup() {\n           *   createCanvas(200, 200);\n           *\n           *   let audioEl = createAudio('assets/beat.mp3');\n           *   audioEl.showControls();\n           *\n           *   // schedule three calls to changeBackground\n           *   audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n           *   audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n           *   audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n           *   audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n           *   audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n           *   audioEl.addCue(5.0, changeBackground, color(255, 255, 0));\n           * }\n           *\n           * function changeBackground(val) {\n           *   background(val);\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.addCue = function(time, callback, val) {\n            var id = this._cueIDCounter++;\n\n            var cue = new Cue(callback, time, id, val);\n            this._cues.push(cue);\n\n            if (!this.elt.ontimeupdate) {\n              this.elt.ontimeupdate = this._onTimeUpdate.bind(this);\n            }\n\n            return id;\n          };\n\n          /**\n           * Remove a callback based on its ID. The ID is returned by the\n           * addCue method.\n           * @method removeCue\n           * @param  {Number} id ID of the cue, as returned by addCue\n           * @example\n           * <div><code>\n           * let audioEl, id1, id2;\n           * function setup() {\n           *   background(255, 255, 255);\n           *   audioEl = createAudio('assets/beat.mp3');\n           *   audioEl.showControls();\n           *   // schedule five calls to changeBackground\n           *   id1 = audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n           *   audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n           *   audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n           *   audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n           *   id2 = audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n           *   text('Click to remove first and last Cue!', 10, 25, 70, 80);\n           * }\n           * function mousePressed() {\n           *   audioEl.removeCue(id1);\n           *   audioEl.removeCue(id2);\n           * }\n           * function changeBackground(val) {\n           *   background(val);\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.removeCue = function(id) {\n            for (var i = 0; i < this._cues.length; i++) {\n              if (this._cues[i].id === id) {\n                console.log(id);\n                this._cues.splice(i, 1);\n              }\n            }\n\n            if (this._cues.length === 0) {\n              this.elt.ontimeupdate = null;\n            }\n          };\n\n          /**\n           * Remove all of the callbacks that had originally been scheduled\n           * via the addCue method.\n           * @method  clearCues\n           * @param  {Number} id ID of the cue, as returned by addCue\n           * @example\n           * <div><code>\n           * let audioEl;\n           * function setup() {\n           *   background(255, 255, 255);\n           *   audioEl = createAudio('assets/beat.mp3');\n           *   //Show the default MediaElement controls, as determined by the web browser\n           *   audioEl.showControls();\n           *   // schedule calls to changeBackground\n           *   background(200);\n           *   text('Click to change Cue!', 10, 25, 70, 80);\n           *   audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n           *   audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n           *   audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n           *   audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n           *   audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n           * }\n           * function mousePressed() {\n           *   // here we clear the scheduled callbacks\n           *   audioEl.clearCues();\n           *   // then we add some more callbacks\n           *   audioEl.addCue(1, changeBackground, color(2, 2, 2));\n           *   audioEl.addCue(3, changeBackground, color(255, 255, 0));\n           * }\n           * function changeBackground(val) {\n           *   background(val);\n           * }\n           * </code></div>\n           */\n          _main.default.MediaElement.prototype.clearCues = function() {\n            this._cues = [];\n            this.elt.ontimeupdate = null;\n          };\n\n          // private method that checks for cues to be fired if events\n          // have been scheduled using addCue(callback, time).\n          _main.default.MediaElement.prototype._onTimeUpdate = function() {\n            var playbackTime = this.time();\n\n            for (var i = 0; i < this._cues.length; i++) {\n              var callbackTime = this._cues[i].time;\n              var val = this._cues[i].val;\n\n              if (this._prevTime < callbackTime && callbackTime <= playbackTime) {\n                // pass the scheduled callbackTime as parameter to the callback\n                this._cues[i].callback(val);\n              }\n            }\n\n            this._prevTime = playbackTime;\n          };\n\n          /**\n           * Base class for a file.\n           * Used for Element.drop and createFileInput.\n           *\n           * @class p5.File\n           * @constructor\n           * @param {File} file File that is wrapped\n           */\n          _main.default.File = function(file, pInst) {\n            /**\n             * Underlying File object. All normal File methods can be called on this.\n             *\n             * @property file\n             */\n            this.file = file;\n\n            this._pInst = pInst;\n\n            // Splitting out the file type into two components\n            // This makes determining if image or text etc simpler\n            var typeList = file.type.split('/');\n            /**\n             * File type (image, text, etc.)\n             *\n             * @property type\n             */\n            this.type = typeList[0];\n            /**\n             * File subtype (usually the file extension jpg, png, xml, etc.)\n             *\n             * @property subtype\n             */\n            this.subtype = typeList[1];\n            /**\n             * File name\n             *\n             * @property name\n             */\n            this.name = file.name;\n            /**\n             * File size\n             *\n             * @property size\n             */\n            this.size = file.size;\n\n            /**\n             * URL string containing either image data, the text contents of the file or\n             * a parsed object if file is JSON and p5.XML if XML\n             *\n             * @property data\n             */\n            this.data = undefined;\n          };\n\n          _main.default.File._createLoader = function(theFile, callback) {\n            var reader = new FileReader();\n            reader.onload = function(e) {\n              var p5file = new _main.default.File(theFile);\n              if (p5file.file.type === 'application/json') {\n                // Parse JSON and store the result in data\n                p5file.data = JSON.parse(e.target.result);\n              } else if (p5file.file.type === 'text/xml') {\n                // Parse XML, wrap it in p5.XML and store the result in data\n                var parser = new DOMParser();\n                var xml = parser.parseFromString(e.target.result, 'text/xml');\n                p5file.data = new _main.default.XML(xml.documentElement);\n              } else {\n                p5file.data = e.target.result;\n              }\n              callback(p5file);\n            };\n            return reader;\n          };\n\n          _main.default.File._load = function(f, callback) {\n            // Text or data?\n            // This should likely be improved\n            if (/^text\\//.test(f.type) || f.type === 'application/json') {\n              _main.default.File._createLoader(f, callback).readAsText(f);\n            } else if (!/^(video|audio)\\//.test(f.type)) {\n              _main.default.File._createLoader(f, callback).readAsDataURL(f);\n            } else {\n              var file = new _main.default.File(f);\n              file.data = URL.createObjectURL(f);\n              callback(file);\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      76: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Events\n           * @submodule Acceleration\n           * @for p5\n           * @requires core\n           */ /**\n           * The system variable deviceOrientation always contains the orientation of\n           * the device. The value of this variable will either be set 'landscape'\n           * or 'portrait'. If no data is available it will be set to 'undefined'.\n           * either LANDSCAPE or PORTRAIT.\n           *\n           * @property {Constant} deviceOrientation\n           * @readOnly\n           */ _main.default.prototype.deviceOrientation =\n            window.innerWidth / window.innerHeight > 1.0 ? 'landscape' : 'portrait';\n          /**\n           * The system variable accelerationX always contains the acceleration of the\n           * device along the x axis. Value is represented as meters per second squared.\n           *\n           * @property {Number} accelerationX\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * // Move a touchscreen device to register\n           * // acceleration changes.\n           * function draw() {\n           *   background(220, 50);\n           *   fill('magenta');\n           *   ellipse(width / 2, height / 2, accelerationX);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * Magnitude of device acceleration is displayed as ellipse size\n           */\n          _main.default.prototype.accelerationX = 0;\n\n          /**\n           * The system variable accelerationY always contains the acceleration of the\n           * device along the y axis. Value is represented as meters per second squared.\n           *\n           * @property {Number} accelerationY\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * // Move a touchscreen device to register\n           * // acceleration changes.\n           * function draw() {\n           *   background(220, 50);\n           *   fill('magenta');\n           *   ellipse(width / 2, height / 2, accelerationY);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * Magnitude of device acceleration is displayed as ellipse size\n           */\n          _main.default.prototype.accelerationY = 0;\n\n          /**\n           * The system variable accelerationZ always contains the acceleration of the\n           * device along the z axis. Value is represented as meters per second squared.\n           *\n           * @property {Number} accelerationZ\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Move a touchscreen device to register\n           * // acceleration changes.\n           * function draw() {\n           *   background(220, 50);\n           *   fill('magenta');\n           *   ellipse(width / 2, height / 2, accelerationZ);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Magnitude of device acceleration is displayed as ellipse size\n           */\n          _main.default.prototype.accelerationZ = 0;\n\n          /**\n           * The system variable pAccelerationX always contains the acceleration of the\n           * device along the x axis in the frame previous to the current frame. Value\n           * is represented as meters per second squared.\n           *\n           * @property {Number} pAccelerationX\n           * @readOnly\n           */\n          _main.default.prototype.pAccelerationX = 0;\n\n          /**\n           * The system variable pAccelerationY always contains the acceleration of the\n           * device along the y axis in the frame previous to the current frame. Value\n           * is represented as meters per second squared.\n           *\n           * @property {Number} pAccelerationY\n           * @readOnly\n           */\n          _main.default.prototype.pAccelerationY = 0;\n\n          /**\n           * The system variable pAccelerationZ always contains the acceleration of the\n           * device along the z axis in the frame previous to the current frame. Value\n           * is represented as meters per second squared.\n           *\n           * @property {Number} pAccelerationZ\n           * @readOnly\n           */\n          _main.default.prototype.pAccelerationZ = 0;\n\n          /**\n           * _updatePAccelerations updates the pAcceleration values\n           *\n           * @private\n           */\n          _main.default.prototype._updatePAccelerations = function() {\n            this._setProperty('pAccelerationX', this.accelerationX);\n            this._setProperty('pAccelerationY', this.accelerationY);\n            this._setProperty('pAccelerationZ', this.accelerationZ);\n          };\n\n          /**\n           * The system variable rotationX always contains the rotation of the\n           * device along the x axis. If the sketch <a href=\"#/p5/angleMode\">\n           * angleMode()</a> is set to DEGREES, the value will be -180 to 180. If\n           * it is set to RADIANS, the value will be -PI to PI.\n           *\n           * Note: The order the rotations are called is important, ie. if used\n           * together, it must be called in the order Z-X-Y or there might be\n           * unexpected behaviour.\n           *\n           * @property {Number} rotationX\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   //rotateZ(radians(rotationZ));\n           *   rotateX(radians(rotationX));\n           *   //rotateY(radians(rotationY));\n           *   box(200, 200, 200);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * red horizontal line right, green vertical line bottom. black background.\n           */\n          _main.default.prototype.rotationX = 0;\n\n          /**\n           * The system variable rotationY always contains the rotation of the\n           * device along the y axis. If the sketch <a href=\"#/p5/angleMode\">\n           * angleMode()</a> is set to DEGREES, the value will be -90 to 90. If\n           * it is set to RADIANS, the value will be -PI/2 to PI/2.\n           *\n           * Note: The order the rotations are called is important, ie. if used\n           * together, it must be called in the order Z-X-Y or there might be\n           * unexpected behaviour.\n           *\n           * @property {Number} rotationY\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   //rotateZ(radians(rotationZ));\n           *   //rotateX(radians(rotationX));\n           *   rotateY(radians(rotationY));\n           *   box(200, 200, 200);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * red horizontal line right, green vertical line bottom. black background.\n           */\n          _main.default.prototype.rotationY = 0;\n\n          /**\n           * The system variable rotationZ always contains the rotation of the\n           * device along the z axis. If the sketch <a href=\"#/p5/angleMode\">\n           * angleMode()</a> is set to DEGREES, the value will be 0 to 360. If\n           * it is set to RADIANS, the value will be 0 to 2*PI.\n           *\n           * Unlike rotationX and rotationY, this variable is available for devices\n           * with a built-in compass only.\n           *\n           * Note: The order the rotations are called is important, ie. if used\n           * together, it must be called in the order Z-X-Y or there might be\n           * unexpected behaviour.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateZ(radians(rotationZ));\n           *   //rotateX(radians(rotationX));\n           *   //rotateY(radians(rotationY));\n           *   box(200, 200, 200);\n           * }\n           * </code>\n           * </div>\n           *\n           * @property {Number} rotationZ\n           * @readOnly\n           *\n           * @alt\n           * red horizontal line right, green vertical line bottom. black background.\n           */\n          _main.default.prototype.rotationZ = 0;\n\n          /**\n           * The system variable pRotationX always contains the rotation of the\n           * device along the x axis in the frame previous to the current frame.\n           * If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES,\n           * the value will be -180 to 180. If it is set to RADIANS, the value will\n           * be -PI to PI.\n           *\n           * pRotationX can also be used with rotationX to determine the rotate\n           * direction of the device along the X-axis.\n           * @example\n           * <div class='norender'>\n           * <code>\n           * // A simple if statement looking at whether\n           * // rotationX - pRotationX < 0 is true or not will be\n           * // sufficient for determining the rotate direction\n           * // in most cases.\n           *\n           * // Some extra logic is needed to account for cases where\n           * // the angles wrap around.\n           * let rotateDirection = 'clockwise';\n           *\n           * // Simple range conversion to make things simpler.\n           * // This is not absolutely necessary but the logic\n           * // will be different in that case.\n           *\n           * let rX = rotationX + 180;\n           * let pRX = pRotationX + 180;\n           *\n           * if ((rX - pRX > 0 && rX - pRX < 270) || rX - pRX < -270) {\n           *   rotateDirection = 'clockwise';\n           * } else if (rX - pRX < 0 || rX - pRX > 270) {\n           *   rotateDirection = 'counter-clockwise';\n           * }\n           *\n           * print(rotateDirection);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image to display.\n           *\n           * @property {Number} pRotationX\n           * @readOnly\n           */\n          _main.default.prototype.pRotationX = 0;\n\n          /**\n           * The system variable pRotationY always contains the rotation of the\n           * device along the y axis in the frame previous to the current frame.\n           * If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES,\n           * the value will be -90 to 90. If it is set to RADIANS, the value will\n           * be -PI/2 to PI/2.\n           *\n           * pRotationY can also be used with rotationY to determine the rotate\n           * direction of the device along the Y-axis.\n           * @example\n           * <div class='norender'>\n           * <code>\n           * // A simple if statement looking at whether\n           * // rotationY - pRotationY < 0 is true or not will be\n           * // sufficient for determining the rotate direction\n           * // in most cases.\n           *\n           * // Some extra logic is needed to account for cases where\n           * // the angles wrap around.\n           * let rotateDirection = 'clockwise';\n           *\n           * // Simple range conversion to make things simpler.\n           * // This is not absolutely necessary but the logic\n           * // will be different in that case.\n           *\n           * let rY = rotationY + 180;\n           * let pRY = pRotationY + 180;\n           *\n           * if ((rY - pRY > 0 && rY - pRY < 270) || rY - pRY < -270) {\n           *   rotateDirection = 'clockwise';\n           * } else if (rY - pRY < 0 || rY - pRY > 270) {\n           *   rotateDirection = 'counter-clockwise';\n           * }\n           * print(rotateDirection);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image to display.\n           *\n           * @property {Number} pRotationY\n           * @readOnly\n           */\n          _main.default.prototype.pRotationY = 0;\n\n          /**\n           * The system variable pRotationZ always contains the rotation of the\n           * device along the z axis in the frame previous to the current frame.\n           * If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES,\n           * the value will be 0 to 360. If it is set to RADIANS, the value will\n           * be 0 to 2*PI.\n           *\n           * pRotationZ can also be used with rotationZ to determine the rotate\n           * direction of the device along the Z-axis.\n           * @example\n           * <div class='norender'>\n           * <code>\n           * // A simple if statement looking at whether\n           * // rotationZ - pRotationZ < 0 is true or not will be\n           * // sufficient for determining the rotate direction\n           * // in most cases.\n           *\n           * // Some extra logic is needed to account for cases where\n           * // the angles wrap around.\n           * let rotateDirection = 'clockwise';\n           *\n           * if (\n           *   (rotationZ - pRotationZ > 0 && rotationZ - pRotationZ < 270) ||\n           *   rotationZ - pRotationZ < -270\n           * ) {\n           *   rotateDirection = 'clockwise';\n           * } else if (rotationZ - pRotationZ < 0 || rotationZ - pRotationZ > 270) {\n           *   rotateDirection = 'counter-clockwise';\n           * }\n           * print(rotateDirection);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image to display.\n           *\n           * @property {Number} pRotationZ\n           * @readOnly\n           */\n          _main.default.prototype.pRotationZ = 0;\n\n          var startAngleX = 0;\n          var startAngleY = 0;\n          var startAngleZ = 0;\n\n          var rotateDirectionX = 'clockwise';\n          var rotateDirectionY = 'clockwise';\n          var rotateDirectionZ = 'clockwise';\n\n          _main.default.prototype.pRotateDirectionX = undefined;\n          _main.default.prototype.pRotateDirectionY = undefined;\n          _main.default.prototype.pRotateDirectionZ = undefined;\n\n          _main.default.prototype._updatePRotations = function() {\n            this._setProperty('pRotationX', this.rotationX);\n            this._setProperty('pRotationY', this.rotationY);\n            this._setProperty('pRotationZ', this.rotationZ);\n          };\n\n          /**\n           * When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a>\n           * method is stored in the turnAxis variable. The turnAxis variable is only defined within\n           * the scope of deviceTurned().\n           * @property {String} turnAxis\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * // Run this example on a mobile device\n           * // Rotate the device by 90 degrees in the\n           * // X-axis to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceTurned() {\n           *   if (turnAxis === 'X') {\n           *     if (value === 0) {\n           *       value = 255;\n           *     } else if (value === 255) {\n           *       value = 0;\n           *     }\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device turns\n           * 50x50 black rect in center of canvas. turns white on mobile when x-axis turns\n           */\n          _main.default.prototype.turnAxis = undefined;\n\n          var move_threshold = 0.5;\n          var shake_threshold = 30;\n\n          /**\n           * The <a href=\"#/p5/setMoveThreshold\">setMoveThreshold()</a> function is used to set the movement threshold for\n           * the <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function. The default threshold is set to 0.5.\n           *\n           * @method setMoveThreshold\n           * @param {number} value The threshold value\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // You will need to move the device incrementally further\n           * // the closer the square's color gets to white in order to change the value.\n           *\n           * let value = 0;\n           * let threshold = 0.5;\n           * function setup() {\n           *   setMoveThreshold(threshold);\n           * }\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceMoved() {\n           *   value = value + 5;\n           *   threshold = threshold + 0.1;\n           *   if (value > 255) {\n           *     value = 0;\n           *     threshold = 30;\n           *   }\n           *   setMoveThreshold(threshold);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device moves\n           */\n\n          _main.default.prototype.setMoveThreshold = function(val) {\n            _main.default._validateParameters('setMoveThreshold', arguments);\n            move_threshold = val;\n          };\n\n          /**\n           * The <a href=\"#/p5/setShakeThreshold\">setShakeThreshold()</a> function is used to set the movement threshold for\n           * the <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function. The default threshold is set to 30.\n           *\n           * @method setShakeThreshold\n           * @param {number} value The threshold value\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // You will need to shake the device more firmly\n           * // the closer the box's fill gets to white in order to change the value.\n           *\n           * let value = 0;\n           * let threshold = 30;\n           * function setup() {\n           *   setShakeThreshold(threshold);\n           * }\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceMoved() {\n           *   value = value + 5;\n           *   threshold = threshold + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *     threshold = 30;\n           *   }\n           *   setShakeThreshold(threshold);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device\n           * is being shaked\n           */\n\n          _main.default.prototype.setShakeThreshold = function(val) {\n            _main.default._validateParameters('setShakeThreshold', arguments);\n            shake_threshold = val;\n          };\n\n          /**\n           * The <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function is called when the device is moved by more than\n           * the threshold value along X, Y or Z axis. The default threshold is set to 0.5.\n           * The threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setMoveThreshold\">setMoveThreshold()</a>.\n           *\n           * @method deviceMoved\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // Move the device around\n           * // to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceMoved() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device moves\n           */\n\n          /**\n           * The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> function is called when the device rotates by\n           * more than 90 degrees continuously.\n           *\n           * The axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis\n           * variable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis:\n           * X, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'.\n           *\n           * @method deviceTurned\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // Rotate the device by 90 degrees\n           * // to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceTurned() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else if (value === 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * // Run this example on a mobile device\n           * // Rotate the device by 90 degrees in the\n           * // X-axis to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceTurned() {\n           *   if (turnAxis === 'X') {\n           *     if (value === 0) {\n           *       value = 255;\n           *     } else if (value === 255) {\n           *       value = 0;\n           *     }\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device turns\n           * 50x50 black rect in center of canvas. turns white on mobile when x-axis turns\n           */\n\n          /**\n           * The <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function is called when the device total acceleration\n           * changes of accelerationX and accelerationY values is more than\n           * the threshold value. The default threshold is set to 30.\n           * The threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setShakeThreshold\">setShakeThreshold()</a>.\n           *\n           * @method deviceShaken\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Run this example on a mobile device\n           * // Shake the device to change the value.\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function deviceShaken() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect in center of canvas. turns white on mobile when device shakes\n           */\n\n          _main.default.prototype._ondeviceorientation = function(e) {\n            this._updatePRotations();\n            if (this._angleMode === constants.radians) {\n              e.beta = e.beta * (_PI / 180.0);\n              e.gamma = e.gamma * (_PI / 180.0);\n              e.alpha = e.alpha * (_PI / 180.0);\n            }\n            this._setProperty('rotationX', e.beta);\n            this._setProperty('rotationY', e.gamma);\n            this._setProperty('rotationZ', e.alpha);\n            this._handleMotion();\n          };\n          _main.default.prototype._ondevicemotion = function(e) {\n            this._updatePAccelerations();\n            this._setProperty('accelerationX', e.acceleration.x * 2);\n            this._setProperty('accelerationY', e.acceleration.y * 2);\n            this._setProperty('accelerationZ', e.acceleration.z * 2);\n            this._handleMotion();\n          };\n          _main.default.prototype._handleMotion = function() {\n            if (window.orientation === 90 || window.orientation === -90) {\n              this._setProperty('deviceOrientation', 'landscape');\n            } else if (window.orientation === 0) {\n              this._setProperty('deviceOrientation', 'portrait');\n            } else if (window.orientation === undefined) {\n              this._setProperty('deviceOrientation', 'undefined');\n            }\n            var context = this._isGlobal ? window : this;\n            if (typeof context.deviceMoved === 'function') {\n              if (\n                Math.abs(this.accelerationX - this.pAccelerationX) > move_threshold ||\n                Math.abs(this.accelerationY - this.pAccelerationY) > move_threshold ||\n                Math.abs(this.accelerationZ - this.pAccelerationZ) > move_threshold\n              ) {\n                context.deviceMoved();\n              }\n            }\n\n            if (typeof context.deviceTurned === 'function') {\n              // The angles given by rotationX etc is from range -180 to 180.\n              // The following will convert them to 0 to 360 for ease of calculation\n              // of cases when the angles wrapped around.\n              // _startAngleX will be converted back at the end and updated.\n              var wRX = this.rotationX + 180;\n              var wPRX = this.pRotationX + 180;\n              var wSAX = startAngleX + 180;\n              if ((wRX - wPRX > 0 && wRX - wPRX < 270) || wRX - wPRX < -270) {\n                rotateDirectionX = 'clockwise';\n              } else if (wRX - wPRX < 0 || wRX - wPRX > 270) {\n                rotateDirectionX = 'counter-clockwise';\n              }\n              if (rotateDirectionX !== this.pRotateDirectionX) {\n                wSAX = wRX;\n              }\n              if (Math.abs(wRX - wSAX) > 90 && Math.abs(wRX - wSAX) < 270) {\n                wSAX = wRX;\n                this._setProperty('turnAxis', 'X');\n                context.deviceTurned();\n              }\n              this.pRotateDirectionX = rotateDirectionX;\n              startAngleX = wSAX - 180;\n\n              // Y-axis is identical to X-axis except for changing some names.\n              var wRY = this.rotationY + 180;\n              var wPRY = this.pRotationY + 180;\n              var wSAY = startAngleY + 180;\n              if ((wRY - wPRY > 0 && wRY - wPRY < 270) || wRY - wPRY < -270) {\n                rotateDirectionY = 'clockwise';\n              } else if (wRY - wPRY < 0 || wRY - this.pRotationY > 270) {\n                rotateDirectionY = 'counter-clockwise';\n              }\n              if (rotateDirectionY !== this.pRotateDirectionY) {\n                wSAY = wRY;\n              }\n              if (Math.abs(wRY - wSAY) > 90 && Math.abs(wRY - wSAY) < 270) {\n                wSAY = wRY;\n                this._setProperty('turnAxis', 'Y');\n                context.deviceTurned();\n              }\n              this.pRotateDirectionY = rotateDirectionY;\n              startAngleY = wSAY - 180;\n\n              // Z-axis is already in the range 0 to 360\n              // so no conversion is needed.\n              if (\n                (this.rotationZ - this.pRotationZ > 0 &&\n                  this.rotationZ - this.pRotationZ < 270) ||\n                this.rotationZ - this.pRotationZ < -270\n              ) {\n                rotateDirectionZ = 'clockwise';\n              } else if (\n                this.rotationZ - this.pRotationZ < 0 ||\n                this.rotationZ - this.pRotationZ > 270\n              ) {\n                rotateDirectionZ = 'counter-clockwise';\n              }\n              if (rotateDirectionZ !== this.pRotateDirectionZ) {\n                startAngleZ = this.rotationZ;\n              }\n              if (\n                Math.abs(this.rotationZ - startAngleZ) > 90 &&\n                Math.abs(this.rotationZ - startAngleZ) < 270\n              ) {\n                startAngleZ = this.rotationZ;\n                this._setProperty('turnAxis', 'Z');\n                context.deviceTurned();\n              }\n              this.pRotateDirectionZ = rotateDirectionZ;\n              this._setProperty('turnAxis', undefined);\n            }\n            if (typeof context.deviceShaken === 'function') {\n              var accelerationChangeX;\n              var accelerationChangeY;\n              // Add accelerationChangeZ if acceleration change on Z is needed\n              if (this.pAccelerationX !== null) {\n                accelerationChangeX = Math.abs(this.accelerationX - this.pAccelerationX);\n                accelerationChangeY = Math.abs(this.accelerationY - this.pAccelerationY);\n              }\n              if (accelerationChangeX + accelerationChangeY > shake_threshold) {\n                context.deviceShaken();\n              }\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59 }\n      ],\n      77: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Events\n           * @submodule Keyboard\n           * @for p5\n           * @requires core\n           */ /**\n           * The boolean system variable <a href=\"#/p5/keyIsPressed\">keyIsPressed</a> is true if any key is pressed\n           * and false if no keys are pressed.\n           *\n           * @property {Boolean} keyIsPressed\n           * @readOnly\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   if (keyIsPressed === true) {\n           *     fill(0);\n           *   } else {\n           *     fill(255);\n           *   }\n           *   rect(25, 25, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 white rect that turns black on keypress.\n           */ _main.default.prototype.isKeyPressed = false;\n          _main.default.prototype.keyIsPressed = false; // khan\n          /**\n           * The system variable key always contains the value of the most recent\n           * key on the keyboard that was typed. To get the proper capitalization, it\n           * is best to use it within <a href=\"#/p5/keyTyped\">keyTyped()</a>. For non-ASCII keys, use the <a href=\"#/p5/keyCode\">keyCode</a>\n           * variable.\n           *\n           * @property {String} key\n           * @readOnly\n           * @example\n           * <div><code>\n           * // Click any key to display it!\n           * // (Not Guaranteed to be Case Sensitive)\n           * function setup() {\n           *   fill(245, 123, 158);\n           *   textSize(50);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   text(key, 33, 65); // Display last key pressed.\n           * }\n           * </code></div>\n           *\n           * @alt\n           * canvas displays any key value that is pressed in pink font.\n           */\n          _main.default.prototype.key = '';\n\n          /**\n           * The variable keyCode is used to detect special keys such as BACKSPACE,\n           * DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,\n           * DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n           * You can also check for custom keys by looking up the keyCode of any key\n           * on a site like this: <a href=\"http://keycode.info/\">keycode.info</a>.\n           *\n           * @property {Integer} keyCode\n           * @readOnly\n           * @example\n           * <div><code>\n           * let fillVal = 126;\n           * function draw() {\n           *   fill(fillVal);\n           *   rect(25, 25, 50, 50);\n           * }\n           *\n           * function keyPressed() {\n           *   if (keyCode === UP_ARROW) {\n           *     fillVal = 255;\n           *   } else if (keyCode === DOWN_ARROW) {\n           *     fillVal = 0;\n           *   }\n           * }\n           * </code></div>\n           * <div><code>\n           * function draw() {}\n           * function keyPressed() {\n           *   background('yellow');\n           *   text(`${key} ${keyCode}`, 10, 40);\n           *   print(key, ' ', keyCode);\n           * }\n           * </code></div>\n           * @alt\n           * Grey rect center. turns white when up arrow pressed and black when down\n           * Display key pressed and its keyCode in a yellow box\n           */\n          _main.default.prototype.keyCode = 0;\n\n          /**\n           * The <a href=\"#/p5/keyPressed\">keyPressed()</a> function is called once every time a key is pressed. The\n           * keyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\">keyCode</a> variable.\n           *\n           * For non-ASCII keys, use the keyCode variable. You can check if the keyCode\n           * equals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,\n           * OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n           *\n           * For ASCII keys, the key that was pressed is stored in the key variable. However, it\n           * does not distinguish between uppercase and lowercase. For this reason, it\n           * is recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the\n           * case of the variable will be distinguished.\n           *\n           * Because of how operating systems handle key repeats, holding down a key\n           * may cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\n           * rate of repeat is set by the operating system and how each computer is\n           * configured.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various key events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method keyPressed\n           * @example\n           * <div>\n           * <code>\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function keyPressed() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function keyPressed() {\n           *   if (keyCode === LEFT_ARROW) {\n           *     value = 255;\n           *   } else if (keyCode === RIGHT_ARROW) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           * <div class=\"norender\">\n           * <code>\n           * function keyPressed() {\n           *   // Do something\n           *   return false; // prevent any default behaviour\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black rect center. turns white when key pressed and black when released\n           * black rect center. turns white when left arrow pressed and black when right.\n           */\n          _main.default.prototype._onkeydown = function(e) {\n            if (this._downKeys[e.which]) {\n              // prevent multiple firings\n              return;\n            }\n            this._setProperty('isKeyPressed', true);\n            this._setProperty('keyIsPressed', true);\n            this._setProperty('keyCode', e.which);\n            this._downKeys[e.which] = true;\n            this._setProperty('key', e.key || String.fromCharCode(e.which) || e.which);\n            var context = this._isGlobal ? window : this;\n            if (typeof context.keyPressed === 'function' && !e.charCode) {\n              var executeDefault = context.keyPressed(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n          /**\n           * The <a href=\"#/p5/keyReleased\">keyReleased()</a> function is called once every time a key is released.\n           * See <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a> for more information.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various key events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method keyReleased\n           * @example\n           * <div>\n           * <code>\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function keyReleased() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           *   return false; // prevent any default behavior\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black rect center. turns white when key pressed and black when pressed again\n           */\n          _main.default.prototype._onkeyup = function(e) {\n            this._downKeys[e.which] = false;\n\n            if (!this._areDownKeys()) {\n              this._setProperty('isKeyPressed', false);\n              this._setProperty('keyIsPressed', false);\n            }\n\n            this._setProperty('_lastKeyCodeTyped', null);\n\n            this._setProperty('key', e.key || String.fromCharCode(e.which) || e.which);\n            this._setProperty('keyCode', e.which);\n\n            var context = this._isGlobal ? window : this;\n            if (typeof context.keyReleased === 'function') {\n              var executeDefault = context.keyReleased(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/keyTyped\">keyTyped()</a> function is called once every time a key is pressed, but\n           * action keys such as Backspace, Delete, Ctrl, Shift, and Alt are ignored. If you are trying to detect\n           * a keyCode for one of these keys, use the <a href=\"#/p5/keyPressed\">keyPressed()</a> function instead.\n           * The most recent key typed will be stored in the key variable.\n           *\n           * Because of how operating systems handle key repeats, holding down a key\n           * will cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\n           * rate of repeat is set by the operating system and how each computer is\n           * configured.<br><br>\n           * Browsers may have different default behaviors attached to various key\n           * events. To prevent any default behavior for this event, add \"return false\"\n           * to the end of the method.\n           *\n           * @method keyTyped\n           * @example\n           * <div>\n           * <code>\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function keyTyped() {\n           *   if (key === 'a') {\n           *     value = 255;\n           *   } else if (key === 'b') {\n           *     value = 0;\n           *   }\n           *   // uncomment to prevent any default behavior\n           *   // return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black rect center. turns white when 'a' key typed and black when 'b' pressed\n           */\n          _main.default.prototype._onkeypress = function(e) {\n            if (e.which === this._lastKeyCodeTyped) {\n              // prevent multiple firings\n              return;\n            }\n            this._setProperty('_lastKeyCodeTyped', e.which); // track last keyCode\n            this._setProperty('key', e.key || String.fromCharCode(e.which) || e.which);\n\n            var context = this._isGlobal ? window : this;\n            if (typeof context.keyTyped === 'function') {\n              var executeDefault = context.keyTyped(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n          /**\n           * The onblur function is called when the user is no longer focused\n           * on the p5 element. Because the keyup events will not fire if the user is\n           * not focused on the element we must assume all keys currently down have\n           * been released.\n           */\n          _main.default.prototype._onblur = function(e) {\n            this._downKeys = {};\n          };\n\n          /**\n           * The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed.\n           * It can be used if you have an object that moves, and you want several keys\n           * to be able to affect its behaviour simultaneously, such as moving a\n           * sprite diagonally. You can put in any number representing the keyCode of\n           * the key, or use any of the variable <a href=\"#/p5/keyCode\">keyCode</a> names listed\n           * <a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>.\n           *\n           * @method keyIsDown\n           * @param {Number}          code The key to check for.\n           * @return {Boolean}        whether key is down or not\n           * @example\n           * <div><code>\n           * let x = 100;\n           * let y = 100;\n           *\n           * function setup() {\n           *   createCanvas(512, 512);\n           *   fill(255, 0, 0);\n           * }\n           *\n           * function draw() {\n           *   if (keyIsDown(LEFT_ARROW)) {\n           *     x -= 5;\n           *   }\n           *\n           *   if (keyIsDown(RIGHT_ARROW)) {\n           *     x += 5;\n           *   }\n           *\n           *   if (keyIsDown(UP_ARROW)) {\n           *     y -= 5;\n           *   }\n           *\n           *   if (keyIsDown(DOWN_ARROW)) {\n           *     y += 5;\n           *   }\n           *\n           *   clear();\n           *   ellipse(x, y, 50, 50);\n           * }\n           * </code></div>\n           *\n           * <div><code>\n           * let diameter = 50;\n           *\n           * function setup() {\n           *   createCanvas(512, 512);\n           * }\n           *\n           * function draw() {\n           *   // 107 and 187 are keyCodes for \"+\"\n           *   if (keyIsDown(107) || keyIsDown(187)) {\n           *     diameter += 1;\n           *   }\n           *\n           *   // 109 and 189 are keyCodes for \"-\"\n           *   if (keyIsDown(109) || keyIsDown(189)) {\n           *     diameter -= 1;\n           *   }\n           *\n           *   clear();\n           *   fill(255, 0, 0);\n           *   ellipse(50, 50, diameter, diameter);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 50x50 red ellipse moves left, right, up and down with arrow presses.\n           * 50x50 red ellipse gets bigger or smaller when + or - are pressed.\n           */\n          _main.default.prototype.keyIsDown = function(code) {\n            _main.default._validateParameters('keyIsDown', arguments);\n            return this._downKeys[code] || false;\n          };\n\n          /**\n    * The _areDownKeys function returns a boolean true if any keys pressed\n    * and a false if no keys are currently pressed.\n   \n    * Helps avoid instances where multiple keys are pressed simultaneously and\n    * releasing a single key will then switch the\n    * keyIsPressed property to true.\n    * @private\n   **/\n          _main.default.prototype._areDownKeys = function() {\n            for (var key in this._downKeys) {\n              if (this._downKeys.hasOwnProperty(key) && this._downKeys[key] === true) {\n                return true;\n              }\n            }\n            return false;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      78: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Events\n           * @submodule Mouse\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ /**\n           *\n           * The variable movedX contains the horizontal movement of the mouse since the last frame\n           * @property {Number} movedX\n           * @readOnly\n           * @example\n           * <div class=\"notest\">\n           * <code>\n           * let x = 50;\n           * function setup() {\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   if (x > 48) {\n           *     x -= 2;\n           *   } else if (x < 48) {\n           *     x += 2;\n           *   }\n           *   x += floor(movedX / 5);\n           *   background(237, 34, 93);\n           *   fill(0);\n           *   rect(x, 50, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * box moves left and right according to mouse movement then slowly back towards the center\n           */ _main.default.prototype.movedX = 0;\n          /**\n           * The variable movedY contains the vertical movement of the mouse since the last frame\n           * @property {Number} movedY\n           * @readOnly\n           * @example\n           * <div class=\"notest\">\n           * <code>\n           * let y = 50;\n           * function setup() {\n           *   rectMode(CENTER);\n           * }\n           *\n           * function draw() {\n           *   if (y > 48) {\n           *     y -= 2;\n           *   } else if (y < 48) {\n           *     y += 2;\n           *   }\n           *   y += floor(movedY / 5);\n           *   background(237, 34, 93);\n           *   fill(0);\n           *   rect(y, 50, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * box moves up and down according to mouse movement then slowly back towards the center\n           */ _main.default.prototype.movedY = 0;\n          /*\nhis is a flag which is false until the first time\nwe receive a mouse event. The pmouseX and pmouseY\nvalues will match the mouseX and mouseY values until\nthis interaction takes place.\nn          _main.default.prototype._hasMouseInteracted = false;\n\n          /**\n           * The system variable mouseX always contains the current horizontal\n           * position of the mouse, relative to (0, 0) of the canvas. The value at\n           * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n           * If touch is used instead of mouse input, mouseX will hold the x value\n           * of the most recent touch point.\n           *\n           * @property {Number} mouseX\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse across the canvas\n           * function draw() {\n           *   background(244, 248, 252);\n           *   line(mouseX, 0, mouseX, 100);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * horizontal black line moves left and right with mouse x-position\n           */\n          _main.default.prototype.mouseX = 0;\n\n          /**\n           * The system variable mouseY always contains the current vertical\n           * position of the mouse, relative to (0, 0) of the canvas. The value at\n           * the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL.\n           * If touch is used instead of mouse input, mouseY will hold the y value\n           * of the most recent touch point.\n           *\n           * @property {Number} mouseY\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse across the canvas\n           * function draw() {\n           *   background(244, 248, 252);\n           *   line(0, mouseY, 100, mouseY);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical black line moves up and down with mouse y-position\n           */\n          _main.default.prototype.mouseY = 0;\n\n          /**\n           * The system variable pmouseX always contains the horizontal position of\n           * the mouse or finger in the frame previous to the current frame, relative to\n           * (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\n           * (-width/2, -height/2) for WebGL. Note: pmouseX will be reset to the current mouseX\n           * value at the start of each touch event.\n           *\n           * @property {Number} pmouseX\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse across the canvas to leave a trail\n           * function setup() {\n           *   //slow down the frameRate to make it more visible\n           *   frameRate(10);\n           * }\n           *\n           * function draw() {\n           *   background(244, 248, 252);\n           *   line(mouseX, mouseY, pmouseX, pmouseY);\n           *   print(pmouseX + ' -> ' + mouseX);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * line trail is created from cursor movements. faster movement make longer line.\n           */\n          _main.default.prototype.pmouseX = 0;\n\n          /**\n           * The system variable pmouseY always contains the vertical position of\n           * the mouse or finger in the frame previous to the current frame, relative to\n           * (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and\n           * (-width/2, -height/2) for WebGL. Note: pmouseY will be reset to the current mouseY\n           * value at the start of each touch event.\n           *\n           * @property {Number} pmouseY\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *   //draw a square only if the mouse is not moving\n           *   if (mouseY === pmouseY && mouseX === pmouseX) {\n           *     rect(20, 20, 60, 60);\n           *   }\n           *\n           *   print(pmouseY + ' -> ' + mouseY);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 black rect center, fuchsia background. rect flickers on mouse movement\n           */\n          _main.default.prototype.pmouseY = 0;\n\n          /**\n           * The system variable winMouseX always contains the current horizontal\n           * position of the mouse, relative to (0, 0) of the window.\n           *\n           * @property {Number} winMouseX\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myCanvas;\n           *\n           * function setup() {\n           *   //use a variable to store a pointer to the canvas\n           *   myCanvas = createCanvas(100, 100);\n           *   let body = document.getElementsByTagName('body')[0];\n           *   myCanvas.parent(body);\n           * }\n           *\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *\n           *   //move the canvas to the horizontal mouse position\n           *   //relative to the window\n           *   myCanvas.position(winMouseX + 1, windowHeight / 2);\n           *\n           *   //the y of the square is relative to the canvas\n           *   rect(20, mouseY, 60, 60);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 black rect y moves with mouse y and fuchsia canvas moves with mouse x\n           */\n          _main.default.prototype.winMouseX = 0;\n\n          /**\n           * The system variable winMouseY always contains the current vertical\n           * position of the mouse, relative to (0, 0) of the window.\n           *\n           * @property {Number} winMouseY\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myCanvas;\n           *\n           * function setup() {\n           *   //use a variable to store a pointer to the canvas\n           *   myCanvas = createCanvas(100, 100);\n           *   let body = document.getElementsByTagName('body')[0];\n           *   myCanvas.parent(body);\n           * }\n           *\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *\n           *   //move the canvas to the vertical mouse position\n           *   //relative to the window\n           *   myCanvas.position(windowWidth / 2, winMouseY + 1);\n           *\n           *   //the x of the square is relative to the canvas\n           *   rect(mouseX, 20, 60, 60);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60x60 black rect x moves with mouse x and fuchsia canvas y moves with mouse y\n           */\n          _main.default.prototype.winMouseY = 0;\n\n          /**\n           * The system variable pwinMouseX always contains the horizontal position\n           * of the mouse in the frame previous to the current frame, relative to\n           * (0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX\n           * value at the start of each touch event.\n           *\n           * @property {Number} pwinMouseX\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myCanvas;\n           *\n           * function setup() {\n           *   //use a variable to store a pointer to the canvas\n           *   myCanvas = createCanvas(100, 100);\n           *   noStroke();\n           *   fill(237, 34, 93);\n           * }\n           *\n           * function draw() {\n           *   clear();\n           *   //the difference between previous and\n           *   //current x position is the horizontal mouse speed\n           *   let speed = abs(winMouseX - pwinMouseX);\n           *   //change the size of the circle\n           *   //according to the horizontal speed\n           *   ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n           *   //move the canvas to the mouse position\n           *   myCanvas.position(winMouseX + 1, winMouseY + 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * fuchsia ellipse moves with mouse x and y. Grows and shrinks with mouse speed\n           */\n          _main.default.prototype.pwinMouseX = 0;\n\n          /**\n           * The system variable pwinMouseY always contains the vertical position of\n           * the mouse in the frame previous to the current frame, relative to (0, 0)\n           * of the window. Note: pwinMouseY will be reset to the current winMouseY\n           * value at the start of each touch event.\n           *\n           * @property {Number} pwinMouseY\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myCanvas;\n           *\n           * function setup() {\n           *   //use a variable to store a pointer to the canvas\n           *   myCanvas = createCanvas(100, 100);\n           *   noStroke();\n           *   fill(237, 34, 93);\n           * }\n           *\n           * function draw() {\n           *   clear();\n           *   //the difference between previous and\n           *   //current y position is the vertical mouse speed\n           *   let speed = abs(winMouseY - pwinMouseY);\n           *   //change the size of the circle\n           *   //according to the vertical speed\n           *   ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n           *   //move the canvas to the mouse position\n           *   myCanvas.position(winMouseX + 1, winMouseY + 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * fuchsia ellipse moves with mouse x and y. Grows and shrinks with mouse speed\n           */\n          _main.default.prototype.pwinMouseY = 0;\n\n          /**\n           * Processing automatically tracks if the mouse button is pressed and which\n           * button is pressed. The value of the system variable mouseButton is either\n           * LEFT, RIGHT, or CENTER depending on which button was pressed last.\n           * Warning: different browsers may track mouseButton differently.\n           *\n           * @property {Constant} mouseButton\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *\n           *   if (mouseIsPressed) {\n           *     if (mouseButton === LEFT) {\n           *       ellipse(50, 50, 50, 50);\n           *     }\n           *     if (mouseButton === RIGHT) {\n           *       rect(25, 25, 50, 50);\n           *     }\n           *     if (mouseButton === CENTER) {\n           *       triangle(23, 75, 50, 20, 78, 75);\n           *     }\n           *   }\n           *\n           *   print(mouseButton);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black ellipse appears on center of fuchsia canvas on mouse click/press.\n           */\n          _main.default.prototype.mouseButton = 0;\n\n          /**\n           * The boolean system variable mouseIsPressed is true if the mouse is pressed\n           * and false if not.\n           *\n           * @property {Boolean} mouseIsPressed\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *\n           *   if (mouseIsPressed) {\n           *     ellipse(50, 50, 50, 50);\n           *   } else {\n           *     rect(25, 25, 50, 50);\n           *   }\n           *\n           *   print(mouseIsPressed);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect becomes ellipse with mouse click/press. fuchsia background.\n           */\n          _main.default.prototype.mouseIsPressed = false;\n\n          _main.default.prototype._updateNextMouseCoords = function(e) {\n            if (this._curElement !== null && (!e.touches || e.touches.length > 0)) {\n              var mousePos = getMousePos(this._curElement.elt, this.width, this.height, e);\n\n              this._setProperty('movedX', e.movementX);\n              this._setProperty('movedY', e.movementY);\n              this._setProperty('mouseX', mousePos.x);\n              this._setProperty('mouseY', mousePos.y);\n              this._setProperty('winMouseX', mousePos.winX);\n              this._setProperty('winMouseY', mousePos.winY);\n            }\n            if (!this._hasMouseInteracted) {\n              // For first draw, make previous and next equal\n              this._updateMouseCoords();\n              this._setProperty('_hasMouseInteracted', true);\n            }\n          };\n\n          _main.default.prototype._updateMouseCoords = function() {\n            this._setProperty('pmouseX', this.mouseX);\n            this._setProperty('pmouseY', this.mouseY);\n            this._setProperty('pwinMouseX', this.winMouseX);\n            this._setProperty('pwinMouseY', this.winMouseY);\n\n            this._setProperty('_pmouseWheelDeltaY', this._mouseWheelDeltaY);\n          };\n\n          function getMousePos(canvas, w, h, evt) {\n            if (evt && !evt.clientX) {\n              // use touches if touch and not mouse\n              if (evt.touches) {\n                evt = evt.touches[0];\n              } else if (evt.changedTouches) {\n                evt = evt.changedTouches[0];\n              }\n            }\n            var rect = canvas.getBoundingClientRect();\n            var sx = canvas.scrollWidth / w || 1;\n            var sy = canvas.scrollHeight / h || 1;\n            return {\n              x: (evt.clientX - rect.left) / sx,\n              y: (evt.clientY - rect.top) / sy,\n              winX: evt.clientX,\n              winY: evt.clientY,\n              id: evt.identifier\n            };\n          }\n\n          _main.default.prototype._setMouseButton = function(e) {\n            if (e.button === 1) {\n              this._setProperty('mouseButton', constants.CENTER);\n            } else if (e.button === 2) {\n              this._setProperty('mouseButton', constants.RIGHT);\n            } else {\n              this._setProperty('mouseButton', constants.LEFT);\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse\n           * button is not pressed.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mouseMoved\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Move the mouse across the page\n           * // to change its value\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function mouseMoved() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mouseMoved() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mouseMoved(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect becomes lighter with mouse movements until white then resets\n           * no image displayed\n           */\n\n          /**\n           * The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and\n           * a mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the\n           * <a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mouseDragged\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Drag the mouse across the page\n           * // to change its value\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function mouseDragged() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mouseDragged() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mouseDragged(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns lighter with mouse click and drag until white, resets\n           * no image displayed\n           */\n          _main.default.prototype._onmousemove = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._updateNextMouseCoords(e);\n            if (!this.mouseIsPressed) {\n              if (typeof context.mouseMoved === 'function') {\n                executeDefault = context.mouseMoved(e);\n                if (executeDefault === false) {\n                  e.preventDefault();\n                }\n              }\n            } else {\n              if (typeof context.mouseDragged === 'function') {\n                executeDefault = context.mouseDragged(e);\n                if (executeDefault === false) {\n                  e.preventDefault();\n                }\n              } else if (typeof context.touchMoved === 'function') {\n                executeDefault = context.touchMoved(e);\n                if (executeDefault === false) {\n                  e.preventDefault();\n                }\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button\n           * is pressed. The mouseButton variable (see the related reference entry)\n           * can be used to determine which button has been pressed. If no\n           * <a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be\n           * called instead if it is defined.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mousePressed\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Click within the image to change\n           * // the value of the rectangle\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function mousePressed() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mousePressed() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mousePressed(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns white with mouse click/press.\n           * no image displayed\n           */\n          _main.default.prototype._onmousedown = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._setProperty('mouseIsPressed', true);\n            this._setMouseButton(e);\n            this._updateNextMouseCoords(e);\n\n            if (typeof context.mousePressed === 'function') {\n              executeDefault = context.mousePressed(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n              // only safari needs this manual fallback for consistency\n            } else if (\n              navigator.userAgent.toLowerCase().includes('safari') &&\n              typeof context.touchStarted === 'function'\n            ) {\n              executeDefault = context.touchStarted(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is\n           * released. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a>\n           * function will be called instead if it is defined.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mouseReleased\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Click within the image to change\n           * // the value of the rectangle\n           * // after the mouse has been clicked\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function mouseReleased() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mouseReleased() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mouseReleased(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns white with mouse click/press.\n           * no image displayed\n           */\n          _main.default.prototype._onmouseup = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._setProperty('mouseIsPressed', false);\n            if (typeof context.mouseReleased === 'function') {\n              executeDefault = context.mouseReleased(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            } else if (typeof context.touchEnded === 'function') {\n              executeDefault = context.touchEnded(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          _main.default.prototype._ondragend = _main.default.prototype._onmouseup;\n          _main.default.prototype._ondragover = _main.default.prototype._onmousemove;\n\n          /**\n           * The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been\n           * pressed and then released.<br><br>\n           * Browsers handle clicks differently, so this function is only guaranteed to be\n           * run when the left mouse button is clicked. To handle other mouse buttons\n           * being pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>.<br><br>\n           * Browsers may have different default\n           * behaviors attached to various mouse events. To prevent any default\n           * behavior for this event, add \"return false\" to the end of the method.\n           *\n           * @method mouseClicked\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Click within the image to change\n           * // the value of the rectangle\n           * // after the mouse has been clicked\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           *\n           * function mouseClicked() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function mouseClicked() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function mouseClicked(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns white with mouse click/press.\n           * no image displayed\n           */\n          _main.default.prototype._onclick = function(e) {\n            var context = this._isGlobal ? window : this;\n            if (typeof context.mouseClicked === 'function') {\n              var executeDefault = context.mouseClicked(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event\n           * listener has detected a dblclick event which is a part of the\n           * DOM L3 specification. The doubleClicked event is fired when a\n           * pointing device button (usually a mouse's primary button)\n           * is clicked twice on a single element. For more info on the\n           * dblclick event refer to mozilla's documentation here:\n           * https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\n           *\n           * @method doubleClicked\n           * @param  {Object} [event] optional MouseEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Click within the image to change\n           * // the value of the rectangle\n           * // after the mouse has been double clicked\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           *\n           * function doubleClicked() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function doubleClicked() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a MouseEvent object\n           * // as a callback argument\n           * function doubleClicked(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect turns white with mouse doubleClick/press.\n           * no image displayed\n           */\n\n          _main.default.prototype._ondblclick = function(e) {\n            var context = this._isGlobal ? window : this;\n            if (typeof context.doubleClicked === 'function') {\n              var executeDefault = context.doubleClicked(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * For use with WebGL orbitControl.\n           * @property {Number} _mouseWheelDeltaY\n           * @readOnly\n           * @private\n           */\n          _main.default.prototype._mouseWheelDeltaY = 0;\n\n          /**\n           * For use with WebGL orbitControl.\n           * @property {Number} _pmouseWheelDeltaY\n           * @readOnly\n           * @private\n           */\n          _main.default.prototype._pmouseWheelDeltaY = 0;\n\n          /**\n           * The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel\n           * event is detected either triggered by an actual mouse wheel or by a\n           * touchpad.<br><br>\n           * The event.delta property returns the amount the mouse wheel\n           * have scrolled. The values can be positive or negative depending on the\n           * scroll direction (on OS X with \"natural\" scrolling enabled, the signs\n           * are inverted).<br><br>\n           * Browsers may have different default behaviors attached to various\n           * mouse events. To prevent any default behavior for this event, add\n           * \"return false\" to the end of the method.<br><br>\n           * Due to the current support of the \"wheel\" event on Safari, the function\n           * may only work as expected if \"return false\" is included while using Safari.\n           *\n           * @method mouseWheel\n           * @param  {Object} [event] optional WheelEvent callback argument.\n           *\n           * @example\n           * <div>\n           * <code>\n           * let pos = 25;\n           *\n           * function draw() {\n           *   background(237, 34, 93);\n           *   fill(0);\n           *   rect(25, pos, 50, 50);\n           * }\n           *\n           * function mouseWheel(event) {\n           *   print(event.delta);\n           *   //move the square according to the vertical scroll amount\n           *   pos += event.delta;\n           *   //uncomment to block page scrolling\n           *   //return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black 50x50 rect moves up and down with vertical scroll. fuchsia background\n           */\n          _main.default.prototype._onwheel = function(e) {\n            var context = this._isGlobal ? window : this;\n            this._setProperty('_mouseWheelDeltaY', e.deltaY);\n            if (typeof context.mouseWheel === 'function') {\n              e.delta = e.deltaY;\n              var executeDefault = context.mouseWheel(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The function <a href=\"#/p5/requestPointerLock\">requestPointerLock()</a>\n           * locks the pointer to its current position and makes it invisible.\n           * Use <a href=\"#/p5/movedX\">movedX</a> and <a href=\"#/p5/movedY\">movedY</a> to get the difference the mouse was moved since\n           * the last call of draw.\n           * Note that not all browsers support this feature.\n           * This enables you to create experiences that aren't limited by the mouse moving out of the screen\n           * even if it is repeatedly moved into one direction.\n           * For example, a first person perspective experience.\n           *\n           * @method requestPointerLock\n           * @example\n           * <div class=\"notest\">\n           * <code>\n           * let cam;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   requestPointerLock();\n           *   cam = createCamera();\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   cam.pan(-movedX * 0.001);\n           *   cam.tilt(movedY * 0.001);\n           *   sphere(25);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 3D scene moves according to mouse mouse movement in a first person perspective\n           */\n          _main.default.prototype.requestPointerLock = function() {\n            // pointer lock object forking for cross browser\n            var canvas = this._curElement.elt;\n            canvas.requestPointerLock =\n              canvas.requestPointerLock || canvas.mozRequestPointerLock;\n            if (!canvas.requestPointerLock) {\n              console.log('requestPointerLock is not implemented in this browser');\n              return false;\n            }\n            canvas.requestPointerLock();\n            return true;\n          };\n\n          /**\n           * The function <a href=\"#/p5/exitPointerLock\">exitPointerLock()</a>\n           * exits a previously triggered <a href=\"#/p5/requestPointerLock\">pointer Lock</a>\n           * for example to make ui elements usable etc\n           *\n           * @method exitPointerLock\n           * @example\n           * <div class=\"notest\">\n           * <code>\n           * //click the canvas to lock the pointer\n           * //click again to exit (otherwise escape)\n           * let locked = false;\n           * function draw() {\n           *   background(237, 34, 93);\n           * }\n           * function mouseClicked() {\n           *   if (!locked) {\n           *     locked = true;\n           *     requestPointerLock();\n           *   } else {\n           *     exitPointerLock();\n           *     locked = false;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * cursor gets locked / unlocked on mouse-click\n           */\n          _main.default.prototype.exitPointerLock = function() {\n            document.exitPointerLock();\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59 }\n      ],\n      79: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Events\n           * @submodule Touch\n           * @for p5\n           * @requires core\n           */ /**\n           * The system variable touches[] contains an array of the positions of all\n           * current touch points, relative to (0, 0) of the canvas, and IDs identifying a\n           * unique touch as it moves. Each element in the array is an object with x, y,\n           * and id properties.\n           *\n           * The touches[] array is not supported on Safari and IE on touch-based\n           * desktops (laptops).\n           *\n           * @property {Object[]} touches\n           * @readOnly\n           *\n           * @example\n           * <div>\n           * <code>\n           * // On a touchscreen device, touch\n           * // the canvas using one or more fingers\n           * // at the same time\n           * function draw() {\n           *   clear();\n           *   let display = touches.length + ' touches';\n           *   text(display, 5, 10);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Number of touches currently registered are displayed on the canvas\n           */ _main.default.prototype.touches = [];\n          _main.default.prototype._updateTouchCoords = function(e) {\n            if (this._curElement !== null) {\n              var touches = [];\n              for (var i = 0; i < e.touches.length; i++) {\n                touches[i] = getTouchInfo(\n                  this._curElement.elt,\n                  this.width,\n                  this.height,\n                  e,\n                  i\n                );\n              }\n              this._setProperty('touches', touches);\n            }\n          };\n\n          function getTouchInfo(canvas, w, h, e) {\n            var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n            var rect = canvas.getBoundingClientRect();\n            var sx = canvas.scrollWidth / w || 1;\n            var sy = canvas.scrollHeight / h || 1;\n            var touch = e.touches[i] || e.changedTouches[i];\n            return {\n              x: (touch.clientX - rect.left) / sx,\n              y: (touch.clientY - rect.top) / sy,\n              winX: touch.clientX,\n              winY: touch.clientY,\n              id: touch.identifier\n            };\n          }\n\n          /**\n           * The touchStarted() function is called once after every time a touch is\n           * registered. If no <a href=\"#/p5/touchStarted\">touchStarted()</a> function is defined, the <a href=\"#/p5/mousePressed\">mousePressed()</a>\n           * function will be called instead if it is defined.<br><br>\n           * Browsers may have different default behaviors attached to various touch\n           * events. To prevent any default behavior for this event, add \"return false\"\n           * to the end of the method.\n           *\n           * @method touchStarted\n           * @param  {Object} [event] optional TouchEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Touch within the image to change\n           * // the value of the rectangle\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function touchStarted() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function touchStarted() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a TouchEvent object\n           * // as a callback argument\n           * function touchStarted(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect turns white with touch event.\n           * no image displayed\n           */\n          _main.default.prototype._ontouchstart = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._setProperty('mouseIsPressed', true);\n            this._updateTouchCoords(e);\n            this._updateNextMouseCoords(e);\n            this._updateMouseCoords(); // reset pmouseXY at the start of each touch event\n\n            if (typeof context.touchStarted === 'function') {\n              executeDefault = context.touchStarted(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n              // only safari needs this manual fallback for consistency\n            } else if (\n              navigator.userAgent.toLowerCase().includes('safari') &&\n              typeof context.mousePressed === 'function'\n            ) {\n              executeDefault = context.mousePressed(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered.\n           * If no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will\n           * be called instead if it is defined.<br><br>\n           * Browsers may have different default behaviors attached to various touch\n           * events. To prevent any default behavior for this event, add \"return false\"\n           * to the end of the method.\n           *\n           * @method touchMoved\n           * @param  {Object} [event] optional TouchEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Move your finger across the page\n           * // to change its value\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function touchMoved() {\n           *   value = value + 5;\n           *   if (value > 255) {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function touchMoved() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a TouchEvent object\n           * // as a callback argument\n           * function touchMoved(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect turns lighter with touch until white. resets\n           * no image displayed\n           */\n          _main.default.prototype._ontouchmove = function(e) {\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            this._updateTouchCoords(e);\n            this._updateNextMouseCoords(e);\n            if (typeof context.touchMoved === 'function') {\n              executeDefault = context.touchMoved(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            } else if (typeof context.mouseDragged === 'function') {\n              executeDefault = context.mouseDragged(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n\n          /**\n           * The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no\n           * <a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be\n           * called instead if it is defined.<br><br>\n           * Browsers may have different default behaviors attached to various touch\n           * events. To prevent any default behavior for this event, add \"return false\"\n           * to the end of the method.\n           *\n           * @method touchEnded\n           * @param  {Object} [event] optional TouchEvent callback argument.\n           * @example\n           * <div>\n           * <code>\n           * // Release touch within the image to\n           * // change the value of the rectangle\n           *\n           * let value = 0;\n           * function draw() {\n           *   fill(value);\n           *   rect(25, 25, 50, 50);\n           * }\n           * function touchEnded() {\n           *   if (value === 0) {\n           *     value = 255;\n           *   } else {\n           *     value = 0;\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * function touchEnded() {\n           *   ellipse(mouseX, mouseY, 5, 5);\n           *   // prevent default\n           *   return false;\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // returns a TouchEvent object\n           * // as a callback argument\n           * function touchEnded(event) {\n           *   console.log(event);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 50x50 black rect turns white with touch.\n           * no image displayed\n           */\n          _main.default.prototype._ontouchend = function(e) {\n            this._setProperty('mouseIsPressed', false);\n            this._updateTouchCoords(e);\n            this._updateNextMouseCoords(e);\n            var context = this._isGlobal ? window : this;\n            var executeDefault;\n            if (typeof context.touchEnded === 'function') {\n              executeDefault = context.touchEnded(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            } else if (typeof context.mouseReleased === 'function') {\n              executeDefault = context.mouseReleased(e);\n              if (executeDefault === false) {\n                e.preventDefault();\n              }\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      80: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0; /*global ImageData:false */\n\n          /**\n           * This module defines the filters for use with image buffers.\n           *\n           * This module is basically a collection of functions stored in an object\n           * as opposed to modules. The functions are destructive, modifying\n           * the passed in canvas rather than creating a copy.\n           *\n           * Generally speaking users of this module will use the Filters.apply method\n           * on a canvas to create an effect.\n           *\n           * A number of functions are borrowed/adapted from\n           * http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\n           * or the java processing implementation.\n           */\n\n          var Filters = {};\n\n          /*\n                   * Helper functions\n                   */\n\n          /**\n           * Returns the pixel buffer for a canvas\n           *\n           * @private\n           *\n           * @param  {Canvas|ImageData} canvas the canvas to get pixels from\n           * @return {Uint8ClampedArray}       a one-dimensional array containing\n           *                                   the data in thc RGBA order, with integer\n           *                                   values between 0 and 255\n           */\n          Filters._toPixels = function(canvas) {\n            if (canvas instanceof ImageData) {\n              return canvas.data;\n            } else {\n              return canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height)\n                .data;\n            }\n          };\n\n          /**\n           * Returns a 32 bit number containing ARGB data at ith pixel in the\n           * 1D array containing pixels data.\n           *\n           * @private\n           *\n           * @param  {Uint8ClampedArray} data array returned by _toPixels()\n           * @param  {Integer}           i    index of a 1D Image Array\n           * @return {Integer}                32 bit integer value representing\n           *                                  ARGB value.\n           */\n          Filters._getARGB = function(data, i) {\n            var offset = i * 4;\n            return (\n              ((data[offset + 3] << 24) & 0xff000000) |\n              ((data[offset] << 16) & 0x00ff0000) |\n              ((data[offset + 1] << 8) & 0x0000ff00) |\n              (data[offset + 2] & 0x000000ff)\n            );\n          };\n\n          /**\n           * Modifies pixels RGBA values to values contained in the data object.\n           *\n           * @private\n           *\n           * @param {Uint8ClampedArray} pixels array returned by _toPixels()\n           * @param {Int32Array}        data   source 1D array where each value\n           *                                   represents ARGB values\n           */\n          Filters._setPixels = function(pixels, data) {\n            var offset = 0;\n            for (var i = 0, al = pixels.length; i < al; i++) {\n              offset = i * 4;\n              pixels[offset + 0] = (data[i] & 0x00ff0000) >>> 16;\n              pixels[offset + 1] = (data[i] & 0x0000ff00) >>> 8;\n              pixels[offset + 2] = data[i] & 0x000000ff;\n              pixels[offset + 3] = (data[i] & 0xff000000) >>> 24;\n            }\n          };\n\n          /**\n           * Returns the ImageData object for a canvas\n           * https://developer.mozilla.org/en-US/docs/Web/API/ImageData\n           *\n           * @private\n           *\n           * @param  {Canvas|ImageData} canvas canvas to get image data from\n           * @return {ImageData}               Holder of pixel data (and width and\n           *                                   height) for a canvas\n           */\n          Filters._toImageData = function(canvas) {\n            if (canvas instanceof ImageData) {\n              return canvas;\n            } else {\n              return canvas\n                .getContext('2d')\n                .getImageData(0, 0, canvas.width, canvas.height);\n            }\n          };\n\n          /**\n           * Returns a blank ImageData object.\n           *\n           * @private\n           *\n           * @param  {Integer} width\n           * @param  {Integer} height\n           * @return {ImageData}\n           */\n          Filters._createImageData = function(width, height) {\n            Filters._tmpCanvas = document.createElement('canvas');\n            Filters._tmpCtx = Filters._tmpCanvas.getContext('2d');\n            return this._tmpCtx.createImageData(width, height);\n          };\n\n          /**\n           * Applys a filter function to a canvas.\n           *\n           * The difference between this and the actual filter functions defined below\n           * is that the filter functions generally modify the pixel buffer but do\n           * not actually put that data back to the canvas (where it would actually\n           * update what is visible). By contrast this method does make the changes\n           * actually visible in the canvas.\n           *\n           * The apply method is the method that callers of this module would generally\n           * use. It has been separated from the actual filters to support an advanced\n           * use case of creating a filter chain that executes without actually updating\n           * the canvas in between everystep.\n           *\n           * @private\n           * @param  {HTMLCanvasElement} canvas [description]\n           * @param  {function(ImageData,Object)} func   [description]\n           * @param  {Object} filterParam  [description]\n           */\n          Filters.apply = function(canvas, func, filterParam) {\n            var pixelsState = canvas.getContext('2d');\n            var imageData = pixelsState.getImageData(0, 0, canvas.width, canvas.height);\n\n            //Filters can either return a new ImageData object, or just modify\n            //the one they received.\n            var newImageData = func(imageData, filterParam);\n            if (newImageData instanceof ImageData) {\n              pixelsState.putImageData(\n                newImageData,\n                0,\n                0,\n                0,\n                0,\n                canvas.width,\n                canvas.height\n              );\n            } else {\n              pixelsState.putImageData(imageData, 0, 0, 0, 0, canvas.width, canvas.height);\n            }\n          };\n\n          /*\n    * Filters\n    */\n\n          /**\n           * Converts the image to black and white pixels depending if they are above or\n           * below the threshold defined by the level parameter. The parameter must be\n           * between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n           *\n           * Borrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\n           *\n           * @private\n           * @param  {Canvas} canvas\n           * @param  {Float} level\n           */\n          Filters.threshold = function(canvas, level) {\n            var pixels = Filters._toPixels(canvas);\n\n            if (level === undefined) {\n              level = 0.5;\n            }\n            var thresh = Math.floor(level * 255);\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              var r = pixels[i];\n              var g = pixels[i + 1];\n              var b = pixels[i + 2];\n              var gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n              var val = void 0;\n              if (gray >= thresh) {\n                val = 255;\n              } else {\n                val = 0;\n              }\n              pixels[i] = pixels[i + 1] = pixels[i + 2] = val;\n            }\n          };\n\n          /**\n           * Converts any colors in the image to grayscale equivalents.\n           * No parameter is used.\n           *\n           * Borrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\n           *\n           * @private\n           * @param {Canvas} canvas\n           */\n          Filters.gray = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              var r = pixels[i];\n              var g = pixels[i + 1];\n              var b = pixels[i + 2];\n\n              // CIE luminance for RGB\n              var gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n              pixels[i] = pixels[i + 1] = pixels[i + 2] = gray;\n            }\n          };\n\n          /**\n           * Sets the alpha channel to entirely opaque. No parameter is used.\n           *\n           * @private\n           * @param {Canvas} canvas\n           */\n          Filters.opaque = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              pixels[i + 3] = 255;\n            }\n\n            return pixels;\n          };\n\n          /**\n           * Sets each pixel to its inverse value. No parameter is used.\n           * @private\n           * @param  {Canvas} canvas\n           */\n          Filters.invert = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              pixels[i] = 255 - pixels[i];\n              pixels[i + 1] = 255 - pixels[i + 1];\n              pixels[i + 2] = 255 - pixels[i + 2];\n            }\n          };\n\n          /**\n           * Limits each channel of the image to the number of colors specified as\n           * the parameter. The parameter can be set to values between 2 and 255, but\n           * results are most noticeable in the lower ranges.\n           *\n           * Adapted from java based processing implementation\n           *\n           * @private\n           * @param  {Canvas} canvas\n           * @param  {Integer} level\n           */\n          Filters.posterize = function(canvas, level) {\n            var pixels = Filters._toPixels(canvas);\n\n            if (level < 2 || level > 255) {\n              throw new Error(\n                'Level must be greater than 2 and less than 255 for posterize'\n              );\n            }\n\n            var levels1 = level - 1;\n            for (var i = 0; i < pixels.length; i += 4) {\n              var rlevel = pixels[i];\n              var glevel = pixels[i + 1];\n              var blevel = pixels[i + 2];\n\n              pixels[i] = ((rlevel * level) >> 8) * 255 / levels1;\n              pixels[i + 1] = ((glevel * level) >> 8) * 255 / levels1;\n              pixels[i + 2] = ((blevel * level) >> 8) * 255 / levels1;\n            }\n          };\n\n          /**\n           * reduces the bright areas in an image\n           * @private\n           * @param  {Canvas} canvas\n           */\n          Filters.dilate = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n            var currIdx = 0;\n            var maxIdx = pixels.length ? pixels.length / 4 : 0;\n            var out = new Int32Array(maxIdx);\n            var currRowIdx, maxRowIdx, colOrig, colOut, currLum;\n\n            var idxRight, idxLeft, idxUp, idxDown;\n            var colRight, colLeft, colUp, colDown;\n            var lumRight, lumLeft, lumUp, lumDown;\n\n            while (currIdx < maxIdx) {\n              currRowIdx = currIdx;\n              maxRowIdx = currIdx + canvas.width;\n              while (currIdx < maxRowIdx) {\n                colOrig = colOut = Filters._getARGB(pixels, currIdx);\n                idxLeft = currIdx - 1;\n                idxRight = currIdx + 1;\n                idxUp = currIdx - canvas.width;\n                idxDown = currIdx + canvas.width;\n\n                if (idxLeft < currRowIdx) {\n                  idxLeft = currIdx;\n                }\n                if (idxRight >= maxRowIdx) {\n                  idxRight = currIdx;\n                }\n                if (idxUp < 0) {\n                  idxUp = 0;\n                }\n                if (idxDown >= maxIdx) {\n                  idxDown = currIdx;\n                }\n                colUp = Filters._getARGB(pixels, idxUp);\n                colLeft = Filters._getARGB(pixels, idxLeft);\n                colDown = Filters._getARGB(pixels, idxDown);\n                colRight = Filters._getARGB(pixels, idxRight);\n\n                //compute luminance\n                currLum =\n                  77 * ((colOrig >> 16) & 0xff) +\n                  151 * ((colOrig >> 8) & 0xff) +\n                  28 * (colOrig & 0xff);\n                lumLeft =\n                  77 * ((colLeft >> 16) & 0xff) +\n                  151 * ((colLeft >> 8) & 0xff) +\n                  28 * (colLeft & 0xff);\n                lumRight =\n                  77 * ((colRight >> 16) & 0xff) +\n                  151 * ((colRight >> 8) & 0xff) +\n                  28 * (colRight & 0xff);\n                lumUp =\n                  77 * ((colUp >> 16) & 0xff) +\n                  151 * ((colUp >> 8) & 0xff) +\n                  28 * (colUp & 0xff);\n                lumDown =\n                  77 * ((colDown >> 16) & 0xff) +\n                  151 * ((colDown >> 8) & 0xff) +\n                  28 * (colDown & 0xff);\n\n                if (lumLeft > currLum) {\n                  colOut = colLeft;\n                  currLum = lumLeft;\n                }\n                if (lumRight > currLum) {\n                  colOut = colRight;\n                  currLum = lumRight;\n                }\n                if (lumUp > currLum) {\n                  colOut = colUp;\n                  currLum = lumUp;\n                }\n                if (lumDown > currLum) {\n                  colOut = colDown;\n                  currLum = lumDown;\n                }\n                out[currIdx++] = colOut;\n              }\n            }\n            Filters._setPixels(pixels, out);\n          };\n\n          /**\n           * increases the bright areas in an image\n           * @private\n           * @param  {Canvas} canvas\n           */\n          Filters.erode = function(canvas) {\n            var pixels = Filters._toPixels(canvas);\n            var currIdx = 0;\n            var maxIdx = pixels.length ? pixels.length / 4 : 0;\n            var out = new Int32Array(maxIdx);\n            var currRowIdx, maxRowIdx, colOrig, colOut, currLum;\n            var idxRight, idxLeft, idxUp, idxDown;\n            var colRight, colLeft, colUp, colDown;\n            var lumRight, lumLeft, lumUp, lumDown;\n\n            while (currIdx < maxIdx) {\n              currRowIdx = currIdx;\n              maxRowIdx = currIdx + canvas.width;\n              while (currIdx < maxRowIdx) {\n                colOrig = colOut = Filters._getARGB(pixels, currIdx);\n                idxLeft = currIdx - 1;\n                idxRight = currIdx + 1;\n                idxUp = currIdx - canvas.width;\n                idxDown = currIdx + canvas.width;\n\n                if (idxLeft < currRowIdx) {\n                  idxLeft = currIdx;\n                }\n                if (idxRight >= maxRowIdx) {\n                  idxRight = currIdx;\n                }\n                if (idxUp < 0) {\n                  idxUp = 0;\n                }\n                if (idxDown >= maxIdx) {\n                  idxDown = currIdx;\n                }\n                colUp = Filters._getARGB(pixels, idxUp);\n                colLeft = Filters._getARGB(pixels, idxLeft);\n                colDown = Filters._getARGB(pixels, idxDown);\n                colRight = Filters._getARGB(pixels, idxRight);\n\n                //compute luminance\n                currLum =\n                  77 * ((colOrig >> 16) & 0xff) +\n                  151 * ((colOrig >> 8) & 0xff) +\n                  28 * (colOrig & 0xff);\n                lumLeft =\n                  77 * ((colLeft >> 16) & 0xff) +\n                  151 * ((colLeft >> 8) & 0xff) +\n                  28 * (colLeft & 0xff);\n                lumRight =\n                  77 * ((colRight >> 16) & 0xff) +\n                  151 * ((colRight >> 8) & 0xff) +\n                  28 * (colRight & 0xff);\n                lumUp =\n                  77 * ((colUp >> 16) & 0xff) +\n                  151 * ((colUp >> 8) & 0xff) +\n                  28 * (colUp & 0xff);\n                lumDown =\n                  77 * ((colDown >> 16) & 0xff) +\n                  151 * ((colDown >> 8) & 0xff) +\n                  28 * (colDown & 0xff);\n\n                if (lumLeft < currLum) {\n                  colOut = colLeft;\n                  currLum = lumLeft;\n                }\n                if (lumRight < currLum) {\n                  colOut = colRight;\n                  currLum = lumRight;\n                }\n                if (lumUp < currLum) {\n                  colOut = colUp;\n                  currLum = lumUp;\n                }\n                if (lumDown < currLum) {\n                  colOut = colDown;\n                  currLum = lumDown;\n                }\n\n                out[currIdx++] = colOut;\n              }\n            }\n            Filters._setPixels(pixels, out);\n          };\n\n          // BLUR\n\n          // internal kernel stuff for the gaussian blur filter\n          var blurRadius;\n          var blurKernelSize;\n          var blurKernel;\n          var blurMult;\n\n          /*\n               * Port of https://github.com/processing/processing/blob/\n               * main/core/src/processing/core/PImage.java#L1250\n               *\n               * Optimized code for building the blur kernel.\n               * further optimized blur code (approx. 15% for radius=20)\n               * bigger speed gains for larger radii (~30%)\n               * added support for various image types (ALPHA, RGB, ARGB)\n               * [toxi 050728]\n               */\n          function buildBlurKernel(r) {\n            var radius = (r * 3.5) | 0;\n            radius = radius < 1 ? 1 : radius < 248 ? radius : 248;\n\n            if (blurRadius !== radius) {\n              blurRadius = radius;\n              blurKernelSize = (1 + blurRadius) << 1;\n              blurKernel = new Int32Array(blurKernelSize);\n              blurMult = new Array(blurKernelSize);\n              for (var l = 0; l < blurKernelSize; l++) {\n                blurMult[l] = new Int32Array(256);\n              }\n\n              var bk, bki;\n              var bm, bmi;\n\n              for (var i = 1, radiusi = radius - 1; i < radius; i++) {\n                blurKernel[radius + i] = blurKernel[radiusi] = bki = radiusi * radiusi;\n                bm = blurMult[radius + i];\n                bmi = blurMult[radiusi--];\n                for (var j = 0; j < 256; j++) {\n                  bm[j] = bmi[j] = bki * j;\n                }\n              }\n              bk = blurKernel[radius] = radius * radius;\n              bm = blurMult[radius];\n\n              for (var k = 0; k < 256; k++) {\n                bm[k] = bk * k;\n              }\n            }\n          }\n\n          // Port of https://github.com/processing/processing/blob/\n          // main/core/src/processing/core/PImage.java#L1433\n          function blurARGB(canvas, radius) {\n            var pixels = Filters._toPixels(canvas);\n            var width = canvas.width;\n            var height = canvas.height;\n            var numPackedPixels = width * height;\n            var argb = new Int32Array(numPackedPixels);\n            for (var j = 0; j < numPackedPixels; j++) {\n              argb[j] = Filters._getARGB(pixels, j);\n            }\n            var sum, cr, cg, cb, ca;\n            var read, ri, ym, ymi, bk0;\n            var a2 = new Int32Array(numPackedPixels);\n            var r2 = new Int32Array(numPackedPixels);\n            var g2 = new Int32Array(numPackedPixels);\n            var b2 = new Int32Array(numPackedPixels);\n            var yi = 0;\n            buildBlurKernel(radius);\n            var x, y, i;\n            var bm;\n            for (y = 0; y < height; y++) {\n              for (x = 0; x < width; x++) {\n                cb = cg = cr = ca = sum = 0;\n                read = x - blurRadius;\n                if (read < 0) {\n                  bk0 = -read;\n                  read = 0;\n                } else {\n                  if (read >= width) {\n                    break;\n                  }\n                  bk0 = 0;\n                }\n                for (i = bk0; i < blurKernelSize; i++) {\n                  if (read >= width) {\n                    break;\n                  }\n                  var c = argb[read + yi];\n                  bm = blurMult[i];\n                  ca += bm[(c & -16777216) >>> 24];\n                  cr += bm[(c & 16711680) >> 16];\n                  cg += bm[(c & 65280) >> 8];\n                  cb += bm[c & 255];\n                  sum += blurKernel[i];\n                  read++;\n                }\n                ri = yi + x;\n                a2[ri] = ca / sum;\n                r2[ri] = cr / sum;\n                g2[ri] = cg / sum;\n                b2[ri] = cb / sum;\n              }\n              yi += width;\n            }\n            yi = 0;\n            ym = -blurRadius;\n            ymi = ym * width;\n            for (y = 0; y < height; y++) {\n              for (x = 0; x < width; x++) {\n                cb = cg = cr = ca = sum = 0;\n                if (ym < 0) {\n                  bk0 = ri = -ym;\n                  read = x;\n                } else {\n                  if (ym >= height) {\n                    break;\n                  }\n                  bk0 = 0;\n                  ri = ym;\n                  read = x + ymi;\n                }\n                for (i = bk0; i < blurKernelSize; i++) {\n                  if (ri >= height) {\n                    break;\n                  }\n                  bm = blurMult[i];\n                  ca += bm[a2[read]];\n                  cr += bm[r2[read]];\n                  cg += bm[g2[read]];\n                  cb += bm[b2[read]];\n                  sum += blurKernel[i];\n                  ri++;\n                  read += width;\n                }\n                argb[x + yi] =\n                  ((ca / sum) << 24) | ((cr / sum) << 16) | ((cg / sum) << 8) | (cb / sum);\n              }\n              yi += width;\n              ymi += width;\n              ym++;\n            }\n            Filters._setPixels(pixels, argb);\n          }\n\n          Filters.blur = function(canvas, radius) {\n            blurARGB(canvas, radius);\n          };\n          var _default = Filters;\n          exports.default = _default;\n        },\n        {}\n      ],\n      81: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var _omggif = _interopRequireDefault(_dereq_('omggif'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _toConsumableArray(arr) {\n            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n          }\n          function _nonIterableSpread() {\n            throw new TypeError('Invalid attempt to spread non-iterable instance');\n          }\n          function _iterableToArray(iter) {\n            if (\n              Symbol.iterator in Object(iter) ||\n              Object.prototype.toString.call(iter) === '[object Arguments]'\n            )\n              return Array.from(iter);\n          }\n          function _arrayWithoutHoles(arr) {\n            if (Array.isArray(arr)) {\n              for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n                arr2[i] = arr[i];\n              }\n              return arr2;\n            }\n          }\n\n          /**\n           * Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a\n           * fresh buffer of pixels to play with. Set the size of the buffer with the\n           * width and height parameters.\n           *\n           * .<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels\n           * in the display window.\n           * These values are numbers. This array is the size (including an appropriate\n           * factor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\n           * representing the R, G, B, A values in order for each pixel, moving from\n           * left to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for\n           * more info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.\n           *\n           * Before accessing the pixels of an image, the data must loaded with the\n           * <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the\n           * <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes.\n           *\n           * @method createImage\n           * @param  {Integer} width  width in pixels\n           * @param  {Integer} height height in pixels\n           * @return {p5.Image}       the <a href=\"#/p5.Image\">p5.Image</a> object\n           * @example\n           * <div>\n           * <code>\n           * let img = createImage(66, 66);\n           * img.loadPixels();\n           * for (let i = 0; i < img.width; i++) {\n           *   for (let j = 0; j < img.height; j++) {\n           *     img.set(i, j, color(0, 90, 102));\n           *   }\n           * }\n           * img.updatePixels();\n           * image(img, 17, 17);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img = createImage(66, 66);\n           * img.loadPixels();\n           * for (let i = 0; i < img.width; i++) {\n           *   for (let j = 0; j < img.height; j++) {\n           *     img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n           *   }\n           * }\n           * img.updatePixels();\n           * image(img, 17, 17);\n           * image(img, 34, 34);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let pink = color(255, 102, 204);\n           * let img = createImage(66, 66);\n           * img.loadPixels();\n           * let d = pixelDensity();\n           * let halfImage = 4 * (img.width * d) * (img.height / 2 * d);\n           * for (let i = 0; i < halfImage; i += 4) {\n           *   img.pixels[i] = red(pink);\n           *   img.pixels[i + 1] = green(pink);\n           *   img.pixels[i + 2] = blue(pink);\n           *   img.pixels[i + 3] = alpha(pink);\n           * }\n           * img.updatePixels();\n           * image(img, 17, 17);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 66x66 dark turquoise rect in center of canvas.\n           * 2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas\n           * no image displayed\n           */\n          _main.default.prototype.createImage = function(width, height) {\n            _main.default._validateParameters('createImage', arguments);\n            return new _main.default.Image(width, height);\n          };\n\n          /**\n           *  Save the current canvas as an image. The browser will either save the\n           *  file immediately, or prompt the user with a dialogue window.\n           *\n           *  @method saveCanvas\n           *  @param  {p5.Element|HTMLCanvasElement} selectedCanvas   a variable\n           *                                  representing a specific html5 canvas (optional)\n           *  @param  {String} [filename]\n           *  @param  {String} [extension]      'jpg' or 'png'\n           *\n           *  @example\n           * <div class='norender notest'><code>\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(255, 0, 0);\n           *   saveCanvas(c, 'myCanvas', 'jpg');\n           * }\n           * </code></div>\n           * <div class='norender notest'><code>\n           * // note that this example has the same result as above\n           * // if no canvas is specified, defaults to main canvas\n           * function setup() {\n           *   let c = createCanvas(100, 100);\n           *   background(255, 0, 0);\n           *   saveCanvas('myCanvas', 'jpg');\n           *\n           *   // all of the following are valid\n           *   saveCanvas(c, 'myCanvas', 'jpg');\n           *   saveCanvas(c, 'myCanvas.jpg');\n           *   saveCanvas(c, 'myCanvas');\n           *   saveCanvas(c);\n           *   saveCanvas('myCanvas', 'png');\n           *   saveCanvas('myCanvas');\n           *   saveCanvas();\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           * no image displayed\n           * no image displayed\n           */\n          /**\n           *  @method saveCanvas\n           *  @param  {String} [filename]\n           *  @param  {String} [extension]\n           */\n          _main.default.prototype.saveCanvas = function() {\n            _main.default._validateParameters('saveCanvas', arguments);\n\n            // copy arguments to array\n            var args = [].slice.call(arguments);\n            var htmlCanvas, filename, extension;\n\n            if (arguments[0] instanceof HTMLCanvasElement) {\n              htmlCanvas = arguments[0];\n              args.shift();\n            } else if (arguments[0] instanceof _main.default.Element) {\n              htmlCanvas = arguments[0].elt;\n              args.shift();\n            } else {\n              htmlCanvas = this._curElement && this._curElement.elt;\n            }\n\n            if (args.length >= 1) {\n              filename = args[0];\n            }\n            if (args.length >= 2) {\n              extension = args[1];\n            }\n\n            extension =\n              extension ||\n              _main.default.prototype._checkFileExtension(filename, extension)[1] ||\n              'png';\n\n            var mimeType;\n            switch (extension) {\n              default:\n                //case 'png':\n                mimeType = 'image/png';\n                break;\n              case 'jpeg':\n              case 'jpg':\n                mimeType = 'image/jpeg';\n                break;\n            }\n\n            htmlCanvas.toBlob(function(blob) {\n              _main.default.prototype.downloadFile(blob, filename, extension);\n            }, mimeType);\n          };\n\n          _main.default.prototype.saveGif = function(pImg, filename) {\n            var props = pImg.gifProperties;\n\n            //convert loopLimit back into Netscape Block formatting\n            var loopLimit = props.loopLimit;\n            if (loopLimit === 1) {\n              loopLimit = null;\n            } else if (loopLimit === null) {\n              loopLimit = 0;\n            }\n            var buffer = new Uint8Array(pImg.width * pImg.height * props.numFrames);\n\n            var allFramesPixelColors = [];\n\n            // Used to determine the occurrence of unique palettes and the frames\n            // which use them\n            var paletteFreqsAndFrames = {};\n\n            // Pass 1:\n            //loop over frames and get the frequency of each palette\n            for (var i = 0; i < props.numFrames; i++) {\n              var paletteSet = new Set();\n              var data = props.frames[i].image.data;\n              var dataLength = data.length;\n              // The color for each pixel in this frame ( for easier lookup later )\n              var pixelColors = new Uint32Array(pImg.width * pImg.height);\n              for (var j = 0, k = 0; j < dataLength; j += 4, k++) {\n                var r = data[j + 0];\n                var g = data[j + 1];\n                var b = data[j + 2];\n                var color = (r << 16) | (g << 8) | (b << 0);\n                paletteSet.add(color);\n\n                // What color does this pixel have in this frame ?\n                pixelColors[k] = color;\n              }\n\n              // A way to put use the entire palette as an object key\n              var paletteStr = _toConsumableArray(paletteSet)\n                .sort()\n                .toString();\n              if (paletteFreqsAndFrames[paletteStr] === undefined) {\n                paletteFreqsAndFrames[paletteStr] = { freq: 1, frames: [i] };\n              } else {\n                paletteFreqsAndFrames[paletteStr].freq += 1;\n                paletteFreqsAndFrames[paletteStr].frames.push(i);\n              }\n\n              allFramesPixelColors.push(pixelColors);\n            }\n\n            var framesUsingGlobalPalette = [];\n\n            // Now to build the global palette\n            // Sort all the unique palettes in descending order of their occurence\n            var palettesSortedByFreq = Object.keys(paletteFreqsAndFrames).sort(function(\n              a,\n              b\n            ) {\n              return paletteFreqsAndFrames[b].freq - paletteFreqsAndFrames[a].freq;\n            });\n\n            // The initial global palette is the one with the most occurence\n            var globalPalette = palettesSortedByFreq[0].split(',').map(function(a) {\n              return parseInt(a);\n            });\n\n            framesUsingGlobalPalette = framesUsingGlobalPalette.concat(\n              paletteFreqsAndFrames[globalPalette].frames\n            );\n\n            var globalPaletteSet = new Set(globalPalette);\n\n            // Build a more complete global palette\n            // Iterate over the remaining palettes in the order of\n            // their occurence and see if the colors in this palette which are\n            // not in the global palette can be added there, while keeping the length\n            // of the global palette <= 256\n            for (var _i = 1; _i < palettesSortedByFreq.length; _i++) {\n              var palette = palettesSortedByFreq[_i].split(',').map(function(a) {\n                return parseInt(a);\n              });\n\n              var difference = palette.filter(function(x) {\n                return !globalPaletteSet.has(x);\n              });\n              if (globalPalette.length + difference.length <= 256) {\n                for (var _j = 0; _j < difference.length; _j++) {\n                  globalPalette.push(difference[_j]);\n                  globalPaletteSet.add(difference[_j]);\n                }\n\n                // All frames using this palette now use the global palette\n                framesUsingGlobalPalette = framesUsingGlobalPalette.concat(\n                  paletteFreqsAndFrames[palettesSortedByFreq[_i]].frames\n                );\n              }\n            }\n\n            framesUsingGlobalPalette = new Set(framesUsingGlobalPalette);\n\n            // Build a lookup table of the index of each color in the global palette\n            // Maps a color to its index\n            var globalIndicesLookup = {};\n            for (var _i2 = 0; _i2 < globalPalette.length; _i2++) {\n              if (!globalIndicesLookup[globalPalette[_i2]]) {\n                globalIndicesLookup[globalPalette[_i2]] = _i2;\n              }\n            }\n\n            // force palette to be power of 2\n            var powof2 = 1;\n            while (powof2 < globalPalette.length) {\n              powof2 <<= 1;\n            }\n            globalPalette.length = powof2;\n\n            // global opts\n            var opts = {\n              loop: loopLimit,\n              palette: new Uint32Array(globalPalette)\n            };\n\n            var gifWriter = new _omggif.default.GifWriter(\n              buffer,\n              pImg.width,\n              pImg.height,\n              opts\n            );\n            var previousFrame = {};\n\n            // Pass 2\n            // Determine if the frame needs a local palette\n            // Also apply transparency optimization. This function will often blow up\n            // the size of a GIF if not for transparency. If a pixel in one frame has\n            // the same color in the previous frame, that pixel can be marked as\n            // transparent. We decide one particular color as transparent and make all\n            // transparent pixels take this color. This helps in later in compression.\n            var _loop = function _loop(_i3) {\n              var localPaletteRequired = !framesUsingGlobalPalette.has(_i3);\n              var palette = localPaletteRequired ? [] : globalPalette;\n              var pixelPaletteIndex = new Uint8Array(pImg.width * pImg.height);\n\n              // Lookup table mapping color to its indices\n              var colorIndicesLookup = {};\n\n              // All the colors that cannot be marked transparent in this frame\n              var cannotBeTransparent = new Set();\n\n              for (var _k = 0; _k < allFramesPixelColors[_i3].length; _k++) {\n                var _color = allFramesPixelColors[_i3][_k];\n                if (localPaletteRequired) {\n                  if (colorIndicesLookup[_color] === undefined) {\n                    colorIndicesLookup[_color] = palette.length;\n                    palette.push(_color);\n                  }\n                  pixelPaletteIndex[_k] = colorIndicesLookup[_color];\n                } else {\n                  pixelPaletteIndex[_k] = globalIndicesLookup[_color];\n                }\n\n                if (_i3 > 0) {\n                  // If even one pixel of this color has changed in this frame\n                  // from the previous frame, we cannot mark it as transparent\n                  if (allFramesPixelColors[_i3 - 1][_k] !== _color) {\n                    cannotBeTransparent.add(_color);\n                  }\n                }\n              }\n\n              var frameOpts = {};\n\n              // Transparency optimization\n              var canBeTransparent = palette.filter(function(a) {\n                return !cannotBeTransparent.has(a);\n              });\n              if (canBeTransparent.length > 0) {\n                // Select a color to mark as transparent\n                var transparent = canBeTransparent[0];\n                var transparentIndex = localPaletteRequired\n                  ? colorIndicesLookup[transparent]\n                  : globalIndicesLookup[transparent];\n                if (_i3 > 0) {\n                  for (var _k2 = 0; _k2 < allFramesPixelColors[_i3].length; _k2++) {\n                    // If this pixel in this frame has the same color in previous frame\n                    if (\n                      allFramesPixelColors[_i3 - 1][_k2] === allFramesPixelColors[_i3][_k2]\n                    ) {\n                      pixelPaletteIndex[_k2] = transparentIndex;\n                    }\n                  }\n                  frameOpts.transparent = transparentIndex;\n                  // If this frame has any transparency, do not dispose the previous frame\n                  previousFrame.frameOpts.disposal = 1;\n                }\n              }\n              frameOpts.delay = props.frames[_i3].delay / 10; // Move timing back into GIF formatting\n              if (localPaletteRequired) {\n                // force palette to be power of 2\n                var _powof = 1;\n                while (_powof < palette.length) {\n                  _powof <<= 1;\n                }\n                palette.length = _powof;\n                frameOpts.palette = new Uint32Array(palette);\n              }\n              if (_i3 > 0) {\n                // add the frame that came before the current one\n                gifWriter.addFrame(\n                  0,\n                  0,\n                  pImg.width,\n                  pImg.height,\n                  previousFrame.pixelPaletteIndex,\n                  previousFrame.frameOpts\n                );\n              }\n              // previous frame object should now have details of this frame\n              previousFrame = {\n                pixelPaletteIndex: pixelPaletteIndex,\n                frameOpts: frameOpts\n              };\n            };\n            for (var _i3 = 0; _i3 < props.numFrames; _i3++) {\n              _loop(_i3);\n            }\n\n            previousFrame.frameOpts.disposal = 1;\n            // add the last frame\n            gifWriter.addFrame(\n              0,\n              0,\n              pImg.width,\n              pImg.height,\n              previousFrame.pixelPaletteIndex,\n              previousFrame.frameOpts\n            );\n\n            var extension = 'gif';\n            var blob = new Blob([buffer.slice(0, gifWriter.end())], {\n              type: 'image/gif'\n            });\n\n            _main.default.prototype.downloadFile(blob, filename, extension);\n          };\n\n          /**\n    *  Capture a sequence of frames that can be used to create a movie.\n    *  Accepts a callback. For example, you may wish to send the frames\n    *  to a server where they can be stored or converted into a movie.\n    *  If no callback is provided, the browser will pop up save dialogues in an\n    *  attempt to download all of the images that have just been created. With the\n    *  callback provided the image data isn't saved by default but instead passed\n    *  as an argument to the callback function as an array of objects, with the\n    *  size of array equal to the total number of frames.\n    *\n    *  Note that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation.\n    *  To export longer animations, you might look into a library like\n    *  <a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>.\n    *\n    *  @method saveFrames\n    *  @param  {String}   filename\n    *  @param  {String}   extension 'jpg' or 'png'\n    *  @param  {Number}   duration  Duration in seconds to save the frames for.\n    *  @param  {Number}   framerate  Framerate to save the frames in.\n    *  @param  {function(Array)} [callback] A callback function that will be executed\n                                     to handle the image data. This function\n                                     should accept an array as argument. The\n                                     array will contain the specified number of\n                                     frames of objects. Each object has three\n                                     properties: imageData - an\n                                     image/octet-stream, filename and extension.\n    *  @example\n    *  <div><code>\n    * function draw() {\n    *   background(mouseX);\n    * }\n    *\n    * function mousePressed() {\n    *   saveFrames('out', 'png', 1, 25, data => {\n    *     print(data);\n    *   });\n    * }\n   </code></div>\n    *\n    * @alt\n    * canvas background goes from light to dark with mouse x.\n    */\n          _main.default.prototype.saveFrames = function(\n            fName,\n            ext,\n            _duration,\n            _fps,\n            callback\n          ) {\n            _main.default._validateParameters('saveFrames', arguments);\n            var duration = _duration || 3;\n            duration = _main.default.prototype.constrain(duration, 0, 15);\n            duration = duration * 1000;\n            var fps = _fps || 15;\n            fps = _main.default.prototype.constrain(fps, 0, 22);\n            var count = 0;\n\n            var makeFrame = _main.default.prototype._makeFrame;\n            var cnv = this._curElement.elt;\n            var frames = [];\n            var frameFactory = setInterval(function() {\n              frames.push(makeFrame(fName + count, ext, cnv));\n              count++;\n            }, 1000 / fps);\n\n            setTimeout(function() {\n              clearInterval(frameFactory);\n              if (callback) {\n                callback(frames);\n              } else {\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n                try {\n                  for (\n                    var _iterator = frames[Symbol.iterator](), _step;\n                    !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                    _iteratorNormalCompletion = true\n                  ) {\n                    var f = _step.value;\n                    _main.default.prototype.downloadFile(f.imageData, f.filename, f.ext);\n                  }\n                } catch (err) {\n                  _didIteratorError = true;\n                  _iteratorError = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                      _iterator.return();\n                    }\n                  } finally {\n                    if (_didIteratorError) {\n                      throw _iteratorError;\n                    }\n                  }\n                }\n              }\n              frames = []; // clear frames\n            }, duration + 0.01);\n          };\n\n          _main.default.prototype._makeFrame = function(filename, extension, _cnv) {\n            var cnv;\n            if (this) {\n              cnv = this._curElement.elt;\n            } else {\n              cnv = _cnv;\n            }\n            var mimeType;\n            if (!extension) {\n              extension = 'png';\n              mimeType = 'image/png';\n            } else {\n              switch (extension.toLowerCase()) {\n                case 'png':\n                  mimeType = 'image/png';\n                  break;\n                case 'jpeg':\n                  mimeType = 'image/jpeg';\n                  break;\n                case 'jpg':\n                  mimeType = 'image/jpeg';\n                  break;\n                default:\n                  mimeType = 'image/png';\n                  break;\n              }\n            }\n            var downloadMime = 'image/octet-stream';\n            var imageData = cnv.toDataURL(mimeType);\n            imageData = imageData.replace(mimeType, downloadMime);\n\n            var thisFrame = {};\n            thisFrame.imageData = imageData;\n            thisFrame.filename = filename;\n            thisFrame.ext = extension;\n            return thisFrame;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59, omggif: 33 }\n      ],\n      82: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var _filters = _interopRequireDefault(_dereq_('./filters'));\n          var _helpers = _interopRequireDefault(_dereq_('../core/helpers'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          var _omggif = _interopRequireDefault(_dereq_('omggif'));\n\n          _dereq_('../core/friendly_errors/validate_params');\n          _dereq_('../core/friendly_errors/file_errors');\n          _dereq_('../core/friendly_errors/fes_core');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Image\n           * @submodule Loading & Displaying\n           * @for p5\n           * @requires core\n           */ /**\noads an image from a path and creates a <a href=\"#/p5.Image\">p5.Image</a> from it.\nnhe image may not be immediately available for rendering.\nf you want to ensure that the image is ready before doing\nanything with it, place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>.\nou may also supply a callback function to handle the image when it's ready.\nnhe path to the image should be relative to the HTML file\nthat links in your sketch. Loading an image from a URL or other\nremote location may be blocked due to your browser's built-in\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * security.\nnou can also pass in a string of a base64 encoded image as an alternative to the file path.\nemember to add \"data:image/png;base64,\" in front of the string.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *\nmethod loadImage\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * @param  {String} path Path of the image to be loaded\nparam  {function(p5.Image)} [successCallback] Function to be called once\nthe image is loaded. Will be passed the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *                                <a href=\"#/p5.Image\">p5.Image</a>.\nparam  {function(Event)}    [failureCallback] called with event error if\nthe image fails to load.\nreturn {p5.Image}             the <a href=\"#/p5.Image\">p5.Image</a> object\nexample\ndiv>\ncode>\nlet img;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * function preload() {\nimg = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\nimage(img, 0, 0);\n}\ncode>\ndiv>\ndiv>\ncode>\nfunction setup() {\nhere we use a callback to display the image after loading\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *   loadImage('assets/laDefense.jpg', img => {\nimage(img, 0, 0);\n});\n}\ncode>\ndiv>\nnalt\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * image of the underside of a white umbrella and grided ceililng above\nimage of the underside of a white umbrella and grided ceililng above\nmain.default.prototype.loadImage = function(\n            path,\n            successCallback,\n            failureCallback\n          ) {\n            _main.default._validateParameters('loadImage', arguments);\n            var pImg = new _main.default.Image(1, 1, this);\n            var self = this;\n\n            var req = new Request(path, {\n              method: 'GET',\n              mode: 'cors'\n            });\n\n            fetch(path, req).then(function(response) {\n              // GIF section\n              var contentType = response.headers.get('content-type');\n              if (contentType === null) {\n                console.warn(\n                  'The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset.'\n                );\n              }\n              if (contentType && contentType.includes('image/gif')) {\n                response.arrayBuffer().then(\n                  function(arrayBuffer) {\n                    if (arrayBuffer) {\n                      var byteArray = new Uint8Array(arrayBuffer);\n                      _createGif(\n                        byteArray,\n                        pImg,\n                        successCallback,\n                        failureCallback,\n                        function(pImg) {\n                          self._decrementPreload();\n                        }.bind(self)\n                      );\n                    }\n                  },\n                  function(e) {\n                    if (typeof failureCallback === 'function') {\n                      failureCallback(e);\n                    } else {\n                      console.error(e);\n                    }\n                  }\n                );\n              } else {\n                // Non-GIF Section\n                var img = new Image();\n\n                img.onload = function() {\n                  pImg.width = pImg.canvas.width = img.width;\n                  pImg.height = pImg.canvas.height = img.height;\n\n                  // Draw the image into the backing canvas of the p5.Image\n                  pImg.drawingContext.drawImage(img, 0, 0);\n                  pImg.modified = true;\n                  if (typeof successCallback === 'function') {\n                    successCallback(pImg);\n                  }\n                  self._decrementPreload();\n                };\n\n                img.onerror = function(e) {\n                  _main.default._friendlyFileLoadError(0, img.src);\n                  if (typeof failureCallback === 'function') {\n                    failureCallback(e);\n                  } else {\n                    console.error(e);\n                  }\n                };\n\n                // Set crossOrigin in case image is served with CORS headers.\n                // This will let us draw to the canvas without tainting it.\n                // See https://developer.mozilla.org/en-US/docs/HTML/CORS_Enabled_Image\n                // When using data-uris the file will be loaded locally\n                // so we don't need to worry about crossOrigin with base64 file types.\n                if (path.indexOf('data:image/') !== 0) {\n                  img.crossOrigin = 'Anonymous';\n                }\n                // start loading the image\n                img.src = path;\n              }\n              pImg.modified = true;\n            });\n            return pImg;\n          };\n\n          /**\n           * Helper function for loading GIF-based images\n           */\n          function _createGif(\n            arrayBuffer,\n            pImg,\n            successCallback,\n            failureCallback,\n            finishCallback\n          ) {\n            var gifReader = new _omggif.default.GifReader(arrayBuffer);\n            pImg.width = pImg.canvas.width = gifReader.width;\n            pImg.height = pImg.canvas.height = gifReader.height;\n            var frames = [];\n            var numFrames = gifReader.numFrames();\n            var framePixels = new Uint8ClampedArray(pImg.width * pImg.height * 4);\n            if (numFrames > 1) {\n              var loadGIFFrameIntoImage = function loadGIFFrameIntoImage(\n                frameNum,\n                gifReader\n              ) {\n                try {\n                  gifReader.decodeAndBlitFrameRGBA(frameNum, framePixels);\n                } catch (e) {\n                  _main.default._friendlyFileLoadError(8, pImg.src);\n                  if (typeof failureCallback === 'function') {\n                    failureCallback(e);\n                  } else {\n                    console.error(e);\n                  }\n                }\n              };\n              for (var j = 0; j < numFrames; j++) {\n                var frameInfo = gifReader.frameInfo(j);\n                // Some GIFs are encoded so that they expect the previous frame\n                // to be under the current frame. This can occur at a sub-frame level\n                // There are possible disposal codes but I didn't encounter any\n                if (gifReader.frameInfo(j).disposal === 1 && j > 0) {\n                  pImg.drawingContext.putImageData(frames[j - 1].image, 0, 0);\n                } else {\n                  pImg.drawingContext.clearRect(0, 0, pImg.width, pImg.height);\n                  framePixels = new Uint8ClampedArray(pImg.width * pImg.height * 4);\n                }\n                loadGIFFrameIntoImage(j, gifReader);\n                var imageData = new ImageData(framePixels, pImg.width, pImg.height);\n                pImg.drawingContext.putImageData(imageData, 0, 0);\n                frames.push({\n                  image: pImg.drawingContext.getImageData(0, 0, pImg.width, pImg.height),\n                  delay: frameInfo.delay * 10 //GIF stores delay in one-hundredth of a second, shift to ms\n                });\n              }\n\n              //Uses Netscape block encoding\n              //to repeat forever, this will be 0\n              //to repeat just once, this will be null\n              //to repeat N times (1<N), should contain integer for loop number\n              //this is changed to more usable values for us\n              //to repeat forever, loopCount = null\n              //everything else is just the number of loops\n              var loopLimit = gifReader.loopCount();\n              if (loopLimit === null) {\n                loopLimit = 1;\n              } else if (loopLimit === 0) {\n                loopLimit = null;\n              }\n\n              // we used the pImg for painting and saving during load\n              // so we have to reset it to the first frame\n              pImg.drawingContext.putImageData(frames[0].image, 0, 0);\n\n              pImg.gifProperties = {\n                displayIndex: 0,\n                loopLimit: loopLimit,\n                loopCount: 0,\n                frames: frames,\n                numFrames: numFrames,\n                playing: true,\n                timeDisplayed: 0,\n                lastChangeTime: 0\n              };\n            }\n\n            if (typeof successCallback === 'function') {\n              successCallback(pImg);\n            }\n            finishCallback();\n          }\n\n          /**\n           * Validates clipping params. Per drawImage spec sWidth and sHight cannot be\n           * negative or greater than image intrinsic width and height\n           * @private\n           * @param {Number} sVal\n           * @param {Number} iVal\n           * @returns {Number}\n           * @private\n           */\n          function _sAssign(sVal, iVal) {\n            if (sVal > 0 && sVal < iVal) {\n              return sVal;\n            } else {\n              return iVal;\n            }\n          }\n\n          /**\n           * Draw an image to the p5.js canvas.\n           *\n           * This function can be used with different numbers of parameters. The\n           * simplest use requires only three parameters: img, x, and y—where (x, y) is\n           * the position of the image. Two more parameters can optionally be added to\n           * specify the width and height of the image.\n           *\n           * This function can also be used with all eight Number parameters. To\n           * differentiate between all these parameters, p5.js uses the language of\n           * \"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source\n           * image\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the\n           * \"source image\" dimensions can be useful when you want to display a\n           * subsection of the source image instead of the whole thing. Here's a diagram\n           * to explain further:\n           * <img src=\"assets/drawImage.png\"></img>\n           *\n           * @method image\n           * @param  {p5.Image|p5.Element} img    the image to display\n           * @param  {Number}   x     the x-coordinate of the top-left corner of the image\n           * @param  {Number}   y     the y-coordinate of the top-left corner of the image\n           * @param  {Number}   [width]  the width to draw the image\n           * @param  {Number}   [height] the height to draw the image\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   // Top-left corner of the img is at (0, 0)\n           *   // Width and height are the img's original width and height\n           *   image(img, 0, 0);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   background(50);\n           *   // Top-left corner of the img is at (10, 10)\n           *   // Width and height are 50 x 50\n           *   image(img, 10, 10, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function setup() {\n           *   // Here, we use a callback to display the image after loading\n           *   loadImage('assets/laDefense.jpg', img => {\n           *     image(img, 0, 0);\n           *   });\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/gradient.png');\n           * }\n           * function setup() {\n           *   // 1. Background image\n           *   // Top-left corner of the img is at (0, 0)\n           *   // Width and height are the img's original width and height, 100 x 100\n           *   image(img, 0, 0);\n           *   // 2. Top right image\n           *   // Top-left corner of destination rectangle is at (50, 0)\n           *   // Destination rectangle width and height are 40 x 20\n           *   // The next parameters are relative to the source image:\n           *   // - Starting at position (50, 50) on the source image, capture a 50 x 50\n           *   // subsection\n           *   // - Draw this subsection to fill the dimensions of the destination rectangle\n           *   image(img, 50, 0, 40, 20, 50, 50, 50, 50);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * image of the underside of a white umbrella and gridded ceiling above\n           * image of the underside of a white umbrella and gridded ceiling above\n           */\n          /**\n           * @method image\n           * @param  {p5.Image|p5.Element} img\n           * @param  {Number}   dx     the x-coordinate of the destination\n           *                           rectangle in which to draw the source image\n           * @param  {Number}   dy     the y-coordinate of the destination\n           *                           rectangle in which to draw the source image\n           * @param  {Number}   dWidth  the width of the destination rectangle\n           * @param  {Number}   dHeight the height of the destination rectangle\n           * @param  {Number}   sx     the x-coordinate of the subsection of the source\n           * image to draw into the destination rectangle\n           * @param  {Number}   sy     the y-coordinate of the subsection of the source\n           * image to draw into the destination rectangle\n           * @param {Number}    [sWidth] the width of the subsection of the\n           *                           source image to draw into the destination\n           *                           rectangle\n           * @param {Number}    [sHeight] the height of the subsection of the\n           *                            source image to draw into the destination rectangle\n           */\n          _main.default.prototype.image = function(\n            img,\n            dx,\n            dy,\n            dWidth,\n            dHeight,\n            sx,\n            sy,\n            sWidth,\n            sHeight\n          ) {\n            // set defaults per spec: https://goo.gl/3ykfOq\n\n            _main.default._validateParameters('image', arguments);\n\n            var defW = img.width;\n            var defH = img.height;\n\n            if (img.elt && img.elt.videoWidth && !img.canvas) {\n              // video no canvas\n              defW = img.elt.videoWidth;\n              defH = img.elt.videoHeight;\n            }\n\n            var _dx = dx;\n            var _dy = dy;\n            var _dw = dWidth || defW;\n            var _dh = dHeight || defH;\n            var _sx = sx || 0;\n            var _sy = sy || 0;\n            var _sw = sWidth || defW;\n            var _sh = sHeight || defH;\n\n            _sw = _sAssign(_sw, defW);\n            _sh = _sAssign(_sh, defH);\n\n            // This part needs cleanup and unit tests\n            // see issues https://github.com/processing/p5.js/issues/1741\n            // and https://github.com/processing/p5.js/issues/1673\n            var pd = 1;\n\n            if (img.elt && !img.canvas && img.elt.style.width) {\n              //if img is video and img.elt.size() has been used and\n              //no width passed to image()\n              if (img.elt.videoWidth && !dWidth) {\n                pd = img.elt.videoWidth;\n              } else {\n                //all other cases\n                pd = img.elt.width;\n              }\n              pd /= parseInt(img.elt.style.width, 10);\n            }\n\n            _sx *= pd;\n            _sy *= pd;\n            _sh *= pd;\n            _sw *= pd;\n\n            var vals = _helpers.default.modeAdjust(\n              _dx,\n              _dy,\n              _dw,\n              _dh,\n              this._renderer._imageMode\n            );\n\n            // tint the image if there is a tint\n            this._renderer.image(img, _sx, _sy, _sw, _sh, vals.x, vals.y, vals.w, vals.h);\n          };\n\n          /**\n           * Sets the fill value for displaying images. Images can be tinted to\n           * specified colors or made transparent by including an alpha value.\n           *\n           * To apply transparency to an image without affecting its color, use\n           * white as the tint color and specify an alpha value. For instance,\n           * tint(255, 128) will make an image 50% transparent (assuming the default\n           * alpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).\n           *\n           * The value for the gray parameter must be less than or equal to the current\n           * maximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is\n           * 255.\n           *\n           * @method tint\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           *\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   tint(0, 153, 204); // Tint blue\n           *   image(img, 50, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   tint(0, 153, 204, 126); // Tint blue and set transparency\n           *   image(img, 50, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   tint(255, 126); // Apply transparency without changing color\n           *   image(img, 50, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 side by side images of umbrella and ceiling, one image with blue tint\n           * Images of umbrella and ceiling, one half of image with blue tint\n           * 2 side by side images of umbrella and ceiling, one image translucent\n           */\n\n          /**\n           * @method tint\n           * @param  {String}        value   a color string\n           */\n\n          /**\n           * @method tint\n           * @param  {Number}        gray   a gray value\n           * @param  {Number}        [alpha]\n           */\n\n          /**\n           * @method tint\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           */\n\n          /**\n           * @method tint\n           * @param  {p5.Color}      color   the tint color\n           */\n          _main.default.prototype.tint = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('tint', args);\n            var c = this.color.apply(this, args);\n            this._renderer._tint = c.levels;\n          };\n\n          /**\n           * Removes the current fill value for displaying images and reverts to\n           * displaying images with their original hues.\n           *\n           * @method noTint\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   tint(0, 153, 204); // Tint blue\n           *   image(img, 0, 0);\n           *   noTint(); // Disable tint\n           *   image(img, 50, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 side by side images of bricks, left image with blue tint\n           */\n          _main.default.prototype.noTint = function() {\n            this._renderer._tint = null;\n          };\n\n          /**\n           * Apply the current tint color to the input image, return the resulting\n           * canvas.\n           *\n           * @private\n           * @param {p5.Image} The image to be tinted\n           * @return {canvas} The resulting tinted canvas\n           */\n          _main.default.prototype._getTintedImageCanvas = function(img) {\n            if (!img.canvas) {\n              return img;\n            }\n            var pixels = _filters.default._toPixels(img.canvas);\n            var tmpCanvas = document.createElement('canvas');\n            tmpCanvas.width = img.canvas.width;\n            tmpCanvas.height = img.canvas.height;\n            var tmpCtx = tmpCanvas.getContext('2d');\n            var id = tmpCtx.createImageData(img.canvas.width, img.canvas.height);\n            var newPixels = id.data;\n\n            for (var i = 0; i < pixels.length; i += 4) {\n              var r = pixels[i];\n              var g = pixels[i + 1];\n              var b = pixels[i + 2];\n              var a = pixels[i + 3];\n\n              newPixels[i] = r * this._renderer._tint[0] / 255;\n              newPixels[i + 1] = g * this._renderer._tint[1] / 255;\n              newPixels[i + 2] = b * this._renderer._tint[2] / 255;\n              newPixels[i + 3] = a * this._renderer._tint[3] / 255;\n            }\n\n            tmpCtx.putImageData(id, 0, 0);\n            return tmpCanvas;\n          };\n\n          /**\n           * Set image mode. Modifies the location from which images are drawn by\n           * changing the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted.\n           * The default mode is imageMode(CORNER), which interprets the second and\n           * third parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If\n           * two additional parameters are specified, they are used to set the image's\n           * width and height.\n           *\n           * imageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\n           * as the location of one corner, and the fourth and fifth parameters as the\n           * opposite corner.\n           *\n           * imageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\n           * as the image's center point. If two additional parameters are specified,\n           * they are used to set the image's width and height.\n           *\n           * @method imageMode\n           * @param {Constant} mode either CORNER, CORNERS, or CENTER\n           * @example\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   imageMode(CORNER);\n           *   image(img, 10, 10, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   imageMode(CORNERS);\n           *   image(img, 10, 10, 90, 40);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   imageMode(CENTER);\n           *   image(img, 50, 50, 80, 80);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * small square image of bricks\n           * horizontal rectangle image of bricks\n           * large square image of bricks\n           */\n          _main.default.prototype.imageMode = function(m) {\n            _main.default._validateParameters('imageMode', arguments);\n            if (\n              m === constants.CORNER ||\n              m === constants.CORNERS ||\n              m === constants.CENTER\n            ) {\n              this._renderer._imageMode = m;\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../core/constants': 48,\n          '../core/friendly_errors/fes_core': 51,\n          '../core/friendly_errors/file_errors': 52,\n          '../core/friendly_errors/validate_params': 54,\n          '../core/helpers': 55,\n          '../core/main': 59,\n          './filters': 80,\n          omggif: 33\n        }\n      ],\n      83: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var _filters = _interopRequireDefault(_dereq_('./filters'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Image\n           * @submodule Image\n           * @requires core\n           * @requires constants\n           * @requires filters\n           */ /**\n           * This module defines the <a href=\"#/p5.Image\">p5.Image</a> class and P5 methods for\n           * drawing images to the main display canvas.\n           */ /*\n                                                                                                                                                                   * Class methods\n                                                                                                                                                                   */ /**\n           * Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an\n           * image.\n           *\n           * p5 can display .gif, .jpg and .png images. Images may be displayed\n           * in 2D and 3D space. Before an image is used, it must be loaded with the\n           * <a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and\n           * height of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the\n           * values for every pixel in the image.\n           *\n           * The methods described below allow easy access to the image's pixels and\n           * alpha channel and simplify the process of compositing.\n           *\n           * Before using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on\n           * the image to make sure that the pixel data is properly loaded.\n           * @example\n           * <div><code>\n           * function setup() {\n           *   let img = createImage(100, 100); // same as new p5.Image(100, 100);\n           *   img.loadPixels();\n           *   createCanvas(100, 100);\n           *   background(0);\n           *\n           *   // helper for writing color to array\n           *   function writeColor(image, x, y, red, green, blue, alpha) {\n           *     let index = (x + y * width) * 4;\n           *     image.pixels[index] = red;\n           *     image.pixels[index + 1] = green;\n           *     image.pixels[index + 2] = blue;\n           *     image.pixels[index + 3] = alpha;\n           *   }\n           *\n           *   let x, y;\n           *   // fill with random colors\n           *   for (y = 0; y < img.height; y++) {\n           *     for (x = 0; x < img.width; x++) {\n           *       let red = random(255);\n           *       let green = random(255);\n           *       let blue = random(255);\n           *       let alpha = 255;\n           *       writeColor(img, x, y, red, green, blue, alpha);\n           *     }\n           *   }\n           *\n           *   // draw a red line\n           *   y = 0;\n           *   for (x = 0; x < img.width; x++) {\n           *     writeColor(img, x, y, 255, 0, 0, 255);\n           *   }\n           *\n           *   // draw a green line\n           *   y = img.height - 1;\n           *   for (x = 0; x < img.width; x++) {\n           *     writeColor(img, x, y, 0, 255, 0, 255);\n           *   }\n           *\n           *   img.updatePixels();\n           *   image(img, 0, 0);\n           * }\n           * </code></div>\n           *\n           * @class p5.Image\n           * @constructor\n           * @param {Number} width\n           * @param {Number} height\n           */ _main.default.Image = function(width, height) {\n            /**\n             * Image width.\n             * @property {Number} width\n             * @readOnly\n             * @example\n             * <div><code>\n             * let img;\n             * function preload() {\n             *   img = loadImage('assets/rockies.jpg');\n             * }\n             *\n             * function setup() {\n             *   createCanvas(100, 100);\n             *   image(img, 0, 0);\n             *   for (let i = 0; i < img.width; i++) {\n             *     let c = img.get(i, img.height / 2);\n             *     stroke(c);\n             *     line(i, height / 2, i, height);\n             *   }\n             * }\n             * </code></div>\n             *\n             * @alt\n             * rocky mountains in top and horizontal lines in corresponding colors in bottom.\n             *\n             */ this.width = width;\n            /**\n             * Image height.\n             * @property {Number} height\n             * @readOnly\n             * @example\n             * <div><code>\n             * let img;\n             * function preload() {\n             *   img = loadImage('assets/rockies.jpg');\n             * }\n             *\n             * function setup() {\n             *   createCanvas(100, 100);\n             *   image(img, 0, 0);\n             *   for (let i = 0; i < img.height; i++) {\n             *     let c = img.get(img.width / 2, i);\n             *     stroke(c);\n             *     line(0, i, width / 2, i);\n             *   }\n             * }\n             * </code></div>\n             *\n             * @alt\n             * rocky mountains on right and vertical lines in corresponding colors on left.\n             *\n             */ this.height = height;\n            this.canvas = document.createElement('canvas');\n            this.canvas.width = this.width;\n            this.canvas.height = this.height;\n            this.drawingContext = this.canvas.getContext('2d');\n            this._pixelsState = this;\n            this._pixelDensity = 1;\n            //Object for working with GIFs, defaults to null\n            this.gifProperties = null;\n            //For WebGL Texturing only: used to determine whether to reupload texture to GPU\n            this._modified = false;\n            /**\n             * Array containing the values for all the pixels in the display window.\n             * These values are numbers. This array is the size (include an appropriate\n             * factor for pixelDensity) of the display window x4,\n             * representing the R, G, B, A values in order for each pixel, moving from\n             * left to right across each row, then down each column. Retina and other\n             * high density displays may have more pixels (by a factor of\n             * pixelDensity^2).\n             * For example, if the image is 100x100 pixels, there will be 40,000. With\n             * pixelDensity = 2, there will be 160,000. The first four values\n             * (indices 0-3) in the array will be the R, G, B, A values of the pixel at\n             * (0, 0). The second four values (indices 4-7) will contain the R, G, B, A\n             * values of the pixel at (1, 0). More generally, to set values for a pixel\n             * at (x, y):\n             * ```javascript\n             * let d = pixelDensity();\n             * for (let i = 0; i < d; i++) {\n             *   for (let j = 0; j < d; j++) {\n             *     // loop over\n             *     index = 4 * ((y * d + j) * width * d + (x * d + i));\n             *     pixels[index] = r;\n             *     pixels[index+1] = g;\n             *     pixels[index+2] = b;\n             *     pixels[index+3] = a;\n             *   }\n             * }\n             * ```\n             *\n             * Before accessing this array, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a>\n             * function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>\n             * function must be run to update the changes.\n             * @property {Number[]} pixels\n             * @example\n             * <div>\n             * <code>\n             * let img = createImage(66, 66);\n             * img.loadPixels();\n             * for (let i = 0; i < img.width; i++) {\n             *   for (let j = 0; j < img.height; j++) {\n             *     img.set(i, j, color(0, 90, 102));\n             *   }\n             * }\n             * img.updatePixels();\n             * image(img, 17, 17);\n             * </code>\n             * </div>\n             * <div>\n             * <code>\n             * let pink = color(255, 102, 204);\n             * let img = createImage(66, 66);\n             * img.loadPixels();\n             * for (let i = 0; i < 4 * (width * height / 2); i += 4) {\n             *   img.pixels[i] = red(pink);\n             *   img.pixels[i + 1] = green(pink);\n             *   img.pixels[i + 2] = blue(pink);\n             *   img.pixels[i + 3] = alpha(pink);\n             * }\n             * img.updatePixels();\n             * image(img, 17, 17);\n             * </code>\n             * </div>\n             *\n             * @alt\n             * 66x66 turquoise rect in center of canvas\n             * 66x66 pink rect in center of canvas\n             *\n             */\n            this.pixels = [];\n          };\n\n          /**\n           * Helper function for animating GIF-based images with time\n           */\n          _main.default.Image.prototype._animateGif = function(pInst) {\n            var props = this.gifProperties;\n            var curTime = pInst._lastFrameTime + pInst.deltaTime;\n            if (props.lastChangeTime === 0) {\n              props.lastChangeTime = curTime;\n            }\n            if (props.playing) {\n              props.timeDisplayed = curTime - props.lastChangeTime;\n              var curDelay = props.frames[props.displayIndex].delay;\n              if (props.timeDisplayed >= curDelay) {\n                //GIF is bound to 'realtime' so can skip frames\n                var skips = Math.floor(props.timeDisplayed / curDelay);\n                props.timeDisplayed = 0;\n                props.lastChangeTime = curTime;\n                props.displayIndex += skips;\n                props.loopCount = Math.floor(props.displayIndex / props.numFrames);\n                if (props.loopLimit !== null && props.loopCount >= props.loopLimit) {\n                  props.playing = false;\n                } else {\n                  var ind = props.displayIndex % props.numFrames;\n                  this.drawingContext.putImageData(props.frames[ind].image, 0, 0);\n                  props.displayIndex = ind;\n                  this.setModified(true);\n                }\n              }\n            }\n          };\n\n          /**\n           * Helper fxn for sharing pixel methods\n           */\n          _main.default.Image.prototype._setProperty = function(prop, value) {\n            this[prop] = value;\n            this.setModified(true);\n          };\n\n          /**\n           * Loads the pixels data for this image into the [pixels] attribute.\n           *\n           * @method loadPixels\n           * @example\n           * <div><code>\n           * let myImage;\n           * let halfImage;\n           *\n           * function preload() {\n           *   myImage = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   myImage.loadPixels();\n           *   halfImage = 4 * myImage.width * myImage.height / 2;\n           *   for (let i = 0; i < halfImage; i++) {\n           *     myImage.pixels[i + halfImage] = myImage.pixels[i];\n           *   }\n           *   myImage.updatePixels();\n           * }\n           *\n           * function draw() {\n           *   image(myImage, 0, 0, width, height);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 images of rocky mountains vertically stacked\n           */\n          _main.default.Image.prototype.loadPixels = function() {\n            _main.default.Renderer2D.prototype.loadPixels.call(this);\n            this.setModified(true);\n          };\n\n          /**\n           * Updates the backing canvas for this image with the contents of\n           * the [pixels] array.\n           *\n           * If this image is an animated GIF then the pixels will be updated\n           * in the frame that is currently displayed.\n           *\n           * @method updatePixels\n           * @param {Integer} x x-offset of the target update area for the\n           *                              underlying canvas\n           * @param {Integer} y y-offset of the target update area for the\n           *                              underlying canvas\n           * @param {Integer} w height of the target update area for the\n           *                              underlying canvas\n           * @param {Integer} h height of the target update area for the\n           *                              underlying canvas\n           * @example\n           * <div><code>\n           * let myImage;\n           * let halfImage;\n           *\n           * function preload() {\n           *   myImage = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   myImage.loadPixels();\n           *   halfImage = 4 * myImage.width * myImage.height / 2;\n           *   for (let i = 0; i < halfImage; i++) {\n           *     myImage.pixels[i + halfImage] = myImage.pixels[i];\n           *   }\n           *   myImage.updatePixels();\n           * }\n           *\n           * function draw() {\n           *   image(myImage, 0, 0, width, height);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 images of rocky mountains vertically stacked\n           */\n          /**\n           * @method updatePixels\n           */\n          _main.default.Image.prototype.updatePixels = function(x, y, w, h) {\n            _main.default.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);\n            this.setModified(true);\n          };\n\n          /**\n           * Get a region of pixels from an image.\n           *\n           * If no params are passed, the whole image is returned.\n           * If x and y are the only params passed a single pixel is extracted.\n           * If all params are passed a rectangle region is extracted and a <a href=\"#/p5.Image\">p5.Image</a>\n           * is returned.\n           *\n           * @method get\n           * @param  {Number}               x x-coordinate of the pixel\n           * @param  {Number}               y y-coordinate of the pixel\n           * @param  {Number}               w width\n           * @param  {Number}               h height\n           * @return {p5.Image}             the rectangle <a href=\"#/p5.Image\">p5.Image</a>\n           * @example\n           * <div><code>\n           * let myImage;\n           * let c;\n           *\n           * function preload() {\n           *   myImage = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(myImage);\n           *   noStroke();\n           *   c = myImage.get(60, 90);\n           *   fill(c);\n           *   rect(25, 25, 50, 50);\n           * }\n           *\n           * //get() returns color here\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains with 50x50 green rect in front\n           */\n          /**\n           * @method get\n           * @return {p5.Image}      the whole <a href=\"#/p5.Image\">p5.Image</a>\n           */\n          /**\n           * @method get\n           * @param  {Number}        x\n           * @param  {Number}        y\n           * @return {Number[]}      color of pixel at x,y in array format [R, G, B, A]\n           */\n          _main.default.Image.prototype.get = function(x, y, w, h) {\n            _main.default._validateParameters('p5.Image.get', arguments);\n            return _main.default.Renderer2D.prototype.get.apply(this, arguments);\n          };\n\n          _main.default.Image.prototype._getPixel =\n            _main.default.Renderer2D.prototype._getPixel;\n\n          /**\n           * Set the color of a single pixel or write an image into\n           * this <a href=\"#/p5.Image\">p5.Image</a>.\n           *\n           * Note that for a large number of pixels this will\n           * be slower than directly manipulating the pixels array\n           * and then calling <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>.\n           *\n           * @method set\n           * @param {Number}              x x-coordinate of the pixel\n           * @param {Number}              y y-coordinate of the pixel\n           * @param {Number|Number[]|Object}   a grayscale value | pixel array |\n           *                                a <a href=\"#/p5.Color\">p5.Color</a> | image to copy\n           * @example\n           * <div>\n           * <code>\n           * let img = createImage(66, 66);\n           * img.loadPixels();\n           * for (let i = 0; i < img.width; i++) {\n           *   for (let j = 0; j < img.height; j++) {\n           *     img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n           *   }\n           * }\n           * img.updatePixels();\n           * image(img, 17, 17);\n           * image(img, 34, 34);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas\n           */\n          _main.default.Image.prototype.set = function(x, y, imgOrCol) {\n            _main.default.Renderer2D.prototype.set.call(this, x, y, imgOrCol);\n            this.setModified(true);\n          };\n\n          /**\n    * Resize the image to a new width and height. To make the image scale\n    * proportionally, use 0 as the value for the wide or high parameter.\n    * For instance, to make the width of an image 150 pixels, and change\n    * the height using the same proportion, use resize(150, 0).\n    *\n    * @method resize\n    * @param {Number} width the resized image width\n    * @param {Number} height the resized image height\n    * @example\n    * <div><code>\n    * let img;\n    *\n    * function preload() {\n    *   img = loadImage('assets/rockies.jpg');\n    * }\n   \n    * function draw() {\n    *   image(img, 0, 0);\n    * }\n    *\n    * function mousePressed() {\n    *   img.resize(50, 100);\n    * }\n    * </code></div>\n    *\n    * @alt\n    * image of rocky mountains. zoomed in\n    */\n          _main.default.Image.prototype.resize = function(width, height) {\n            // Copy contents to a temporary canvas, resize the original\n            // and then copy back.\n            //\n            // There is a faster approach that involves just one copy and swapping the\n            // this.canvas reference. We could switch to that approach if (as i think\n            // is the case) there an expectation that the user would not hold a\n            // reference to the backing canvas of a p5.Image. But since we do not\n            // enforce that at the moment, I am leaving in the slower, but safer\n            // implementation.\n\n            // auto-resize\n            if (width === 0 && height === 0) {\n              width = this.canvas.width;\n              height = this.canvas.height;\n            } else if (width === 0) {\n              width = this.canvas.width * height / this.canvas.height;\n            } else if (height === 0) {\n              height = this.canvas.height * width / this.canvas.width;\n            }\n\n            width = Math.floor(width);\n            height = Math.floor(height);\n\n            var tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n\n            if (this.gifProperties) {\n              var props = this.gifProperties;\n              //adapted from github.com/LinusU/resize-image-data\n              var nearestNeighbor = function nearestNeighbor(src, dst) {\n                var pos = 0;\n                for (var y = 0; y < dst.height; y++) {\n                  for (var x = 0; x < dst.width; x++) {\n                    var srcX = Math.floor(x * src.width / dst.width);\n                    var srcY = Math.floor(y * src.height / dst.height);\n                    var srcPos = (srcY * src.width + srcX) * 4;\n                    dst.data[pos++] = src.data[srcPos++]; // R\n                    dst.data[pos++] = src.data[srcPos++]; // G\n                    dst.data[pos++] = src.data[srcPos++]; // B\n                    dst.data[pos++] = src.data[srcPos++]; // A\n                  }\n                }\n              };\n              for (var i = 0; i < props.numFrames; i++) {\n                var resizedImageData = this.drawingContext.createImageData(width, height);\n\n                nearestNeighbor(props.frames[i].image, resizedImageData);\n                props.frames[i].image = resizedImageData;\n              }\n            }\n\n            // prettier-ignore\n            tempCanvas.getContext('2d').drawImage(\n  this.canvas,\n  0, 0, this.canvas.width, this.canvas.height,\n  0, 0, tempCanvas.width, tempCanvas.height);\n\n            // Resize the original canvas, which will clear its contents\n            this.canvas.width = this.width = width;\n            this.canvas.height = this.height = height;\n\n            //Copy the image back\n\n            // prettier-ignore\n            this.drawingContext.drawImage(\n  tempCanvas,\n  0, 0, width, height,\n  0, 0, width, height);\n\n            if (this.pixels.length > 0) {\n              this.loadPixels();\n            }\n\n            this.setModified(true);\n          };\n\n          /**\n           * Copies a region of pixels from one image to another. If no\n           * srcImage is specified this is used as the source. If the source\n           * and destination regions aren't the same size, it will\n           * automatically resize source pixels to fit the specified\n           * target region.\n           *\n           * @method copy\n           * @param  {p5.Image|p5.Element} srcImage source image\n           * @param  {Integer} sx X coordinate of the source's upper left corner\n           * @param  {Integer} sy Y coordinate of the source's upper left corner\n           * @param  {Integer} sw source image width\n           * @param  {Integer} sh source image height\n           * @param  {Integer} dx X coordinate of the destination's upper left corner\n           * @param  {Integer} dy Y coordinate of the destination's upper left corner\n           * @param  {Integer} dw destination image width\n           * @param  {Integer} dh destination image height\n           * @example\n           * <div><code>\n           * let photo;\n           * let bricks;\n           * let x;\n           * let y;\n           *\n           * function preload() {\n           *   photo = loadImage('assets/rockies.jpg');\n           *   bricks = loadImage('assets/bricks.jpg');\n           * }\n           *\n           * function setup() {\n           *   x = bricks.width / 2;\n           *   y = bricks.height / 2;\n           *   photo.copy(bricks, 0, 0, x, y, 0, 0, x, y);\n           *   image(photo, 0, 0);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains and smaller image on top of bricks at top left\n           */\n          /**\n           * @method copy\n           * @param  {Integer} sx\n           * @param  {Integer} sy\n           * @param  {Integer} sw\n           * @param  {Integer} sh\n           * @param  {Integer} dx\n           * @param  {Integer} dy\n           * @param  {Integer} dw\n           * @param  {Integer} dh\n           */\n          _main.default.Image.prototype.copy = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default.prototype.copy.apply(this, args);\n          };\n\n          /**\n           * Masks part of an image from displaying by loading another\n           * image and using its alpha channel as an alpha channel for\n           * this image.\n           *\n           * @method mask\n           * @param {p5.Image} srcImage source image\n           * @example\n           * <div><code>\n           * let photo, maskImage;\n           * function preload() {\n           *   photo = loadImage('assets/rockies.jpg');\n           *   maskImage = loadImage('assets/mask2.png');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   photo.mask(maskImage);\n           *   image(photo, 0, 0);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains with white at right\n           *\n           * http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\n           */\n          // TODO: - Accept an array of alpha values.\n          //       - Use other channels of an image. p5 uses the\n          //       blue channel (which feels kind of arbitrary). Note: at the\n          //       moment this method does not match native processing's original\n          //       functionality exactly.\n          _main.default.Image.prototype.mask = function(p5Image) {\n            if (p5Image === undefined) {\n              p5Image = this;\n            }\n            var currBlend = this.drawingContext.globalCompositeOperation;\n\n            var scaleFactor = 1;\n            if (p5Image instanceof _main.default.Renderer) {\n              scaleFactor = p5Image._pInst._pixelDensity;\n            }\n\n            var copyArgs = [\n              p5Image,\n              0,\n              0,\n              scaleFactor * p5Image.width,\n              scaleFactor * p5Image.height,\n              0,\n              0,\n              this.width,\n              this.height\n            ];\n\n            this.drawingContext.globalCompositeOperation = 'destination-in';\n            _main.default.Image.prototype.copy.apply(this, copyArgs);\n            this.drawingContext.globalCompositeOperation = currBlend;\n            this.setModified(true);\n          };\n\n          /**\n           * Applies an image filter to a <a href=\"#/p5.Image\">p5.Image</a>\n           *\n           * @method filter\n           * @param  {Constant} filterType  either THRESHOLD, GRAY, OPAQUE, INVERT,\n           *                                POSTERIZE, ERODE, DILATE or BLUR.\n           *                                See Filters.js for docs on\n           *                                each available filter\n           * @param  {Number} [filterParam] an optional parameter unique\n           *                                to each filter, see above\n           * @example\n           * <div><code>\n           * let photo1;\n           * let photo2;\n           *\n           * function preload() {\n           *   photo1 = loadImage('assets/rockies.jpg');\n           *   photo2 = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   photo2.filter(GRAY);\n           *   image(photo1, 0, 0);\n           *   image(photo2, width / 2, 0);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 images of rocky mountains left one in color, right in black and white\n           */\n          _main.default.Image.prototype.filter = function(operation, value) {\n            _filters.default.apply(this.canvas, _filters.default[operation], value);\n            this.setModified(true);\n          };\n\n          /**\n           * Copies a region of pixels from one image to another, using a specified\n           * blend mode to do the operation.\n           *\n           * @method blend\n           * @param  {p5.Image} srcImage source image\n           * @param  {Integer} sx X coordinate of the source's upper left corner\n           * @param  {Integer} sy Y coordinate of the source's upper left corner\n           * @param  {Integer} sw source image width\n           * @param  {Integer} sh source image height\n           * @param  {Integer} dx X coordinate of the destination's upper left corner\n           * @param  {Integer} dy Y coordinate of the destination's upper left corner\n           * @param  {Integer} dw destination image width\n           * @param  {Integer} dh destination image height\n           * @param  {Constant} blendMode the blend mode. either\n           *     BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n           *     MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n           *     SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\n           *\n           * Available blend modes are: normal | multiply | screen | overlay |\n           *            darken | lighten | color-dodge | color-burn | hard-light |\n           *            soft-light | difference | exclusion | hue | saturation |\n           *            color | luminosity\n           *\n           * http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\n           * @example\n           * <div><code>\n           * let mountains;\n           * let bricks;\n           *\n           * function preload() {\n           *   mountains = loadImage('assets/rockies.jpg');\n           *   bricks = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n           *   image(mountains, 0, 0);\n           *   image(bricks, 0, 0);\n           * }\n           * </code></div>\n           * <div><code>\n           * let mountains;\n           * let bricks;\n           *\n           * function preload() {\n           *   mountains = loadImage('assets/rockies.jpg');\n           *   bricks = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n           *   image(mountains, 0, 0);\n           *   image(bricks, 0, 0);\n           * }\n           * </code></div>\n           * <div><code>\n           * let mountains;\n           * let bricks;\n           *\n           * function preload() {\n           *   mountains = loadImage('assets/rockies.jpg');\n           *   bricks = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n           *   image(mountains, 0, 0);\n           *   image(bricks, 0, 0);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains. Brick images on left and right. Right overexposed\n           * image of rockies. Brickwall images on left and right. Right mortar transparent\n           * image of rockies. Brickwall images on left and right. Right translucent\n           */\n          /**\n           * @method blend\n           * @param  {Integer} sx\n           * @param  {Integer} sy\n           * @param  {Integer} sw\n           * @param  {Integer} sh\n           * @param  {Integer} dx\n           * @param  {Integer} dy\n           * @param  {Integer} dw\n           * @param  {Integer} dh\n           * @param  {Constant} blendMode\n           */\n          _main.default.Image.prototype.blend = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('p5.Image.blend', arguments);\n            _main.default.prototype.blend.apply(this, args);\n            this.setModified(true);\n          };\n\n          /**\n           * helper method for web GL mode to indicate that an image has been\n           * changed or unchanged since last upload. gl texture upload will\n           * set this value to false after uploading the texture.\n           * @method setModified\n           * @param {boolean} val sets whether or not the image has been\n           * modified.\n           * @private\n           */\n          _main.default.Image.prototype.setModified = function(val) {\n            this._modified = val; //enforce boolean?\n          };\n\n          /**\n           * helper method for web GL mode to figure out if the image\n           * has been modified and might need to be re-uploaded to texture\n           * memory between frames.\n           * @method isModified\n           * @private\n           * @return {boolean} a boolean indicating whether or not the\n           * image has been updated or modified since last texture upload.\n           */\n          _main.default.Image.prototype.isModified = function() {\n            return this._modified;\n          };\n\n          /**\n           * Saves the image to a file and force the browser to download it.\n           * Accepts two strings for filename and file extension\n           * Supports png (default), jpg, and gif\n           *<br><br>\n           * Note that the file will only be downloaded as an animated GIF\n           * if the p5.Image was loaded from a GIF file.\n           * @method save\n           * @param {String} filename give your file a name\n           * @param  {String} extension 'png' or 'jpg'\n           * @example\n           * <div><code>\n           * let photo;\n           *\n           * function preload() {\n           *   photo = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function draw() {\n           *   image(photo, 0, 0);\n           * }\n           *\n           * function keyTyped() {\n           *   if (key === 's') {\n           *     photo.save('photo', 'png');\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains.\n           */\n          _main.default.Image.prototype.save = function(filename, extension) {\n            if (this.gifProperties) {\n              _main.default.prototype.saveGif(this, filename);\n            } else {\n              _main.default.prototype.saveCanvas(this.canvas, filename, extension);\n            }\n          };\n\n          // GIF Section\n          /**\n           * Starts an animated GIF over at the beginning state.\n           *\n           * @method reset\n           * @example\n           * <div><code>\n           * let gif;\n           *\n           * function preload() {\n           *   gif = loadImage('assets/arnott-wallace-wink-loop-once.gif');\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   // The GIF file that we loaded only loops once\n           *   // so it freezes on the last frame after playing through\n           *   image(gif, 0, 0);\n           * }\n           *\n           * function mousePressed() {\n           *   // Click to reset the GIF and begin playback from start\n           *   gif.reset();\n           * }\n           * </code></div>\n           * @alt\n           * Animated image of a cartoon face that winks once and then freezes\n           * When you click it animates again, winks once and freezes\n           */\n          _main.default.Image.prototype.reset = function() {\n            if (this.gifProperties) {\n              var props = this.gifProperties;\n              props.playing = true;\n              props.timeSinceStart = 0;\n              props.timeDisplayed = 0;\n              props.lastChangeTime = 0;\n              props.loopCount = 0;\n              props.displayIndex = 0;\n              this.drawingContext.putImageData(props.frames[0].image, 0, 0);\n            }\n          };\n\n          /**\n           * Gets the index for the frame that is currently visible in an animated GIF.\n           *\n           * @method getCurrentFrame\n           * @return {Number}       The index for the currently displaying frame in animated GIF\n           * @example\n           * <div><code>\n           * let gif;\n           *\n           * function preload() {\n           *   gif = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n           * }\n           *\n           * function draw() {\n           *   let frame = gif.getCurrentFrame();\n           *   image(gif, 0, 0);\n           *   text(frame, 10, 90);\n           * }\n           * </code></div>\n           * @alt\n           * Animated image of a cartoon eye looking around and then\n           * looking outwards, in the lower-left hand corner a number counts\n           * up quickly to 124 and then starts back over at 0\n           */\n          _main.default.Image.prototype.getCurrentFrame = function() {\n            if (this.gifProperties) {\n              var props = this.gifProperties;\n              return props.displayIndex % props.numFrames;\n            }\n          };\n\n          /**\n           * Sets the index of the frame that is currently visible in an animated GIF\n           *\n           * @method setFrame\n           * @param {Number}       index the index for the frame that should be displayed\n           * @example\n           * <div><code>\n           * let gif;\n           *\n           * function preload() {\n           *   gif = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n           * }\n           *\n           * // Move your mouse up and down over canvas to see the GIF\n           * // frames animate\n           * function draw() {\n           *   gif.pause();\n           *   image(gif, 0, 0);\n           *   // Get the highest frame number which is the number of frames - 1\n           *   let maxFrame = gif.numFrames() - 1;\n           *   // Set the current frame that is mapped to be relative to mouse position\n           *   let frameNumber = floor(map(mouseY, 0, height, 0, maxFrame, true));\n           *   gif.setFrame(frameNumber);\n           * }\n           * </code></div>\n           * @alt\n           * A still image of a cartoon eye that looks around when you move your mouse\n           * up and down over the canvas\n           */\n          _main.default.Image.prototype.setFrame = function(index) {\n            if (this.gifProperties) {\n              var props = this.gifProperties;\n              if (index < props.numFrames && index >= 0) {\n                props.timeDisplayed = 0;\n                props.lastChangeTime = 0;\n                props.displayIndex = index;\n                this.drawingContext.putImageData(props.frames[index].image, 0, 0);\n              } else {\n                console.log(\n                  'Cannot set GIF to a frame number that is higher than total number of frames or below zero.'\n                );\n              }\n            }\n          };\n\n          /**\n           * Returns the number of frames in an animated GIF\n           *\n           * @method numFrames\n           * @return {Number}\n           * @example     The number of frames in the animated GIF\n           * <div><code>\n           * let gif;\n           *\n           * function preload() {\n           *   gif = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n           * }\n           *\n           * // Move your mouse up and down over canvas to see the GIF\n           * // frames animate\n           * function draw() {\n           *   gif.pause();\n           *   image(gif, 0, 0);\n           *   // Get the highest frame number which is the number of frames - 1\n           *   let maxFrame = gif.numFrames() - 1;\n           *   // Set the current frame that is mapped to be relative to mouse position\n           *   let frameNumber = floor(map(mouseY, 0, height, 0, maxFrame, true));\n           *   gif.setFrame(frameNumber);\n           * }\n           * </code></div>\n           * @alt\n           * A still image of a cartoon eye that looks around when you move your mouse\n           * up and down over the canvas\n           */\n          _main.default.Image.prototype.numFrames = function() {\n            if (this.gifProperties) {\n              return this.gifProperties.numFrames;\n            }\n          };\n\n          /**\n           * Plays an animated GIF that was paused with\n           * <a href=\"#/p5.Image/pause\">pause()</a>\n           *\n           * @method play\n           * @example\n           * <div><code>\n           * let gif;\n           *\n           * function preload() {\n           *   gif = loadImage('assets/nancy-liang-wind-loop-forever.gif');\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   image(gif, 0, 0);\n           * }\n           *\n           * function mousePressed() {\n           *   gif.pause();\n           * }\n           *\n           * function mouseReleased() {\n           *   gif.play();\n           * }\n           * </code></div>\n           * @alt\n           * An animated GIF of a drawing of small child with\n           * hair blowing in the wind, when you click the image\n           * freezes when you release it animates again\n           */\n          _main.default.Image.prototype.play = function() {\n            if (this.gifProperties) {\n              this.gifProperties.playing = true;\n            }\n          };\n\n          /**\n           * Pauses an animated GIF.\n           *\n           * @method pause\n           * @example\n           * <div><code>\n           * let gif;\n           *\n           * function preload() {\n           *   gif = loadImage('assets/nancy-liang-wind-loop-forever.gif');\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   image(gif, 0, 0);\n           * }\n           *\n           * function mousePressed() {\n           *   gif.pause();\n           * }\n           *\n           * function mouseReleased() {\n           *   gif.play();\n           * }\n           * </code></div>\n           * @alt\n           * An animated GIF of a drawing of small child with\n           * hair blowing in the wind, when you click the image\n           * freezes when you release it animates again\n           */\n          _main.default.Image.prototype.pause = function() {\n            if (this.gifProperties) {\n              this.gifProperties.playing = false;\n            }\n          };\n\n          /**\n           * Changes the delay between frames in an animated GIF. There is an optional second parameter that\n           * indicates an index for a specific frame that should have its delay modified. If no index is given, all frames\n           * will have the new delay.\n           *\n           * @method delay\n           * @param {Number}    d the amount in milliseconds to delay between switching frames\n           * @param {Number}    [index] the index of the frame that should have the new delay value {optional}\n           * @example\n           * <div><code>\n           * let gifFast, gifSlow;\n           *\n           * function preload() {\n           *   gifFast = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n           *   gifSlow = loadImage('assets/arnott-wallace-eye-loop-forever.gif');\n           * }\n           *\n           * function setup() {\n           *   gifFast.resize(width / 2, height / 2);\n           *   gifSlow.resize(width / 2, height / 2);\n           *\n           *   //Change the delay here\n           *   gifFast.delay(10);\n           *   gifSlow.delay(100);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   image(gifFast, 0, 0);\n           *   image(gifSlow, width / 2, 0);\n           * }\n           * </code></div>\n           * @alt\n           * Two animated gifs of cartoon eyes looking around\n           * The gif on the left animates quickly, on the right\n           * the animation is much slower\n           */\n          _main.default.Image.prototype.delay = function(d, index) {\n            if (this.gifProperties) {\n              var props = this.gifProperties;\n              if (index < props.numFrames && index >= 0) {\n                props.frames[index].delay = d;\n              } else {\n                // change all frames\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n                try {\n                  for (\n                    var _iterator = props.frames[Symbol.iterator](), _step;\n                    !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                    _iteratorNormalCompletion = true\n                  ) {\n                    var frame = _step.value;\n                    frame.delay = d;\n                  }\n                } catch (err) {\n                  _didIteratorError = true;\n                  _iteratorError = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                      _iterator.return();\n                    }\n                  } finally {\n                    if (_didIteratorError) {\n                      throw _iteratorError;\n                    }\n                  }\n                }\n              }\n            }\n          };\n          var _default = _main.default.Image;\n          exports.default = _default;\n        },\n        { '../core/main': 59, './filters': 80 }\n      ],\n      84: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var _filters = _interopRequireDefault(_dereq_('./filters'));\n          _dereq_('../color/p5.Color');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Image\n           * @submodule Pixels\n           * @for p5\n           * @requires core\n           */ /**\n           * <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\n           * /Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a>\n           * containing the values for all the pixels in the display window.\n           * These values are numbers. This array is the size (include an appropriate\n           * factor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\n           * representing the R, G, B, A values in order for each pixel, moving from\n           * left to right across each row, then down each column. Retina and other\n           * high density displays will have more pixels[] (by a factor of\n           * pixelDensity^2).\n           * For example, if the image is 100x100 pixels, there will be 40,000. On a\n           * retina display, there will be 160,000.\n           *\n           * The first four values (indices 0-3) in the array will be the R, G, B, A\n           * values of the pixel at (0, 0). The second four values (indices 4-7) will\n           * contain the R, G, B, A values of the pixel at (1, 0). More generally, to\n           * set values for a pixel at (x, y):\n           * ```javascript\n           * let d = pixelDensity();\n           * for (let i = 0; i < d; i++) {\n           *   for (let j = 0; j < d; j++) {\n           *     // loop over\n           *     index = 4 * ((y * d + j) * width * d + (x * d + i));\n           *     pixels[index] = r;\n           *     pixels[index+1] = g;\n           *     pixels[index+2] = b;\n           *     pixels[index+3] = a;\n           *   }\n           * }\n           * ```\n           * While the above method is complex, it is flexible enough to work with\n           * any pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of\n           * setting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x, y) at\n           * any pixelDensity, but the performance may not be as fast when lots of\n           * modifications are made to the pixel array.\n           *\n           * Before accessing this array, the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a>\n           * function. After the array data has been modified, the <a href=\"#/p5/updatePixels\">updatePixels()</a>\n           * function must be run to update the changes.\n           *\n           * Note that this is not a standard javascript array.  This means that\n           * standard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or\n           * <a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not\n           * work.\n           *\n           * @property {Number[]} pixels\n           * @example\n           * <div>\n           * <code>\n           * let pink = color(255, 102, 204);\n           * loadPixels();\n           * let d = pixelDensity();\n           * let halfImage = 4 * (width * d) * (height / 2 * d);\n           * for (let i = 0; i < halfImage; i += 4) {\n           *   pixels[i] = red(pink);\n           *   pixels[i + 1] = green(pink);\n           *   pixels[i + 2] = blue(pink);\n           *   pixels[i + 3] = alpha(pink);\n           * }\n           * updatePixels();\n           * </code>\n           * </div>\n           *\n           * @alt\n           * top half of canvas pink, bottom grey\n           */ _main.default.prototype.pixels = []; /**\n           * Copies a region of pixels from one image to another, using a specified\n           * blend mode to do the operation.\n           *\n           * @method blend\n           * @param  {p5.Image} srcImage source image\n           * @param  {Integer} sx X coordinate of the source's upper left corner\n           * @param  {Integer} sy Y coordinate of the source's upper left corner\n           * @param  {Integer} sw source image width\n           * @param  {Integer} sh source image height\n           * @param  {Integer} dx X coordinate of the destination's upper left corner\n           * @param  {Integer} dy Y coordinate of the destination's upper left corner\n           * @param  {Integer} dw destination image width\n           * @param  {Integer} dh destination image height\n           * @param  {Constant} blendMode the blend mode. either\n           *     BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n           *     MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n           *     SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\n           *\n           * @example\n           * <div><code>\n           * let img0;\n           * let img1;\n           *\n           * function preload() {\n           *   img0 = loadImage('assets/rockies.jpg');\n           *   img1 = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(img0);\n           *   image(img1, 0, 0);\n           *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n           * }\n           * </code></div>\n           * <div><code>\n           * let img0;\n           * let img1;\n           *\n           * function preload() {\n           *   img0 = loadImage('assets/rockies.jpg');\n           *   img1 = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(img0);\n           *   image(img1, 0, 0);\n           *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n           * }\n           * </code></div>\n           * <div><code>\n           * let img0;\n           * let img1;\n           *\n           * function preload() {\n           *   img0 = loadImage('assets/rockies.jpg');\n           *   img1 = loadImage('assets/bricks_third.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(img0);\n           *   image(img1, 0, 0);\n           *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains. Brick images on left and right. Right overexposed\n           * image of rockies. Brickwall images on left and right. Right mortar transparent\n           * image of rockies. Brickwall images on left and right. Right translucent\n           *\n           */\n          /**\n           * @method blend\n           * @param  {Integer} sx\n           * @param  {Integer} sy\n           * @param  {Integer} sw\n           * @param  {Integer} sh\n           * @param  {Integer} dx\n           * @param  {Integer} dy\n           * @param  {Integer} dw\n           * @param  {Integer} dh\n           * @param  {Constant} blendMode\n           */\n          _main.default.prototype.blend = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('blend', args);\n            if (this._renderer) {\n              var _this$_renderer;\n              (_this$_renderer = this._renderer).blend.apply(_this$_renderer, args);\n            } else {\n              _main.default.Renderer2D.prototype.blend.apply(this, args);\n            }\n          };\n\n          /**\n           * Copies a region of the canvas to another region of the canvas\n           * and copies a region of pixels from an image used as the srcImg parameter\n           * into the canvas srcImage is specified this is used as the source. If\n           * the source and destination regions aren't the same size, it will\n           * automatically resize source pixels to fit the specified\n           * target region.\n           *\n           * @method copy\n           * @param  {p5.Image|p5.Element} srcImage source image\n           * @param  {Integer} sx X coordinate of the source's upper left corner\n           * @param  {Integer} sy Y coordinate of the source's upper left corner\n           * @param  {Integer} sw source image width\n           * @param  {Integer} sh source image height\n           * @param  {Integer} dx X coordinate of the destination's upper left corner\n           * @param  {Integer} dy Y coordinate of the destination's upper left corner\n           * @param  {Integer} dw destination image width\n           * @param  {Integer} dh destination image height\n           *\n           * @example\n           * <div><code>\n           * let img;\n           *\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   background(img);\n           *   copy(img, 7, 22, 10, 10, 35, 25, 50, 50);\n           *   stroke(255);\n           *   noFill();\n           *   // Rectangle shows area being copied\n           *   rect(7, 22, 10, 10);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * image of rocky mountains. Brick images on left and right. Right overexposed\n           * image of rockies. Brickwall images on left and right. Right mortar transparent\n           * image of rockies. Brickwall images on left and right. Right translucent\n           */\n          /**\n           * @method copy\n           * @param  {Integer} sx\n           * @param  {Integer} sy\n           * @param  {Integer} sw\n           * @param  {Integer} sh\n           * @param  {Integer} dx\n           * @param  {Integer} dy\n           * @param  {Integer} dw\n           * @param  {Integer} dh\n           */\n          _main.default.prototype.copy = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('copy', args);\n\n            var srcImage, sx, sy, sw, sh, dx, dy, dw, dh;\n            if (args.length === 9) {\n              srcImage = args[0];\n              sx = args[1];\n              sy = args[2];\n              sw = args[3];\n              sh = args[4];\n              dx = args[5];\n              dy = args[6];\n              dw = args[7];\n              dh = args[8];\n            } else if (args.length === 8) {\n              srcImage = this;\n              sx = args[0];\n              sy = args[1];\n              sw = args[2];\n              sh = args[3];\n              dx = args[4];\n              dy = args[5];\n              dw = args[6];\n              dh = args[7];\n            } else {\n              throw new Error('Signature not supported');\n            }\n\n            _main.default.prototype._copyHelper(\n              this,\n              srcImage,\n              sx,\n              sy,\n              sw,\n              sh,\n              dx,\n              dy,\n              dw,\n              dh\n            );\n          };\n\n          _main.default.prototype._copyHelper = function(\n            dstImage,\n            srcImage,\n            sx,\n            sy,\n            sw,\n            sh,\n            dx,\n            dy,\n            dw,\n            dh\n          ) {\n            srcImage.loadPixels();\n            var s = srcImage.canvas.width / srcImage.width;\n            // adjust coord system for 3D when renderer\n            // ie top-left = -width/2, -height/2\n            var sxMod = 0;\n            var syMod = 0;\n            if (srcImage._renderer && srcImage._renderer.isP3D) {\n              sxMod = srcImage.width / 2;\n              syMod = srcImage.height / 2;\n            }\n            if (dstImage._renderer && dstImage._renderer.isP3D) {\n              _main.default.RendererGL.prototype.image.call(\n                dstImage._renderer,\n                srcImage,\n                sx + sxMod,\n                sy + syMod,\n                sw,\n                sh,\n                dx,\n                dy,\n                dw,\n                dh\n              );\n            } else {\n              dstImage.drawingContext.drawImage(\n                srcImage.canvas,\n                s * (sx + sxMod),\n                s * (sy + syMod),\n                s * sw,\n                s * sh,\n                dx,\n                dy,\n                dw,\n                dh\n              );\n            }\n          };\n\n          /**\n           * Applies a filter to the canvas. The presets options are:\n           *\n           * THRESHOLD\n           * Converts the image to black and white pixels depending if they are above or\n           * below the threshold defined by the level parameter. The parameter must be\n           * between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n           *\n           * GRAY\n           * Converts any colors in the image to grayscale equivalents. No parameter\n           * is used.\n           *\n           * OPAQUE\n           * Sets the alpha channel to entirely opaque. No parameter is used.\n           *\n           * INVERT\n           * Sets each pixel to its inverse value. No parameter is used.\n           *\n           * POSTERIZE\n           * Limits each channel of the image to the number of colors specified as the\n           * parameter. The parameter can be set to values between 2 and 255, but\n           * results are most noticeable in the lower ranges.\n           *\n           * BLUR\n           * Executes a Gaussian blur with the level parameter specifying the extent\n           * of the blurring. If no parameter is used, the blur is equivalent to\n           * Gaussian blur of radius 1. Larger values increase the blur.\n           *\n           * ERODE\n           * Reduces the light areas. No parameter is used.\n           *\n           * DILATE\n           * Increases the light areas. No parameter is used.\n           *\n           * filter() does not work in WEBGL mode.\n           * A similar effect can be achieved in WEBGL mode using custom\n           * shaders. Adam Ferriss has written\n           * a <a href=\"https://github.com/aferriss/p5jsShaderExamples\"\n           * target='_blank'>selection of shader examples</a> that contains many\n           * of the effects present in the filter examples.\n           *\n           * @method filter\n           * @param  {Constant} filterType  either THRESHOLD, GRAY, OPAQUE, INVERT,\n           *                                POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n           *                                See Filters.js for docs on\n           *                                each available filter\n           * @param  {Number} [filterParam] an optional parameter unique\n           *                                to each filter, see above\n           *\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(THRESHOLD);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(GRAY);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(OPAQUE);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(INVERT);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(POSTERIZE, 3);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(DILATE);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(BLUR, 3);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/bricks.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   filter(ERODE);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black and white image of a brick wall.\n           * greyscale image of a brickwall\n           * image of a brickwall\n           * jade colored image of a brickwall\n           * red and pink image of a brickwall\n           * image of a brickwall\n           * blurry image of a brickwall\n           * image of a brickwall\n           * image of a brickwall with less detail\n           */\n          _main.default.prototype.filter = function(operation, value) {\n            _main.default._validateParameters('filter', arguments);\n            if (this.canvas !== undefined) {\n              _filters.default.apply(this.canvas, _filters.default[operation], value);\n            } else {\n              _filters.default.apply(this.elt, _filters.default[operation], value);\n            }\n          };\n\n          /**\n           * Get a region of pixels, or a single pixel, from the canvas.\n           *\n           * Returns an array of [R,G,B,A] values for any pixel or grabs a section of\n           * an image. If no parameters are specified, the entire image is returned.\n           * Use the x and y parameters to get the value of one pixel. Get a section of\n           * the display window by specifying additional w and h parameters. When\n           * getting an image, the x and y parameters define the coordinates for the\n           * upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n           *\n           * Getting the color of a single pixel with get(x, y) is easy, but not as fast\n           * as grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to\n           * get(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is\n           * ```javascript\n           * let x, y, d; // set these to the coordinates\n           * let off = (y * width + x) * d * 4;\n           * let components = [\n           *   pixels[off],\n           *   pixels[off + 1],\n           *   pixels[off + 2],\n           *   pixels[off + 3]\n           * ];\n           * print(components);\n           * ```\n           * See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.\n           *\n           * If you want to extract an array of colors or a subimage from an p5.Image object,\n           * take a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>\n           *\n           * @method get\n           * @param  {Number}         x x-coordinate of the pixel\n           * @param  {Number}         y y-coordinate of the pixel\n           * @param  {Number}         w width\n           * @param  {Number}         h height\n           * @return {p5.Image}       the rectangle <a href=\"#/p5.Image\">p5.Image</a>\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   let c = get();\n           *   image(c, width / 2, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           * function setup() {\n           *   image(img, 0, 0);\n           *   let c = get(50, 90);\n           *   fill(c);\n           *   noStroke();\n           *   rect(25, 25, 50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 images of the rocky mountains, side-by-side\n           * Image of the rocky mountains with 50x50 green rect in center of canvas\n           */\n          /**\n           * @method get\n           * @return {p5.Image}      the whole <a href=\"#/p5.Image\">p5.Image</a>\n           */\n          /**\n           * @method get\n           * @param  {Number}        x\n           * @param  {Number}        y\n           * @return {Number[]}      color of pixel at x,y in array format [R, G, B, A]\n           */\n          _main.default.prototype.get = function(x, y, w, h) {\n            var _this$_renderer2;\n            _main.default._validateParameters('get', arguments);\n            return (_this$_renderer2 = this._renderer).get.apply(\n              _this$_renderer2,\n              arguments\n            );\n          };\n\n          /**\n           * Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This\n           * function must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>.\n           * Note that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a>\n           * will occur.\n           *\n           * @method loadPixels\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   image(img, 0, 0, width, height);\n           *   let d = pixelDensity();\n           *   let halfImage = 4 * (width * d) * (height * d / 2);\n           *   loadPixels();\n           *   for (let i = 0; i < halfImage; i++) {\n           *     pixels[i + halfImage] = pixels[i];\n           *   }\n           *   updatePixels();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * two images of the rocky mountains. one on top, one on bottom of canvas.\n           */\n          _main.default.prototype.loadPixels = function() {\n            for (\n              var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n              _key3 < _len3;\n              _key3++\n            ) {\n              args[_key3] = arguments[_key3];\n            }\n            _main.default._validateParameters('loadPixels', args);\n            this._renderer.loadPixels();\n          };\n\n          /**\n           * Changes the color of any pixel, or writes an image directly to the\n           * display window.\n           * The x and y parameters specify the pixel to change and the c parameter\n           * specifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A]\n           * pixel array. It can also be a single grayscale value.\n           * When setting an image, the x and y parameters define the coordinates for\n           * the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n           *\n           * After using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear.\n           * This should be called once all pixels have been set, and must be called before\n           * calling .<a href=\"#/p5/get\">get()</a> or drawing the image.\n           *\n           * Setting the color of a single pixel with set(x, y) is easy, but not as\n           * fast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a>\n           * values directly may be complicated when working with a retina display,\n           * but will perform better when lots of pixels need to be set directly on\n           * every loop. See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.\n           *\n           * @method set\n           * @param {Number}              x x-coordinate of the pixel\n           * @param {Number}              y y-coordinate of the pixel\n           * @param {Number|Number[]|Object} c insert a grayscale value | a pixel array |\n           *                                a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy\n           * @example\n           * <div>\n           * <code>\n           * let black = color(0);\n           * set(30, 20, black);\n           * set(85, 20, black);\n           * set(85, 75, black);\n           * set(30, 75, black);\n           * updatePixels();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * for (let i = 30; i < width - 15; i++) {\n           *   for (let j = 20; j < height - 25; j++) {\n           *     let c = color(204 - j, 153 - i, 0);\n           *     set(i, j, c);\n           *   }\n           * }\n           * updatePixels();\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   set(0, 0, img);\n           *   updatePixels();\n           *   line(0, 0, width, height);\n           *   line(0, height, width, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 4 black points in the shape of a square middle-right of canvas.\n           * square with orangey-brown gradient lightening at bottom right.\n           * image of the rocky mountains. with lines like an 'x' through the center.\n           */\n          _main.default.prototype.set = function(x, y, imgOrCol) {\n            this._renderer.set(x, y, imgOrCol);\n          };\n          /**\n           * Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array.\n           * Use in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you're only reading pixels from\n           * the array, there's no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only\n           * necessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the\n           * pixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with\n           * <a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur.\n           *\n           * @method updatePixels\n           * @param  {Number} [x]    x-coordinate of the upper-left corner of region\n           *                         to update\n           * @param  {Number} [y]    y-coordinate of the upper-left corner of region\n           *                         to update\n           * @param  {Number} [w]    width of region to update\n           * @param  {Number} [h]    height of region to update\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies.jpg');\n           * }\n           *\n           * function setup() {\n           *   image(img, 0, 0, width, height);\n           *   let d = pixelDensity();\n           *   let halfImage = 4 * (width * d) * (height * d / 2);\n           *   loadPixels();\n           *   for (let i = 0; i < halfImage; i++) {\n           *     pixels[i + halfImage] = pixels[i];\n           *   }\n           *   updatePixels();\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * two images of the rocky mountains. one on top, one on bottom of canvas.\n           */\n          _main.default.prototype.updatePixels = function(x, y, w, h) {\n            _main.default._validateParameters('updatePixels', arguments);\n            // graceful fail - if loadPixels() or set() has not been called, pixel\n            // array will be empty, ignore call to updatePixels()\n            if (this.pixels.length === 0) {\n              return;\n            }\n            this._renderer.updatePixels(x, y, w, h);\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../color/p5.Color': 46, '../core/main': 59, './filters': 80 }\n      ],\n      85: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          _dereq_('whatwg-fetch');\n          _dereq_('es6-promise/auto');\n          var _fetchJsonp = _interopRequireDefault(_dereq_('fetch-jsonp'));\n          var _fileSaver = _interopRequireDefault(_dereq_('file-saver'));\n          _dereq_('../core/friendly_errors/validate_params');\n          _dereq_('../core/friendly_errors/file_errors');\n          _dereq_('../core/friendly_errors/fes_core');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Loads a JSON file from a file or a URL, and returns an Object.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Note that even if the JSON file contains an Array, an Object will be\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * returned with index numbers as keys.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This method is asynchronous, meaning it may not finish before the next\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * line in your sketch is executed. JSONP is supported via a polyfill and you\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * can pass in as the second argument an object with definitions of the json\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * callback following the syntax specified <a href=\"https://github.com/camsong/\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * fetch-jsonp\">here</a>.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This method is suitable for fetching files up to size of 64MB.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @method loadJSON\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @param  {String}        path       name of the file or url to load\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @param  {Object}        [jsonpOptions] options object for jsonp related settings\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @param  {String}        [datatype] \"json\" or \"jsonp\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @param  {function}      [callback] function to be executed after\na href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed\nin as first argument\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @param  {function}      [errorCallback] function to be executed if\nthere is an error, response is passed\nin as first argument\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @return {Object|Array}             JSON data\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Calling <a href=\"#/p5/loadJSON\">loadJSON()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * <div><code>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * // Examples use USGS Earthquake API:\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * //   https://earthquake.usgs.gov/fdsnws/event/1/#methods\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * let earthquakes;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * function preload() {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   // Get the most recent earthquake in the database\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   let url =\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *     'summary/all_day.geojson';\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   earthquakes = loadJSON(url);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * }\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * function setup() {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   noLoop();\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * }\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * function draw() {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   background(200);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   // Get the magnitude and name of the earthquake out of the loaded JSON\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   let earthquakeMag = earthquakes.features[0].properties.mag;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   let earthquakeName = earthquakes.features[0].properties.place;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   textAlign(CENTER);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   text(earthquakeName, 0, height - 30, width, 30);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * }\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * </code></div>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Outside of preload(), you may supply a callback function to handle the\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * object:\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * <div><code>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * function setup() {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   noLoop();\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   let url =\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *     'summary/all_day.geojson';\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   loadJSON(url, drawEarthquake);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * }\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * function draw() {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   background(200);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * }\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * function drawEarthquake(earthquakes) {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   // Get the magnitude and name of the earthquake out of the loaded JSON\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   let earthquakeMag = earthquakes.features[0].properties.mag;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   let earthquakeName = earthquakes.features[0].properties.place;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   textAlign(CENTER);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *   text(earthquakeName, 0, height - 30, width, 30);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * }\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * </code></div>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @alt\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * 50x50 ellipse that changes from black to white depending on the current humidity\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * 50x50 ellipse that changes from black to white depending on the current humidity\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\n          /**\n           * @method loadJSON\n           * @param  {String}        path\n           * @param  {String}        datatype\n           * @param  {function}      [callback]\n           * @param  {function}      [errorCallback]\n           * @return {Object|Array}\n           */\n          /**\n           * @method loadJSON\n           * @param  {String}        path\n           * @param  {function}      callback\n           * @param  {function}      [errorCallback]\n           * @return {Object|Array}\n           */\n          _main.default.prototype.loadJSON = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('loadJSON', args);\n            var path = args[0];\n            var callback;\n            var errorCallback;\n            var options;\n\n            var ret = {}; // object needed for preload\n            var t = 'json';\n\n            // check for explicit data type argument\n            for (var i = 1; i < args.length; i++) {\n              var arg = args[i];\n              if (typeof arg === 'string') {\n                if (arg === 'jsonp' || arg === 'json') {\n                  t = arg;\n                }\n              } else if (typeof arg === 'function') {\n                if (!callback) {\n                  callback = arg;\n                } else {\n                  errorCallback = arg;\n                }\n              } else if (\n                _typeof(arg) === 'object' &&\n                (arg.hasOwnProperty('jsonpCallback') ||\n                  arg.hasOwnProperty('jsonpCallbackFunction'))\n              ) {\n                t = 'jsonp';\n                options = arg;\n              }\n            }\n\n            var self = this;\n            this.httpDo(\n              path,\n              'GET',\n              options,\n              t,\n              function(resp) {\n                for (var k in resp) {\n                  ret[k] = resp[k];\n                }\n                if (typeof callback !== 'undefined') {\n                  callback(resp);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                _main.default._friendlyFileLoadError(5, path);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  throw err;\n                }\n              }\n            );\n\n            return ret;\n          };\n\n          /**\n    * Reads the contents of a file and creates a String array of its individual\n    * lines. If the name of the file is used as the parameter, as in the above\n    * example, the file must be located in the sketch directory/folder.\n    *\n    * Alternatively, the file maybe be loaded from anywhere on the local\n    * computer using an absolute path (something that starts with / on Unix and\n    * Linux, or a drive letter on Windows), or the filename parameter can be a\n    * URL for a file found on a network.\n    *\n    * This method is asynchronous, meaning it may not finish before the next\n    * line in your sketch is executed.\n    *\n    * This method is suitable for fetching files up to size of 64MB.\n    * @method loadStrings\n    * @param  {String}   filename   name of the file or url to load\n    * @param  {function} [callback] function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>\n    *                               completes, Array is passed in as first\n    *                               argument\n    * @param  {function} [errorCallback] function to be executed if\n    *                               there is an error, response is passed\n    *                               in as first argument\n    * @return {String[]}            Array of Strings\n    * @example\n    *\n    * Calling loadStrings() inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\n    * operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n    *\n    * <div><code>\n    * let result;\n    * function preload() {\n    *   result = loadStrings('assets/test.txt');\n    * }\n   \n    * function setup() {\n    *   background(200);\n    *   text(random(result), 10, 10, 80, 80);\n    * }\n    * </code></div>\n    *\n    * Outside of preload(), you may supply a callback function to handle the\n    * object:\n    *\n    * <div><code>\n    * function setup() {\n    *   loadStrings('assets/test.txt', pickString);\n    * }\n    *\n    * function pickString(result) {\n    *   background(200);\n    *   text(random(result), 10, 10, 80, 80);\n    * }\n    * </code></div>\n    *\n    * @alt\n    * randomly generated text from a file, for example \"i smell like butter\"\n    * randomly generated text from a file, for example \"i have three feet\"\n    */\n          _main.default.prototype.loadStrings = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('loadStrings', args);\n\n            var ret = [];\n            var callback, errorCallback;\n\n            for (var i = 1; i < args.length; i++) {\n              var arg = args[i];\n              if (typeof arg === 'function') {\n                if (typeof callback === 'undefined') {\n                  callback = arg;\n                } else if (typeof errorCallback === 'undefined') {\n                  errorCallback = arg;\n                }\n              }\n            }\n\n            var self = this;\n            _main.default.prototype.httpDo.call(\n              this,\n              args[0],\n              'GET',\n              'text',\n              function(data) {\n                // split lines handling mac/windows/linux endings\n                var lines = data\n                  .replace(/\\r\\n/g, '\\r')\n                  .replace(/\\n/g, '\\r')\n                  .split(/\\r/);\n\n                // safe insert approach which will not blow up stack when inserting\n                // >100k lines, but still be faster than iterating line-by-line. based on\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#Examples\n                var QUANTUM = 32768;\n                for (var _i = 0, len = lines.length; _i < len; _i += QUANTUM) {\n                  Array.prototype.push.apply(\n                    ret,\n                    lines.slice(_i, Math.min(_i + QUANTUM, len))\n                  );\n                }\n\n                if (typeof callback !== 'undefined') {\n                  callback(ret);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                _main.default._friendlyFileLoadError(3, arguments[0]);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  throw err;\n                }\n              }\n            );\n\n            return ret;\n          };\n\n          /**\n           * Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with\n           * its values. If a file is specified, it must be located in the sketch's\n           * \"data\" folder. The filename parameter can also be a URL to a file found\n           * online. By default, the file is assumed to be comma-separated (in CSV\n           * format). Table only looks for a header row if the 'header' option is\n           * included.\n           *\n           * This method is asynchronous, meaning it may not finish before the next\n           * line in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a>\n           * guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n           * Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\n           * object:\n           *\n           * All files loaded and saved use UTF-8 encoding. This method is suitable for fetching files up to size of 64MB.\n           * @method loadTable\n           * @param  {String}         filename    name of the file or URL to load\n           * @param  {String}         [extension] parse the table by comma-separated values \"csv\", semicolon-separated\n           *                                      values \"ssv\", or tab-separated values \"tsv\"\n           * @param  {String}         [header]    \"header\" to indicate table has header row\n           * @param  {function}       [callback]  function to be executed after\n           *                                      <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the\n           *                                      <a href=\"#/p5.Table\">Table</a> object is passed in as the\n           *                                      first argument.\n           * @param  {function}  [errorCallback]  function to be executed if\n           *                                      there is an error, response is passed\n           *                                      in as first argument\n           * @return {Object}                     <a href=\"#/p5.Table\">Table</a> object containing data\n           *\n           * @example\n           * <div class='norender'>\n           * <code>\n           * // Given the following CSV file called \"mammals.csv\"\n           * // located in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           *   //the file can be remote\n           *   //table = loadTable(\"http://p5js.org/reference/assets/mammals.csv\",\n           *   //                  \"csv\", \"header\");\n           * }\n           *\n           * function setup() {\n           *   //count the columns\n           *   print(table.getRowCount() + ' total rows in table');\n           *   print(table.getColumnCount() + ' total columns in table');\n           *\n           *   print(table.getColumn('name'));\n           *   //[\"Goat\", \"Leopard\", \"Zebra\"]\n           *\n           *   //cycle through the table\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++) {\n           *       print(table.getString(r, c));\n           *     }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * randomly generated text from a file, for example \"i smell like butter\"\n           * randomly generated text from a file, for example \"i have three feet\"\n           */\n          _main.default.prototype.loadTable = function(path) {\n            // p5._validateParameters('loadTable', arguments);\n            var callback;\n            var errorCallback;\n            var options = [];\n            var header = false;\n            var ext = path.substring(path.lastIndexOf('.') + 1, path.length);\n\n            var sep;\n            if (ext === 'csv') {\n              sep = ',';\n            } else if (ext === 'ssv') {\n              sep = ';';\n            } else if (ext === 'tsv') {\n              sep = '\\t';\n            }\n\n            for (var i = 1; i < arguments.length; i++) {\n              if (typeof arguments[i] === 'function') {\n                if (typeof callback === 'undefined') {\n                  callback = arguments[i];\n                } else if (typeof errorCallback === 'undefined') {\n                  errorCallback = arguments[i];\n                }\n              } else if (typeof arguments[i] === 'string') {\n                options.push(arguments[i]);\n                if (arguments[i] === 'header') {\n                  header = true;\n                }\n                if (arguments[i] === 'csv') {\n                  sep = ',';\n                } else if (arguments[i] === 'ssv') {\n                  sep = ';';\n                } else if (arguments[i] === 'tsv') {\n                  sep = '\\t';\n                }\n              }\n            }\n\n            var t = new _main.default.Table();\n\n            var self = this;\n            this.httpDo(\n              path,\n              'GET',\n              'table',\n              function(resp) {\n                var state = {};\n\n                // define constants\n                var PRE_TOKEN = 0,\n                  MID_TOKEN = 1,\n                  POST_TOKEN = 2,\n                  POST_RECORD = 4;\n\n                var QUOTE = '\"',\n                  CR = '\\r',\n                  LF = '\\n';\n\n                var records = [];\n                var offset = 0;\n                var currentRecord = null;\n                var currentChar;\n\n                var tokenBegin = function tokenBegin() {\n                  state.currentState = PRE_TOKEN;\n                  state.token = '';\n                };\n\n                var tokenEnd = function tokenEnd() {\n                  currentRecord.push(state.token);\n                  tokenBegin();\n                };\n\n                var recordBegin = function recordBegin() {\n                  state.escaped = false;\n                  currentRecord = [];\n                  tokenBegin();\n                };\n\n                var recordEnd = function recordEnd() {\n                  state.currentState = POST_RECORD;\n                  records.push(currentRecord);\n                  currentRecord = null;\n                };\n\n                for (;;) {\n                  currentChar = resp[offset++];\n\n                  // EOF\n                  if (currentChar == null) {\n                    if (state.escaped) {\n                      throw new Error('Unclosed quote in file.');\n                    }\n                    if (currentRecord) {\n                      tokenEnd();\n                      recordEnd();\n                      break;\n                    }\n                  }\n                  if (currentRecord === null) {\n                    recordBegin();\n                  }\n\n                  // Handle opening quote\n                  if (state.currentState === PRE_TOKEN) {\n                    if (currentChar === QUOTE) {\n                      state.escaped = true;\n                      state.currentState = MID_TOKEN;\n                      continue;\n                    }\n                    state.currentState = MID_TOKEN;\n                  }\n\n                  // mid-token and escaped, look for sequences and end quote\n                  if (state.currentState === MID_TOKEN && state.escaped) {\n                    if (currentChar === QUOTE) {\n                      if (resp[offset] === QUOTE) {\n                        state.token += QUOTE;\n                        offset++;\n                      } else {\n                        state.escaped = false;\n                        state.currentState = POST_TOKEN;\n                      }\n                    } else if (currentChar === CR) {\n                      continue;\n                    } else {\n                      state.token += currentChar;\n                    }\n                    continue;\n                  }\n\n                  // fall-through: mid-token or post-token, not escaped\n                  if (currentChar === CR) {\n                    if (resp[offset] === LF) {\n                      offset++;\n                    }\n                    tokenEnd();\n                    recordEnd();\n                  } else if (currentChar === LF) {\n                    tokenEnd();\n                    recordEnd();\n                  } else if (currentChar === sep) {\n                    tokenEnd();\n                  } else if (state.currentState === MID_TOKEN) {\n                    state.token += currentChar;\n                  }\n                }\n\n                // set up column names\n                if (header) {\n                  t.columns = records.shift();\n                } else {\n                  for (var _i2 = 0; _i2 < records[0].length; _i2++) {\n                    t.columns[_i2] = 'null';\n                  }\n                }\n                var row;\n                for (var _i3 = 0; _i3 < records.length; _i3++) {\n                  //Handles row of 'undefined' at end of some CSVs\n                  if (records[_i3].length === 1) {\n                    if (records[_i3][0] === 'undefined' || records[_i3][0] === '') {\n                      continue;\n                    }\n                  }\n                  row = new _main.default.TableRow();\n                  row.arr = records[_i3];\n                  row.obj = makeObject(records[_i3], t.columns);\n                  t.addRow(row);\n                }\n                if (typeof callback === 'function') {\n                  callback(t);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                _main.default._friendlyFileLoadError(2, path);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  console.error(err);\n                }\n              }\n            );\n\n            return t;\n          };\n\n          // helper function to turn a row into a JSON object\n          function makeObject(row, headers) {\n            var ret = {};\n            headers = headers || [];\n            if (typeof headers === 'undefined') {\n              for (var j = 0; j < row.length; j++) {\n                headers[j.toString()] = j;\n              }\n            }\n            for (var i = 0; i < headers.length; i++) {\n              var key = headers[i];\n              var val = row[i];\n              ret[key] = val;\n            }\n            return ret;\n          }\n\n          /**\n           * Reads the contents of a file and creates an XML object with its values.\n           * If the name of the file is used as the parameter, as in the above example,\n           * the file must be located in the sketch directory/folder.\n           *\n           * Alternatively, the file maybe be loaded from anywhere on the local\n           * computer using an absolute path (something that starts with / on Unix and\n           * Linux, or a drive letter on Windows), or the filename parameter can be a\n           * URL for a file found on a network.\n           *\n           * This method is asynchronous, meaning it may not finish before the next\n           * line in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a>\n           * guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n           *\n           * Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\n           * object.\n           *\n           * This method is suitable for fetching files up to size of 64MB.\n           * @method loadXML\n           * @param  {String}   filename   name of the file or URL to load\n           * @param  {function} [callback] function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>\n           *                               completes, XML object is passed in as\n           *                               first argument\n           * @param  {function} [errorCallback] function to be executed if\n           *                               there is an error, response is passed\n           *                               in as first argument\n           * @return {Object}              XML object containing data\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let children = xml.getChildren('animal');\n           *\n           *   for (let i = 0; i < children.length; i++) {\n           *     let id = children[i].getNum('id');\n           *     let coloring = children[i].getString('species');\n           *     let name = children[i].getContent();\n           *     print(id + ', ' + coloring + ', ' + name);\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // 0, Capra hircus, Goat\n           * // 1, Panthera pardus, Leopard\n           * // 2, Equus zebra, Zebra\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.prototype.loadXML = function() {\n            for (\n              var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n              _key3 < _len3;\n              _key3++\n            ) {\n              args[_key3] = arguments[_key3];\n            }\n            var ret = new _main.default.XML();\n            var callback, errorCallback;\n\n            for (var i = 1; i < args.length; i++) {\n              var arg = args[i];\n              if (typeof arg === 'function') {\n                if (typeof callback === 'undefined') {\n                  callback = arg;\n                } else if (typeof errorCallback === 'undefined') {\n                  errorCallback = arg;\n                }\n              }\n            }\n\n            var self = this;\n            this.httpDo(\n              args[0],\n              'GET',\n              'xml',\n              function(xml) {\n                for (var key in xml) {\n                  ret[key] = xml[key];\n                }\n                if (typeof callback !== 'undefined') {\n                  callback(ret);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                _main.default._friendlyFileLoadError(1, arguments[0]);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  throw err;\n                }\n              }\n            );\n\n            return ret;\n          };\n\n          /**\n           * This method is suitable for fetching files up to size of 64MB.\n           * @method loadBytes\n           * @param {string}   file            name of the file or URL to load\n           * @param {function} [callback]      function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>\n           *                                    completes\n           * @param {function} [errorCallback] function to be executed if there\n           *                                    is an error\n           * @returns {Object} an object whose 'bytes' property will be the loaded buffer\n           *\n           * @example\n           * <div class='norender'><code>\n           * let data;\n           *\n           * function preload() {\n           *   data = loadBytes('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   for (let i = 0; i < 5; i++) {\n           *     console.log(data.bytes[i].toString(16));\n           *   }\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.prototype.loadBytes = function(file, callback, errorCallback) {\n            var ret = {};\n\n            var self = this;\n            this.httpDo(\n              file,\n              'GET',\n              'arrayBuffer',\n              function(arrayBuffer) {\n                ret.bytes = new Uint8Array(arrayBuffer);\n\n                if (typeof callback === 'function') {\n                  callback(ret);\n                }\n\n                self._decrementPreload();\n              },\n              function(err) {\n                // Error handling\n                _main.default._friendlyFileLoadError(6, file);\n\n                if (errorCallback) {\n                  errorCallback(err);\n                } else {\n                  throw err;\n                }\n              }\n            );\n\n            return ret;\n          };\n\n          /**\n    * Method for executing an HTTP GET request. If data type is not specified,\n    * p5 will try to guess based on the URL, defaulting to text. This is equivalent to\n    * calling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return\n    * a Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer\n    * which can be used to initialize typed arrays (such as Uint8Array).\n    *\n    * @method httpGet\n    * @param  {String}        path       name of the file or url to load\n    * @param  {String}        [datatype] \"json\", \"jsonp\", \"binary\", \"arrayBuffer\",\n    *                                    \"xml\", or \"text\"\n    * @param  {Object|Boolean} [data]    param data passed sent with request\n    * @param  {function}      [callback] function to be executed after\n    *                                    <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n    *                                    as first argument\n    * @param  {function}      [errorCallback] function to be executed if\n    *                                    there is an error, response is passed\n    *                                    in as first argument\n    * @return {Promise} A promise that resolves with the data when the operation\n    *                   completes successfully or rejects with the error after\n    *                   one occurs.\n    * @example\n    * <div class='norender'><code>\n    * // Examples use USGS Earthquake API:\n    * //   https://earthquake.usgs.gov/fdsnws/event/1/#methods\n    * let earthquakes;\n    * function preload() {\n    *   // Get the most recent earthquake in the database\n    *   let url =\n       'https://earthquake.usgs.gov/fdsnws/event/1/query?' +\n    *     'format=geojson&limit=1&orderby=time';\n    *   httpGet(url, 'jsonp', false, function(response) {\n    *     // when the HTTP request completes, populate the variable that holds the\n    *     // earthquake data used in the visualization.\n    *     earthquakes = response;\n    *   });\n    * }\n    *\n    * function draw() {\n    *   if (!earthquakes) {\n    *     // Wait until the earthquake data has loaded before drawing.\n    *     return;\n    *   }\n    *   background(200);\n    *   // Get the magnitude and name of the earthquake out of the loaded JSON\n    *   let earthquakeMag = earthquakes.features[0].properties.mag;\n    *   let earthquakeName = earthquakes.features[0].properties.place;\n    *   ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n    *   textAlign(CENTER);\n    *   text(earthquakeName, 0, height - 30, width, 30);\n    *   noLoop();\n    * }\n    * </code></div>\n    */\n          /**\n           * @method httpGet\n           * @param  {String}        path\n           * @param  {Object|Boolean} data\n           * @param  {function}      [callback]\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          /**\n           * @method httpGet\n           * @param  {String}        path\n           * @param  {function}      callback\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          _main.default.prototype.httpGet = function() {\n            _main.default._validateParameters('httpGet', arguments);\n\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(1, 0, 'GET');\n            return _main.default.prototype.httpDo.apply(this, args);\n          };\n\n          /**\n           * Method for executing an HTTP POST request. If data type is not specified,\n           * p5 will try to guess based on the URL, defaulting to text. This is equivalent to\n           * calling <code>httpDo(path, 'POST')</code>.\n           *\n           * @method httpPost\n           * @param  {String}        path       name of the file or url to load\n           * @param  {String}        [datatype] \"json\", \"jsonp\", \"xml\", or \"text\".\n           *                                    If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.\n           * @param  {Object|Boolean} [data]    param data passed sent with request\n           * @param  {function}      [callback] function to be executed after\n           *                                    <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in\n           *                                    as first argument\n           * @param  {function}      [errorCallback] function to be executed if\n           *                                    there is an error, response is passed\n           *                                    in as first argument\n           * @return {Promise} A promise that resolves with the data when the operation\n           *                   completes successfully or rejects with the error after\n           *                   one occurs.\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Examples use jsonplaceholder.typicode.com for a Mock Data API\n           *\n           * let url = 'https://jsonplaceholder.typicode.com/posts';\n           * let postData = { userId: 1, title: 'p5 Clicked!', body: 'p5.js is very cool.' };\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           * }\n           *\n           * function mousePressed() {\n           *   httpPost(url, 'json', postData, function(result) {\n           *     strokeWeight(2);\n           *     text(result.body, mouseX, mouseY);\n           *   });\n           * }\n           * </code>\n           * </div>\n           *\n           * <div><code>\n           * let url = 'ttps://invalidURL'; // A bad URL that will cause errors\n           * let postData = { title: 'p5 Clicked!', body: 'p5.js is very cool.' };\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           * }\n           *\n           * function mousePressed() {\n           *   httpPost(\n           *     url,\n           *     'json',\n           *     postData,\n           *     function(result) {\n           *       // ... won't be called\n           *     },\n           *     function(error) {\n           *       strokeWeight(2);\n           *       text(error.toString(), mouseX, mouseY);\n           *     }\n           *   );\n           * }\n           * </code></div>\n           */\n          /**\n           * @method httpPost\n           * @param  {String}        path\n           * @param  {Object|Boolean} data\n           * @param  {function}      [callback]\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          /**\n           * @method httpPost\n           * @param  {String}        path\n           * @param  {function}      callback\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          _main.default.prototype.httpPost = function() {\n            _main.default._validateParameters('httpPost', arguments);\n\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(1, 0, 'POST');\n            return _main.default.prototype.httpDo.apply(this, args);\n          };\n\n          /**\n           * Method for executing an HTTP request. If data type is not specified,\n           * p5 will try to guess based on the URL, defaulting to text.<br><br>\n           * For more advanced use, you may also pass in the path as the first argument\n           * and a object as the second argument, the signature follows the one specified\n           * in the Fetch API specification.\n           * This method is suitable for fetching files up to size of 64MB when \"GET\" is used.\n           *\n           * @method httpDo\n           * @param  {String}        path       name of the file or url to load\n           * @param  {String}        [method]   either \"GET\", \"POST\", or \"PUT\",\n           *                                    defaults to \"GET\"\n           * @param  {String}        [datatype] \"json\", \"jsonp\", \"xml\", or \"text\"\n           * @param  {Object}        [data]     param data passed sent with request\n           * @param  {function}      [callback] function to be executed after\n           *                                    <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n           *                                    as first argument\n           * @param  {function}      [errorCallback] function to be executed if\n           *                                    there is an error, response is passed\n           *                                    in as first argument\n           * @return {Promise} A promise that resolves with the data when the operation\n           *                   completes successfully or rejects with the error after\n           *                   one occurs.\n           *\n           * @example\n           * <div>\n           * <code>\n           * // Examples use USGS Earthquake API:\n           * // https://earthquake.usgs.gov/fdsnws/event/1/#methods\n           *\n           * // displays an animation of all USGS earthquakes\n           * let earthquakes;\n           * let eqFeatureIndex = 0;\n           *\n           * function preload() {\n           *   let url = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson';\n           *   httpDo(\n           *     url,\n           *     {\n           *       method: 'GET',\n           *       // Other Request options, like special headers for apis\n           *       headers: { authorization: 'Bearer secretKey' }\n           *     },\n           *     function(res) {\n           *       earthquakes = res;\n           *     }\n           *   );\n           * }\n           *\n           * function draw() {\n           *   // wait until the data is loaded\n           *   if (!earthquakes || !earthquakes.features[eqFeatureIndex]) {\n           *     return;\n           *   }\n           *   clear();\n           *\n           *   let feature = earthquakes.features[eqFeatureIndex];\n           *   let mag = feature.properties.mag;\n           *   let rad = mag / 11 * ((width + height) / 2);\n           *   fill(255, 0, 0, 100);\n           *   ellipse(width / 2 + random(-2, 2), height / 2 + random(-2, 2), rad, rad);\n           *\n           *   if (eqFeatureIndex >= earthquakes.features.length) {\n           *     eqFeatureIndex = 0;\n           *   } else {\n           *     eqFeatureIndex += 1;\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method httpDo\n           * @param  {String}        path\n           * @param  {Object}        options   Request object options as documented in the\n           *                                    \"fetch\" API\n           * <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>\n           * @param  {function}      [callback]\n           * @param  {function}      [errorCallback]\n           * @return {Promise}\n           */\n          _main.default.prototype.httpDo = function() {\n            var type;\n            var callback;\n            var errorCallback;\n            var request;\n            var promise;\n            var jsonpOptions = {};\n            var cbCount = 0;\n            var contentType = 'text/plain';\n            // Trim the callbacks off the end to get an idea of how many arguments are passed\n            for (var i = arguments.length - 1; i > 0; i--) {\n              if (\n                typeof (i < 0 || arguments.length <= i ? undefined : arguments[i]) ===\n                'function'\n              ) {\n                cbCount++;\n              } else {\n                break;\n              }\n            }\n            // The number of arguments minus callbacks\n            var argsCount = arguments.length - cbCount;\n            var path = arguments.length <= 0 ? undefined : arguments[0];\n            if (\n              argsCount === 2 &&\n              typeof path === 'string' &&\n              _typeof(arguments.length <= 1 ? undefined : arguments[1]) === 'object'\n            ) {\n              // Intended for more advanced use, pass in Request parameters directly\n              request = new Request(path, arguments.length <= 1 ? undefined : arguments[1]);\n              callback = arguments.length <= 2 ? undefined : arguments[2];\n              errorCallback = arguments.length <= 3 ? undefined : arguments[3];\n            } else {\n              // Provided with arguments\n              var method = 'GET';\n              var data;\n\n              for (var j = 1; j < arguments.length; j++) {\n                var a = j < 0 || arguments.length <= j ? undefined : arguments[j];\n                if (typeof a === 'string') {\n                  if (a === 'GET' || a === 'POST' || a === 'PUT' || a === 'DELETE') {\n                    method = a;\n                  } else if (\n                    a === 'json' ||\n                    a === 'jsonp' ||\n                    a === 'binary' ||\n                    a === 'arrayBuffer' ||\n                    a === 'xml' ||\n                    a === 'text' ||\n                    a === 'table'\n                  ) {\n                    type = a;\n                  } else {\n                    data = a;\n                  }\n                } else if (typeof a === 'number') {\n                  data = a.toString();\n                } else if (_typeof(a) === 'object') {\n                  if (\n                    a.hasOwnProperty('jsonpCallback') ||\n                    a.hasOwnProperty('jsonpCallbackFunction')\n                  ) {\n                    for (var attr in a) {\n                      jsonpOptions[attr] = a[attr];\n                    }\n                  } else if (a instanceof _main.default.XML) {\n                    data = a.serialize();\n                    contentType = 'application/xml';\n                  } else {\n                    data = JSON.stringify(a);\n                    contentType = 'application/json';\n                  }\n                } else if (typeof a === 'function') {\n                  if (!callback) {\n                    callback = a;\n                  } else {\n                    errorCallback = a;\n                  }\n                }\n              }\n\n              var headers =\n                method === 'GET'\n                  ? new Headers()\n                  : new Headers({ 'Content-Type': contentType });\n\n              request = new Request(path, {\n                method: method,\n                mode: 'cors',\n                body: data,\n                headers: headers\n              });\n            }\n            // do some sort of smart type checking\n            if (!type) {\n              if (path.includes('json')) {\n                type = 'json';\n              } else if (path.includes('xml')) {\n                type = 'xml';\n              } else {\n                type = 'text';\n              }\n            }\n\n            if (type === 'jsonp') {\n              promise = (0, _fetchJsonp.default)(path, jsonpOptions);\n            } else {\n              promise = fetch(request);\n            }\n            promise = promise.then(function(res) {\n              if (!res.ok) {\n                var err = new Error(res.body);\n                err.status = res.status;\n                err.ok = false;\n                throw err;\n              } else {\n                var fileSize = 0;\n                if (type !== 'jsonp') {\n                  fileSize = res.headers.get('content-length');\n                }\n                if (fileSize && fileSize > 64000000) {\n                  _main.default._friendlyFileLoadError(7, path);\n                }\n                switch (type) {\n                  case 'json':\n                  case 'jsonp':\n                    return res.json();\n                  case 'binary':\n                    return res.blob();\n                  case 'arrayBuffer':\n                    return res.arrayBuffer();\n                  case 'xml':\n                    return res.text().then(function(text) {\n                      var parser = new DOMParser();\n                      var xml = parser.parseFromString(text, 'text/xml');\n                      return new _main.default.XML(xml.documentElement);\n                    });\n                  default:\n                    return res.text();\n                }\n              }\n            });\n            promise.then(callback || function() {});\n            promise.catch(errorCallback || console.error);\n            return promise;\n          };\n\n          /**\n           * @module IO\n           * @submodule Output\n           * @for p5\n           */\n\n          window.URL = window.URL || window.webkitURL;\n\n          // private array of p5.PrintWriter objects\n          _main.default.prototype._pWriters = [];\n\n          /**\n           * @method createWriter\n           * @param {String} name name of the file to be created\n           * @param {String} [extension]\n           * @return {p5.PrintWriter}\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     const writer = createWriter('squares.txt');\n           *     for (let i = 0; i < 10; i++) {\n           *       writer.print(i * i);\n           *     }\n           *     writer.close();\n           *     writer.clear();\n           *   }\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.createWriter = function(name, extension) {\n            var newPW;\n            // check that it doesn't already exist\n            for (var i in _main.default.prototype._pWriters) {\n              if (_main.default.prototype._pWriters[i].name === name) {\n                // if a p5.PrintWriter w/ this name already exists...\n                // return p5.prototype._pWriters[i]; // return it w/ contents intact.\n                // or, could return a new, empty one with a unique name:\n                newPW = new _main.default.PrintWriter(name + this.millis(), extension);\n                _main.default.prototype._pWriters.push(newPW);\n                return newPW;\n              }\n            }\n            newPW = new _main.default.PrintWriter(name, extension);\n            _main.default.prototype._pWriters.push(newPW);\n            return newPW;\n          };\n\n          /**\n           *  @class p5.PrintWriter\n           *  @param  {String}     filename\n           *  @param  {String}     [extension]\n           */\n          _main.default.PrintWriter = function(filename, extension) {\n            var self = this;\n            this.name = filename;\n            this.content = '';\n            //Changed to write because it was being overloaded by function below.\n            /**\n             * Writes data to the PrintWriter stream\n             * @method write\n             * @param {Array} data all data to be written by the PrintWriter\n             * @example\n             * <div class=\"norender notest\">\n             * <code>\n             * // creates a file called 'newFile.txt'\n             * let writer = createWriter('newFile.txt');\n             * // write 'Hello world!'' to the file\n             * writer.write(['Hello world!']);\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div class='norender notest'>\n             * <code>\n             * // creates a file called 'newFile2.txt'\n             * let writer = createWriter('newFile2.txt');\n             * // write 'apples,bananas,123' to the file\n             * writer.write(['apples', 'bananas', 123]);\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div class='norender notest'>\n             * <code>\n             * // creates a file called 'newFile3.txt'\n             * let writer = createWriter('newFile3.txt');\n             * // write 'My name is: Teddy' to the file\n             * writer.write('My name is:');\n             * writer.write(' Teddy');\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div>\n             * <code>\n             * function setup() {\n             *   createCanvas(100, 100);\n             *   button = createButton('SAVE FILE');\n             *   button.position(21, 40);\n             *   button.mousePressed(createFile);\n             * }\n             *\n             * function createFile() {\n             *   // creates a file called 'newFile.txt'\n             *   let writer = createWriter('newFile.txt');\n             *   // write 'Hello world!'' to the file\n             *   writer.write(['Hello world!']);\n             *   // close the PrintWriter and save the file\n             *   writer.close();\n             * }\n             * </code>\n             * </div>\n             */\n            this.write = function(data) {\n              this.content += data;\n            };\n            /**\n             * Writes data to the PrintWriter stream, and adds a new line at the end\n             * @method print\n             * @param {Array} data all data to be printed by the PrintWriter\n             * @example\n             * <div class='norender notest'>\n             * <code>\n             * // creates a file called 'newFile.txt'\n             * let writer = createWriter('newFile.txt');\n             * // creates a file containing\n             * //  My name is:\n             * //  Teddy\n             * writer.print('My name is:');\n             * writer.print('Teddy');\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div class='norender notest'>\n             * <code>\n             * let writer;\n             *\n             * function setup() {\n             *   createCanvas(400, 400);\n             *   // create a PrintWriter\n             *   writer = createWriter('newFile.txt');\n             * }\n             *\n             * function draw() {\n             *   writer.print([mouseX, mouseY]);\n             * }\n             *\n             * function mouseClicked() {\n             *   writer.close();\n             * }\n             * </code>\n             * </div>\n             */\n            this.print = function(data) {\n              this.content += ''.concat(data, '\\n');\n            };\n            /**\n             * Clears the data already written to the PrintWriter object\n             * @method clear\n             * @example\n             * <div class =\"norender notest\"><code>\n             * // create writer object\n             * let writer = createWriter('newFile.txt');\n             * writer.write(['clear me']);\n             * // clear writer object here\n             * writer.clear();\n             * // close writer\n             * writer.close();\n             * </code></div>\n             * <div>\n             * <code>\n             * function setup() {\n             *   button = createButton('CLEAR ME');\n             *   button.position(21, 40);\n             *   button.mousePressed(createFile);\n             * }\n             *\n             * function createFile() {\n             *   let writer = createWriter('newFile.txt');\n             *   writer.write(['clear me']);\n             *   writer.clear();\n             *   writer.close();\n             * }\n             * </code>\n             * </div>\n             *\n             */\n            this.clear = function() {\n              this.content = '';\n            };\n            /**\n             * Closes the PrintWriter\n             * @method close\n             * @example\n             * <div class=\"norender notest\">\n             * <code>\n             * // create a file called 'newFile.txt'\n             * let writer = createWriter('newFile.txt');\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             * <div class='norender notest'>\n             * <code>\n             * // create a file called 'newFile2.txt'\n             * let writer = createWriter('newFile2.txt');\n             * // write some data to the file\n             * writer.write([100, 101, 102]);\n             * // close the PrintWriter and save the file\n             * writer.close();\n             * </code>\n             * </div>\n             */\n            this.close = function() {\n              // convert String to Array for the writeFile Blob\n              var arr = [];\n              arr.push(this.content);\n              _main.default.prototype.writeFile(arr, filename, extension);\n              // remove from _pWriters array and delete self\n              for (var i in _main.default.prototype._pWriters) {\n                if (_main.default.prototype._pWriters[i].name === this.name) {\n                  // remove from _pWriters array\n                  _main.default.prototype._pWriters.splice(i, 1);\n                }\n              }\n              self.clear();\n              self = {};\n            };\n          };\n\n          /**\n           * @module IO\n           * @submodule Output\n           * @for p5\n           */\n\n          // object, filename, options --> saveJSON, saveStrings,\n          // filename, [extension] [canvas] --> saveImage\n\n          /**\n           *  Saves a given element(image, text, json, csv, wav, or html) to the client's\n           *  computer. The first parameter can be a pointer to element we want to save.\n           *  The element can be one of <a href=\"#/p5.Element\">p5.Element</a>,an Array of\n           *  Strings, an Array of JSON, a JSON object, a <a href=\"#/p5.Table\">p5.Table\n           *  </a>, a <a href=\"#/p5.Image\">p5.Image</a>, or a p5.SoundFile (requires\n           *  p5.sound). The second parameter is a filename (including extension).The\n           *  third parameter is for options specific to this type of object. This method\n           *  will save a file that fits the given parameters.\n           *  If it is called without specifying an element, by default it will save the\n           *  whole canvas as an image file. You can optionally specify a filename as\n           *  the first parameter in such a case.\n           *  **Note that it is not recommended to\n           *  call this method within draw, as it will open a new save dialog on every\n           *  render.**\n           *\n           * @method save\n           * @param  {Object|String} [objectOrFilename]  If filename is provided, will\n           *                                             save canvas as an image with\n           *                                             either png or jpg extension\n           *                                             depending on the filename.\n           *                                             If object is provided, will\n           *                                             save depending on the object\n           *                                             and filename (see examples\n           *                                             above).\n           * @param  {String} [filename] If an object is provided as the first\n           *                               parameter, then the second parameter\n           *                               indicates the filename,\n           *                               and should include an appropriate\n           *                               file extension (see examples above).\n           * @param  {Boolean|String} [options]  Additional options depend on\n           *                            filetype. For example, when saving JSON,\n           *                            <code>true</code> indicates that the\n           *                            output will be optimized for filesize,\n           *                            rather than readability.\n           *\n           * @example\n           * <div class=\"norender\"><code>\n           * // Saves the canvas as an image\n           * cnv = createCanvas(300, 300);\n           * save(cnv, 'myCanvas.jpg');\n           *\n           * // Saves the canvas as an image by default\n           * save('myCanvas.jpg');\n           * </code></div>\n           *\n           *  <div class=\"norender\"><code>\n           * // Saves p5.Image as an image\n           * img = createImage(10, 10);\n           * save(img, 'myImage.png');\n           * </code></div>\n           *\n           * <div class=\"norender\"><code>\n           * // Saves p5.Renderer object as an image\n           * obj = createGraphics(100, 100);\n           * save(obj, 'myObject.png');\n           * </code></div>\n           *\n           * <div class=\"norender\"><code>\n           * let myTable = new p5.Table();\n           * // Saves table as html file\n           * save(myTable, 'myTable.html');\n           *\n           * // Comma Separated Values\n           * save(myTable, 'myTable.csv');\n           *\n           * // Tab Separated Values\n           * save(myTable, 'myTable.tsv');\n           * </code></div>\n           *\n           * <div class=\"norender\"><code>\n           * let myJSON = { a: 1, b: true };\n           *\n           * // Saves pretty JSON\n           * save(myJSON, 'my.json');\n           *\n           * // Optimizes JSON filesize\n           * save(myJSON, 'my.json', true);\n           * </code></div>\n           *\n           * <div class=\"norender\"><code>\n           * // Saves array of strings to text file with line breaks after each item\n           * let arrayOfStrings = ['a', 'b'];\n           * save(arrayOfStrings, 'my.txt');\n           * </code></div>\n           *\n           * @alt\n           * An example for saving a canvas as an image.\n           * An example for saving a p5.Image element as an image.\n           * An example for saving a p5.Renderer element.\n           * An example showing how to save a table in formats of HTML, CSV and TSV.\n           * An example for saving JSON to a txt file with some extra arguments.\n           * An example for saving an array of strings to text file with line breaks.\n           */\n\n          _main.default.prototype.save = function(object, _filename, _options) {\n            // parse the arguments and figure out which things we are saving\n            var args = arguments;\n            // =================================================\n            // OPTION 1: saveCanvas...\n\n            // if no arguments are provided, save canvas\n            var cnv = this._curElement ? this._curElement.elt : this.elt;\n            if (args.length === 0) {\n              _main.default.prototype.saveCanvas(cnv);\n              return;\n            } else if (\n              args[0] instanceof _main.default.Renderer ||\n              args[0] instanceof _main.default.Graphics\n            ) {\n              // otherwise, parse the arguments\n\n              // if first param is a p5Graphics, then saveCanvas\n              _main.default.prototype.saveCanvas(args[0].elt, args[1], args[2]);\n              return;\n            } else if (args.length === 1 && typeof args[0] === 'string') {\n              // if 1st param is String and only one arg, assume it is canvas filename\n              _main.default.prototype.saveCanvas(cnv, args[0]);\n            } else {\n              // =================================================\n              // OPTION 2: extension clarifies saveStrings vs. saveJSON\n              var extension = _checkFileExtension(args[1], args[2])[1];\n              switch (extension) {\n                case 'json':\n                  _main.default.prototype.saveJSON(args[0], args[1], args[2]);\n                  return;\n                case 'txt':\n                  _main.default.prototype.saveStrings(args[0], args[1], args[2]);\n                  return;\n                // =================================================\n                // OPTION 3: decide based on object...\n                default:\n                  if (args[0] instanceof Array) {\n                    _main.default.prototype.saveStrings(args[0], args[1], args[2]);\n                  } else if (args[0] instanceof _main.default.Table) {\n                    _main.default.prototype.saveTable(args[0], args[1], args[2]);\n                  } else if (args[0] instanceof _main.default.Image) {\n                    _main.default.prototype.saveCanvas(args[0].canvas, args[1]);\n                  } else if (args[0] instanceof _main.default.SoundFile) {\n                    _main.default.prototype.saveSound(args[0], args[1], args[2], args[3]);\n                  }\n              }\n            }\n          };\n\n          /**\n           *  Writes the contents of an Array or a JSON object to a .json file.\n           *  The file saving process and location of the saved file will\n           *  vary between web browsers.\n           *\n           *  @method saveJSON\n           *  @param  {Array|Object} json\n           *  @param  {String} filename\n           *  @param  {Boolean} [optimize]   If true, removes line breaks\n           *                                 and spaces from the output\n           *                                 file to optimize filesize\n           *                                 (but not readability).\n           *  @example\n           * <div><code>\n           * let json = {}; // new  JSON Object\n           *\n           * json.id = 0;\n           * json.species = 'Panthera leo';\n           * json.name = 'Lion';\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     saveJSON(json, 'lion.json');\n           *   }\n           * }\n           *\n           * // saves the following to a file called \"lion.json\":\n           * // {\n           * //   \"id\": 0,\n           * //   \"species\": \"Panthera leo\",\n           * //   \"name\": \"Lion\"\n           * // }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.prototype.saveJSON = function(json, filename, opt) {\n            _main.default._validateParameters('saveJSON', arguments);\n            var stringify;\n            if (opt) {\n              stringify = JSON.stringify(json);\n            } else {\n              stringify = JSON.stringify(json, undefined, 2);\n            }\n            this.saveStrings(stringify.split('\\n'), filename, 'json');\n          };\n\n          _main.default.prototype.saveJSONObject = _main.default.prototype.saveJSON;\n          _main.default.prototype.saveJSONArray = _main.default.prototype.saveJSON;\n\n          /**\n           *  Writes an array of Strings to a text file, one line per String.\n           *  The file saving process and location of the saved file will\n           *  vary between web browsers.\n           *\n           *  @method saveStrings\n           *  @param  {String[]} list   string array to be written\n           *  @param  {String} filename filename for output\n           *  @param  {String} [extension] the filename's extension\n           *  @param  {Boolean} [isCRLF] if true, change line-break to CRLF\n           *  @example\n           * <div><code>\n           * let words = 'apple bear cat dog';\n           *\n           * // .split() outputs an Array\n           * let list = split(words, ' ');\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   background(200);\n           *   text('click here to save', 10, 10, 70, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n           *     saveStrings(list, 'nouns.txt');\n           *   }\n           * }\n           *\n           * // Saves the following to a file called 'nouns.txt':\n           * //\n           * // apple\n           * // bear\n           * // cat\n           * // dog\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.prototype.saveStrings = function(\n            list,\n            filename,\n            extension,\n            isCRLF\n          ) {\n            _main.default._validateParameters('saveStrings', arguments);\n            var ext = extension || 'txt';\n            var pWriter = this.createWriter(filename, ext);\n            for (var i = 0; i < list.length; i++) {\n              isCRLF ? pWriter.write(list[i] + '\\r\\n') : pWriter.write(list[i] + '\\n');\n            }\n            pWriter.close();\n            pWriter.clear();\n          };\n\n          // =======\n          // HELPERS\n          // =======\n\n          function escapeHelper(content) {\n            return content\n              .replace(/&/g, '&amp;')\n              .replace(/</g, '&lt;')\n              .replace(/>/g, '&gt;')\n              .replace(/\"/g, '&quot;')\n              .replace(/'/g, '&#039;');\n          }\n\n          /**\n           *  Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a\n           *  text file with comma-separated-values ('csv') but can also\n           *  use tab separation ('tsv'), or generate an HTML table ('html').\n           *  The file saving process and location of the saved file will\n           *  vary between web browsers.\n           *\n           *  @method saveTable\n           *  @param  {p5.Table} Table  the <a href=\"#/p5.Table\">Table</a> object to save to a file\n           *  @param  {String} filename the filename to which the Table should be saved\n           *  @param  {String} [options]  can be one of \"tsv\", \"csv\", or \"html\"\n           *  @example\n           *  <div><code>\n           * let table;\n           *\n           * function setup() {\n           *   table = new p5.Table();\n           *\n           *   table.addColumn('id');\n           *   table.addColumn('species');\n           *   table.addColumn('name');\n           *\n           *   let newRow = table.addRow();\n           *   newRow.setNum('id', table.getRowCount() - 1);\n           *   newRow.setString('species', 'Panthera leo');\n           *   newRow.setString('name', 'Lion');\n           *\n           *   // To save, un-comment next line then click 'run'\n           *   // saveTable(table, 'new.csv');\n           * }\n           *\n           * // Saves the following to a file called 'new.csv':\n           * // id,species,name\n           * // 0,Panthera leo,Lion\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.prototype.saveTable = function(table, filename, options) {\n            _main.default._validateParameters('saveTable', arguments);\n            var ext;\n            if (options === undefined) {\n              ext = filename.substring(filename.lastIndexOf('.') + 1, filename.length);\n            } else {\n              ext = options;\n            }\n            var pWriter = this.createWriter(filename, ext);\n\n            var header = table.columns;\n\n            var sep = ','; // default to CSV\n            if (ext === 'tsv') {\n              sep = '\\t';\n            }\n            if (ext !== 'html') {\n              // make header if it has values\n              if (header[0] !== '0') {\n                for (var h = 0; h < header.length; h++) {\n                  if (h < header.length - 1) {\n                    pWriter.write(header[h] + sep);\n                  } else {\n                    pWriter.write(header[h]);\n                  }\n                }\n                pWriter.write('\\n');\n              }\n\n              // make rows\n              for (var i = 0; i < table.rows.length; i++) {\n                var j = void 0;\n                for (j = 0; j < table.rows[i].arr.length; j++) {\n                  if (j < table.rows[i].arr.length - 1) {\n                    //double quotes should be inserted in csv only if contains comma separated single value\n                    if (ext === 'csv' && table.rows[i].arr[j].includes(',')) {\n                      pWriter.write('\"' + table.rows[i].arr[j] + '\"' + sep);\n                    } else {\n                      pWriter.write(table.rows[i].arr[j] + sep);\n                    }\n                  } else {\n                    //double quotes should be inserted in csv only if contains comma separated single value\n                    if (ext === 'csv' && table.rows[i].arr[j].includes(',')) {\n                      pWriter.write('\"' + table.rows[i].arr[j] + '\"');\n                    } else {\n                      pWriter.write(table.rows[i].arr[j]);\n                    }\n                  }\n                }\n                pWriter.write('\\n');\n              }\n            } else {\n              // otherwise, make HTML\n              pWriter.print('<html>');\n              pWriter.print('<head>');\n              var str = '  <meta http-equiv=\"content-type\" content';\n              str += '=\"text/html;charset=utf-8\" />';\n              pWriter.print(str);\n              pWriter.print('</head>');\n\n              pWriter.print('<body>');\n              pWriter.print('  <table>');\n\n              // make header if it has values\n              if (header[0] !== '0') {\n                pWriter.print('    <tr>');\n                for (var k = 0; k < header.length; k++) {\n                  var e = escapeHelper(header[k]);\n                  pWriter.print('      <td>'.concat(e));\n                  pWriter.print('      </td>');\n                }\n                pWriter.print('    </tr>');\n              }\n\n              // make rows\n              for (var row = 0; row < table.rows.length; row++) {\n                pWriter.print('    <tr>');\n                for (var col = 0; col < table.columns.length; col++) {\n                  var entry = table.rows[row].getString(col);\n                  var htmlEntry = escapeHelper(entry);\n                  pWriter.print('      <td>'.concat(htmlEntry));\n                  pWriter.print('      </td>');\n                }\n                pWriter.print('    </tr>');\n              }\n              pWriter.print('  </table>');\n              pWriter.print('</body>');\n              pWriter.print('</html>');\n            }\n            // close and clear the pWriter\n            pWriter.close();\n            pWriter.clear();\n          }; // end saveTable()\n\n          /**\n           *  Generate a blob of file data as a url to prepare for download.\n           *  Accepts an array of data, a filename, and an extension (optional).\n           *  This is a private function because it does not do any formatting,\n           *  but it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.\n           *\n           *  @param  {Array} dataToDownload\n           *  @param  {String} filename\n           *  @param  {String} [extension]\n           *  @private\n           */\n          _main.default.prototype.writeFile = function(\n            dataToDownload,\n            filename,\n            extension\n          ) {\n            var type = 'application/octet-stream';\n            if (_main.default.prototype._isSafari()) {\n              type = 'text/plain';\n            }\n            var blob = new Blob(dataToDownload, {\n              type: type\n            });\n\n            _main.default.prototype.downloadFile(blob, filename, extension);\n          };\n\n          /**\n           *  Forces download. Accepts a url to filedata/blob, a filename,\n           *  and an extension (optional).\n           *  This is a private function because it does not do any formatting,\n           *  but it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.\n           *\n           *  @method downloadFile\n           *  @private\n           *  @param  {String|Blob} data    either an href generated by createObjectURL,\n           *                                or a Blob object containing the data\n           *  @param  {String} [filename]\n           *  @param  {String} [extension]\n           */\n          _main.default.prototype.downloadFile = function(data, fName, extension) {\n            var fx = _checkFileExtension(fName, extension);\n            var filename = fx[0];\n\n            if (data instanceof Blob) {\n              _fileSaver.default.saveAs(data, filename);\n              return;\n            }\n\n            var a = document.createElement('a');\n            a.href = data;\n            a.download = filename;\n\n            // Firefox requires the link to be added to the DOM before click()\n            a.onclick = function(e) {\n              destroyClickedElement(e);\n              e.stopPropagation();\n            };\n\n            a.style.display = 'none';\n            document.body.appendChild(a);\n\n            // Safari will open this file in the same page as a confusing Blob.\n            if (_main.default.prototype._isSafari()) {\n              var aText = 'Hello, Safari user! To download this file...\\n';\n              aText += '1. Go to File --> Save As.\\n';\n              aText += '2. Choose \"Page Source\" as the Format.\\n';\n              aText += '3. Name it with this extension: .\"'.concat(fx[1], '\"');\n              alert(aText);\n            }\n            a.click();\n          };\n\n          /**\n           *  Returns a file extension, or another string\n           *  if the provided parameter has no extension.\n           *\n           *  @param   {String} filename\n           *  @param   {String} [extension]\n           *  @return  {String[]} [fileName, fileExtension]\n           *\n           *  @private\n           */\n          function _checkFileExtension(filename, extension) {\n            if (!extension || extension === true || extension === 'true') {\n              extension = '';\n            }\n            if (!filename) {\n              filename = 'untitled';\n            }\n            var ext = '';\n            // make sure the file will have a name, see if filename needs extension\n            if (filename && filename.includes('.')) {\n              ext = filename.split('.').pop();\n            }\n            // append extension if it doesn't exist\n            if (extension) {\n              if (ext !== extension) {\n                ext = extension;\n                filename = ''.concat(filename, '.').concat(ext);\n              }\n            }\n            return [filename, ext];\n          }\n          _main.default.prototype._checkFileExtension = _checkFileExtension;\n\n          /**\n           *  Returns true if the browser is Safari, false if not.\n           *  Safari makes trouble for downloading files.\n           *\n           *  @return  {Boolean} [description]\n           *  @private\n           */\n          _main.default.prototype._isSafari = function() {\n            var x = Object.prototype.toString.call(window.HTMLElement);\n            return x.indexOf('Constructor') > 0;\n          };\n\n          /**\n           *  Helper function, a callback for download that deletes\n           *  an invisible anchor element from the DOM once the file\n           *  has been automatically downloaded.\n           *\n           *  @private\n           */\n          function destroyClickedElement(event) {\n            document.body.removeChild(event.target);\n          }\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../core/friendly_errors/fes_core': 51,\n          '../core/friendly_errors/file_errors': 52,\n          '../core/friendly_errors/validate_params': 54,\n          '../core/main': 59,\n          'es6-promise/auto': 23,\n          'fetch-jsonp': 25,\n          'file-saver': 26,\n          'whatwg-fetch': 37\n        }\n      ],\n      86: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /**\n           *  <a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much\n           *  like in a traditional spreadsheet. Tables can be generated from\n           *  scratch, dynamically, or using data from an existing file.\n           *\n           *  @class p5.Table\n           *  @constructor\n           *  @param  {p5.TableRow[]}     [rows] An array of p5.TableRow objects\n           */ /**\n           * @module IO\n           * @submodule Table\n           * @requires core\n           */ /**\n           *  Table Options\n           *  Generic class for handling tabular data, typically from a\n           *  CSV, TSV, or other sort of spreadsheet file.\n           *  CSV files are\n           *  <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\n           *  comma separated values</a>, often with the data in quotes. TSV\n           *  files use tabs as separators, and usually don't bother with the\n           *  quotes.\n           *  File names should end with .csv if they're comma separated.\n           *  A rough \"spec\" for CSV can be found\n           *  <a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.\n           *  To load files, use the <a href=\"#/p5/loadTable\">loadTable</a> method.\n           *  To save tables to your computer, use the <a href=\"#/p5/save\">save</a> method\n           *   or the <a href=\"#/p5/saveTable\">saveTable</a> method.\n           *\n           *  Possible options include:\n           *  <ul>\n           *  <li>csv - parse the table as comma-separated values\n           *  <li>tsv - parse the table as tab-separated values\n           *  <li>header - this table has a header (title) row\n           *  </ul>\n           */\n          _main.default.Table = function(rows) {\n            /**\n             * An array containing the names of the columns in the table, if the \"header\" the table is\n             * loaded with the \"header\" parameter.\n             * @property columns {String[]}\n             * @example\n             * <div class=\"norender\">\n             * <code>\n             * // Given the CSV file \"mammals.csv\"\n             * // in the project's \"assets\" folder:\n             * //\n             * // id,species,name\n             * // 0,Capra hircus,Goat\n             * // 1,Panthera pardus,Leopard\n             * // 2,Equus zebra,Zebra\n             *\n             * let table;\n             *\n             * function preload() {\n             *   //my table is comma separated value \"csv\"\n             *   //and has a header specifying the columns labels\n             *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n             * }\n             *\n             * function setup() {\n             *   //print the column names\n             *   for (let c = 0; c < table.getColumnCount(); c++) {\n             *     print('column ' + c + ' is named ' + table.columns[c]);\n             *   }\n             * }\n             * </code>\n             * </div>\n             */\n            this.columns = [];\n\n            /**\n             * An array containing the <a href=\"#/p5.Table\">p5.TableRow</a> objects that make up the\n             * rows of the table. The same result as calling <a href=\"#/p5/getRows\">getRows()</a>\n             * @property rows {p5.TableRow[]}\n             */\n            this.rows = [];\n          };\n\n          /**\n           *  Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default,\n           *  an empty row is created. Typically, you would store a reference to\n           *  the new row in a TableRow object (see newRow in the example above),\n           *  and then set individual values using <a href=\"#/p5/set\">set()</a>.\n           *\n           *  If a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is\n           *  duplicated and added to the table.\n           *\n           *  @method  addRow\n           *  @param   {p5.TableRow} [row] row to be added to the table\n           *  @return  {p5.TableRow} the row that was added\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //add a row\n           *   let newRow = table.addRow();\n           *   newRow.setString('id', table.getRowCount() - 1);\n           *   newRow.setString('species', 'Canis Lupus');\n           *   newRow.setString('name', 'Wolf');\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.addRow = function(row) {\n            // make sure it is a valid TableRow\n            var r = row || new _main.default.TableRow();\n\n            if (typeof r.arr === 'undefined' || typeof r.obj === 'undefined') {\n              //r = new p5.prototype.TableRow(r);\n              throw new Error('invalid TableRow: '.concat(r));\n            }\n            r.table = this;\n            this.rows.push(r);\n            return r;\n          };\n\n          /**\n           * Removes a row from the table object.\n           *\n           * @method  removeRow\n           * @param   {Integer} id ID number of the row to remove\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //remove the first row\n           *   table.removeRow(0);\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.removeRow = function(id) {\n            this.rows[id].table = null; // remove reference to table\n            var chunk = this.rows.splice(id + 1, this.rows.length);\n            this.rows.pop();\n            this.rows = this.rows.concat(chunk);\n          };\n\n          /**\n           * Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference\n           * can then be used to get and set values of the selected row.\n           *\n           * @method  getRow\n           * @param  {Integer}   rowID ID number of the row to get\n           * @return {p5.TableRow} <a href=\"#/p5.TableRow\">p5.TableRow</a> object\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let row = table.getRow(1);\n           *   //print it column by column\n           *   //note: a row is an object, not an array\n           *   for (let c = 0; c < table.getColumnCount(); c++) {\n           *     print(row.getString(c));\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.getRow = function(r) {\n            return this.rows[r];\n          };\n\n          /**\n           *  Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s.\n           *\n           *  @method  getRows\n           *  @return {p5.TableRow[]}   Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *\n           *   //warning: rows is an array of objects\n           *   for (let r = 0; r < rows.length; r++) {\n           *     rows[r].set('name', 'Unicorn');\n           *   }\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.getRows = function() {\n            return this.rows;\n          };\n\n          /**\n           *  Finds the first row in the Table that contains the value\n           *  provided, and returns a reference to that row. Even if\n           *  multiple rows are possible matches, only the first matching\n           *  row is returned. The column to search may be specified by\n           *  either its ID or title.\n           *\n           *  @method  findRow\n           *  @param  {String} value  The value to match\n           *  @param  {Integer|String} column ID number or title of the\n           *                                 column to search\n           *  @return {p5.TableRow}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //find the animal named zebra\n           *   let row = table.findRow('Zebra', 'name');\n           *   //find the corresponding species\n           *   print(row.getString('species'));\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.findRow = function(value, column) {\n            // try the Object\n            if (typeof column === 'string') {\n              for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].obj[column] === value) {\n                  return this.rows[i];\n                }\n              }\n            } else {\n              // try the Array\n              for (var j = 0; j < this.rows.length; j++) {\n                if (this.rows[j].arr[column] === value) {\n                  return this.rows[j];\n                }\n              }\n            }\n            // otherwise...\n            return null;\n          };\n\n          /**\n           *  Finds the rows in the Table that contain the value\n           *  provided, and returns references to those rows. Returns an\n           *  Array, so for must be used to iterate through all the rows,\n           *  as shown in the example above. The column to search may be\n           *  specified by either its ID or title.\n           *\n           *  @method  findRows\n           *  @param  {String} value  The value to match\n           *  @param  {Integer|String} column ID number or title of the\n           *                                 column to search\n           *  @return {p5.TableRow[]}        An Array of TableRow objects\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //add another goat\n           *   let newRow = table.addRow();\n           *   newRow.setString('id', table.getRowCount() - 1);\n           *   newRow.setString('species', 'Scape Goat');\n           *   newRow.setString('name', 'Goat');\n           *\n           *   //find the rows containing animals named Goat\n           *   let rows = table.findRows('Goat', 'name');\n           *   print(rows.length + ' Goats found');\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.findRows = function(value, column) {\n            var ret = [];\n            if (typeof column === 'string') {\n              for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].obj[column] === value) {\n                  ret.push(this.rows[i]);\n                }\n              }\n            } else {\n              // try the Array\n              for (var j = 0; j < this.rows.length; j++) {\n                if (this.rows[j].arr[column] === value) {\n                  ret.push(this.rows[j]);\n                }\n              }\n            }\n            return ret;\n          };\n\n          /**\n           * Finds the first row in the Table that matches the regular\n           * expression provided, and returns a reference to that row.\n           * Even if multiple rows are possible matches, only the first\n           * matching row is returned. The column to search may be\n           * specified by either its ID or title.\n           *\n           * @method  matchRow\n           * @param  {String|RegExp} regexp The regular expression to match\n           * @param  {String|Integer} column The column ID (number) or\n           *                                  title (string)\n           * @return {p5.TableRow}        TableRow object\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //Search using specified regex on a given column, return TableRow object\n           *   let mammal = table.matchRow(new RegExp('ant'), 1);\n           *   print(mammal.getString(1));\n           *   //Output \"Panthera pardus\"\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Table.prototype.matchRow = function(regexp, column) {\n            if (typeof column === 'number') {\n              for (var j = 0; j < this.rows.length; j++) {\n                if (this.rows[j].arr[column].match(regexp)) {\n                  return this.rows[j];\n                }\n              }\n            } else {\n              for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].obj[column].match(regexp)) {\n                  return this.rows[i];\n                }\n              }\n            }\n            return null;\n          };\n\n          /**\n           * Finds the rows in the Table that match the regular expression provided,\n           * and returns references to those rows. Returns an array, so for must be\n           * used to iterate through all the rows, as shown in the example. The\n           * column to search may be specified by either its ID or title.\n           *\n           * @method  matchRows\n           * @param  {String} regexp The regular expression to match\n           * @param  {String|Integer} [column] The column ID (number) or\n           *                                  title (string)\n           * @return {p5.TableRow[]}          An Array of TableRow objects\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let table;\n           *\n           * function setup() {\n           *   table = new p5.Table();\n           *\n           *   table.addColumn('name');\n           *   table.addColumn('type');\n           *\n           *   let newRow = table.addRow();\n           *   newRow.setString('name', 'Lion');\n           *   newRow.setString('type', 'Mammal');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', 'Snake');\n           *   newRow.setString('type', 'Reptile');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', 'Mosquito');\n           *   newRow.setString('type', 'Insect');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', 'Lizard');\n           *   newRow.setString('type', 'Reptile');\n           *\n           *   let rows = table.matchRows('R.*', 'type');\n           *   for (let i = 0; i < rows.length; i++) {\n           *     print(rows[i].getString('name') + ': ' + rows[i].getString('type'));\n           *   }\n           * }\n           * // Sketch prints:\n           * // Snake: Reptile\n           * // Lizard: Reptile\n           * </code>\n           * </div>\n           */\n          _main.default.Table.prototype.matchRows = function(regexp, column) {\n            var ret = [];\n            if (typeof column === 'number') {\n              for (var j = 0; j < this.rows.length; j++) {\n                if (this.rows[j].arr[column].match(regexp)) {\n                  ret.push(this.rows[j]);\n                }\n              }\n            } else {\n              for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].obj[column].match(regexp)) {\n                  ret.push(this.rows[i]);\n                }\n              }\n            }\n            return ret;\n          };\n\n          /**\n           *  Retrieves all values in the specified column, and returns them\n           *  as an array. The column may be specified by either its ID or title.\n           *\n           *  @method  getColumn\n           *  @param  {String|Number} column String or Number of the column to return\n           *  @return {Array}       Array of column values\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //getColumn returns an array that can be printed directly\n           *   print(table.getColumn('species'));\n           *   //outputs [\"Capra hircus\", \"Panthera pardus\", \"Equus zebra\"]\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.getColumn = function(value) {\n            var ret = [];\n            if (typeof value === 'string') {\n              for (var i = 0; i < this.rows.length; i++) {\n                ret.push(this.rows[i].obj[value]);\n              }\n            } else {\n              for (var j = 0; j < this.rows.length; j++) {\n                ret.push(this.rows[j].arr[value]);\n              }\n            }\n            return ret;\n          };\n\n          /**\n           *  Removes all rows from a Table. While all rows are removed,\n           *  columns and column titles are maintained.\n           *\n           *  @method  clearRows\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.clearRows();\n           *   print(table.getRowCount() + ' total rows in table');\n           *   print(table.getColumnCount() + ' total columns in table');\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.clearRows = function() {\n            delete this.rows;\n            this.rows = [];\n          };\n\n          /**\n           *  Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object.\n           *  Typically, you will want to specify a title, so the column\n           *  may be easily referenced later by name. (If no title is\n           *  specified, the new column's title will be null.)\n           *\n           *  @method  addColumn\n           *  @param {String} [title] title of the given column\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.addColumn('carnivore');\n           *   table.set(0, 'carnivore', 'no');\n           *   table.set(1, 'carnivore', 'yes');\n           *   table.set(2, 'carnivore', 'no');\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.addColumn = function(title) {\n            var t = title || null;\n            this.columns.push(t);\n          };\n\n          /**\n           *  Returns the total number of columns in a Table.\n           *\n           *  @method  getColumnCount\n           *  @return {Integer} Number of columns in this table\n           * @example\n           * <div>\n           * <code>\n           * // given the cvs file \"blobs.csv\" in /assets directory\n           * // ID, Name, Flavor, Shape, Color\n           * // Blob1, Blobby, Sweet, Blob, Pink\n           * // Blob2, Saddy, Savory, Blob, Blue\n           *\n           * let table;\n           *\n           * function preload() {\n           *   table = loadTable('assets/blobs.csv');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(200, 100);\n           *   textAlign(CENTER);\n           *   background(255);\n           * }\n           *\n           * function draw() {\n           *   let numOfColumn = table.getColumnCount();\n           *   text('There are ' + numOfColumn + ' columns in the table.', 100, 50);\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Table.prototype.getColumnCount = function() {\n            return this.columns.length;\n          };\n\n          /**\n           *  Returns the total number of rows in a Table.\n           *\n           *  @method  getRowCount\n           *  @return {Integer} Number of rows in this table\n           * @example\n           * <div>\n           * <code>\n           * // given the cvs file \"blobs.csv\" in /assets directory\n           * //\n           * // ID, Name, Flavor, Shape, Color\n           * // Blob1, Blobby, Sweet, Blob, Pink\n           * // Blob2, Saddy, Savory, Blob, Blue\n           *\n           * let table;\n           *\n           * function preload() {\n           *   table = loadTable('assets/blobs.csv');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(200, 100);\n           *   textAlign(CENTER);\n           *   background(255);\n           * }\n           *\n           * function draw() {\n           *   text('There are ' + table.getRowCount() + ' rows in the table.', 100, 50);\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Table.prototype.getRowCount = function() {\n            return this.rows.length;\n          };\n\n          /**\n           *  Removes any of the specified characters (or \"tokens\").\n           *\n           *  If no column is specified, then the values in all columns and\n           *  rows are processed. A specific column may be referenced by\n           *  either its ID or title.\n           *\n           *  @method  removeTokens\n           *  @param  {String} chars  String listing characters to be removed\n           *  @param  {String|Integer} [column] Column ID (number)\n           *                                   or name (string)\n           *\n           * @example\n           * <div class=\"norender\"><code>\n           * function setup() {\n           *   let table = new p5.Table();\n           *\n           *   table.addColumn('name');\n           *   table.addColumn('type');\n           *\n           *   let newRow = table.addRow();\n           *   newRow.setString('name', '   $Lion  ,');\n           *   newRow.setString('type', ',,,Mammal');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', '$Snake  ');\n           *   newRow.setString('type', ',,,Reptile');\n           *\n           *   table.removeTokens(',$ ');\n           *   print(table.getArray());\n           * }\n           *\n           * // prints:\n           * //  0  \"Lion\"   \"Mamal\"\n           * //  1  \"Snake\"  \"Reptile\"\n           * </code></div>\n           */\n          _main.default.Table.prototype.removeTokens = function(chars, column) {\n            var escape = function escape(s) {\n              return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            };\n            var charArray = [];\n            for (var i = 0; i < chars.length; i++) {\n              charArray.push(escape(chars.charAt(i)));\n            }\n            var regex = new RegExp(charArray.join('|'), 'g');\n\n            if (typeof column === 'undefined') {\n              for (var c = 0; c < this.columns.length; c++) {\n                for (var d = 0; d < this.rows.length; d++) {\n                  var s = this.rows[d].arr[c];\n                  s = s.replace(regex, '');\n                  this.rows[d].arr[c] = s;\n                  this.rows[d].obj[this.columns[c]] = s;\n                }\n              }\n            } else if (typeof column === 'string') {\n              for (var j = 0; j < this.rows.length; j++) {\n                var val = this.rows[j].obj[column];\n                val = val.replace(regex, '');\n                this.rows[j].obj[column] = val;\n                var pos = this.columns.indexOf(column);\n                this.rows[j].arr[pos] = val;\n              }\n            } else {\n              for (var k = 0; k < this.rows.length; k++) {\n                var str = this.rows[k].arr[column];\n                str = str.replace(regex, '');\n                this.rows[k].arr[column] = str;\n                this.rows[k].obj[this.columns[column]] = str;\n              }\n            }\n          };\n\n          /**\n           *  Trims leading and trailing whitespace, such as spaces and tabs,\n           *  from String table values. If no column is specified, then the\n           *  values in all columns and rows are trimmed. A specific column\n           *  may be referenced by either its ID or title.\n           *\n           *  @method  trim\n           *  @param  {String|Integer} [column] Column ID (number)\n           *                                   or name (string)\n           * @example\n           * <div class=\"norender\"><code>\n           * function setup() {\n           *   let table = new p5.Table();\n           *\n           *   table.addColumn('name');\n           *   table.addColumn('type');\n           *\n           *   let newRow = table.addRow();\n           *   newRow.setString('name', '   Lion  ,');\n           *   newRow.setString('type', ' Mammal  ');\n           *\n           *   newRow = table.addRow();\n           *   newRow.setString('name', '  Snake  ');\n           *   newRow.setString('type', '  Reptile  ');\n           *\n           *   table.trim();\n           *   print(table.getArray());\n           * }\n           *\n           * // prints:\n           * //  0  \"Lion\"   \"Mamal\"\n           * //  1  \"Snake\"  \"Reptile\"\n           * </code></div>\n           */\n          _main.default.Table.prototype.trim = function(column) {\n            var regex = new RegExp(' ', 'g');\n\n            if (typeof column === 'undefined') {\n              for (var c = 0; c < this.columns.length; c++) {\n                for (var d = 0; d < this.rows.length; d++) {\n                  var s = this.rows[d].arr[c];\n                  s = s.replace(regex, '');\n                  this.rows[d].arr[c] = s;\n                  this.rows[d].obj[this.columns[c]] = s;\n                }\n              }\n            } else if (typeof column === 'string') {\n              for (var j = 0; j < this.rows.length; j++) {\n                var val = this.rows[j].obj[column];\n                val = val.replace(regex, '');\n                this.rows[j].obj[column] = val;\n                var pos = this.columns.indexOf(column);\n                this.rows[j].arr[pos] = val;\n              }\n            } else {\n              for (var k = 0; k < this.rows.length; k++) {\n                var str = this.rows[k].arr[column];\n                str = str.replace(regex, '');\n                this.rows[k].arr[column] = str;\n                this.rows[k].obj[this.columns[column]] = str;\n              }\n            }\n          };\n\n          /**\n           *  Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table\n           *  object. The column to be removed may be identified by either\n           *  its title (a String) or its index value (an int).\n           *  removeColumn(0) would remove the first column, removeColumn(1)\n           *  would remove the second column, and so on.\n           *\n           *  @method  removeColumn\n           *  @param  {String|Integer} column columnName (string) or ID (number)\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.removeColumn('id');\n           *   print(table.getColumnCount());\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.removeColumn = function(c) {\n            var cString;\n            var cNumber;\n            if (typeof c === 'string') {\n              // find the position of c in the columns\n              cString = c;\n              cNumber = this.columns.indexOf(c);\n            } else {\n              cNumber = c;\n              cString = this.columns[c];\n            }\n\n            var chunk = this.columns.splice(cNumber + 1, this.columns.length);\n            this.columns.pop();\n            this.columns = this.columns.concat(chunk);\n\n            for (var i = 0; i < this.rows.length; i++) {\n              var tempR = this.rows[i].arr;\n              var chip = tempR.splice(cNumber + 1, tempR.length);\n              tempR.pop();\n              this.rows[i].arr = tempR.concat(chip);\n              delete this.rows[i].obj[cString];\n            }\n          };\n\n          /**\n           * Stores a value in the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified\n           * by either its ID or title.\n           *\n           * @method  set\n           * @param {Integer} row row ID\n           * @param {String|Integer} column column ID (Number)\n           *                               or title (String)\n           * @param {String|Number} value  value to assign\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.set(0, 'species', 'Canis Lupus');\n           *   table.set(0, 'name', 'Wolf');\n           *\n           *   //print the results\n           *   for (let r = 0; r < table.getRowCount(); r++)\n           *     for (let c = 0; c < table.getColumnCount(); c++)\n           *       print(table.getString(r, c));\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.set = function(row, column, value) {\n            this.rows[row].set(column, value);\n          };\n\n          /**\n           * Stores a Float value in the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified\n           * by either its ID or title.\n           *\n           * @method setNum\n           * @param {Integer} row row ID\n           * @param {String|Integer} column column ID (Number)\n           *                               or title (String)\n           * @param {Number} value  value to assign\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   table.setNum(1, 'id', 1);\n           *\n           *   print(table.getColumn(0));\n           *   //[\"0\", 1, \"2\"]\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.setNum = function(row, column, value) {\n            this.rows[row].setNum(column, value);\n          };\n\n          /**\n           * Stores a String value in the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified\n           * by either its ID or title.\n           *\n           * @method  setString\n           * @param {Integer} row row ID\n           * @param {String|Integer} column column ID (Number)\n           *                               or title (String)\n           * @param {String} value  value to assign\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   //add a row\n           *   let newRow = table.addRow();\n           *   newRow.setString('id', table.getRowCount() - 1);\n           *   newRow.setString('species', 'Canis Lupus');\n           *   newRow.setString('name', 'Wolf');\n           *\n           *   print(table.getArray());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.setString = function(row, column, value) {\n            this.rows[row].setString(column, value);\n          };\n\n          /**\n           * Retrieves a value from the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified by\n           * either its ID or title.\n           *\n           * @method  get\n           * @param {Integer} row row ID\n           * @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           * @return {String|Number}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   print(table.get(0, 1));\n           *   //Capra hircus\n           *   print(table.get(0, 'species'));\n           *   //Capra hircus\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.get = function(row, column) {\n            return this.rows[row].get(column);\n          };\n\n          /**\n           * Retrieves a Float value from the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified by\n           * either its ID or title.\n           *\n           * @method  getNum\n           * @param {Integer} row row ID\n           * @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           * @return {Number}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   print(table.getNum(1, 0) + 100);\n           *   //id 1 + 100 = 101\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.getNum = function(row, column) {\n            return this.rows[row].getNum(column);\n          };\n\n          /**\n           * Retrieves a String value from the Table's specified row and column.\n           * The row is specified by its ID, while the column may be specified by\n           * either its ID or title.\n           *\n           * @method  getString\n           * @param {Integer} row row ID\n           * @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           * @return {String}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   // table is comma separated value \"CSV\"\n           *   // and has specifiying header for column labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   print(table.getString(0, 0)); // 0\n           *   print(table.getString(0, 1)); // Capra hircus\n           *   print(table.getString(0, 2)); // Goat\n           *   print(table.getString(1, 0)); // 1\n           *   print(table.getString(1, 1)); // Panthera pardus\n           *   print(table.getString(1, 2)); // Leopard\n           *   print(table.getString(2, 0)); // 2\n           *   print(table.getString(2, 1)); // Equus zebra\n           *   print(table.getString(2, 2)); // Zebra\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n\n          _main.default.Table.prototype.getString = function(row, column) {\n            return this.rows[row].getString(column);\n          };\n\n          /**\n           * Retrieves all table data and returns as an object. If a column name is\n           * passed in, each row object will be stored with that attribute as its\n           * title.\n           *\n           * @method  getObject\n           * @param {String} [headerColumn] Name of the column which should be used to\n           *                              title each row object (optional)\n           * @return {Object}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let tableObject = table.getObject();\n           *\n           *   print(tableObject);\n           *   //outputs an object\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.getObject = function(headerColumn) {\n            var tableObject = {};\n            var obj, cPos, index;\n\n            for (var i = 0; i < this.rows.length; i++) {\n              obj = this.rows[i].obj;\n\n              if (typeof headerColumn === 'string') {\n                cPos = this.columns.indexOf(headerColumn); // index of columnID\n                if (cPos >= 0) {\n                  index = obj[headerColumn];\n                  tableObject[index] = obj;\n                } else {\n                  throw new Error(\n                    'This table has no column named \"'.concat(headerColumn, '\"')\n                  );\n                }\n              } else {\n                tableObject[i] = this.rows[i].obj;\n              }\n            }\n            return tableObject;\n          };\n\n          /**\n           * Retrieves all table data and returns it as a multidimensional array.\n           *\n           * @method  getArray\n           * @return {Array}\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Given the CSV file \"mammals.csv\"\n           * // in the project's \"assets\" folder\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leoperd\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   // table is comma separated value \"CSV\"\n           *   // and has specifiying header for column labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let tableArray = table.getArray();\n           *   for (let i = 0; i < tableArray.length; i++) {\n           *     print(tableArray[i]);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           *@alt\n           * no image displayed\n           */\n          _main.default.Table.prototype.getArray = function() {\n            var tableArray = [];\n            for (var i = 0; i < this.rows.length; i++) {\n              tableArray.push(this.rows[i].arr);\n            }\n            return tableArray;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      87: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module IO\n           * @submodule Table\n           * @requires core\n           */ /**\n           *  A TableRow object represents a single row of data values,\n           *  stored in columns, from a table.\n           *\n           *  A Table Row contains both an ordered array, and an unordered\n           *  JSON object.\n           *\n           *  @class p5.TableRow\n           *  @constructor\n           *  @param {String} [str]       optional: populate the row with a\n           *                              string of values, separated by the\n           *                              separator\n           *  @param {String} [separator] comma separated values (csv) by default\n           */ _main.default.TableRow = function(str, separator) {\n            var arr = [];\n            var obj = {};\n            if (str) {\n              separator = separator || ',';\n              arr = str.split(separator);\n            }\n            for (var i = 0; i < arr.length; i++) {\n              var key = i;\n              var val = arr[i];\n              obj[key] = val;\n            }\n            this.arr = arr;\n            this.obj = obj;\n            this.table = null;\n          };\n\n          /**\n           *  Stores a value in the TableRow's specified column.\n           *  The column may be specified by either its ID or title.\n           *\n           *  @method  set\n           *  @param {String|Integer} column Column ID (Number)\n           *                                or Title (String)\n           *  @param {String|Number} value  The value to be stored\n           *\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   for (let r = 0; r < rows.length; r++) {\n           *     rows[r].set('name', 'Unicorn');\n           *   }\n           *\n           *   //print the results\n           *   print(table.getArray());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.TableRow.prototype.set = function(column, value) {\n            // if typeof column is string, use .obj\n            if (typeof column === 'string') {\n              var cPos = this.table.columns.indexOf(column); // index of columnID\n              if (cPos >= 0) {\n                this.obj[column] = value;\n                this.arr[cPos] = value;\n              } else {\n                throw new Error('This table has no column named \"'.concat(column, '\"'));\n              }\n            } else {\n              // if typeof column is number, use .arr\n              if (column < this.table.columns.length) {\n                this.arr[column] = value;\n                var cTitle = this.table.columns[column];\n                this.obj[cTitle] = value;\n              } else {\n                throw new Error(\n                  'Column #'.concat(column, ' is out of the range of this table')\n                );\n              }\n            }\n          };\n\n          /**\n           *  Stores a Float value in the TableRow's specified column.\n           *  The column may be specified by either its ID or title.\n           *\n           *  @method  setNum\n           *  @param {String|Integer} column Column ID (Number)\n           *                                or Title (String)\n           *  @param {Number|String} value  The value to be stored\n           *                                as a Float\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   for (let r = 0; r < rows.length; r++) {\n           *     rows[r].setNum('id', r + 10);\n           *   }\n           *\n           *   print(table.getArray());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.TableRow.prototype.setNum = function(column, value) {\n            var floatVal = parseFloat(value);\n            this.set(column, floatVal);\n          };\n\n          /**\n           *  Stores a String value in the TableRow's specified column.\n           *  The column may be specified by either its ID or title.\n           *\n           *  @method  setString\n           *  @param {String|Integer} column Column ID (Number)\n           *                                or Title (String)\n           *  @param {String|Number|Boolean|Object} value  The value to be stored\n           *                                as a String\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   for (let r = 0; r < rows.length; r++) {\n           *     let name = rows[r].getString('name');\n           *     rows[r].setString('name', 'A ' + name + ' named George');\n           *   }\n           *\n           *   print(table.getArray());\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.TableRow.prototype.setString = function(column, value) {\n            var stringVal = value.toString();\n            this.set(column, stringVal);\n          };\n\n          /**\n           *  Retrieves a value from the TableRow's specified column.\n           *  The column may be specified by either its ID or title.\n           *\n           *  @method  get\n           *  @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           *  @return {String|Number}\n           *\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let names = [];\n           *   let rows = table.getRows();\n           *   for (let r = 0; r < rows.length; r++) {\n           *     names.push(rows[r].get('name'));\n           *   }\n           *\n           *   print(names);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.TableRow.prototype.get = function(column) {\n            if (typeof column === 'string') {\n              return this.obj[column];\n            } else {\n              return this.arr[column];\n            }\n          };\n\n          /**\n           *  Retrieves a Float value from the TableRow's specified\n           *  column. The column may be specified by either its ID or\n           *  title.\n           *\n           *  @method  getNum\n           *  @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           *  @return {Number}  Float Floating point number\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   let minId = Infinity;\n           *   let maxId = -Infinity;\n           *   for (let r = 0; r < rows.length; r++) {\n           *     let id = rows[r].getNum('id');\n           *     minId = min(minId, id);\n           *     maxId = min(maxId, id);\n           *   }\n           *   print('minimum id = ' + minId + ', maximum id = ' + maxId);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.TableRow.prototype.getNum = function(column) {\n            var ret;\n            if (typeof column === 'string') {\n              ret = parseFloat(this.obj[column]);\n            } else {\n              ret = parseFloat(this.arr[column]);\n            }\n\n            if (ret.toString() === 'NaN') {\n              throw 'Error: '.concat(this.obj[column], ' is NaN (Not a Number)');\n            }\n            return ret;\n          };\n\n          /**\n           *  Retrieves an String value from the TableRow's specified\n           *  column. The column may be specified by either its ID or\n           *  title.\n           *\n           *  @method  getString\n           *  @param  {String|Integer} column columnName (string) or\n           *                                   ID (number)\n           *  @return {String}  String\n           * @example\n           * <div class=\"norender\"><code>\n           * // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n           * //\n           * // id,species,name\n           * // 0,Capra hircus,Goat\n           * // 1,Panthera pardus,Leopard\n           * // 2,Equus zebra,Zebra\n           *\n           * let table;\n           *\n           * function preload() {\n           *   //my table is comma separated value \"csv\"\n           *   //and has a header specifying the columns labels\n           *   table = loadTable('assets/mammals.csv', 'csv', 'header');\n           * }\n           *\n           * function setup() {\n           *   let rows = table.getRows();\n           *   let longest = '';\n           *   for (let r = 0; r < rows.length; r++) {\n           *     let species = rows[r].getString('species');\n           *     if (longest.length < species.length) {\n           *       longest = species;\n           *     }\n           *   }\n           *\n           *   print('longest: ' + longest);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */\n          _main.default.TableRow.prototype.getString = function(column) {\n            if (typeof column === 'string') {\n              return this.obj[column].toString();\n            } else {\n              return this.arr[column].toString();\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      88: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module IO\n           * @submodule Input\n           * @requires core\n           */ /**\n           * XML is a representation of an XML object, able to parse XML code. Use\n           * <a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects.\n           *\n           * @class p5.XML\n           * @constructor\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let children = xml.getChildren('animal');\n           *\n           *   for (let i = 0; i < children.length; i++) {\n           *     let id = children[i].getNum('id');\n           *     let coloring = children[i].getString('species');\n           *     let name = children[i].getContent();\n           *     print(id + ', ' + coloring + ', ' + name);\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // 0, Capra hircus, Goat\n           * // 1, Panthera pardus, Leopard\n           * // 2, Equus zebra, Zebra\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */ _main.default.XML = function(DOM) {\n            if (!DOM) {\n              var xmlDoc = document.implementation.createDocument(null, 'doc');\n              this.DOM = xmlDoc.createElement('root');\n            } else {\n              this.DOM = DOM;\n            }\n          };\n\n          /**\n           * Gets a copy of the element's parent. Returns the parent as another\n           * <a href=\"#/p5.XML\">p5.XML</a> object.\n           *\n           * @method getParent\n           * @return {p5.XML}   element parent\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let children = xml.getChildren('animal');\n           *   let parent = children[1].getParent();\n           *   print(parent.getName());\n           * }\n           *\n           * // Sketch prints:\n           * // mammals\n           * </code></div>\n           */\n          _main.default.XML.prototype.getParent = function() {\n            return new _main.default.XML(this.DOM.parentElement);\n          };\n\n          /**\n           *  Gets the element's full name, which is returned as a String.\n           *\n           * @method getName\n           * @return {String} the name of the node\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.getName());\n           * }\n           *\n           * // Sketch prints:\n           * // mammals\n           * </code></div>\n           */\n          _main.default.XML.prototype.getName = function() {\n            return this.DOM.tagName;\n          };\n\n          /**\n           * Sets the element's name, which is specified as a String.\n           *\n           * @method setName\n           * @param {String} the new name of the node\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.getName());\n           *   xml.setName('fish');\n           *   print(xml.getName());\n           * }\n           *\n           * // Sketch prints:\n           * // mammals\n           * // fish\n           * </code></div>\n           */\n          _main.default.XML.prototype.setName = function(name) {\n            var content = this.DOM.innerHTML;\n            var attributes = this.DOM.attributes;\n            var xmlDoc = document.implementation.createDocument(null, 'default');\n            var newDOM = xmlDoc.createElement(name);\n            newDOM.innerHTML = content;\n            for (var i = 0; i < attributes.length; i++) {\n              newDOM.setAttribute(attributes[i].nodeName, attributes.nodeValue);\n            }\n            this.DOM = newDOM;\n          };\n\n          /**\n           * Checks whether or not the element has any children, and returns the result\n           * as a boolean.\n           *\n           * @method hasChildren\n           * @return {boolean}\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.hasChildren());\n           * }\n           *\n           * // Sketch prints:\n           * // true\n           * </code></div>\n           */\n          _main.default.XML.prototype.hasChildren = function() {\n            return this.DOM.children.length > 0;\n          };\n\n          /**\n           * Get the names of all of the element's children, and returns the names as an\n           * array of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a>\n           * on each child element individually.\n           *\n           * @method listChildren\n           * @return {String[]} names of the children of the element\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.listChildren());\n           * }\n           *\n           * // Sketch prints:\n           * // [\"animal\", \"animal\", \"animal\"]\n           * </code></div>\n           */\n          _main.default.XML.prototype.listChildren = function() {\n            var arr = [];\n            for (var i = 0; i < this.DOM.childNodes.length; i++) {\n              arr.push(this.DOM.childNodes[i].nodeName);\n            }\n            return arr;\n          };\n\n          /**\n           * Returns all of the element's children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When\n           * the name parameter is specified, then it will return all children that match\n           * that name.\n           *\n           * @method getChildren\n           * @param {String} [name] element name\n           * @return {p5.XML[]} children of the element\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let animals = xml.getChildren('animal');\n           *\n           *   for (let i = 0; i < animals.length; i++) {\n           *     print(animals[i].getContent());\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * // \"Leopard\"\n           * // \"Zebra\"\n           * </code></div>\n           */\n          _main.default.XML.prototype.getChildren = function(param) {\n            if (param) {\n              return elementsToP5XML(this.DOM.getElementsByTagName(param));\n            } else {\n              return elementsToP5XML(this.DOM.children);\n            }\n          };\n\n          function elementsToP5XML(elements) {\n            var arr = [];\n            for (var i = 0; i < elements.length; i++) {\n              arr.push(new _main.default.XML(elements[i]));\n            }\n            return arr;\n          }\n\n          /**\n           * Returns the first of the element's children that matches the name parameter\n           * or the child of the given index.It returns undefined if no matching\n           * child is found.\n           *\n           * @method getChild\n           * @param {String|Integer} name element name or index\n           * @return {p5.XML}\n           * @example&lt;animal\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * </code></div>\n           * <div class='norender'><code>\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let secondChild = xml.getChild(1);\n           *   print(secondChild.getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Leopard\"\n           * </code></div>\n           */\n          _main.default.XML.prototype.getChild = function(param) {\n            if (typeof param === 'string') {\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n              try {\n                for (\n                  var _iterator = this.DOM.children[Symbol.iterator](), _step;\n                  !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                  _iteratorNormalCompletion = true\n                ) {\n                  var child = _step.value;\n                  if (child.tagName === param) return new _main.default.XML(child);\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n            } else {\n              return new _main.default.XML(this.DOM.children[param]);\n            }\n          };\n\n          /**\n           * Appends a new child to the element. The child can be specified with\n           * either a String, which will be used as the new tag's name, or as a\n           * reference to an existing <a href=\"#/p5.XML\">p5.XML</a> object.\n           * A reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object.\n           *\n           * @method addChild\n           * @param {p5.XML} node a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let child = new p5.XML();\n           *   child.setName('animal');\n           *   child.setAttribute('id', '3');\n           *   child.setAttribute('species', 'Ornithorhynchus anatinus');\n           *   child.setContent('Platypus');\n           *   xml.addChild(child);\n           *\n           *   let animals = xml.getChildren('animal');\n           *   print(animals[animals.length - 1].getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * // \"Leopard\"\n           * // \"Zebra\"\n           * </code></div>\n           */\n          _main.default.XML.prototype.addChild = function(node) {\n            if (node instanceof _main.default.XML) {\n              this.DOM.appendChild(node.DOM);\n            } else {\n              // PEND\n            }\n          };\n\n          /**\n           * Removes the element specified by name or index.\n           *\n           * @method removeChild\n           * @param {String|Integer} name element name or index\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   xml.removeChild('animal');\n           *   let children = xml.getChildren();\n           *   for (let i = 0; i < children.length; i++) {\n           *     print(children[i].getContent());\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // \"Leopard\"\n           * // \"Zebra\"\n           * </code></div>\n           * <div class='norender'><code>\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   xml.removeChild(1);\n           *   let children = xml.getChildren();\n           *   for (let i = 0; i < children.length; i++) {\n           *     print(children[i].getContent());\n           *   }\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * // \"Zebra\"\n           * </code></div>\n           */\n          _main.default.XML.prototype.removeChild = function(param) {\n            var ind = -1;\n            if (typeof param === 'string') {\n              for (var i = 0; i < this.DOM.children.length; i++) {\n                if (this.DOM.children[i].tagName === param) {\n                  ind = i;\n                  break;\n                }\n              }\n            } else {\n              ind = param;\n            }\n            if (ind !== -1) {\n              this.DOM.removeChild(this.DOM.children[ind]);\n            }\n          };\n\n          /**\n           * Counts the specified element's number of attributes, returned as an Number.\n           *\n           * @method getAttributeCount\n           * @return {Integer}\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getAttributeCount());\n           * }\n           *\n           * // Sketch prints:\n           * // 2\n           * </code></div>\n           */\n          _main.default.XML.prototype.getAttributeCount = function() {\n            return this.DOM.attributes.length;\n          };\n\n          /**\n           * Gets all of the specified element's attributes, and returns them as an\n           * array of Strings.\n           *\n           * @method listAttributes\n           * @return {String[]} an array of strings containing the names of attributes\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.listAttributes());\n           * }\n           *\n           * // Sketch prints:\n           * // [\"id\", \"species\"]\n           * </code></div>\n           */\n          _main.default.XML.prototype.listAttributes = function() {\n            var arr = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n            try {\n              for (\n                var _iterator2 = this.DOM.attributes[Symbol.iterator](), _step2;\n                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n                _iteratorNormalCompletion2 = true\n              ) {\n                var attribute = _step2.value;\n                arr.push(attribute.nodeName);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            return arr;\n          };\n\n          /**\n           *  Checks whether or not an element has the specified attribute.\n           *\n           * @method hasAttribute\n           * @param {String} the attribute to be checked\n           * @return {boolean} true if attribute found else false\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.hasAttribute('species'));\n           *   print(firstChild.hasAttribute('color'));\n           * }\n           *\n           * // Sketch prints:\n           * // true\n           * // false\n           * </code></div>\n           */\n          _main.default.XML.prototype.hasAttribute = function(name) {\n            var obj = {};\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n            try {\n              for (\n                var _iterator3 = this.DOM.attributes[Symbol.iterator](), _step3;\n                !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);\n                _iteratorNormalCompletion3 = true\n              ) {\n                var attribute = _step3.value;\n                obj[attribute.nodeName] = attribute.nodeValue;\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n\n            return obj[name] ? true : false;\n          };\n\n          /**\n           * Returns an attribute value of the element as an Number. If the defaultValue\n           * parameter is specified and the attribute doesn't exist, then defaultValue\n           * is returned. If no defaultValue is specified and the attribute doesn't\n           * exist, the value 0 is returned.\n           *\n           * @method getNum\n           * @param {String} name            the non-null full name of the attribute\n           * @param {Number} [defaultValue]  the default value of the attribute\n           * @return {Number}\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getNum('id'));\n           * }\n           *\n           * // Sketch prints:\n           * // 0\n           * </code></div>\n           */\n          _main.default.XML.prototype.getNum = function(name, defaultValue) {\n            var obj = {};\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n            try {\n              for (\n                var _iterator4 = this.DOM.attributes[Symbol.iterator](), _step4;\n                !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done);\n                _iteratorNormalCompletion4 = true\n              ) {\n                var attribute = _step4.value;\n                obj[attribute.nodeName] = attribute.nodeValue;\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n\n            return Number(obj[name]) || defaultValue || 0;\n          };\n\n          /**\n           * Returns an attribute value of the element as an String. If the defaultValue\n           * parameter is specified and the attribute doesn't exist, then defaultValue\n           * is returned. If no defaultValue is specified and the attribute doesn't\n           * exist, null is returned.\n           *\n           * @method getString\n           * @param {String} name            the non-null full name of the attribute\n           * @param {Number} [defaultValue]  the default value of the attribute\n           * @return {String}\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getString('species'));\n           * }\n           *\n           * // Sketch prints:\n           * // \"Capra hircus\"\n           * </code></div>\n           */\n          _main.default.XML.prototype.getString = function(name, defaultValue) {\n            var obj = {};\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n            try {\n              for (\n                var _iterator5 = this.DOM.attributes[Symbol.iterator](), _step5;\n                !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done);\n                _iteratorNormalCompletion5 = true\n              ) {\n                var attribute = _step5.value;\n                obj[attribute.nodeName] = attribute.nodeValue;\n              }\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n\n            return obj[name] ? String(obj[name]) : defaultValue || null;\n          };\n\n          /**\n           * Sets the content of an element's attribute. The first parameter specifies\n           * the attribute name, while the second specifies the new content.\n           *\n           * @method setAttribute\n           * @param {String} name            the full name of the attribute\n           * @param {Number|String|Boolean} value  the value of the attribute\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getString('species'));\n           *   firstChild.setAttribute('species', 'Jamides zebra');\n           *   print(firstChild.getString('species'));\n           * }\n           *\n           * // Sketch prints:\n           * // \"Capra hircus\"\n           * // \"Jamides zebra\"\n           * </code></div>\n           */\n          _main.default.XML.prototype.setAttribute = function(name, value) {\n            this.DOM.setAttribute(name, value);\n          };\n\n          /**\n           * Returns the content of an element. If there is no such content,\n           * defaultValue is returned if specified, otherwise null is returned.\n           *\n           * @method getContent\n           * @param {String} [defaultValue] value returned if no content is found\n           * @return {String}\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * </code></div>\n           */\n          _main.default.XML.prototype.getContent = function(defaultValue) {\n            var str;\n            str = this.DOM.textContent;\n            str = str.replace(/\\s\\s+/g, ',');\n            return str || defaultValue || null;\n          };\n\n          /**\n           * Sets the element's content.\n           *\n           * @method setContent\n           * @param {String} text the new content\n           * @example\n           * <div class='norender'><code>\n           * // The following short XML file called \"mammals.xml\" is parsed\n           * // in the code below.\n           * //\n           * // <?xml version=\"1.0\"?>\n           * // &lt;mammals&gt;\n           * //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n           * //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n           * //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n           * // &lt;/mammals&gt;\n           *\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   let firstChild = xml.getChild('animal');\n           *   print(firstChild.getContent());\n           *   firstChild.setContent('Mountain Goat');\n           *   print(firstChild.getContent());\n           * }\n           *\n           * // Sketch prints:\n           * // \"Goat\"\n           * // \"Mountain Goat\"\n           * </code></div>\n           */\n          _main.default.XML.prototype.setContent = function(content) {\n            if (!this.DOM.children.length) {\n              this.DOM.textContent = content;\n            }\n          };\n\n          /**\n           * Serializes the element into a string. This function is useful for preparing\n           * the content to be sent over a http request or saved to file.\n           *\n           * @method serialize\n           * @return {String} Serialized string of the element\n           * @example\n           * <div class='norender'><code>\n           * let xml;\n           *\n           * function preload() {\n           *   xml = loadXML('assets/mammals.xml');\n           * }\n           *\n           * function setup() {\n           *   print(xml.serialize());\n           * }\n           *\n           * // Sketch prints:\n           * // <mammals>\n           * //   <animal id=\"0\" species=\"Capra hircus\">Goat</animal>\n           * //   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\n           * //   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\n           * // </mammals>\n           * </code></div>\n           */\n          _main.default.XML.prototype.serialize = function() {\n            var xmlSerializer = new XMLSerializer();\n            return xmlSerializer.serializeToString(this.DOM);\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      89: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Math\n           * @submodule Calculation\n           * @for p5\n           * @requires core\n           */ /**\n           * Calculates the absolute value (magnitude) of a number. Maps to Math.abs().\n           * The absolute value of a number is always positive.\n           *\n           * @method abs\n           * @param  {Number} n number to compute\n           * @return {Number}   absolute value of given number\n           * @example\n           * <div class = \"norender\"><code>\n           * function setup() {\n           *   let x = -3;\n           *   let y = abs(x);\n           *\n           *   print(x); // -3\n           *   print(y); // 3\n           * }\n           * </code></div>\n           *\n           * @alt\n           * no image displayed\n           */ _main.default.prototype.abs = Math.abs; /**\n           * Calculates the closest int value that is greater than or equal to the\n           * value of the parameter. Maps to Math.ceil(). For example, ceil(9.03)\n           * returns the value 10.\n           *\n           * @method ceil\n           * @param  {Number} n number to round up\n           * @return {Integer}   rounded up number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   // map, mouseX between 0 and 5.\n           *   let ax = map(mouseX, 0, 100, 0, 5);\n           *   let ay = 66;\n           *\n           *   //Get the ceiling of the mapped number.\n           *   let bx = ceil(map(mouseX, 0, 100, 0, 5));\n           *   let by = 33;\n           *\n           *   // Multiply the mapped numbers by 20 to more easily\n           *   // see the changes.\n           *   stroke(0);\n           *   fill(0);\n           *   line(0, ay, ax * 20, ay);\n           *   line(0, by, bx * 20, by);\n           *\n           *   // Reformat the float returned by map and draw it.\n           *   noStroke();\n           *   text(nfc(ax, 2), ax, ay - 5);\n           *   text(nfc(bx, 1), bx, by - 5);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals\n           */\n          _main.default.prototype.ceil = Math.ceil;\n\n          /**\n           * Constrains a value between a minimum and maximum value.\n           *\n           * @method constrain\n           * @param  {Number} n    number to constrain\n           * @param  {Number} low  minimum limit\n           * @param  {Number} high maximum limit\n           * @return {Number}      constrained number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *\n           *   let leftWall = 25;\n           *   let rightWall = 75;\n           *\n           *   // xm is just the mouseX, while\n           *   // xc is the mouseX, but constrained\n           *   // between the leftWall and rightWall!\n           *   let xm = mouseX;\n           *   let xc = constrain(mouseX, leftWall, rightWall);\n           *\n           *   // Draw the walls.\n           *   stroke(150);\n           *   line(leftWall, 0, leftWall, height);\n           *   line(rightWall, 0, rightWall, height);\n           *\n           *   // Draw xm and xc as circles.\n           *   noStroke();\n           *   fill(150);\n           *   ellipse(xm, 33, 9, 9); // Not Constrained\n           *   fill(0);\n           *   ellipse(xc, 66, 9, 9); // Constrained\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 vertical lines. 2 ellipses move with mouse X 1 does not move passed lines\n           */\n          _main.default.prototype.constrain = function(n, low, high) {\n            _main.default._validateParameters('constrain', arguments);\n            return Math.max(Math.min(n, high), low);\n          };\n\n          /**\n           * Calculates the distance between two points, in either two or three dimensions.\n           *\n           * @method dist\n           * @param  {Number} x1 x-coordinate of the first point\n           * @param  {Number} y1 y-coordinate of the first point\n           * @param  {Number} x2 x-coordinate of the second point\n           * @param  {Number} y2 y-coordinate of the second point\n           * @return {Number}    distance between the two points\n           *\n           * @example\n           * <div><code>\n           * // Move your mouse inside the canvas to see the\n           * // change in distance between two points!\n           * function draw() {\n           *   background(200);\n           *   fill(0);\n           *\n           *   let x1 = 10;\n           *   let y1 = 90;\n           *   let x2 = mouseX;\n           *   let y2 = mouseY;\n           *\n           *   line(x1, y1, x2, y2);\n           *   ellipse(x1, y1, 7, 7);\n           *   ellipse(x2, y2, 7, 7);\n           *\n           *   // d is the length of the line\n           *   // the distance from point 1 to point 2.\n           *   let d = dist(x1, y1, x2, y2);\n           *\n           *   // Let's write d along the line we are drawing!\n           *   push();\n           *   translate((x1 + x2) / 2, (y1 + y2) / 2);\n           *   rotate(atan2(y2 - y1, x2 - x1));\n           *   text(nfc(d, 1), 0, -5);\n           *   pop();\n           *   // Fancy!\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 ellipses joined by line. 1 ellipse moves with mouse X&Y. Distance displayed.\n           */\n          /**\n           * @method dist\n           * @param  {Number} x1\n           * @param  {Number} y1\n           * @param  {Number} z1 z-coordinate of the first point\n           * @param  {Number} x2\n           * @param  {Number} y2\n           * @param  {Number} z2 z-coordinate of the second point\n           * @return {Number}    distance between the two points\n           */\n          _main.default.prototype.dist = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('dist', args);\n            if (args.length === 4) {\n              //2D\n              return hypot(args[2] - args[0], args[3] - args[1]);\n            } else if (args.length === 6) {\n              //3D\n              return hypot(args[3] - args[0], args[4] - args[1], args[5] - args[2]);\n            }\n          };\n\n          /**\n           * Returns Euler's number e (2.71828...) raised to the power of the n\n           * parameter. Maps to Math.exp().\n           *\n           * @method exp\n           * @param  {Number} n exponent to raise\n           * @return {Number}   e^n\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *\n           *   // Compute the exp() function with a value between 0 and 2\n           *   let xValue = map(mouseX, 0, width, 0, 2);\n           *   let yValue = exp(xValue);\n           *\n           *   let y = map(yValue, 0, 8, height, 0);\n           *\n           *   let legend = 'exp (' + nfc(xValue, 3) + ')\\n= ' + nf(yValue, 1, 4);\n           *   stroke(150);\n           *   line(mouseX, y, mouseX, height);\n           *   fill(0);\n           *   text(legend, 5, 15);\n           *   noStroke();\n           *   ellipse(mouseX, y, 7, 7);\n           *\n           *   // Draw the exp(x) curve,\n           *   // over the domain of x from 0 to 2\n           *   noFill();\n           *   stroke(0);\n           *   beginShape();\n           *   for (let x = 0; x < width; x++) {\n           *     xValue = map(x, 0, width, 0, 2);\n           *     yValue = exp(xValue);\n           *     y = map(yValue, 0, 8, height, 0);\n           *     vertex(x, y);\n           *   }\n           *\n           *   endShape();\n           *   line(0, 0, 0, height);\n           *   line(0, height - 1, width, height - 1);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * ellipse moves along a curve with mouse x. e^n displayed.\n           */\n          _main.default.prototype.exp = Math.exp;\n\n          /**\n           * Calculates the closest int value that is less than or equal to the\n           * value of the parameter. Maps to Math.floor().\n           *\n           * @method floor\n           * @param  {Number} n number to round down\n           * @return {Integer}  rounded down number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   //map, mouseX between 0 and 5.\n           *   let ax = map(mouseX, 0, 100, 0, 5);\n           *   let ay = 66;\n           *\n           *   //Get the floor of the mapped number.\n           *   let bx = floor(map(mouseX, 0, 100, 0, 5));\n           *   let by = 33;\n           *\n           *   // Multiply the mapped numbers by 20 to more easily\n           *   // see the changes.\n           *   stroke(0);\n           *   fill(0);\n           *   line(0, ay, ax * 20, ay);\n           *   line(0, by, bx * 20, by);\n           *\n           *   // Reformat the float returned by map and draw it.\n           *   noStroke();\n           *   text(nfc(ax, 2), ax, ay - 5);\n           *   text(nfc(bx, 1), bx, by - 5);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals\n           */\n          _main.default.prototype.floor = Math.floor;\n\n          /**\n           * Calculates a number between two numbers at a specific increment. The amt\n           * parameter is the amount to interpolate between the two values where 0.0\n           * equal to the first point, 0.1 is very near the first point, 0.5 is\n           * half-way in between, and 1.0 is equal to the second point. If the\n           * value of amt is more than 1.0 or less than 0.0, the number will be\n           * calculated accordingly in the ratio of the two given numbers. The lerp\n           * function is convenient for creating motion along a straight\n           * path and for drawing dotted lines.\n           *\n           * @method lerp\n           * @param  {Number} start first value\n           * @param  {Number} stop  second value\n           * @param  {Number} amt   number\n           * @return {Number}       lerped value\n           * @example\n           * <div><code>\n           * function setup() {\n           *   background(200);\n           *   let a = 20;\n           *   let b = 80;\n           *   let c = lerp(a, b, 0.2);\n           *   let d = lerp(a, b, 0.5);\n           *   let e = lerp(a, b, 0.8);\n           *\n           *   let y = 50;\n           *\n           *   strokeWeight(5);\n           *   stroke(0); // Draw the original points in black\n           *   point(a, y);\n           *   point(b, y);\n           *\n           *   stroke(100); // Draw the lerp points in gray\n           *   point(c, y);\n           *   point(d, y);\n           *   point(e, y);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 5 points horizontally staggered mid-canvas. mid 3 are grey, outer black\n           */\n          _main.default.prototype.lerp = function(start, stop, amt) {\n            _main.default._validateParameters('lerp', arguments);\n            return amt * (stop - start) + start;\n          };\n\n          /**\n    * Calculates the natural logarithm (the base-e logarithm) of a number. This\n    * function expects the n parameter to be a value greater than 0.0. Maps to\n    * Math.log().\n    *\n    * @method log\n    * @param  {Number} n number greater than 0\n    * @return {Number}   natural logarithm of n\n    * @example\n    * <div><code>\n    * function draw() {\n    *   background(200);\n    *   let maxX = 2.8;\n    *   let maxY = 1.5;\n    *\n    *   // Compute the natural log of a value between 0 and maxX\n    *   let xValue = map(mouseX, 0, width, 0, maxX);\n    *   let yValue, y;\n    *   if (xValue > 0) {\n       // Cannot take the log of a negative number.\n    *     yValue = log(xValue);\n    *     y = map(yValue, -maxY, maxY, height, 0);\n    *\n    *     // Display the calculation occurring.\n    *     let legend = 'log(' + nf(xValue, 1, 2) + ')\\n= ' + nf(yValue, 1, 3);\n    *     stroke(150);\n    *     line(mouseX, y, mouseX, height);\n    *     fill(0);\n    *     text(legend, 5, 15);\n    *     noStroke();\n    *     ellipse(mouseX, y, 7, 7);\n    *   }\n    *\n    *   // Draw the log(x) curve,\n    *   // over the domain of x from 0 to maxX\n    *   noFill();\n    *   stroke(0);\n    *   beginShape();\n    *   for (let x = 0; x < width; x++) {\n    *     xValue = map(x, 0, width, 0, maxX);\n    *     yValue = log(xValue);\n    *     y = map(yValue, -maxY, maxY, height, 0);\n    *     vertex(x, y);\n    *   }\n    *   endShape();\n    *   line(0, 0, 0, height);\n    *   line(0, height / 2, width, height / 2);\n    * }\n    * </code></div>\n    *\n    * @alt\n    * ellipse moves along a curve with mouse x. natural logarithm of n displayed.\n    */\n          _main.default.prototype.log = Math.log;\n\n          /**\n           * Calculates the magnitude (or length) of a vector. A vector is a direction\n           * in space commonly used in computer graphics and linear algebra. Because it\n           * has no \"start\" position, the magnitude of a vector can be thought of as\n           * the distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is\n           * a shortcut for writing dist(0, 0, x, y).\n           *\n           * @method mag\n           * @param  {Number} a first value\n           * @param  {Number} b second value\n           * @return {Number}   magnitude of vector from (0,0) to (a,b)\n           * @example\n           * <div><code>\n           * function setup() {\n           *   let x1 = 20;\n           *   let x2 = 80;\n           *   let y1 = 30;\n           *   let y2 = 70;\n           *\n           *   line(0, 0, x1, y1);\n           *   print(mag(x1, y1)); // Prints \"36.05551275463989\"\n           *   line(0, 0, x2, y1);\n           *   print(mag(x2, y1)); // Prints \"85.44003745317531\"\n           *   line(0, 0, x1, y2);\n           *   print(mag(x1, y2)); // Prints \"72.80109889280519\"\n           *   line(0, 0, x2, y2);\n           *   print(mag(x2, y2)); // Prints \"106.3014581273465\"\n           * }\n           * </code></div>\n           *\n           * @alt\n           * 4 lines of different length radiate from top left of canvas.\n           */\n          _main.default.prototype.mag = function(x, y) {\n            _main.default._validateParameters('mag', arguments);\n            return hypot(x, y);\n          };\n\n          /**\n    * Re-maps a number from one range to another.\n    *\n    * In the first example above, the number 25 is converted from a value in the\n    * range of 0 to 100 into a value that ranges from the left edge of the\n    * window (0) to the right edge (width).\n    *\n    * @method map\n    * @param  {Number} value  the incoming value to be converted\n    * @param  {Number} start1 lower bound of the value's current range\n    * @param  {Number} stop1  upper bound of the value's current range\n    * @param  {Number} start2 lower bound of the value's target range\n    * @param  {Number} stop2  upper bound of the value's target range\n    * @param  {Boolean} [withinBounds] constrain the value to the newly mapped range\n    * @return {Number}        remapped number\n    * @example\n    *   <div><code>\n    * let value = 25;\n    * let m = map(value, 0, 100, 0, width);\n    * ellipse(m, 50, 10, 10);\n   </code></div>\n    *\n    *   <div><code>\n    * function setup() {\n    *   noStroke();\n    * }\n    *\n    * function draw() {\n    *   background(204);\n    *   let x1 = map(mouseX, 0, width, 25, 75);\n    *   ellipse(x1, 25, 25, 25);\n    *   //This ellipse is constrained to the 0-100 range\n    *   //after setting withinBounds to true\n    *   let x2 = map(mouseX, 0, width, 0, 100, true);\n    *   ellipse(x2, 75, 25, 25);\n    * }\n   </code></div>\n    *\n    * @alt\n    * 10 by 10 white ellipse with in mid left canvas\n    * 2 25 by 25 white ellipses move with mouse x. Bottom has more range from X\n    */\n          _main.default.prototype.map = function(\n            n,\n            start1,\n            stop1,\n            start2,\n            stop2,\n            withinBounds\n          ) {\n            _main.default._validateParameters('map', arguments);\n            var newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n            if (!withinBounds) {\n              return newval;\n            }\n            if (start2 < stop2) {\n              return this.constrain(newval, start2, stop2);\n            } else {\n              return this.constrain(newval, stop2, start2);\n            }\n          };\n\n          /**\n           * Determines the largest value in a sequence of numbers, and then returns\n           * that value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array\n           * of any length.\n           *\n           * @method max\n           * @param  {Number} n0 Number to compare\n           * @param  {Number} n1 Number to compare\n           * @return {Number}             maximum Number\n           * @example\n           * <div><code>\n           * function setup() {\n           *   // Change the elements in the array and run the sketch\n           *   // to show how max() works!\n           *   let numArray = [2, 1, 5, 4, 8, 9];\n           *   fill(0);\n           *   noStroke();\n           *   text('Array Elements', 0, 10);\n           *   // Draw all numbers in the array\n           *   let spacing = 15;\n           *   let elemsY = 25;\n           *   for (let i = 0; i < numArray.length; i++) {\n           *     text(numArray[i], i * spacing, elemsY);\n           *   }\n           *   let maxX = 33;\n           *   let maxY = 80;\n           *   // Draw the Maximum value in the array.\n           *   textSize(32);\n           *   text(max(numArray), maxX, maxY);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 9\n           */\n          /**\n           * @method max\n           * @param  {Number[]} nums Numbers to compare\n           * @return {Number}\n           */\n          _main.default.prototype.max = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            if (args[0] instanceof Array) {\n              return Math.max.apply(null, args[0]);\n            } else {\n              return Math.max.apply(null, args);\n            }\n          };\n\n          /**\n           * Determines the smallest value in a sequence of numbers, and then returns\n           * that value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array\n           * of any length.\n           *\n           * @method min\n           * @param  {Number} n0 Number to compare\n           * @param  {Number} n1 Number to compare\n           * @return {Number}             minimum Number\n           * @example\n           * <div><code>\n           * function setup() {\n           *   // Change the elements in the array and run the sketch\n           *   // to show how min() works!\n           *   let numArray = [2, 1, 5, 4, 8, 9];\n           *   fill(0);\n           *   noStroke();\n           *   text('Array Elements', 0, 10);\n           *   // Draw all numbers in the array\n           *   let spacing = 15;\n           *   let elemsY = 25;\n           *   for (let i = 0; i < numArray.length; i++) {\n           *     text(numArray[i], i * spacing, elemsY);\n           *   }\n           *   let maxX = 33;\n           *   let maxY = 80;\n           *   // Draw the Minimum value in the array.\n           *   textSize(32);\n           *   text(min(numArray), maxX, maxY);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 1\n           */\n          /**\n           * @method min\n           * @param  {Number[]} nums Numbers to compare\n           * @return {Number}\n           */\n          _main.default.prototype.min = function() {\n            for (\n              var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n              _key3 < _len3;\n              _key3++\n            ) {\n              args[_key3] = arguments[_key3];\n            }\n            if (args[0] instanceof Array) {\n              return Math.min.apply(null, args[0]);\n            } else {\n              return Math.min.apply(null, args);\n            }\n          };\n\n          /**\n           * Normalizes a number from another range into a value between 0 and 1.\n           * Identical to map(value, low, high, 0, 1).\n           * Numbers outside of the range are not clamped to 0 and 1, because\n           * out-of-range values are often intentional and useful. (See the example above.)\n           *\n           * @method norm\n           * @param  {Number} value incoming value to be normalized\n           * @param  {Number} start lower bound of the value's current range\n           * @param  {Number} stop  upper bound of the value's current range\n           * @return {Number}       normalized number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   let currentNum = mouseX;\n           *   let lowerBound = 0;\n           *   let upperBound = width; //100;\n           *   let normalized = norm(currentNum, lowerBound, upperBound);\n           *   let lineY = 70;\n           *   stroke(3);\n           *   line(0, lineY, width, lineY);\n           *   //Draw an ellipse mapped to the non-normalized value.\n           *   noStroke();\n           *   fill(50);\n           *   let s = 7; // ellipse size\n           *   ellipse(currentNum, lineY, s, s);\n           *\n           *   // Draw the guide\n           *   let guideY = lineY + 15;\n           *   text('0', 0, guideY);\n           *   textAlign(RIGHT);\n           *   text('100', width, guideY);\n           *\n           *   // Draw the normalized value\n           *   textAlign(LEFT);\n           *   fill(0);\n           *   textSize(32);\n           *   let normalY = 40;\n           *   let normalX = 20;\n           *   text(normalized, normalX, normalY);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * ellipse moves with mouse. 0 shown left & 100 right and updating values center\n           */\n          _main.default.prototype.norm = function(n, start, stop) {\n            _main.default._validateParameters('norm', arguments);\n            return this.map(n, start, stop, 0, 1);\n          };\n\n          /**\n           * Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient\n           * way of multiplying numbers by themselves (or their reciprocals) in large\n           * quantities. For example, pow(3, 5) is equivalent to the expression\n           * 3 &times; 3 &times; 3 &times; 3 &times; 3 and pow(3, -5) is equivalent to 1 /\n           * 3 &times; 3 &times; 3 &times; 3 &times; 3. Maps to\n           * Math.pow().\n           *\n           * @method pow\n           * @param  {Number} n base of the exponential expression\n           * @param  {Number} e power by which to raise the base\n           * @return {Number}   n^e\n           * @example\n           * <div><code>\n           * function setup() {\n           *   //Exponentially increase the size of an ellipse.\n           *   let eSize = 3; // Original Size\n           *   let eLoc = 10; // Original Location\n           *\n           *   ellipse(eLoc, eLoc, eSize, eSize);\n           *\n           *   ellipse(eLoc * 2, eLoc * 2, pow(eSize, 2), pow(eSize, 2));\n           *\n           *   ellipse(eLoc * 4, eLoc * 4, pow(eSize, 3), pow(eSize, 3));\n           *\n           *   ellipse(eLoc * 8, eLoc * 8, pow(eSize, 4), pow(eSize, 4));\n           * }\n           * </code></div>\n           *\n           * @alt\n           * small to large ellipses radiating from top left of canvas\n           */\n          _main.default.prototype.pow = Math.pow;\n\n          /**\n           * Calculates the integer closest to the n parameter. For example,\n           * round(133.8) returns the value 134. Maps to Math.round().\n           *\n           * @method round\n           * @param  {Number} n number to round\n           * @param  {Number} [decimals] number of decimal places to round to, default is 0\n           * @return {Integer}  rounded number\n           * @example\n           * <div><code>\n           * let x = round(3.7);\n           * text(x, width / 2, height / 2);\n           * </code></div>\n           * <div><code>\n           * let x = round(12.782383, 2);\n           * text(x, width / 2, height / 2);\n           * </code></div>\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   //map, mouseX between 0 and 5.\n           *   let ax = map(mouseX, 0, 100, 0, 5);\n           *   let ay = 66;\n           *\n           *   // Round the mapped number.\n           *   let bx = round(map(mouseX, 0, 100, 0, 5));\n           *   let by = 33;\n           *\n           *   // Multiply the mapped numbers by 20 to more easily\n           *   // see the changes.\n           *   stroke(0);\n           *   fill(0);\n           *   line(0, ay, ax * 20, ay);\n           *   line(0, by, bx * 20, by);\n           *\n           *   // Reformat the float returned by map and draw it.\n           *   noStroke();\n           *   text(nfc(ax, 2), ax, ay - 5);\n           *   text(nfc(bx, 1), bx, by - 5);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * \"3\" written in middle of canvas\n           * \"12.78\" written in middle of canvas\n           * horizontal center line squared values displayed on top and regular on bottom.\n           */\n          _main.default.prototype.round = function(n, decimals) {\n            if (!decimals) {\n              return Math.round(n);\n            }\n            return Number(Math.round(n + 'e' + decimals) + 'e-' + decimals);\n          };\n\n          /**\n           * Squares a number (multiplies a number by itself). The result is always a\n           * positive number, as multiplying two negative numbers always yields a\n           * positive result. For example, -1 * -1 = 1.\n           *\n           * @method sq\n           * @param  {Number} n number to square\n           * @return {Number}   squared number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   let eSize = 7;\n           *   let x1 = map(mouseX, 0, width, 0, 10);\n           *   let y1 = 80;\n           *   let x2 = sq(x1);\n           *   let y2 = 20;\n           *\n           *   // Draw the non-squared.\n           *   line(0, y1, width, y1);\n           *   ellipse(x1, y1, eSize, eSize);\n           *\n           *   // Draw the squared.\n           *   line(0, y2, width, y2);\n           *   ellipse(x2, y2, eSize, eSize);\n           *\n           *   // Draw dividing line.\n           *   stroke(100);\n           *   line(0, height / 2, width, height / 2);\n           *\n           *   // Draw text.\n           *   let spacing = 15;\n           *   noStroke();\n           *   fill(0);\n           *   text('x = ' + x1, 0, y1 + spacing);\n           *   text('sq(x) = ' + x2, 0, y2 + spacing);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * horizontal center line squared values displayed on top and regular on bottom.\n           */\n          _main.default.prototype.sq = function(n) {\n            return n * n;\n          };\n\n          /**\n           * Calculates the square root of a number. The square root of a number is\n           * always positive, even though there may be a valid negative root. The\n           * square root s of number a is such that s*s = a. It is the opposite of\n           * squaring. Maps to Math.sqrt().\n           *\n           * @method sqrt\n           * @param  {Number} n non-negative number to square root\n           * @return {Number}   square root of number\n           * @example\n           * <div><code>\n           * function draw() {\n           *   background(200);\n           *   let eSize = 7;\n           *   let x1 = mouseX;\n           *   let y1 = 80;\n           *   let x2 = sqrt(x1);\n           *   let y2 = 20;\n           *\n           *   // Draw the non-squared.\n           *   line(0, y1, width, y1);\n           *   ellipse(x1, y1, eSize, eSize);\n           *\n           *   // Draw the squared.\n           *   line(0, y2, width, y2);\n           *   ellipse(x2, y2, eSize, eSize);\n           *\n           *   // Draw dividing line.\n           *   stroke(100);\n           *   line(0, height / 2, width, height / 2);\n           *\n           *   // Draw text.\n           *   noStroke();\n           *   fill(0);\n           *   let spacing = 15;\n           *   text('x = ' + x1, 0, y1 + spacing);\n           *   text('sqrt(x) = ' + x2, 0, y2 + spacing);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * horizontal center line squareroot values displayed on top and regular on bottom.\n           */\n          _main.default.prototype.sqrt = Math.sqrt;\n\n          // Calculate the length of the hypotenuse of a right triangle\n          // This won't under- or overflow in intermediate steps\n          // https://en.wikipedia.org/wiki/Hypot\n          function hypot(x, y, z) {\n            // Use the native implementation if it's available\n            if (typeof Math.hypot === 'function') {\n              return Math.hypot.apply(null, arguments);\n            }\n\n            // Otherwise use the V8 implementation\n            // https://github.com/v8/v8/blob/8cd3cf297287e581a49e487067f5cbd991b27123/src/js/math.js#L217\n            var length = arguments.length;\n            var args = [];\n            var max = 0;\n            for (var i = 0; i < length; i++) {\n              var n = arguments[i];\n              n = +n;\n              if (n === Infinity || n === -Infinity) {\n                return Infinity;\n              }\n              n = Math.abs(n);\n              if (n > max) {\n                max = n;\n              }\n              args[i] = n;\n            }\n\n            if (max === 0) {\n              max = 1;\n            }\n            var sum = 0;\n            var compensation = 0;\n            for (var j = 0; j < length; j++) {\n              var m = args[j] / max;\n              var summand = m * m - compensation;\n              var preliminary = sum + summand;\n              compensation = preliminary - sum - summand;\n              sum = preliminary;\n            }\n            return Math.sqrt(sum) * max;\n          }\n\n          /**\n           * Calculates the fractional part of a number.\n           *\n           * @method fract\n           * @param {Number} num Number whose fractional part needs to be found out\n           * @returns {Number} fractional part of x, i.e, {x}\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(windowWidth, windowHeight);\n           *   fill(0);\n           *   text(7345.73472742, 0, 50);\n           *   text(fract(7345.73472742), 0, 100);\n           *   text(1.4215e-15, 150, 50);\n           *   text(fract(1.4215e-15), 150, 100);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * 2 rows of numbers, the first row having 8 numbers and the second having the fractional parts of those numbers.\n           */\n          _main.default.prototype.fract = function(toConvert) {\n            _main.default._validateParameters('fract', arguments);\n            var sign = 0;\n            var num = Number(toConvert);\n            if (isNaN(num) || Math.abs(num) === Infinity) {\n              return num;\n            } else if (num < 0) {\n              num = -num;\n              sign = 1;\n            }\n            if (String(num).includes('.') && !String(num).includes('e')) {\n              var toFract = String(num);\n              toFract = Number('0' + toFract.slice(toFract.indexOf('.')));\n              return Math.abs(sign - toFract);\n            } else if (num < 1) {\n              return Math.abs(sign - num);\n            } else {\n              return 0;\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      90: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Math\n           * @submodule Vector\n           * @for p5\n           * @requires core\n           */ /**\n           * Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\n           * two or three dimensional vector, specifically a Euclidean (also known as\n           * geometric) vector. A vector is an entity that has both magnitude and\n           * direction.\n           *\n           * @method createVector\n           * @param {Number} [x] x component of the vector\n           * @param {Number} [y] y component of the vector\n           * @param {Number} [z] z component of the vector\n           * @return {p5.Vector}\n           * @example\n           * <div><code>\n           * let v1;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   stroke(255, 0, 255);\n           *   v1 = createVector(width / 2, height / 2);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   line(v1.x, v1.y, mouseX, mouseY);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * draws a line from center of canvas to mouse pointer position.\n           */ _main.default.prototype.createVector = function(x, y, z) {\n            if (this instanceof _main.default) {\n              return new _main.default.Vector(this, arguments);\n            } else {\n              return new _main.default.Vector(x, y, z);\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      91: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } //////////////////////////////////////////////////////////////\n          // http://mrl.nyu.edu/~perlin/noise/\n          // Adapting from PApplet.java\n          // which was adapted from toxi\n          // which was adapted from the german demo group farbrausch\n          // as used in their demo \"art\": http://www.farb-rausch.de/fr010src.zip\n          // someday we might consider using \"improved noise\"\n          // http://mrl.nyu.edu/~perlin/paper445.pdf\n          // See: https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js/\n          //      blob/main/introduction/Noise1D/noise.js\n          /**\n           * @module Math\n           * @submodule Noise\n           * @for p5\n           * @requires core\n           */ var PERLIN_YWRAPB = 4;\n          var PERLIN_YWRAP = 1 << PERLIN_YWRAPB;\n          var PERLIN_ZWRAPB = 8;\n          var PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB;\n          var PERLIN_SIZE = 4095;\n          var perlin_octaves = 4; // default to medium smooth\n          var perlin_amp_falloff = 0.5; // 50% reduction/octave\n          var scaled_cosine = function scaled_cosine(i) {\n            return 0.5 * (1.0 - Math.cos(i * Math.PI));\n          };\n          var perlin; // will be initialized lazily by noise() or noiseSeed()\n          /**\n           * Returns the Perlin noise value at specified coordinates. Perlin noise is\n           * a random sequence generator producing a more naturally ordered, harmonic\n           * succession of numbers compared to the standard <b>random()</b> function.\n           * It was invented by Ken Perlin in the 1980s and been used since in\n           * graphical applications to produce procedural textures, natural motion,\n           * shapes, terrains etc.<br /><br /> The main difference to the\n           * <b>random()</b> function is that Perlin noise is defined in an infinite\n           * n-dimensional space where each pair of coordinates corresponds to a\n           * fixed semi-random value (fixed only for the lifespan of the program; see\n           * the <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise,\n           * depending on the number of coordinates given. The resulting value will\n           * always be between 0.0 and 1.0. The noise value can be animated by moving\n           * through the noise space as demonstrated in the example above. The 2nd\n           * and 3rd dimension can also be interpreted as time.<br /><br />The actual\n           * noise is structured similar to an audio signal, in respect to the\n           * function's use of frequencies. Similar to the concept of harmonics in\n           * physics, perlin noise is computed over several octaves which are added\n           * together for the final result. <br /><br />Another way to adjust the\n           * character of the resulting sequence is the scale of the input\n           * coordinates. As the function works within an infinite space the value of\n           * the coordinates doesn't matter as such, only the distance between\n           * successive coordinates does (eg. when using <b>noise()</b> within a\n           * loop). As a general rule the smaller the difference between coordinates,\n           * the smoother the resulting noise sequence will be. Steps of 0.005-0.03\n           * work best for most applications, but this will differ depending on use.\n           *\n           * @method noise\n           * @param  {Number} x   x-coordinate in noise space\n           * @param  {Number} [y] y-coordinate in noise space\n           * @param  {Number} [z] z-coordinate in noise space\n           * @return {Number}     Perlin noise value (between 0 and 1) at specified\n           *                      coordinates\n           * @example\n           * <div>\n           * <code>\n           * let xoff = 0.0;\n           *\n           * function draw() {\n           *   background(204);\n           *   xoff = xoff + 0.01;\n           *   let n = noise(xoff) * width;\n           *   line(n, 0, n, height);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>let noiseScale=0.02;\n           *\n           * function draw() {\n           *   background(0);\n           *   for (let x=0; x < width; x++) {\n           *     let noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n           *     stroke(noiseVal*255);\n           *     line(x, mouseY+noiseVal*80, x, height);\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical line moves left to right with updating noise values.\n           * horizontal wave pattern effected by mouse x-position & updating noise values.\n           */ _main.default.prototype.noise = function(x) {\n            var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            if (perlin == null) {\n              perlin = new Array(PERLIN_SIZE + 1);\n              for (var i = 0; i < PERLIN_SIZE + 1; i++) {\n                perlin[i] = Math.random();\n              }\n            }\n\n            if (x < 0) {\n              x = -x;\n            }\n            if (y < 0) {\n              y = -y;\n            }\n            if (z < 0) {\n              z = -z;\n            }\n\n            var xi = Math.floor(x),\n              yi = Math.floor(y),\n              zi = Math.floor(z);\n            var xf = x - xi;\n            var yf = y - yi;\n            var zf = z - zi;\n            var rxf, ryf;\n\n            var r = 0;\n            var ampl = 0.5;\n\n            var n1, n2, n3;\n\n            for (var o = 0; o < perlin_octaves; o++) {\n              var of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);\n\n              rxf = scaled_cosine(xf);\n              ryf = scaled_cosine(yf);\n\n              n1 = perlin[of & PERLIN_SIZE];\n              n1 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n1);\n              n2 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n              n2 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2);\n              n1 += ryf * (n2 - n1);\n\n              of += PERLIN_ZWRAP;\n              n2 = perlin[of & PERLIN_SIZE];\n              n2 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n2);\n              n3 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n              n3 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3);\n              n2 += ryf * (n3 - n2);\n\n              n1 += scaled_cosine(zf) * (n2 - n1);\n\n              r += n1 * ampl;\n              ampl *= perlin_amp_falloff;\n              xi <<= 1;\n              xf *= 2;\n              yi <<= 1;\n              yf *= 2;\n              zi <<= 1;\n              zf *= 2;\n\n              if (xf >= 1.0) {\n                xi++;\n                xf--;\n              }\n              if (yf >= 1.0) {\n                yi++;\n                yf--;\n              }\n              if (zf >= 1.0) {\n                zi++;\n                zf--;\n              }\n            }\n            return r;\n          };\n\n          /**\n           *\n           * Adjusts the character and level of detail produced by the Perlin noise\n           * function. Similar to harmonics in physics, noise is computed over\n           * several octaves. Lower octaves contribute more to the output signal and\n           * as such define the overall intensity of the noise, whereas higher octaves\n           * create finer grained details in the noise sequence.\n           *\n           * By default, noise is computed over 4 octaves with each octave contributing\n           * exactly half than its predecessor, starting at 50% strength for the 1st\n           * octave. This falloff amount can be changed by adding an additional function\n           * parameter. Eg. a falloff factor of 0.75 means each octave will now have\n           * 75% impact (25% less) of the previous lower octave. Any value between\n           * 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n           * result in greater than 1.0 values returned by <b>noise()</b>.\n           *\n           * By changing these parameters, the signal created by the <b>noise()</b>\n           * function can be adapted to fit very specific needs and characteristics.\n           *\n           * @method noiseDetail\n           * @param {Number} lod number of octaves to be used by the noise\n           * @param {Number} falloff falloff factor for each octave\n           * @example\n           * <div>\n           * <code>\n           * let noiseVal;\n           * let noiseScale = 0.02;\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   for (let y = 0; y < height; y++) {\n           *     for (let x = 0; x < width / 2; x++) {\n           *       noiseDetail(2, 0.2);\n           *       noiseVal = noise((mouseX + x) * noiseScale, (mouseY + y) * noiseScale);\n           *       stroke(noiseVal * 255);\n           *       point(x, y);\n           *       noiseDetail(8, 0.65);\n           *       noiseVal = noise(\n           *         (mouseX + x + width / 2) * noiseScale,\n           *         (mouseY + y) * noiseScale\n           *       );\n           *       stroke(noiseVal * 255);\n           *       point(x + width / 2, y);\n           *     }\n           *   }\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 vertical grey smokey patterns affected my mouse x-position and noise.\n           */\n          _main.default.prototype.noiseDetail = function(lod, falloff) {\n            if (lod > 0) {\n              perlin_octaves = lod;\n            }\n            if (falloff > 0) {\n              perlin_amp_falloff = falloff;\n            }\n          };\n\n          /**\n           * Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n           * produces different results each time the program is run. Set the\n           * <b>value</b> parameter to a constant to return the same pseudo-random\n           * numbers each time the software is run.\n           *\n           * @method noiseSeed\n           * @param {Number} seed   the seed value\n           * @example\n           * <div>\n           * <code>let xoff = 0.0;\n           *\n           * function setup() {\n           *   noiseSeed(99);\n           *   stroke(0, 10);\n           * }\n           *\n           * function draw() {\n           *   xoff = xoff + .01;\n           *   let n = noise(xoff) * width;\n           *   line(n, 0, n, height);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical grey lines drawing in pattern affected by noise.\n           */\n          _main.default.prototype.noiseSeed = function(seed) {\n            // Linear Congruential Generator\n            // Variant of a Lehman Generator\n            var lcg = (function() {\n              // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n              // m is basically chosen to be large (as it is the max period)\n              // and for its relationships to a and c\n              var m = 4294967296;\n              // a - 1 should be divisible by m's prime factors\n              var a = 1664525;\n              // c and m should be co-prime\n              var c = 1013904223;\n              var seed, z;\n              return {\n                setSeed: function setSeed(val) {\n                  // pick a random seed if val is undefined or null\n                  // the >>> 0 casts the seed to an unsigned 32-bit integer\n                  z = seed = (val == null ? Math.random() * m : val) >>> 0;\n                },\n                getSeed: function getSeed() {\n                  return seed;\n                },\n                rand: function rand() {\n                  // define the recurrence relationship\n                  z = (a * z + c) % m;\n                  // return a float in [0, 1)\n                  // if z = m then z / m = 0 therefore (z % m) / m < 1 always\n                  return z / m;\n                }\n              };\n            })();\n\n            lcg.setSeed(seed);\n            perlin = new Array(PERLIN_SIZE + 1);\n            for (var i = 0; i < PERLIN_SIZE + 1; i++) {\n              perlin[i] = lcg.rand();\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      92: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Math\n           * @submodule Vector\n           * @requires constants\n           */ /**\n           * A class to describe a two or three dimensional vector, specifically\n           * a Euclidean (also known as geometric) vector. A vector is an entity\n           * that has both magnitude and direction. The datatype, however, stores\n           * the components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude\n           * and direction can be accessed via the methods <a href=\"#/p5.Vector/mag\">mag()</a> and <a href=\"#/p5.Vector/heading\">heading()</a>.\n           *\n           * In many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a\n           * position, velocity, or acceleration. For example, if you consider a rectangle\n           * moving across the screen, at any given instant it has a position (a vector\n           * that points from the origin to its location), a velocity (the rate at which\n           * the object's position changes per time unit, expressed as a vector), and\n           * acceleration (the rate at which the object's velocity changes per time\n           * unit, expressed as a vector).\n           *\n           * Since vectors represent groupings of values, we cannot simply use\n           * traditional addition/multiplication/etc. Instead, we'll need to do some\n           * \"vector\" math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class.\n           *\n           * @class p5.Vector\n           * @constructor\n           * @param {Number} [x] x component of the vector\n           * @param {Number} [y] y component of the vector\n           * @param {Number} [z] z component of the vector\n           * @example\n           * <div>\n           * <code>\n           * let v1 = createVector(40, 50);\n           * let v2 = createVector(40, 50);\n           *\n           * ellipse(v1.x, v1.y, 50, 50);\n           * ellipse(v2.x, v2.y, 50, 50);\n           * v1.add(v2);\n           * ellipse(v1.x, v1.y, 50, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 2 white ellipses. One center-left the other bottom right and off canvas\n           */ _main.default.Vector = function Vector() {\n            var x, y, z;\n            // This is how it comes in with createVector()\n            if (arguments[0] instanceof _main.default) {\n              // save reference to p5 if passed in\n              this.p5 = arguments[0];\n              x = arguments[1][0] || 0;\n              y = arguments[1][1] || 0;\n              z = arguments[1][2] || 0;\n              // This is what we'll get with new p5.Vector()\n            } else {\n              x = arguments[0] || 0;\n              y = arguments[1] || 0;\n              z = arguments[2] || 0;\n            }\n            /**\n             * The x component of the vector\n             * @property x {Number}\n             */\n            this.x = x;\n            /**\n             * The y component of the vector\n             * @property y {Number}\n             */\n            this.y = y;\n            /**\n             * The z component of the vector\n             * @property z {Number}\n             */\n            this.z = z;\n          };\n\n          /**\n           * Returns a string representation of a vector v by calling String(v)\n           * or v.toString(). This method is useful for logging vectors in the\n           * console.\n           * @method  toString\n           * @return {String}\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * function setup() {\n           *   let v = createVector(20, 30);\n           *   print(String(v)); // prints \"p5.Vector Object : [20, 30, 0]\"\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'black');\n           *\n           *   noStroke();\n           *   text(v1.toString(), 10, 25, 90, 75);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.toString = function p5VectorToString() {\n            return 'p5.Vector Object : ['\n              .concat(this.x, ', ')\n              .concat(this.y, ', ')\n              .concat(this.z, ']');\n          };\n\n          /**\n           * Sets the x, y, and z component of the vector using two or three separate\n           * variables, the data from a <a href=\"#/p5.Vector\">p5.Vector</a>, or the values from a float array.\n           * @method set\n           * @param {Number} [x] the x component of the vector\n           * @param {Number} [y] the y component of the vector\n           * @param {Number} [z] the z component of the vector\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * function setup() {\n           *   let v = createVector(1, 2, 3);\n           *   v.set(4, 5, 6); // Sets vector to [4, 5, 6]\n           *\n           *   let v1 = createVector(0, 0, 0);\n           *   let arr = [1, 2, 3];\n           *   v1.set(arr); // Sets vector to [1, 2, 3]\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let v0, v1;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *\n           *   v0 = createVector(0, 0);\n           *   v1 = createVector(50, 50);\n           * }\n           *\n           * function draw() {\n           *   background(240);\n           *\n           *   drawArrow(v0, v1, 'black');\n           *   v1.set(v1.x + random(-1, 1), v1.y + random(-1, 1));\n           *\n           *   noStroke();\n           *   text('x: ' + round(v1.x) + ' y: ' + round(v1.y), 20, 90);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method set\n           * @param {p5.Vector|Number[]} value the vector to set\n           * @chainable\n           */\n          _main.default.Vector.prototype.set = function set(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              this.x = x.x || 0;\n              this.y = x.y || 0;\n              this.z = x.z || 0;\n              return this;\n            }\n            if (x instanceof Array) {\n              this.x = x[0] || 0;\n              this.y = x[1] || 0;\n              this.z = x[2] || 0;\n              return this;\n            }\n            this.x = x || 0;\n            this.y = y || 0;\n            this.z = z || 0;\n            return this;\n          };\n\n          /**\n           * Gets a copy of the vector, returns a <a href=\"#/p5.Vector\">p5.Vector</a> object.\n           *\n           * @method copy\n           * @return {p5.Vector} the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = v1.copy();\n           * print(v1.x === v2.x && v1.y === v2.y && v1.z === v2.z);\n           * // Prints \"true\"\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.copy = function copy() {\n            if (this.p5) {\n              return new _main.default.Vector(this.p5, [this.x, this.y, this.z]);\n            } else {\n              return new _main.default.Vector(this.x, this.y, this.z);\n            }\n          };\n\n          /**\n           * Adds x, y, and z components to a vector, adds one vector to another, or\n           * adds two independent vectors together. The version of the method that adds\n           * two vectors together is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others\n           * acts directly on the vector. Additionally, you may provide arguments to this function as an array.\n           * See the examples for more context.\n           *\n           * @method add\n           * @param  {Number} x   the x component of the vector to be added\n           * @param  {Number} [y] the y component of the vector to be added\n           * @param  {Number} [z] the z component of the vector to be added\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(1, 2, 3);\n           * v.add(4, 5, 6);\n           * // v's components are set to [5, 7, 9]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(1, 2, 3);\n           * // Provide arguments as an array\n           * let arr = [4, 5, 6];\n           * v.add(arr);\n           * // v's components are set to [5, 7, 9]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = createVector(2, 3, 4);\n           *\n           * let v3 = p5.Vector.add(v1, v2);\n           * // v3 has components [3, 5, 7]\n           * print(v3);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // red vector + blue vector = purple vector\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(-30, 20);\n           *   drawArrow(v1, v2, 'blue');\n           *\n           *   let v3 = p5.Vector.add(v1, v2);\n           *   drawArrow(v0, v3, 'purple');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method add\n           * @param  {p5.Vector|Number[]} value the vector to add\n           * @chainable\n           */\n          _main.default.Vector.prototype.add = function add(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              this.x += x.x || 0;\n              this.y += x.y || 0;\n              this.z += x.z || 0;\n              return this;\n            }\n            if (x instanceof Array) {\n              this.x += x[0] || 0;\n              this.y += x[1] || 0;\n              this.z += x[2] || 0;\n              return this;\n            }\n            this.x += x || 0;\n            this.y += y || 0;\n            this.z += z || 0;\n            return this;\n          };\n\n          /// HELPERS FOR REMAINDER METHOD\n          var calculateRemainder2D = function calculateRemainder2D(xComponent, yComponent) {\n            if (xComponent !== 0) {\n              this.x = this.x % xComponent;\n            }\n            if (yComponent !== 0) {\n              this.y = this.y % yComponent;\n            }\n            return this;\n          };\n\n          var calculateRemainder3D = function calculateRemainder3D(\n            xComponent,\n            yComponent,\n            zComponent\n          ) {\n            if (xComponent !== 0) {\n              this.x = this.x % xComponent;\n            }\n            if (yComponent !== 0) {\n              this.y = this.y % yComponent;\n            }\n            if (zComponent !== 0) {\n              this.z = this.z % zComponent;\n            }\n            return this;\n          };\n          /**\n           * Gives remainder of a vector when it is divided by another vector.\n           * See examples for more context.\n           *\n           * @method rem\n           * @param {Number} x the x component of divisor vector\n           * @param {Number} y the y component of divisor vector\n           * @param {Number} z the z component of divisor vector\n           * @chainable\n           * @example\n           * <div class='norender'>\n           * <code>\n           * let v = createVector(3, 4, 5);\n           * v.rem(2, 3, 4);\n           * // v's components are set to [1, 1, 1]\n           * </code>\n           * </div>\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(3, 4, 5);\n           * let v2 = createVector(2, 3, 4);\n           *\n           * let v3 = p5.Vector.rem(v1, v2);\n           * // v3 has components [1, 1, 1]\n           * print(v3);\n           * </code>\n           * </div>\n           */\n          /**\n           * @method rem\n           * @param {p5.Vector | Number[]}  value  divisor vector\n           * @chainable\n           */\n          _main.default.Vector.prototype.rem = function rem(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              if (Number.isFinite(x.x) && Number.isFinite(x.y) && Number.isFinite(x.z)) {\n                var xComponent = parseFloat(x.x);\n                var yComponent = parseFloat(x.y);\n                var zComponent = parseFloat(x.z);\n                calculateRemainder3D.call(this, xComponent, yComponent, zComponent);\n              }\n            } else if (x instanceof Array) {\n              if (\n                x.every(function(element) {\n                  return Number.isFinite(element);\n                })\n              ) {\n                if (x.length === 2) {\n                  calculateRemainder2D.call(this, x[0], x[1]);\n                }\n                if (x.length === 3) {\n                  calculateRemainder3D.call(this, x[0], x[1], x[2]);\n                }\n              }\n            } else if (arguments.length === 1) {\n              if (Number.isFinite(arguments[0]) && arguments[0] !== 0) {\n                this.x = this.x % arguments[0];\n                this.y = this.y % arguments[0];\n                this.z = this.z % arguments[0];\n                return this;\n              }\n            } else if (arguments.length === 2) {\n              var vectorComponents = Array.prototype.slice.call(arguments);\n              if (\n                vectorComponents.every(function(element) {\n                  return Number.isFinite(element);\n                })\n              ) {\n                if (vectorComponents.length === 2) {\n                  calculateRemainder2D.call(this, vectorComponents[0], vectorComponents[1]);\n                }\n              }\n            } else if (arguments.length === 3) {\n              var _vectorComponents = Array.prototype.slice.call(arguments);\n              if (\n                _vectorComponents.every(function(element) {\n                  return Number.isFinite(element);\n                })\n              ) {\n                if (_vectorComponents.length === 3) {\n                  calculateRemainder3D.call(\n                    this,\n                    _vectorComponents[0],\n                    _vectorComponents[1],\n                    _vectorComponents[2]\n                  );\n                }\n              }\n            }\n          };\n\n          /**\n           * Subtracts x, y, and z components from a vector, subtracts one vector from\n           * another, or subtracts two independent vectors. The version of the method\n           * that subtracts two vectors is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the\n           * other acts directly on the vector. Additionally, you may provide arguments to this function as an array.\n           * See the examples for more context.\n           *\n           * @method sub\n           * @param  {Number} x   the x component of the vector to subtract\n           * @param  {Number} [y] the y component of the vector to subtract\n           * @param  {Number} [z] the z component of the vector to subtract\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(4, 5, 6);\n           * v.sub(1, 1, 1);\n           * // v's components are set to [3, 4, 5]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(4, 5, 6);\n           * // Provide arguments as an array\n           * let arr = [1, 1, 1];\n           * v.sub(arr);\n           * // v's components are set to [3, 4, 5]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(2, 3, 4);\n           * let v2 = createVector(1, 2, 3);\n           *\n           * let v3 = p5.Vector.sub(v1, v2);\n           * // v3 has components [1, 1, 1]\n           * print(v3);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // red vector - blue vector = purple vector\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(70, 50);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   let v3 = p5.Vector.sub(v1, v2);\n           *   drawArrow(v2, v3, 'purple');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method sub\n           * @param  {p5.Vector|Number[]} value the vector to subtract\n           * @chainable\n           */\n          _main.default.Vector.prototype.sub = function sub(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              this.x -= x.x || 0;\n              this.y -= x.y || 0;\n              this.z -= x.z || 0;\n              return this;\n            }\n            if (x instanceof Array) {\n              this.x -= x[0] || 0;\n              this.y -= x[1] || 0;\n              this.z -= x[2] || 0;\n              return this;\n            }\n            this.x -= x || 0;\n            this.y -= y || 0;\n            this.z -= z || 0;\n            return this;\n          };\n\n          /**\n           * Multiplies the vector by a scalar, multiplies the x, y, and z components from a vector, or multiplies\n           * the x, y, and z components of two independent vectors. When multiplying a vector by a scalar, the x, y,\n           * and z components of the vector are all multiplied by the scalar. When multiplying a vector by a vector,\n           * the x, y, z components of both vectors are multiplied by each other\n           * (for example, with two vectors a and b: a.x * b.x, a.y * b.y, a.z * b.z). The static version of this method\n           * creates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector\n           * directly. Additionally, you may provide arguments to this function as an array.\n           * See the examples for more context.\n           *\n           * @method mult\n           * @param  {Number} n The number to multiply with the vector\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(1, 2, 3);\n           * v.mult(2);\n           * // v's components are set to [2, 4, 6]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v0 = createVector(1, 2, 3);\n           * let v1 = createVector(2, 3, 4);\n           * v0.mult(v1); // v0's components are set to [2, 6, 12]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v0 = createVector(1, 2, 3);\n           * // Provide arguments as an array\n           * let arr = [2, 3, 4];\n           * v0.mult(arr); // v0's components are set to [2, 6, 12]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v0 = createVector(1, 2, 3);\n           * let v1 = createVector(2, 3, 4);\n           * const result = p5.Vector.mult(v0, v1);\n           * print(result); // result's components are set to [2, 6, 12]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = p5.Vector.mult(v1, 2);\n           * // v2 has components [2, 4, 6]\n           * print(v2);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(25, -25);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let num = map(mouseX, 0, width, -2, 2, true);\n           *   let v2 = p5.Vector.mult(v1, num);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   noStroke();\n           *   text('multiplied by ' + num.toFixed(2), 5, 90);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n\n          /**\n           * @method mult\n           * @param  {Number} x The number to multiply with the x component of the vector\n           * @param  {Number} y The number to multiply with the y component of the vector\n           * @param  {Number} [z] The number to multiply with the z component of the vector\n           * @chainable\n           */\n\n          /**\n           * @method mult\n           * @param  {Number[]} arr The array to multiply with the components of the vector\n           * @chainable\n           */\n\n          /**\n           * @method mult\n           * @param  {p5.Vector} v The vector to multiply with the components of the original vector\n           * @chainable\n           */\n\n          _main.default.Vector.prototype.mult = function mult(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              // new p5.Vector will check that values are valid upon construction but it's possible\n              // that someone could change the value of a component after creation, which is why we still\n              // perform this check\n              if (\n                Number.isFinite(x.x) &&\n                Number.isFinite(x.y) &&\n                Number.isFinite(x.z) &&\n                typeof x.x === 'number' &&\n                typeof x.y === 'number' &&\n                typeof x.z === 'number'\n              ) {\n                this.x *= x.x;\n                this.y *= x.y;\n                this.z *= x.z;\n              } else {\n                console.warn(\n                  'p5.Vector.prototype.mult:',\n                  'x contains components that are either undefined or not finite numbers'\n                );\n              }\n              return this;\n            }\n            if (x instanceof Array) {\n              if (\n                x.every(function(element) {\n                  return Number.isFinite(element);\n                }) &&\n                x.every(function(element) {\n                  return typeof element === 'number';\n                })\n              ) {\n                if (x.length === 1) {\n                  this.x *= x[0];\n                  this.y *= x[0];\n                  this.z *= x[0];\n                } else if (x.length === 2) {\n                  this.x *= x[0];\n                  this.y *= x[1];\n                } else if (x.length === 3) {\n                  this.x *= x[0];\n                  this.y *= x[1];\n                  this.z *= x[2];\n                }\n              } else {\n                console.warn(\n                  'p5.Vector.prototype.mult:',\n                  'x contains elements that are either undefined or not finite numbers'\n                );\n              }\n              return this;\n            }\n\n            var vectorComponents = Array.prototype.slice.call(arguments);\n            if (\n              vectorComponents.every(function(element) {\n                return Number.isFinite(element);\n              }) &&\n              vectorComponents.every(function(element) {\n                return typeof element === 'number';\n              })\n            ) {\n              if (arguments.length === 1) {\n                this.x *= x;\n                this.y *= x;\n                this.z *= x;\n              }\n              if (arguments.length === 2) {\n                this.x *= x;\n                this.y *= y;\n              }\n              if (arguments.length === 3) {\n                this.x *= x;\n                this.y *= y;\n                this.z *= z;\n              }\n            } else {\n              console.warn(\n                'p5.Vector.prototype.mult:',\n                'x, y, or z arguments are either undefined or not a finite number'\n              );\n            }\n\n            return this;\n          };\n\n          /**\n           * Divides the vector by a scalar, divides a vector by the x, y, and z arguments, or divides the x, y, and\n           * z components of two vectors against each other. When dividing a vector by a scalar, the x, y,\n           * and z components of the vector are all divided by the scalar. When dividing a vector by a vector,\n           * the x, y, z components of the source vector are treated as the dividend, and the x, y, z components\n           * of the argument is treated as the divisor (for example with two vectors a and b: a.x / b.x, a.y / b.y, a.z / b.z).\n           * The static version of this method creates a\n           * new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector directly.\n           * Additionally, you may provide arguments to this function as an array.\n           * See the examples for more context.\n           *\n           * @method div\n           * @param  {number}    n The number to divide the vector by\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(6, 4, 2);\n           * v.div(2); //v's components are set to [3, 2, 1]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v0 = createVector(9, 4, 2);\n           * let v1 = createVector(3, 2, 4);\n           * v0.div(v1); // v0's components are set to [3, 2, 0.5]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v0 = createVector(9, 4, 2);\n           * // Provide arguments as an array\n           * let arr = [3, 2, 4];\n           * v0.div(arr); // v0's components are set to [3, 2, 0.5]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v0 = createVector(9, 4, 2);\n           * let v1 = createVector(3, 2, 4);\n           * let result = p5.Vector.div(v0, v1);\n           * print(result); // result's components are set to [3, 2, 0.5]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(6, 4, 2);\n           * let v2 = p5.Vector.div(v1, 2);\n           * // v2 has components [3, 2, 1]\n           * print(v2);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 100);\n           *   let v1 = createVector(50, -50);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let num = map(mouseX, 0, width, 10, 0.5, true);\n           *   let v2 = p5.Vector.div(v1, num);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   noStroke();\n           *   text('divided by ' + num.toFixed(2), 10, 90);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n\n          /**\n           * @method div\n           * @param  {Number} x The number to divide with the x component of the vector\n           * @param  {Number} y The number to divide with the y component of the vector\n           * @param  {Number} [z] The number to divide with the z component of the vector\n           * @chainable\n           */\n\n          /**\n           * @method div\n           * @param  {Number[]} arr The array to divide the components of the vector by\n           * @chainable\n           */\n\n          /**\n           * @method div\n           * @param  {p5.Vector} v The vector to divide the components of the original vector by\n           * @chainable\n           */\n          _main.default.Vector.prototype.div = function div(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              // new p5.Vector will check that values are valid upon construction but it's possible\n              // that someone could change the value of a component after creation, which is why we still\n              // perform this check\n              if (\n                Number.isFinite(x.x) &&\n                Number.isFinite(x.y) &&\n                Number.isFinite(x.z) &&\n                typeof x.x === 'number' &&\n                typeof x.y === 'number' &&\n                typeof x.z === 'number'\n              ) {\n                if (x.x === 0 || x.y === 0 || x.z === 0) {\n                  console.warn('p5.Vector.prototype.div:', 'divide by 0');\n                  return this;\n                }\n                this.x /= x.x;\n                this.y /= x.y;\n                this.z /= x.z;\n              } else {\n                console.warn(\n                  'p5.Vector.prototype.div:',\n                  'x contains components that are either undefined or not finite numbers'\n                );\n              }\n              return this;\n            }\n            if (x instanceof Array) {\n              if (\n                x.every(function(element) {\n                  return Number.isFinite(element);\n                }) &&\n                x.every(function(element) {\n                  return typeof element === 'number';\n                })\n              ) {\n                if (\n                  x.some(function(element) {\n                    return element === 0;\n                  })\n                ) {\n                  console.warn('p5.Vector.prototype.div:', 'divide by 0');\n                  return this;\n                }\n\n                if (x.length === 1) {\n                  this.x /= x[0];\n                  this.y /= x[0];\n                  this.z /= x[0];\n                } else if (x.length === 2) {\n                  this.x /= x[0];\n                  this.y /= x[1];\n                } else if (x.length === 3) {\n                  this.x /= x[0];\n                  this.y /= x[1];\n                  this.z /= x[2];\n                }\n              } else {\n                console.warn(\n                  'p5.Vector.prototype.div:',\n                  'x contains components that are either undefined or not finite numbers'\n                );\n              }\n\n              return this;\n            }\n\n            var vectorComponents = Array.prototype.slice.call(arguments);\n            if (\n              vectorComponents.every(function(element) {\n                return Number.isFinite(element);\n              }) &&\n              vectorComponents.every(function(element) {\n                return typeof element === 'number';\n              })\n            ) {\n              if (\n                vectorComponents.some(function(element) {\n                  return element === 0;\n                })\n              ) {\n                console.warn('p5.Vector.prototype.div:', 'divide by 0');\n                return this;\n              }\n\n              if (arguments.length === 1) {\n                this.x /= x;\n                this.y /= x;\n                this.z /= x;\n              }\n              if (arguments.length === 2) {\n                this.x /= x;\n                this.y /= y;\n              }\n              if (arguments.length === 3) {\n                this.x /= x;\n                this.y /= y;\n                this.z /= z;\n              }\n            } else {\n              console.warn(\n                'p5.Vector.prototype.div:',\n                'x, y, or z arguments are either undefined or not a finite number'\n              );\n            }\n\n            return this;\n          };\n          /**\n           * Calculates the magnitude (length) of the vector and returns the result as\n           * a float (this is simply the equation sqrt(x\\*x + y\\*y + z\\*z).)\n           *\n           * @method mag\n           * @return {Number} magnitude of the vector\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'black');\n           *\n           *   noStroke();\n           *   text('vector length: ' + v1.mag().toFixed(2), 10, 70, 90, 30);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(20.0, 30.0, 40.0);\n           * let m = v.mag();\n           * print(m); // Prints \"53.85164807134504\"\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.mag = function mag() {\n            return Math.sqrt(this.magSq());\n          };\n\n          /**\n           * Calculates the squared magnitude of the vector and returns the result\n           * as a float (this is simply the equation <em>(x\\*x + y\\*y + z\\*z)</em>.)\n           * Faster if the real length is not required in the\n           * case of comparing vectors, etc.\n           *\n           * @method magSq\n           * @return {number} squared magnitude of the vector\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(6, 4, 2);\n           * print(v1.magSq()); // Prints \"56\"\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'black');\n           *\n           *   noStroke();\n           *   text('vector length squared: ' + v1.magSq().toFixed(2), 10, 45, 90, 55);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.magSq = function magSq() {\n            var x = this.x;\n            var y = this.y;\n            var z = this.z;\n            return x * x + y * y + z * z;\n          };\n\n          /**\n           * Calculates the dot product of two vectors. The version of the method\n           * that computes the dot product of two independent vectors is a static\n           * method. See the examples for more context.\n           *\n           * @method dot\n           * @param  {Number} x   x component of the vector\n           * @param  {Number} [y] y component of the vector\n           * @param  {Number} [z] z component of the vector\n           * @return {Number}       the dot product\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = createVector(2, 3, 4);\n           *\n           * print(v1.dot(v2)); // Prints \"20\"\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * //Static method\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = createVector(3, 2, 1);\n           * print(p5.Vector.dot(v1, v2)); // Prints \"10\"\n           * </code>\n           * </div>\n           */\n          /**\n           * @method dot\n           * @param  {p5.Vector} value value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}\n           */\n          _main.default.Vector.prototype.dot = function dot(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              return this.dot(x.x, x.y, x.z);\n            }\n            return this.x * (x || 0) + this.y * (y || 0) + this.z * (z || 0);\n          };\n\n          /**\n           * Calculates and returns a vector composed of the cross product between\n           * two vectors. Both the static and non static methods return a new <a href=\"#/p5.Vector\">p5.Vector</a>.\n           * See the examples for more context.\n           *\n           * @method cross\n           * @param  {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to be crossed\n           * @return {p5.Vector}   <a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 2, 3);\n           * let v2 = createVector(1, 2, 3);\n           *\n           * let v = v1.cross(v2); // v's components are [0, 0, 0]\n           * print(v);\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(1, 0, 0);\n           * let v2 = createVector(0, 1, 0);\n           *\n           * let crossProduct = p5.Vector.cross(v1, v2);\n           * // crossProduct has components [0, 0, 1]\n           * print(crossProduct);\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.cross = function cross(v) {\n            var x = this.y * v.z - this.z * v.y;\n            var y = this.z * v.x - this.x * v.z;\n            var z = this.x * v.y - this.y * v.x;\n            if (this.p5) {\n              return new _main.default.Vector(this.p5, [x, y, z]);\n            } else {\n              return new _main.default.Vector(x, y, z);\n            }\n          };\n\n          /**\n           * Calculates the Euclidean distance between two points (considering a\n           * point as a vector object).\n           *\n           * @method dist\n           * @param  {p5.Vector} v the x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}      the distance\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 0, 0);\n           * let v2 = createVector(0, 1, 0);\n           *\n           * let distance = v1.dist(v2); // distance is 1.4142...\n           * print(distance);\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * // Static method\n           * let v1 = createVector(1, 0, 0);\n           * let v2 = createVector(0, 1, 0);\n           *\n           * let distance = p5.Vector.dist(v1, v2);\n           * // distance is 1.4142...\n           * print(distance);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *\n           *   let v1 = createVector(70, 50);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   noStroke();\n           *   text('distance between vectors: ' + v2.dist(v1).toFixed(2), 5, 50, 95, 50);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.dist = function dist(v) {\n            return v\n              .copy()\n              .sub(this)\n              .mag();\n          };\n\n          /**\n           * Normalize the vector to length 1 (make it a unit vector).\n           *\n           * @method normalize\n           * @return {p5.Vector} normalized <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10, 20, 2);\n           * // v has components [10.0, 20.0, 2.0]\n           * v.normalize();\n           * // v's components are set to\n           * // [0.4454354, 0.8908708, 0.089087084]\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(mouseX - 50, mouseY - 50);\n           *\n           *   drawArrow(v0, v1, 'red');\n           *   v1.normalize();\n           *   drawArrow(v0, v1.mult(35), 'blue');\n           *\n           *   noFill();\n           *   ellipse(50, 50, 35 * 2);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.normalize = function normalize() {\n            var len = this.mag();\n            // here we multiply by the reciprocal instead of calling 'div()'\n            // since div duplicates this zero check.\n            if (len !== 0) this.mult(1 / len);\n            return this;\n          };\n\n          /**\n           * Limit the magnitude of this vector to the value used for the <b>max</b>\n           * parameter.\n           *\n           * @method limit\n           * @param  {Number}    max the maximum magnitude for the vector\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10, 20, 2);\n           * // v has components [10.0, 20.0, 2.0]\n           * v.limit(5);\n           * // v's components are set to\n           * // [2.2271771, 4.4543543, 0.4454354]\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(mouseX - 50, mouseY - 50);\n           *\n           *   drawArrow(v0, v1, 'red');\n           *   drawArrow(v0, v1.limit(35), 'blue');\n           *\n           *   noFill();\n           *   ellipse(50, 50, 35 * 2);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.limit = function limit(max) {\n            var mSq = this.magSq();\n            if (mSq > max * max) {\n              this.div(Math.sqrt(mSq)) //normalize it\n                .mult(max);\n            }\n            return this;\n          };\n\n          /**\n           * Set the magnitude of this vector to the value used for the <b>len</b>\n           * parameter.\n           *\n           * @method setMag\n           * @param  {number}    len the new length for this vector\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10, 20, 2);\n           * // v has components [10.0, 20.0, 2.0]\n           * v.setMag(10);\n           * // v's components are set to [6.0, 8.0, 0.0]\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(50, 50);\n           *\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let length = map(mouseX, 0, width, 0, 141, true);\n           *   v1.setMag(length);\n           *   drawArrow(v0, v1, 'blue');\n           *\n           *   noStroke();\n           *   text('magnitude set to: ' + length.toFixed(2), 10, 70, 90, 30);\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.setMag = function setMag(n) {\n            return this.normalize().mult(n);\n          };\n\n          /**\n           * Calculate the angle of rotation for this vector(only 2D vectors).\n           * p5.Vectors created using <a src=\"#/p5/createVector\">createVector()</a>\n           * will take the current <a = src=\"#/p5/angleMode\">angleMode</a> into consideration, and give the angle\n           * in radians or degree accordingly.\n           *\n           * @method heading\n           * @return {Number} the angle of rotation\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * function setup() {\n           *   let v1 = createVector(30, 50);\n           *   print(v1.heading()); // 1.0303768265243125\n           *\n           *   v1 = createVector(40, 50);\n           *   print(v1.heading()); // 0.8960553845713439\n           *\n           *   v1 = createVector(30, 70);\n           *   print(v1.heading()); // 1.1659045405098132\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(mouseX - 50, mouseY - 50);\n           *\n           *   drawArrow(v0, v1, 'black');\n           *\n           *   let myHeading = v1.heading();\n           *   noStroke();\n           *   text(\n           *     'vector heading: ' +\n           *       myHeading.toFixed(2) +\n           *       ' radians or ' +\n           *       degrees(myHeading).toFixed(2) +\n           *       ' degrees',\n           *     10,\n           *     50,\n           *     90,\n           *     50\n           *   );\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.heading = function heading() {\n            var h = Math.atan2(this.y, this.x);\n            if (this.p5) return this.p5._fromRadians(h);\n            return h;\n          };\n\n          /**\n           * Rotate the vector to a specific angle (only 2D vectors), magnitude remains the\n           * same\n           *\n           * @method setHeading\n           * @param  {number}    angle the angle of rotation\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10.0, 20.0);\n           * // result of v.heading() is 1.1071487177940904\n           * v.setHeading(Math.PI);\n           * // result of v.heading() is now 3.141592653589793\n           * </code>\n           * </div>\n           */\n\n          _main.default.Vector.prototype.setHeading = function setHeading(a) {\n            var m = this.mag();\n            this.x = m * Math.cos(a);\n            this.y = m * Math.sin(a);\n            return this;\n          };\n\n          /**\n           * Rotate the vector by an angle (only 2D vectors), magnitude remains the\n           * same\n           *\n           * @method rotate\n           * @param  {number}    angle the angle of rotation\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10.0, 20.0);\n           * // v has components [10.0, 20.0, 0.0]\n           * v.rotate(HALF_PI);\n           * // v's components are set to [-20.0, 9.999999, 0.0]\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let angle = 0;\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = createVector(50, 0);\n           *\n           *   drawArrow(v0, v1.rotate(angle), 'black');\n           *   angle += 0.01;\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.rotate = function rotate(a) {\n            var newHeading = this.heading() + a;\n            if (this.p5) newHeading = this.p5._toRadians(newHeading);\n            var mag = this.mag();\n            this.x = Math.cos(newHeading) * mag;\n            this.y = Math.sin(newHeading) * mag;\n            return this;\n          };\n\n          /**\n           * Calculates and returns the angle (in radians) between two vectors.\n           * @method angleBetween\n           * @param  {p5.Vector}    value the x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}       the angle between (in radians)\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(1, 0, 0);\n           * let v2 = createVector(0, 1, 0);\n           *\n           * let angle = v1.angleBetween(v2);\n           * // angle is PI/2\n           * print(angle);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *   let v0 = createVector(50, 50);\n           *\n           *   let v1 = createVector(50, 0);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(mouseX - 50, mouseY - 50);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   let angleBetween = v1.angleBetween(v2);\n           *   noStroke();\n           *   text(\n           *     'angle between: ' +\n           *       angleBetween.toFixed(2) +\n           *       ' radians or ' +\n           *       degrees(angleBetween).toFixed(2) +\n           *       ' degrees',\n           *     10,\n           *     50,\n           *     90,\n           *     50\n           *   );\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n\n          _main.default.Vector.prototype.angleBetween = function angleBetween(v) {\n            var dotmagmag = this.dot(v) / (this.mag() * v.mag());\n            // Mathematically speaking: the dotmagmag variable will be between -1 and 1\n            // inclusive. Practically though it could be slightly outside this range due\n            // to floating-point rounding issues. This can make Math.acos return NaN.\n            //\n            // Solution: we'll clamp the value to the -1,1 range\n            var angle;\n            angle = Math.acos(Math.min(1, Math.max(-1, dotmagmag)));\n            angle = angle * Math.sign(this.cross(v).z || 1);\n            if (this.p5) {\n              angle = this.p5._fromRadians(angle);\n            }\n            return angle;\n          };\n          /**\n           * Linear interpolate the vector to another vector\n           *\n           * @method lerp\n           * @param  {Number}    x   the x component\n           * @param  {Number}    y   the y component\n           * @param  {Number}    z   the z component\n           * @param  {Number}    amt the amount of interpolation; some value between 0.0\n           *                         (old vector) and 1.0 (new vector). 0.9 is very near\n           *                         the new vector. 0.5 is halfway in between.\n           * @chainable\n           *\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(1, 1, 0);\n           *\n           * v.lerp(3, 3, 0, 0.5); // v now has components [2,2,0]\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(0, 0, 0);\n           * let v2 = createVector(100, 100, 0);\n           *\n           * let v3 = p5.Vector.lerp(v1, v2, 0.5);\n           * // v3 has components [50,50,0]\n           * print(v3);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let step = 0.01;\n           * let amount = 0;\n           *\n           * function draw() {\n           *   background(240);\n           *   let v0 = createVector(0, 0);\n           *\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let v2 = createVector(90, 90);\n           *   drawArrow(v0, v2, 'blue');\n           *\n           *   if (amount > 1 || amount < 0) {\n           *     step *= -1;\n           *   }\n           *   amount += step;\n           *   let v3 = p5.Vector.lerp(v1, v2, amount);\n           *\n           *   drawArrow(v0, v3, 'purple');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          /**\n           * @method lerp\n           * @param  {p5.Vector} v   the <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to\n           * @param  {Number}    amt\n           * @chainable\n           */\n          _main.default.Vector.prototype.lerp = function lerp(x, y, z, amt) {\n            if (x instanceof _main.default.Vector) {\n              return this.lerp(x.x, x.y, x.z, y);\n            }\n            this.x += (x - this.x) * amt || 0;\n            this.y += (y - this.y) * amt || 0;\n            this.z += (z - this.z) * amt || 0;\n            return this;\n          };\n\n          /**\n           * Reflect the incoming vector about a normal to a line in 2D, or about a normal to a plane in 3D\n           * This method acts on the vector directly\n           *\n           * @method reflect\n           * @param  {p5.Vector} surfaceNormal   the <a href=\"#/p5.Vector\">p5.Vector</a> to reflect about, will be normalized by this method\n           * @chainable\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(4, 6); // incoming vector, this example vector is heading to the right and downward\n           * let n = createVector(0, -1); // surface normal to a plane (this example normal points directly upwards)\n           * v.reflect(n); // v is reflected about the surface normal n.  v's components are now set to [4, -6]\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(0, 0);\n           *   let v1 = createVector(mouseX, mouseY);\n           *   drawArrow(v0, v1, 'red');\n           *\n           *   let n = createVector(0, -30);\n           *   drawArrow(v1, n, 'blue');\n           *\n           *   let r = v1.copy();\n           *   r.reflect(n);\n           *   drawArrow(v1, r, 'purple');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.reflect = function reflect(surfaceNormal) {\n            surfaceNormal.normalize();\n            return this.sub(surfaceNormal.mult(2 * this.dot(surfaceNormal)));\n          };\n\n          /**\n           * Return a representation of this vector as a float array. This is only\n           * for temporary use. If used in any other fashion, the contents should be\n           * copied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b> method to copy into your own\n           * array.\n           *\n           * @method array\n           * @return {Number[]} an Array with the 3 values\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * function setup() {\n           *   let v = createVector(20, 30);\n           *   print(v.array()); // Prints : Array [20, 30, 0]\n           * }\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v = createVector(10.0, 20.0, 30.0);\n           * let f = v.array();\n           * print(f[0]); // Prints \"10.0\"\n           * print(f[1]); // Prints \"20.0\"\n           * print(f[2]); // Prints \"30.0\"\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.prototype.array = function array() {\n            return [this.x || 0, this.y || 0, this.z || 0];\n          };\n\n          /**\n           * Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>\n           *\n           * @method equals\n           * @param {Number} [x] the x component of the vector\n           * @param {Number} [y] the y component of the vector\n           * @param {Number} [z] the z component of the vector\n           * @return {Boolean} whether the vectors are equals\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * let v1 = createVector(5, 10, 20);\n           * let v2 = createVector(5, 10, 20);\n           * let v3 = createVector(13, 10, 19);\n           *\n           * print(v1.equals(v2.x, v2.y, v2.z)); // true\n           * print(v1.equals(v3.x, v3.y, v3.z)); // false\n           * </code>\n           * </div>\n           *\n           * <div class=\"norender\">\n           * <code>\n           * let v1 = createVector(10.0, 20.0, 30.0);\n           * let v2 = createVector(10.0, 20.0, 30.0);\n           * let v3 = createVector(0.0, 0.0, 0.0);\n           * print(v1.equals(v2)); // true\n           * print(v1.equals(v3)); // false\n           * </code>\n           * </div>\n           */\n          /**\n           * @method equals\n           * @param {p5.Vector|Array} value the vector to compare\n           * @return {Boolean}\n           */\n          _main.default.Vector.prototype.equals = function equals(x, y, z) {\n            var a, b, c;\n            if (x instanceof _main.default.Vector) {\n              a = x.x || 0;\n              b = x.y || 0;\n              c = x.z || 0;\n            } else if (x instanceof Array) {\n              a = x[0] || 0;\n              b = x[1] || 0;\n              c = x[2] || 0;\n            } else {\n              a = x || 0;\n              b = y || 0;\n              c = z || 0;\n            }\n            return this.x === a && this.y === b && this.z === c;\n          };\n\n          // Static Methods\n\n          /**\n           * Make a new 2D vector from an angle\n           *\n           * @method fromAngle\n           * @static\n           * @param {Number}     angle the desired angle, in radians (unaffected by <a href=\"#/p5/angleMode\">angleMode</a>)\n           * @param {Number}     [length] the length of the new vector (defaults to 1)\n           * @return {p5.Vector}       the new <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(200);\n           *\n           *   // Create a variable, proportional to the mouseX,\n           *   // varying from 0-360, to represent an angle in degrees.\n           *   let myDegrees = map(mouseX, 0, width, 0, 360);\n           *\n           *   // Display that variable in an onscreen text.\n           *   // (Note the nfc() function to truncate additional decimal places,\n           *   // and the \"\\xB0\" character for the degree symbol.)\n           *   let readout = 'angle = ' + nfc(myDegrees, 1) + '\\xB0';\n           *   noStroke();\n           *   fill(0);\n           *   text(readout, 5, 15);\n           *\n           *   // Create a p5.Vector using the fromAngle function,\n           *   // and extract its x and y components.\n           *   let v = p5.Vector.fromAngle(radians(myDegrees), 30);\n           *   let vx = v.x;\n           *   let vy = v.y;\n           *\n           *   push();\n           *   translate(width / 2, height / 2);\n           *   noFill();\n           *   stroke(150);\n           *   line(0, 0, 30, 0);\n           *   stroke(0);\n           *   line(0, 0, vx, vy);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.fromAngle = function fromAngle(angle, length) {\n            if (typeof length === 'undefined') {\n              length = 1;\n            }\n            return new _main.default.Vector(\n              length * Math.cos(angle),\n              length * Math.sin(angle),\n              0\n            );\n          };\n\n          /**\n           * Make a new 3D vector from a pair of ISO spherical angles\n           *\n           * @method fromAngles\n           * @static\n           * @param {Number}     theta    the polar angle, in radians (zero is up)\n           * @param {Number}     phi      the azimuthal angle, in radians\n           *                               (zero is out of the screen)\n           * @param {Number}     [length] the length of the new vector (defaults to 1)\n           * @return {p5.Vector}          the new <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   fill(255);\n           *   noStroke();\n           * }\n           * function draw() {\n           *   background(255);\n           *\n           *   let t = millis() / 1000;\n           *\n           *   // add three point lights\n           *   pointLight(color('#f00'), p5.Vector.fromAngles(t * 1.0, t * 1.3, 100));\n           *   pointLight(color('#0f0'), p5.Vector.fromAngles(t * 1.1, t * 1.2, 100));\n           *   pointLight(color('#00f'), p5.Vector.fromAngles(t * 1.2, t * 1.1, 100));\n           *\n           *   sphere(35);\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.fromAngles = function(theta, phi, length) {\n            if (typeof length === 'undefined') {\n              length = 1;\n            }\n            var cosPhi = Math.cos(phi);\n            var sinPhi = Math.sin(phi);\n            var cosTheta = Math.cos(theta);\n            var sinTheta = Math.sin(theta);\n\n            return new _main.default.Vector(\n              length * sinTheta * sinPhi,\n              -length * cosTheta,\n              length * sinTheta * cosPhi\n            );\n          };\n\n          /**\n           * Make a new 2D unit vector from a random angle\n           *\n           * @method random2D\n           * @static\n           * @return {p5.Vector} the new <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = p5.Vector.random2D();\n           * // May make v's attributes something like:\n           * // [0.61554617, -0.51195765, 0.0] or\n           * // [-0.4695841, -0.14366731, 0.0] or\n           * // [0.6091097, -0.22805278, 0.0]\n           * print(v);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * function setup() {\n           *   frameRate(1);\n           * }\n           *\n           * function draw() {\n           *   background(240);\n           *\n           *   let v0 = createVector(50, 50);\n           *   let v1 = p5.Vector.random2D();\n           *   drawArrow(v0, v1.mult(50), 'black');\n           * }\n           *\n           * // draw an arrow for a vector at a given base position\n           * function drawArrow(base, vec, myColor) {\n           *   push();\n           *   stroke(myColor);\n           *   strokeWeight(3);\n           *   fill(myColor);\n           *   translate(base.x, base.y);\n           *   line(0, 0, vec.x, vec.y);\n           *   rotate(vec.heading());\n           *   let arrowSize = 7;\n           *   translate(vec.mag() - arrowSize, 0);\n           *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.random2D = function random2D() {\n            return this.fromAngle(Math.random() * constants.TWO_PI);\n          };\n\n          /**\n           * Make a new random 3D unit vector.\n           *\n           * @method random3D\n           * @static\n           * @return {p5.Vector} the new <a href=\"#/p5.Vector\">p5.Vector</a> object\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let v = p5.Vector.random3D();\n           * // May make v's attributes something like:\n           * // [0.61554617, -0.51195765, 0.599168] or\n           * // [-0.4695841, -0.14366731, -0.8711202] or\n           * // [0.6091097, -0.22805278, -0.7595902]\n           * print(v);\n           * </code>\n           * </div>\n           */\n          _main.default.Vector.random3D = function random3D() {\n            var angle = Math.random() * constants.TWO_PI;\n            var vz = Math.random() * 2 - 1;\n            var vzBase = Math.sqrt(1 - vz * vz);\n            var vx = vzBase * Math.cos(angle);\n            var vy = vzBase * Math.sin(angle);\n            return new _main.default.Vector(vx, vy, vz);\n          };\n\n          // Adds two vectors together and returns a new one.\n          /**\n           * @method add\n           * @static\n           * @param  {p5.Vector} v1 a <a href=\"#/p5.Vector\">p5.Vector</a> to add\n           * @param  {p5.Vector} v2 a <a href=\"#/p5.Vector\">p5.Vector</a> to add\n           * @param  {p5.Vector} [target] the vector to receive the result (Optional)\n           * @return {p5.Vector} the resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n\n          _main.default.Vector.add = function add(v1, v2, target) {\n            if (!target) {\n              target = v1.copy();\n              if (arguments.length === 3) {\n                _main.default._friendlyError(\n                  'The target parameter is undefined, it should be of type p5.Vector',\n                  'p5.Vector.add'\n                );\n              }\n            } else {\n              target.set(v1);\n            }\n            target.add(v2);\n            return target;\n          };\n\n          // Returns a vector remainder when it is divided by another vector\n          /**\n           * @method rem\n           * @static\n           * @param  {p5.Vector} v1 dividend <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @param  {p5.Vector} v2 divisor <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n          /**\n           * @method rem\n           * @static\n           * @param  {p5.Vector} v1\n           * @param  {p5.Vector} v2\n           * @return {p5.Vector} the resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n          _main.default.Vector.rem = function rem(v1, v2) {\n            if (v1 instanceof _main.default.Vector && v2 instanceof _main.default.Vector) {\n              var target = v1.copy();\n              target.rem(v2);\n              return target;\n            }\n          };\n\n          /*\n    * Subtracts one <a href=\"#/p5.Vector\">p5.Vector</a> from another and returns a new one.  The second\n    * vector (v2) is subtracted from the first (v1), resulting in v1-v2.\n    */\n          /**\n           * @method sub\n           * @static\n           * @param  {p5.Vector} v1 a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from\n           * @param  {p5.Vector} v2 a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract\n           * @param  {p5.Vector} [target] the vector to receive the result (Optional)\n           * @return {p5.Vector} the resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n\n          _main.default.Vector.sub = function sub(v1, v2, target) {\n            if (!target) {\n              target = v1.copy();\n              if (arguments.length === 3) {\n                _main.default._friendlyError(\n                  'The target parameter is undefined, it should be of type p5.Vector',\n                  'p5.Vector.sub'\n                );\n              }\n            } else {\n              target.set(v1);\n            }\n            target.sub(v2);\n            return target;\n          };\n\n          /**\n           * Multiplies a vector by a scalar and returns a new vector.\n           */\n\n          /**\n           * @method mult\n           * @static\n           * @param  {Number} x\n           * @param  {Number} y\n           * @param  {Number} [z]\n           * @return {p5.Vector} The resulting new <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n\n          /**\n           * @method mult\n           * @static\n           * @param  {p5.Vector} v\n           * @param  {Number}  n\n           * @param  {p5.Vector} [target] the vector to receive the result (Optional)\n           */\n\n          /**\n           * @method mult\n           * @static\n           * @param  {p5.Vector} v0\n           * @param  {p5.Vector} v1\n           * @param  {p5.Vector} [target]\n           */\n\n          /**\n           * @method mult\n           * @static\n           * @param  {p5.Vector} v0\n           * @param  {Number[]} arr\n           * @param  {p5.Vector} [target]\n           */\n          _main.default.Vector.mult = function mult(v, n, target) {\n            if (!target) {\n              target = v.copy();\n              if (arguments.length === 3) {\n                _main.default._friendlyError(\n                  'The target parameter is undefined, it should be of type p5.Vector',\n                  'p5.Vector.mult'\n                );\n              }\n            } else {\n              target.set(v);\n            }\n            target.mult(n);\n            return target;\n          };\n\n          /**\n           * Divides a vector by a scalar and returns a new vector.\n           */\n\n          /**\n           * @method div\n           * @static\n           * @param  {Number} x\n           * @param  {Number} y\n           * @param  {Number} [z]\n           * @return {p5.Vector} The resulting new <a href=\"#/p5.Vector\">p5.Vector</a>\n           */\n\n          /**\n           * @method div\n           * @static\n           * @param  {p5.Vector} v\n           * @param  {Number}  n\n           * @param  {p5.Vector} [target] the vector to receive the result (Optional)\n           */\n\n          /**\n           * @method div\n           * @static\n           * @param  {p5.Vector} v0\n           * @param  {p5.Vector} v1\n           * @param  {p5.Vector} [target]\n           */\n\n          /**\n           * @method div\n           * @static\n           * @param  {p5.Vector} v0\n           * @param  {Number[]} arr\n           * @param  {p5.Vector} [target]\n           */\n          _main.default.Vector.div = function div(v, n, target) {\n            if (!target) {\n              target = v.copy();\n\n              if (arguments.length === 3) {\n                _main.default._friendlyError(\n                  'The target parameter is undefined, it should be of type p5.Vector',\n                  'p5.Vector.div'\n                );\n              }\n            } else {\n              target.set(v);\n            }\n            target.div(n);\n            return target;\n          };\n\n          /**\n           * Calculates the dot product of two vectors.\n           */\n          /**\n           * @method dot\n           * @static\n           * @param  {p5.Vector} v1 the first <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @param  {p5.Vector} v2 the second <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}     the dot product\n           */\n          _main.default.Vector.dot = function dot(v1, v2) {\n            return v1.dot(v2);\n          };\n\n          /**\n           * Calculates the cross product of two vectors.\n           */\n          /**\n           * @method cross\n           * @static\n           * @param  {p5.Vector} v1 the first <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @param  {p5.Vector} v2 the second <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}     the cross product\n           */\n          _main.default.Vector.cross = function cross(v1, v2) {\n            return v1.cross(v2);\n          };\n\n          /**\n           * Calculates the Euclidean distance between two points (considering a\n           * point as a vector object).\n           */\n          /**\n           * @method dist\n           * @static\n           * @param  {p5.Vector} v1 the first <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @param  {p5.Vector} v2 the second <a href=\"#/p5.Vector\">p5.Vector</a>\n           * @return {Number}     the distance\n           */\n          _main.default.Vector.dist = function dist(v1, v2) {\n            return v1.dist(v2);\n          };\n\n          /**\n           * Linear interpolate a vector to another vector and return the result as a\n           * new vector.\n           */\n          /**\n           * @method lerp\n           * @static\n           * @param {p5.Vector} v1\n           * @param {p5.Vector} v2\n           * @param {Number} amt\n           * @param {p5.Vector} [target] the vector to receive the result (Optional)\n           * @return {p5.Vector}      the lerped value\n           */\n          _main.default.Vector.lerp = function lerp(v1, v2, amt, target) {\n            if (!target) {\n              target = v1.copy();\n              if (arguments.length === 4) {\n                _main.default._friendlyError(\n                  'The target parameter is undefined, it should be of type p5.Vector',\n                  'p5.Vector.lerp'\n                );\n              }\n            } else {\n              target.set(v1);\n            }\n            target.lerp(v2, amt);\n            return target;\n          };\n\n          /**\n           * @method mag\n           * @param {p5.Vector} vecT the vector to return the magnitude of\n           * @return {Number}        the magnitude of vecT\n           * @static\n           */\n          _main.default.Vector.mag = function mag(vecT) {\n            var x = vecT.x,\n              y = vecT.y,\n              z = vecT.z;\n            var magSq = x * x + y * y + z * z;\n            return Math.sqrt(magSq);\n          };\n          var _default = _main.default.Vector;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59 }\n      ],\n      93: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** // variables used for random number generators\n           * @module Math\n           * @submodule Random\n           * @for p5\n           * @requires core\n           */\n          var randomStateProp = '_lcg_random_state'; // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n          // m is basically chosen to be large (as it is the max period)\n          // and for its relationships to a and c\n          var m = 4294967296; // a - 1 should be divisible by m's prime factors\n          var a = 1664525; // c and m should be co-prime\n          var c = 1013904223;\n          var y2 = 0;\n\n          // Linear Congruential Generator that stores its state at instance[stateProperty]\n          _main.default.prototype._lcg = function(stateProperty) {\n            // define the recurrence relationship\n            this[stateProperty] = (a * this[stateProperty] + c) % m;\n            // return a float in [0, 1)\n            // we've just used % m, so / m is always < 1\n            return this[stateProperty] / m;\n          };\n\n          _main.default.prototype._lcgSetSeed = function(stateProperty, val) {\n            // pick a random seed if val is undefined or null\n            // the >>> 0 casts the seed to an unsigned 32-bit integer\n            this[stateProperty] = (val == null ? Math.random() * m : val) >>> 0;\n          };\n\n          /**\n           * Sets the seed value for <a href=\"#/p5/random\">random()</a>.\n           *\n           * By default, <a href=\"#/p5/random\">random()</a> produces different results each time the program\n           * is run. Set the seed parameter to a constant to return the same\n           * pseudo-random numbers each time the software is run.\n           *\n           * @method randomSeed\n           * @param {Number} seed   the seed value\n           * @example\n           * <div>\n           * <code>\n           * randomSeed(99);\n           * for (let i = 0; i < 100; i++) {\n           *   let r = random(0, 255);\n           *   stroke(r);\n           *   line(i, 0, i, 100);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * many vertical lines drawn in white, black or grey.\n           */\n          _main.default.prototype.randomSeed = function(seed) {\n            this._lcgSetSeed(randomStateProp, seed);\n            this._gaussian_previous = false;\n          };\n\n          /**\n           * Return a random floating-point number.\n           *\n           * Takes either 0, 1 or 2 arguments.\n           *\n           * If no argument is given, returns a random number from 0\n           * up to (but not including) 1.\n           *\n           * If one argument is given and it is a number, returns a random number from 0\n           * up to (but not including) the number.\n           *\n           * If one argument is given and it is an array, returns a random element from\n           * that array.\n           *\n           * If two arguments are given, returns a random number from the\n           * first argument up to (but not including) the second argument.\n           *\n           * @method random\n           * @param  {Number} [min]   the lower bound (inclusive)\n           * @param  {Number} [max]   the upper bound (exclusive)\n           * @return {Number} the random number\n           * @example\n           * <div>\n           * <code>\n           * for (let i = 0; i < 100; i++) {\n           *   let r = random(50);\n           *   stroke(r * 5);\n           *   line(50, i, 50 + r, i);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * for (let i = 0; i < 100; i++) {\n           *   let r = random(-50, 50);\n           *   line(50, i, 50 + r, i);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * // Get a random element from an array using the random(Array) syntax\n           * let words = ['apple', 'bear', 'cat', 'dog'];\n           * let word = random(words); // select random word\n           * text(word, 10, 50); // draw the word\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 100 horizontal lines from center canvas to right. size+fill change each time\n           * 100 horizontal lines from center of canvas. height & side change each render\n           * word displayed at random. Either apple, bear, cat, or dog\n           */\n          /**\n           * @method random\n           * @param  {Array} choices   the array to choose from\n           * @return {*} the random element from the array\n           * @example\n           */\n          _main.default.prototype.random = function(min, max) {\n            _main.default._validateParameters('random', arguments);\n            var rand;\n\n            if (this[randomStateProp] != null) {\n              rand = this._lcg(randomStateProp);\n            } else {\n              rand = Math.random();\n            }\n            if (typeof min === 'undefined') {\n              return rand;\n            } else if (typeof max === 'undefined') {\n              if (min instanceof Array) {\n                return min[Math.floor(rand * min.length)];\n              } else {\n                return rand * min;\n              }\n            } else {\n              if (min > max) {\n                var tmp = min;\n                min = max;\n                max = tmp;\n              }\n\n              return rand * (max - min) + min;\n            }\n          };\n\n          /**\n           *\n           * Returns a random number fitting a Gaussian, or\n           * normal, distribution. There is theoretically no minimum or maximum\n           * value that <a href=\"#/p5/randomGaussian\">randomGaussian()</a> might return. Rather, there is\n           * just a very low probability that values far from the mean will be\n           * returned; and a higher probability that numbers near the mean will\n           * be returned.\n           *\n           * Takes either 0, 1 or 2 arguments.<br>\n           * If no args, returns a mean of 0 and standard deviation of 1.<br>\n           * If one arg, that arg is the mean (standard deviation is 1).<br>\n           * If two args, first is mean, second is standard deviation.\n           *\n           * @method randomGaussian\n           * @param  {Number} [mean]  the mean\n           * @param  {Number} [sd]    the standard deviation\n           * @return {Number} the random number\n           * @example\n           * <div>\n           * <code>\n           * for (let y = 0; y < 100; y++) {\n           *   let x = randomGaussian(50, 15);\n           *   line(50, y, x, y);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let distribution = new Array(360);\n           *\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   for (let i = 0; i < distribution.length; i++) {\n           *     distribution[i] = floor(randomGaussian(0, 15));\n           *   }\n           * }\n           *\n           * function draw() {\n           *   background(204);\n           *\n           *   translate(width / 2, width / 2);\n           *\n           *   for (let i = 0; i < distribution.length; i++) {\n           *     rotate(TWO_PI / distribution.length);\n           *     stroke(0);\n           *     let dist = abs(distribution[i]);\n           *     line(0, 0, dist, 0);\n           *   }\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * 100 horizontal lines from center of canvas. height & side change each render\n           * black lines radiate from center of canvas. size determined each render\n           */\n          _main.default.prototype.randomGaussian = function(mean) {\n            var sd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n            var y1, x1, x2, w;\n            if (this._gaussian_previous) {\n              y1 = y2;\n              this._gaussian_previous = false;\n            } else {\n              do {\n                x1 = this.random(2) - 1;\n                x2 = this.random(2) - 1;\n                w = x1 * x1 + x2 * x2;\n              } while (w >= 1);\n              w = Math.sqrt(-2 * Math.log(w) / w);\n              y1 = x1 * w;\n              y2 = x2 * w;\n              this._gaussian_previous = true;\n            }\n\n            var m = mean || 0;\n            return y1 * sd + m;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      94: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Math\n           * @submodule Trigonometry\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ /*\nall DEGREES/RADIANS conversion should be done in the p5 instance\nif possible, using the p5._toRadians(), p5._fromRadians() methods.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 */ _main.default.prototype._angleMode =\n            constants.RADIANS;\n          /**\n           * The inverse of <a href=\"#/p5/cos\">cos()</a>, returns the arc cosine of a value.\n           * This function expects the values in the range of -1 to 1 and values are returned in\n           * the range 0 to PI (3.1415927) if the angleMode is RADIANS or 0 to 180 if the\n           * angle mode is DEGREES.\n           *\n           * @method acos\n           * @param  {Number} value the value whose arc cosine is to be returned\n           * @return {Number}       the arc cosine of the given value\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let a = PI;\n           * let c = cos(a);\n           * let ac = acos(c);\n           * // Prints: \"3.1415927 : -1.0 : 3.1415927\"\n           * print(a + ' : ' + c + ' : ' + ac);\n           * </code>\n           * </div>\n           *\n           * <div class= “norender\">\n           * <code>\n           * let a = PI + PI / 4.0;\n           * let c = cos(a);\n           * let ac = acos(c);\n           * // Prints: \"3.926991 : -0.70710665 : 2.3561943\"\n           * print(a + ' : ' + c + ' : ' + ac);\n           * </code>\n           * </div>\n           */ _main.default.prototype.acos = function(ratio) {\n            return this._fromRadians(Math.acos(ratio));\n          };\n\n          /**\n           * The inverse of <a href=\"#/p5/sin\">sin()</a>, returns the arc sine of a value.\n           * This function expects the values in the range of -1 to 1 and values are returned\n           * in the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle\n           * mode is DEGREES.\n           *\n           * @method asin\n           * @param  {Number} value the value whose arc sine is to be returned\n           * @return {Number}       the arc sine of the given value\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let a = PI / 3.0;\n           * let s = sin(a);\n           * let as = asin(s);\n           * // Prints: \"1.0471975 : 0.86602540 : 1.0471975\"\n           * print(a + ' : ' + s + ' : ' + as);\n           * </code>\n           * </div>\n           *\n           * <div class= “norender\">\n           * <code>\n           * let a = PI + PI / 3.0;\n           * let s = sin(a);\n           * let as = asin(s);\n           * // Prints: \"4.1887902 : -0.86602540 : -1.0471975\"\n           * print(a + ' : ' + s + ' : ' + as);\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.asin = function(ratio) {\n            return this._fromRadians(Math.asin(ratio));\n          };\n\n          /**\n           * The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value.\n           * This function expects the values in the range of -Infinity to Infinity (exclusive) and\n           * values are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or\n           * -90 to 90 if the angle mode is DEGREES.\n           *\n           * @method atan\n           * @param  {Number} value the value whose arc tangent is to be returned\n           * @return {Number}       the arc tangent of the given value\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let a = PI / 3.0;\n           * let t = tan(a);\n           * let at = atan(t);\n           * // Prints: \"1.0471975 : 1.7320508 : 1.0471975\"\n           * print(a + ' : ' + t + ' : ' + at);\n           * </code>\n           * </div>\n           *\n           * <div class= “norender\">\n           * <code>\n           * let a = PI + PI / 3.0;\n           * let t = tan(a);\n           * let at = atan(t);\n           * // Prints: \"4.1887902 : 1.7320508 : 1.0471975\"\n           * print(a + ' : ' + t + ' : ' + at);\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.atan = function(ratio) {\n            return this._fromRadians(Math.atan(ratio));\n          };\n\n          /**\n           * Calculates the angle (in radians) from a specified point to the coordinate\n           * origin as measured from the positive x-axis. Values are returned as a\n           * float in the range from PI to -PI if the angleMode is RADIANS or 180 to\n           * -180 if the angleMode is DEGREES. The atan2<a href=\"#/p5/\">()</a> function is\n           * most often used for orienting geometry to the position of the cursor.\n           *\n           * Note: The y-coordinate of the point is the first parameter, and the\n           * x-coordinate is the second parameter, due the the structure of calculating\n           * the tangent.\n           *\n           * @method atan2\n           * @param  {Number} y y-coordinate of the point\n           * @param  {Number} x x-coordinate of the point\n           * @return {Number}   the arc tangent of the given point\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(204);\n           *   translate(width / 2, height / 2);\n           *   let a = atan2(mouseY - height / 2, mouseX - width / 2);\n           *   rotate(a);\n           *   rect(-30, -5, 60, 10);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 60 by 10 rect at center of canvas rotates with mouse movements\n           */\n          _main.default.prototype.atan2 = function(y, x) {\n            return this._fromRadians(Math.atan2(y, x));\n          };\n\n          /**\n           * Calculates the cosine of an angle. This function takes into account the\n           * current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.\n           *\n           * @method cos\n           * @param  {Number} angle the angle\n           * @return {Number}       the cosine of the angle\n           *\n           * @example\n           * <div>\n           * <code>\n           * let a = 0.0;\n           * let inc = TWO_PI / 25.0;\n           * for (let i = 0; i < 25; i++) {\n           *   line(i * 4, 50, i * 4, 50 + cos(a) * 40.0);\n           *   a = a + inc;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical black lines form wave patterns, extend-down on left and right side\n           */\n          _main.default.prototype.cos = function(angle) {\n            return Math.cos(this._toRadians(angle));\n          };\n\n          /**\n           * Calculates the sine of an angle. This function takes into account the\n           * current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.\n           *\n           * @method sin\n           * @param  {Number} angle the angle\n           * @return {Number}       the sine of the angle\n           *\n           * @example\n           * <div>\n           * <code>\n           * let a = 0.0;\n           * let inc = TWO_PI / 25.0;\n           * for (let i = 0; i < 25; i++) {\n           *   line(i * 4, 50, i * 4, 50 + sin(a) * 40.0);\n           *   a = a + inc;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * vertical black lines extend down and up from center to form wave pattern\n           */\n          _main.default.prototype.sin = function(angle) {\n            return Math.sin(this._toRadians(angle));\n          };\n\n          /**\n           * Calculates the tangent of an angle. This function takes into account\n           * the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range of all real numbers.\n           *\n           * @method tan\n           * @param  {Number} angle the angle\n           * @return {Number}       the tangent of the angle\n           *\n           * @example\n           * <div>\n           * <code>\n           * let a = 0.0;\n           * let inc = TWO_PI / 50.0;\n           * for (let i = 0; i < 100; i = i + 2) {\n           *   line(i, 50, i, 50 + tan(a) * 2.0);\n           *   a = a + inc;\n           * }\n           * </code>\n           *\n           * @alt\n           * vertical black lines end down and up from center to form spike pattern\n           */\n          _main.default.prototype.tan = function(angle) {\n            return Math.tan(this._toRadians(angle));\n          };\n\n          /**\n           * Converts a radian measurement to its corresponding value in degrees.\n           * Radians and degrees are two ways of measuring the same thing. There are\n           * 360 degrees in a circle and 2*PI radians in a circle. For example,\n           * 90° = PI/2 = 1.5707964. This function does not take into account the\n           * current <a href=\"#/p5/angleMode\">angleMode</a>.\n           *\n           * @method degrees\n           * @param  {Number} radians the radians value to convert to degrees\n           * @return {Number}         the converted angle\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let rad = PI / 4;\n           * let deg = degrees(rad);\n           * print(rad + ' radians is ' + deg + ' degrees');\n           * // Prints: 0.7853981633974483 radians is 45 degrees\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.degrees = function(angle) {\n            return angle * constants.RAD_TO_DEG;\n          };\n\n          /**\n           * Converts a degree measurement to its corresponding value in radians.\n           * Radians and degrees are two ways of measuring the same thing. There are\n           * 360 degrees in a circle and 2*PI radians in a circle. For example,\n           * 90° = PI/2 = 1.5707964. This function does not take into account the\n           * current <a href=\"#/p5/angleMode\">angleMode</a>.\n           *\n           * @method radians\n           * @param  {Number} degrees the degree value to convert to radians\n           * @return {Number}         the converted angle\n           *\n           * @example\n           * <div class= “norender\">\n           * <code>\n           * let deg = 45.0;\n           * let rad = radians(deg);\n           * print(deg + ' degrees is ' + rad + ' radians');\n           * // Prints: 45 degrees is 0.7853981633974483 radians\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.radians = function(angle) {\n            return angle * constants.DEG_TO_RAD;\n          };\n\n          /**\n           * Sets the current mode of p5 to given mode. Default mode is RADIANS.\n           *\n           * @method angleMode\n           * @param {Constant} mode either RADIANS or DEGREES\n           *\n           * @example\n           * <div>\n           * <code>\n           * function draw() {\n           *   background(204);\n           *   angleMode(DEGREES); // Change the mode to DEGREES\n           *   let a = atan2(mouseY - height / 2, mouseX - width / 2);\n           *   translate(width / 2, height / 2);\n           *   push();\n           *   rotate(a);\n           *   rect(-20, -5, 40, 10); // Larger rectangle is rotating in degrees\n           *   pop();\n           *   angleMode(RADIANS); // Change the mode to RADIANS\n           *   rotate(a); // variable a stays the same\n           *   rect(-40, -5, 20, 10); // Smaller rectangle is rotating in radians\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 40 by 10 rect in center rotates with mouse moves. 20 by 10 rect moves faster.\n           *\n           */\n          _main.default.prototype.angleMode = function(mode) {\n            if (mode === constants.DEGREES || mode === constants.RADIANS) {\n              this._angleMode = mode;\n            }\n          };\n\n          /**\n           * converts angles from the current angleMode to RADIANS\n           *\n           * @method _toRadians\n           * @private\n           * @param {Number} angle\n           * @returns {Number}\n           */\n          _main.default.prototype._toRadians = function(angle) {\n            if (this._angleMode === constants.DEGREES) {\n              return angle * constants.DEG_TO_RAD;\n            }\n            return angle;\n          };\n\n          /**\n           * converts angles from the current angleMode to DEGREES\n           *\n           * @method _toDegrees\n           * @private\n           * @param {Number} angle\n           * @returns {Number}\n           */\n          _main.default.prototype._toDegrees = function(angle) {\n            if (this._angleMode === constants.RADIANS) {\n              return angle * constants.RAD_TO_DEG;\n            }\n            return angle;\n          };\n\n          /**\n           * converts angles from RADIANS into the current angleMode\n           *\n           * @method _fromRadians\n           * @private\n           * @param {Number} angle\n           * @returns {Number}\n           */\n          _main.default.prototype._fromRadians = function(angle) {\n            if (this._angleMode === constants.DEGREES) {\n              return angle * constants.RAD_TO_DEG;\n            }\n            return angle;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59 }\n      ],\n      95: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Typography\n           * @submodule Attributes\n           * @for p5\n           * @requires core\n           * @requires constants\n           */ /**\n           * Sets the current alignment for drawing text. Accepts two\n           * arguments: horizAlign (LEFT, CENTER, or RIGHT) and\n           * vertAlign (TOP, BOTTOM, CENTER, or BASELINE).\n           *\n           * The horizAlign parameter is in reference to the x value\n           * of the <a href=\"#/p5/text\">text()</a> function, while the vertAlign parameter\n           * is in reference to the y value.\n           *\n           * So if you write textAlign(LEFT), you are aligning the left\n           * edge of your text to the x value you give in <a href=\"#/p5/text\">text()</a>.\n           * If you write textAlign(RIGHT, TOP), you are aligning the right edge\n           * of your text to the x value and the top of edge of the text\n           * to the y value.\n           *\n           * @method textAlign\n           * @param {Constant} horizAlign horizontal alignment, either LEFT,\n           *                            CENTER, or RIGHT\n           * @param {Constant} [vertAlign] vertical alignment, either TOP,\n           *                            BOTTOM, CENTER, or BASELINE\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * textSize(16);\n           * textAlign(RIGHT);\n           * text('ABCD', 50, 30);\n           * textAlign(CENTER);\n           * text('EFGH', 50, 50);\n           * textAlign(LEFT);\n           * text('IJKL', 50, 70);\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * textSize(16);\n           * strokeWeight(0.5);\n           *\n           * line(0, 12, width, 12);\n           * textAlign(CENTER, TOP);\n           * text('TOP', 0, 12, width);\n           *\n           * line(0, 37, width, 37);\n           * textAlign(CENTER, CENTER);\n           * text('CENTER', 0, 37, width);\n           *\n           * line(0, 62, width, 62);\n           * textAlign(CENTER, BASELINE);\n           * text('BASELINE', 0, 62, width);\n           *\n           * line(0, 87, width, 87);\n           * textAlign(CENTER, BOTTOM);\n           * text('BOTTOM', 0, 87, width);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Letters ABCD displayed at top left, EFGH at center and IJKL at bottom right.\n           * The names of the four vertical alignments (TOP, CENTER, BASELINE & BOTTOM) rendered each showing that alignment's placement relative to a horizontal line.\n           */ /**\n           * @method textAlign\n           * @return {Object}\n           */ _main.default.prototype.textAlign = function(horizAlign, vertAlign) {\n            var _this$_renderer;\n            _main.default._validateParameters('textAlign', arguments);\n            return (_this$_renderer = this._renderer).textAlign.apply(\n              _this$_renderer,\n              arguments\n            );\n          };\n\n          /**\n           * Sets/gets the spacing, in pixels, between lines of text. This setting will be\n           * used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function.\n           *\n           * @method textLeading\n           * @param {Number} leading the size in pixels for spacing between lines\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * let lines = 'L1\\nL2\\nL3'; // \"\\n\" is a \"new line\" character\n           * textSize(12);\n           *\n           * textLeading(10);\n           * text(lines, 10, 25);\n           *\n           * textLeading(20);\n           * text(lines, 40, 25);\n           *\n           * textLeading(30);\n           * text(lines, 70, 25);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * A set of L1 L2 & L3 displayed vertically 3 times. spacing increases for each set\n           */\n          /**\n           * @method textLeading\n           * @return {Number}\n           */\n          _main.default.prototype.textLeading = function(theLeading) {\n            var _this$_renderer2;\n            _main.default._validateParameters('textLeading', arguments);\n            return (_this$_renderer2 = this._renderer).textLeading.apply(\n              _this$_renderer2,\n              arguments\n            );\n          };\n\n          /**\n           * Sets/gets the current font size. This size will be used in all subsequent\n           * calls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels.\n           *\n           * @method textSize\n           * @param {Number} theSize the size of the letters in units of pixels\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * textSize(12);\n           * text('Font Size 12', 10, 30);\n           * textSize(14);\n           * text('Font Size 14', 10, 60);\n           * textSize(16);\n           * text('Font Size 16', 10, 90);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 'Font Size 12' displayed small, 'Font Size 14' medium & 'Font Size 16' large\n           */\n          /**\n           * @method textSize\n           * @return {Number}\n           */\n          _main.default.prototype.textSize = function(theSize) {\n            var _this$_renderer3;\n            _main.default._validateParameters('textSize', arguments);\n            return (_this$_renderer3 = this._renderer).textSize.apply(\n              _this$_renderer3,\n              arguments\n            );\n          };\n\n          /**\n           * Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC.\n           * Note: this may be is overridden by CSS styling. For non-system fonts\n           * (opentype, truetype, etc.) please load styled fonts instead.\n           *\n           * @method textStyle\n           * @param {Constant} theStyle styling for text, either NORMAL,\n           *                            ITALIC, BOLD or BOLDITALIC\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * strokeWeight(0);\n           * textSize(12);\n           * textStyle(NORMAL);\n           * text('Font Style Normal', 10, 15);\n           * textStyle(ITALIC);\n           * text('Font Style Italic', 10, 40);\n           * textStyle(BOLD);\n           * text('Font Style Bold', 10, 65);\n           * textStyle(BOLDITALIC);\n           * text('Font Style Bold Italic', 10, 90);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Words Font Style Normal displayed normally, Italic in italic, bold in bold and bold italic in bold italics.\n           */\n          /**\n           * @method textStyle\n           * @return {String}\n           */\n          _main.default.prototype.textStyle = function(theStyle) {\n            var _this$_renderer4;\n            _main.default._validateParameters('textStyle', arguments);\n            return (_this$_renderer4 = this._renderer).textStyle.apply(\n              _this$_renderer4,\n              arguments\n            );\n          };\n\n          /**\n           * Calculates and returns the width of any character or text string.\n           *\n           * @method textWidth\n           * @param {String} theText the String of characters to measure\n           * @return {Number} the calculated width\n           * @example\n           * <div>\n           * <code>\n           * textSize(28);\n           *\n           * let aChar = 'P';\n           * let cWidth = textWidth(aChar);\n           * text(aChar, 0, 40);\n           * line(cWidth, 0, cWidth, 50);\n           *\n           * let aString = 'p5.js';\n           * let sWidth = textWidth(aString);\n           * text(aString, 0, 85);\n           * line(sWidth, 50, sWidth, 100);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Letter P and p5.js are displayed with vertical lines at end.\n           */\n          _main.default.prototype.textWidth = function() {\n            var _this$_renderer5;\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            args[0] += '';\n            _main.default._validateParameters('textWidth', args);\n            if (args[0].length === 0) {\n              return 0;\n            }\n            return (_this$_renderer5 = this._renderer).textWidth.apply(\n              _this$_renderer5,\n              args\n            );\n          };\n\n          /**\n           * Returns the ascent of the current font at its current size. The ascent\n           * represents the distance, in pixels, of the tallest character above\n           * the baseline.\n           * @method textAscent\n           * @return {Number}\n           * @example\n           * <div>\n           * <code>\n           * let base = height * 0.75;\n           * let scalar = 0.8; // Different for each font\n           *\n           * textSize(32); // Set initial text size\n           * let asc = textAscent() * scalar; // Calc ascent\n           * line(0, base - asc, width, base - asc);\n           * text('dp', 0, base); // Draw text on baseline\n           *\n           * textSize(64); // Increase text size\n           * asc = textAscent() * scalar; // Recalc ascent\n           * line(40, base - asc, width, base - asc);\n           * text('dp', 40, base); // Draw text on baseline\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.textAscent = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('textAscent', args);\n            return this._renderer.textAscent();\n          };\n\n          /**\n           * Returns the descent of the current font at its current size. The descent\n           * represents the distance, in pixels, of the character with the longest\n           * descender below the baseline.\n           * @method textDescent\n           * @return {Number}\n           * @example\n           * <div>\n           * <code>\n           * let base = height * 0.75;\n           * let scalar = 0.8; // Different for each font\n           *\n           * textSize(32); // Set initial text size\n           * let desc = textDescent() * scalar; // Calc ascent\n           * line(0, base + desc, width, base + desc);\n           * text('dp', 0, base); // Draw text on baseline\n           *\n           * textSize(64); // Increase text size\n           * desc = textDescent() * scalar; // Recalc ascent\n           * line(40, base + desc, width, base + desc);\n           * text('dp', 40, base); // Draw text on baseline\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.textDescent = function() {\n            for (\n              var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n              _key3 < _len3;\n              _key3++\n            ) {\n              args[_key3] = arguments[_key3];\n            }\n            _main.default._validateParameters('textDescent', args);\n            return this._renderer.textDescent();\n          };\n\n          /**\n           * Helper function to measure ascent and descent.\n           */\n          _main.default.prototype._updateTextMetrics = function() {\n            return this._renderer._updateTextMetrics();\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      96: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          var opentype = _interopRequireWildcard(_dereq_('opentype.js'));\n\n          _dereq_('../core/friendly_errors/validate_params');\n          _dereq_('../core/friendly_errors/file_errors');\n          _dereq_('../core/friendly_errors/fes_core');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Typography\n           * @submodule Loading & Displaying\n           * @for p5\n           * @requires core\n           */ /**\n           * Loads an opentype font file (.otf, .ttf) from a file or a URL,\n           * and returns a PFont Object. This method is asynchronous,\n           * meaning it may not finish before the next line in your sketch\n           * is executed.\n           *\n           * The path to the font should be relative to the HTML file\n           * that links in your sketch. Loading fonts from a URL or other\n           * remote location may be blocked due to your browser's built-in\n           * security.\n           *\n           * @method loadFont\n           * @param  {String}        path       name of the file or url to load\n           * @param  {Function}      [callback] function to be executed after\n           *                                    <a href=\"#/p5/loadFont\">loadFont()</a> completes\n           * @param  {Function}      [onError]  function to be executed if\n           *                                    an error occurs\n           * @return {p5.Font}                  <a href=\"#/p5.Font\">p5.Font</a> object\n           * @example\n           *\n           * Calling loadFont() inside <a href=\"#/p5/preload\">preload()</a> guarantees\n           * that the load operation will have completed before <a href=\"#/p5/setup\">setup()</a>\n           * and <a href=\"#/p5/draw\">draw()</a> are called.\n           *\n           * <div><code>\n           * let myFont;\n           * function preload() {\n           *   myFont = loadFont('assets/inconsolata.otf');\n           * }\n           *\n           * function setup() {\n           *   fill('#ED225D');\n           *   textFont(myFont);\n           *   textSize(36);\n           *   text('p5*js', 10, 50);\n           * }\n           * </code></div>\n           *\n           * Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a\n           * callback function to handle the object:\n           *\n           * <div><code>\n           * function setup() {\n           *   loadFont('assets/inconsolata.otf', drawText);\n           * }\n           *\n           * function drawText(font) {\n           *   fill('#ED225D');\n           *   textFont(font, 36);\n           *   text('p5*js', 10, 50);\n           * }\n           * </code></div>\n           *\n           * You can also use the font filename string (without the file extension) to\n           * style other HTML elements.\n           *\n           * <div><code>\n           * function preload() {\n           *   loadFont('assets/inconsolata.otf');\n           * }\n           *\n           * function setup() {\n           *   let myDiv = createDiv('hello there');\n           *   myDiv.style('font-family', 'Inconsolata');\n           * }\n           * </code></div>\n           *\n           * @alt\n           * p5*js in p5's theme dark pink\n           * p5*js in p5's theme dark pink\n           */ _main.default.prototype.loadFont = function(path, onSuccess, onError) {\n            _main.default._validateParameters('loadFont', arguments);\n            var p5Font = new _main.default.Font(this);\n\n            var self = this;\n            opentype.load(path, function(err, font) {\n              if (err) {\n                _main.default._friendlyFileLoadError(4, path);\n                if (typeof onError !== 'undefined') {\n                  return onError(err);\n                }\n                console.error(err, path);\n                return;\n              }\n\n              p5Font.font = font;\n\n              if (typeof onSuccess !== 'undefined') {\n                onSuccess(p5Font);\n              }\n\n              self._decrementPreload();\n\n              // check that we have an acceptable font type\n              var validFontTypes = ['ttf', 'otf', 'woff', 'woff2'];\n\n              var fileNoPath = path\n                .split('\\\\')\n                .pop()\n                .split('/')\n                .pop();\n\n              var lastDotIdx = fileNoPath.lastIndexOf('.');\n              var fontFamily;\n              var newStyle;\n              var fileExt = lastDotIdx < 1 ? null : fileNoPath.substr(lastDotIdx + 1);\n\n              // if so, add it to the DOM (name-only) for use with DOM module\n              if (validFontTypes.includes(fileExt)) {\n                fontFamily = fileNoPath.substr(0, lastDotIdx);\n                newStyle = document.createElement('style');\n                newStyle.appendChild(\n                  document.createTextNode(\n                    '\\n@font-face {\\nfont-family: '\n                      .concat(fontFamily, ';\\nsrc: url(')\n                      .concat(path, ');\\n}\\n')\n                  )\n                );\n\n                document.head.appendChild(newStyle);\n              }\n            });\n\n            return p5Font;\n          };\n\n          /**\n           * Draws text to the screen. Displays the information specified in the first\n           * parameter on the screen in the position specified by the additional\n           * parameters. A default font will be used unless a font is set with the\n           * <a href=\"#/p5/textFont\">textFont()</a> function and a default size will be\n           * used unless a font is set with <a href=\"#/p5/textSize\">textSize()</a>. Change\n           * the color of the text with the <a href=\"#/p5/fill\">fill()</a> function. Change\n           * the outline of the text with the <a href=\"#/p5/stroke\">stroke()</a> and\n           * <a href=\"#/p5/strokeWeight\">strokeWeight()</a> functions.\n           *\n           * The text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a>\n           * function, which gives the option to draw to the left, right, and center of the\n           * coordinates.\n           *\n           * The x2 and y2 parameters define a rectangular area to display within and\n           * may only be used with string data. When these parameters are specified,\n           * they are interpreted based on the current <a href=\"#/p5/rectMode\">rectMode()</a>\n           * setting. Text that does not fit completely within the rectangle specified will\n           * not be drawn to the screen. If x2 and y2 are not specified, the baseline\n           * alignment is the default, which means that the text will be drawn upwards\n           * from x and y.\n           *\n           * <b>WEBGL</b>: Only opentype/truetype fonts are supported. You must load a font\n           * using the <a href=\"#/p5/loadFont\">loadFont()</a> method (see the example above).\n           * <a href=\"#/p5/stroke\">stroke()</a> currently has no effect in webgl mode.\n           *\n           * @method text\n           * @param {String|Object|Array|Number|Boolean} str the alphanumeric\n           *                                             symbols to be displayed\n           * @param {Number} x   x-coordinate of text\n           * @param {Number} y   y-coordinate of text\n           * @param {Number} [x2]  by default, the width of the text box,\n           *                     see <a href=\"#/p5/rectMode\">rectMode()</a> for more info\n           * @param {Number} [y2]  by default, the height of the text box,\n           *                     see <a href=\"#/p5/rectMode\">rectMode()</a> for more info\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * textSize(32);\n           * text('word', 10, 30);\n           * fill(0, 102, 153);\n           * text('word', 10, 60);\n           * fill(0, 102, 153, 51);\n           * text('word', 10, 90);\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * let s = 'The quick brown fox jumped over the lazy dog.';\n           * fill(50);\n           * text(s, 10, 10, 70, 80); // Text wraps within text box\n           * </code>\n           * </div>\n           *\n           * <div modernizr='webgl'>\n           * <code>\n           * let inconsolata;\n           * function preload() {\n           *   inconsolata = loadFont('assets/inconsolata.otf');\n           * }\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   textFont(inconsolata);\n           *   textSize(width / 3);\n           *   textAlign(CENTER, CENTER);\n           * }\n           * function draw() {\n           *   background(0);\n           *   let time = millis();\n           *   rotateX(time / 1000);\n           *   rotateZ(time / 1234);\n           *   text('p5.js', 0, 0);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * 'word' displayed 3 times going from black, blue to translucent blue\n           * The text 'The quick brown fox jumped over the lazy dog' displayed.\n           * The text 'p5.js' spinning in 3d\n           */\n          _main.default.prototype.text = function(str, x, y, maxWidth, maxHeight) {\n            var _this$_renderer;\n            _main.default._validateParameters('text', arguments);\n            return !(this._renderer._doFill || this._renderer._doStroke)\n              ? this\n              : (_this$_renderer = this._renderer).text.apply(_this$_renderer, arguments);\n          };\n\n          /**\n    * Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function.\n    *\n    * <b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported.\n    *\n    * @method textFont\n    * @return {Object} the current font\n    *\n    * @example\n    * <div>\n    * <code>\n    * fill(0);\n    * textSize(12);\n    * textFont('Georgia');\n    * text('Georgia', 12, 30);\n    * textFont('Helvetica');\n    * text('Helvetica', 12, 60);\n    * </code>\n    * </div>\n    * <div>\n    * <code>\n    * let fontRegular, fontItalic, fontBold;\n    * function preload() {\n    *   fontRegular = loadFont('assets/Regular.otf');\n    *   fontItalic = loadFont('assets/Italic.ttf');\n    *   fontBold = loadFont('assets/Bold.ttf');\n    * }\n    * function setup() {\n    *   background(210);\n    *   fill(0)\n       .strokeWeight(0)\n       .textSize(10);\n    *   textFont(fontRegular);\n    *   text('Font Style Normal', 10, 30);\n    *   textFont(fontItalic);\n    *   text('Font Style Italic', 10, 50);\n    *   textFont(fontBold);\n    *   text('Font Style Bold', 10, 70);\n    * }\n    * </code>\n    * </div>\n    *\n    * @alt\n    * word 'Georgia' displayed in font Georgia and 'Helvetica' in font Helvetica\n    * words Font Style Normal displayed normally, Italic in italic and bold in bold\n    */\n          /**\n           * @method textFont\n           * @param {Object|String} font a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>,\n           * or a String representing a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a>\n           * (a font that is generally available across all systems)\n           * @param {Number} [size] the font size to use\n           * @chainable\n           */\n          _main.default.prototype.textFont = function(theFont, theSize) {\n            _main.default._validateParameters('textFont', arguments);\n            if (arguments.length) {\n              if (!theFont) {\n                throw new Error('null font passed to textFont');\n              }\n\n              this._renderer._setProperty('_textFont', theFont);\n\n              if (theSize) {\n                this._renderer._setProperty('_textSize', theSize);\n                this._renderer._setProperty(\n                  '_textLeading',\n                  theSize * constants._DEFAULT_LEADMULT\n                );\n              }\n\n              return this._renderer._applyTextProperties();\n            }\n\n            return this._renderer._textFont;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../core/constants': 48,\n          '../core/friendly_errors/fes_core': 51,\n          '../core/friendly_errors/file_errors': 52,\n          '../core/friendly_errors/validate_params': 54,\n          '../core/main': 59,\n          'opentype.js': 34\n        }\n      ],\n      97: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n\n          /**\n           * Base class for font handling\n           * @class p5.Font\n           * @constructor\n           * @param {p5} [pInst] pointer to p5 instance\n           */\n          _main.default.Font = function(p) {\n            this.parent = p;\n\n            this.cache = {};\n\n            /**\n             * Underlying opentype font implementation\n             * @property font\n             */\n            this.font = undefined;\n          };\n\n          /**\n           * Returns a tight bounding box for the given text string using this\n           * font\n           *\n           * @method textBounds\n           * @param  {String} line     a line of text\n           * @param  {Number} x        x-position\n           * @param  {Number} y        y-position\n           * @param  {Number} [fontSize] font size to use (optional) Default is 12.\n           * @param  {Object} [options] opentype options (optional)\n           *                            opentype fonts contains alignment and baseline options.\n           *                            Default is 'LEFT' and 'alphabetic'\n           *\n           * @return {Object}          a rectangle object with properties: x, y, w, h\n           *\n           * @example\n           * <div>\n           * <code>\n           * let font;\n           * let textString = 'Lorem ipsum dolor sit amet.';\n           * function preload() {\n           *   font = loadFont('./assets/Regular.otf');\n           * }\n           * function setup() {\n           *   background(210);\n           *\n           *   let bbox = font.textBounds(textString, 10, 30, 12);\n           *   fill(255);\n           *   stroke(0);\n           *   rect(bbox.x, bbox.y, bbox.w, bbox.h);\n           *   fill(0);\n           *   noStroke();\n           *\n           *   textFont(font);\n           *   textSize(12);\n           *   text(textString, 10, 30);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           *words Lorem ipsum dol go off canvas and contained by white bounding box\n           */\n          _main.default.Font.prototype.textBounds = function(str) {\n            var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            var fontSize = arguments.length > 3 ? arguments[3] : undefined;\n            var opts = arguments.length > 4 ? arguments[4] : undefined;\n            // Check cache for existing bounds. Take into consideration the text alignment\n            // settings. Default alignment should match opentype's origin: left-aligned &\n            // alphabetic baseline.\n            var p = (opts && opts.renderer && opts.renderer._pInst) || this.parent;\n\n            var ctx = p._renderer.drawingContext;\n            var alignment = ctx.textAlign || constants.LEFT;\n            var baseline = ctx.textBaseline || constants.BASELINE;\n            var cacheResults = false;\n            var result;\n            var key;\n\n            fontSize = fontSize || p._renderer._textSize;\n\n            // NOTE: cache disabled for now pending further discussion of #3436\n            if (cacheResults) {\n              key = cacheKey('textBounds', str, x, y, fontSize, alignment, baseline);\n              result = this.cache[key];\n            }\n\n            if (!result) {\n              var minX = [];\n              var minY;\n              var maxX = [];\n              var maxY;\n              var pos;\n              var xCoords = [];\n              xCoords[0] = [];\n              var yCoords = [];\n              var scale = this._scale(fontSize);\n              var lineHeight = p._renderer.textLeading();\n              var lineCount = 0;\n\n              this.font.forEachGlyph(str, x, y, fontSize, opts, function(\n                glyph,\n                gX,\n                gY,\n                gFontSize\n              ) {\n                var gm = glyph.getMetrics();\n                if (glyph.index === 0 || glyph.index === 10) {\n                  lineCount += 1;\n                  xCoords[lineCount] = [];\n                } else {\n                  xCoords[lineCount].push(gX + gm.xMin * scale);\n                  xCoords[lineCount].push(gX + gm.xMax * scale);\n                  yCoords.push(gY + lineCount * lineHeight + -gm.yMin * scale);\n                  yCoords.push(gY + lineCount * lineHeight + -gm.yMax * scale);\n                }\n              });\n\n              if (xCoords[lineCount].length > 0) {\n                minX[lineCount] = Math.min.apply(null, xCoords[lineCount]);\n                maxX[lineCount] = Math.max.apply(null, xCoords[lineCount]);\n              }\n\n              var finalMaxX = 0;\n              for (var i = 0; i <= lineCount; i++) {\n                minX[i] = Math.min.apply(null, xCoords[i]);\n                maxX[i] = Math.max.apply(null, xCoords[i]);\n                var lineLength = maxX[i] - minX[i];\n                if (lineLength > finalMaxX) {\n                  finalMaxX = lineLength;\n                }\n              }\n\n              var finalMinX = Math.min.apply(null, minX);\n              minY = Math.min.apply(null, yCoords);\n              maxY = Math.max.apply(null, yCoords);\n\n              result = {\n                x: finalMinX,\n                y: minY,\n                h: maxY - minY,\n                w: finalMaxX,\n                advance: finalMinX - x\n              };\n\n              // Bounds are now calculated, so shift the x & y to match alignment settings\n              pos = this._handleAlignment(\n                p._renderer,\n                str,\n                result.x,\n                result.y,\n                result.w + result.advance\n              );\n\n              result.x = pos.x;\n              result.y = pos.y;\n\n              if (cacheResults) {\n                this.cache[key] = result;\n              }\n            }\n\n            return result;\n          };\n\n          /**\n           * Computes an array of points following the path for specified text\n           *\n           * @method textToPoints\n           * @param  {String} txt     a line of text\n           * @param  {Number} x        x-position\n           * @param  {Number} y        y-position\n           * @param  {Number} fontSize font size to use (optional)\n           * @param  {Object} [options] an (optional) object that can contain:\n           *\n           * <br>sampleFactor - the ratio of path-length to number of samples\n           * (default=.1); higher values yield more points and are therefore\n           * more precise\n           *\n           * <br>simplifyThreshold - if set to a non-zero value, collinear points will be\n           * be removed from the polygon; the value represents the threshold angle to use\n           * when determining whether two edges are collinear\n           *\n           * @return {Array}  an array of points, each with x, y, alpha (the path angle)\n           * @example\n           * <div>\n           * <code>\n           * let font;\n           * function preload() {\n           *   font = loadFont('assets/inconsolata.otf');\n           * }\n           *\n           * let points;\n           * let bounds;\n           * function setup() {\n           *   createCanvas(100, 100);\n           *   stroke(0);\n           *   fill(255, 104, 204);\n           *\n           *   points = font.textToPoints('p5', 0, 0, 10, {\n           *     sampleFactor: 5,\n           *     simplifyThreshold: 0\n           *   });\n           *   bounds = font.textBounds(' p5 ', 0, 0, 10);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   beginShape();\n           *   translate(-bounds.x * width / bounds.w, -bounds.y * height / bounds.h);\n           *   for (let i = 0; i < points.length; i++) {\n           *     let p = points[i];\n           *     vertex(\n           *       p.x * width / bounds.w +\n           *         sin(20 * p.y / bounds.h + millis() / 1000) * width / 30,\n           *       p.y * height / bounds.h\n           *     );\n           *   }\n           *   endShape(CLOSE);\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.Font.prototype.textToPoints = function(\n            txt,\n            x,\n            y,\n            fontSize,\n            options\n          ) {\n            var xoff = 0;\n            var result = [];\n            var glyphs = this._getGlyphs(txt);\n\n            function isSpace(i) {\n              return (\n                (glyphs[i].name && glyphs[i].name === 'space') ||\n                (txt.length === glyphs.length && txt[i] === ' ') ||\n                (glyphs[i].index && glyphs[i].index === 3)\n              );\n            }\n\n            fontSize = fontSize || this.parent._renderer._textSize;\n\n            for (var i = 0; i < glyphs.length; i++) {\n              if (!isSpace(i)) {\n                // fix to #1817, #2069\n\n                var gpath = glyphs[i].getPath(x, y, fontSize),\n                  paths = splitPaths(gpath.commands);\n\n                for (var j = 0; j < paths.length; j++) {\n                  var pts = pathToPoints(paths[j], options);\n\n                  for (var k = 0; k < pts.length; k++) {\n                    pts[k].x += xoff;\n                    result.push(pts[k]);\n                  }\n                }\n              }\n\n              xoff += glyphs[i].advanceWidth * this._scale(fontSize);\n            }\n\n            return result;\n          };\n\n          // ----------------------------- End API ------------------------------\n\n          /**\n           * Returns the set of opentype glyphs for the supplied string.\n           *\n           * Note that there is not a strict one-to-one mapping between characters\n           * and glyphs, so the list of returned glyphs can be larger or smaller\n           *  than the length of the given string.\n           *\n           * @private\n           * @param  {String} str the string to be converted\n           * @return {Array}     the opentype glyphs\n           */\n          _main.default.Font.prototype._getGlyphs = function(str) {\n            return this.font.stringToGlyphs(str);\n          };\n\n          /**\n           * Returns an opentype path for the supplied string and position.\n           *\n           * @private\n           * @param  {String} line     a line of text\n           * @param  {Number} x        x-position\n           * @param  {Number} y        y-position\n           * @param  {Object} options opentype options (optional)\n           * @return {Object}     the opentype path\n           */\n          _main.default.Font.prototype._getPath = function(line, x, y, options) {\n            var p = (options && options.renderer && options.renderer._pInst) || this.parent,\n              renderer = p._renderer,\n              pos = this._handleAlignment(renderer, line, x, y);\n\n            return this.font.getPath(line, pos.x, pos.y, renderer._textSize, options);\n          };\n\n          /*\n    * Creates an SVG-formatted path-data string\n    * (See http://www.w3.org/TR/SVG/paths.html#PathData)\n    * from the given opentype path or string/position\n    *\n    * @param  {Object} path    an opentype path, OR the following:\n    *\n    * @param  {String} line     a line of text\n    * @param  {Number} x        x-position\n    * @param  {Number} y        y-position\n    * @param  {Object} options opentype options (optional), set options.decimals\n    * to set the decimal precision of the path-data\n    *\n    * @return {Object}     this p5.Font object\n    */\n          _main.default.Font.prototype._getPathData = function(line, x, y, options) {\n            var decimals = 3;\n\n            // create path from string/position\n            if (typeof line === 'string' && arguments.length > 2) {\n              line = this._getPath(line, x, y, options);\n            } else if (_typeof(x) === 'object') {\n              // handle options specified in 2nd arg\n              options = x;\n            }\n\n            // handle svg arguments\n            if (options && typeof options.decimals === 'number') {\n              decimals = options.decimals;\n            }\n\n            return line.toPathData(decimals);\n          };\n\n          /*\n    * Creates an SVG <path> element, as a string,\n    * from the given opentype path or string/position\n    *\n    * @param  {Object} path    an opentype path, OR the following:\n    *\n    * @param  {String} line     a line of text\n    * @param  {Number} x        x-position\n    * @param  {Number} y        y-position\n    * @param  {Object} options opentype options (optional), set options.decimals\n    * to set the decimal precision of the path-data in the <path> element,\n    *  options.fill to set the fill color for the <path> element,\n    *  options.stroke to set the stroke color for the <path> element,\n    *  options.strokeWidth to set the strokeWidth for the <path> element.\n    *\n    * @return {Object}     this p5.Font object\n    */\n          _main.default.Font.prototype._getSVG = function(line, x, y, options) {\n            var decimals = 3;\n\n            // create path from string/position\n            if (typeof line === 'string' && arguments.length > 2) {\n              line = this._getPath(line, x, y, options);\n            } else if (_typeof(x) === 'object') {\n              // handle options specified in 2nd arg\n              options = x;\n            }\n\n            // handle svg arguments\n            if (options) {\n              if (typeof options.decimals === 'number') {\n                decimals = options.decimals;\n              }\n              if (typeof options.strokeWidth === 'number') {\n                line.strokeWidth = options.strokeWidth;\n              }\n              if (typeof options.fill !== 'undefined') {\n                line.fill = options.fill;\n              }\n              if (typeof options.stroke !== 'undefined') {\n                line.stroke = options.stroke;\n              }\n            }\n\n            return line.toSVG(decimals);\n          };\n\n          /*\n    * Renders an opentype path or string/position\n    * to the current graphics context\n    *\n    * @param  {Object} path    an opentype path, OR the following:\n    *\n    * @param  {String} line     a line of text\n    * @param  {Number} x        x-position\n    * @param  {Number} y        y-position\n    * @param  {Object} options opentype options (optional)\n    *\n    * @return {p5.Font}     this p5.Font object\n    */\n          _main.default.Font.prototype._renderPath = function(line, x, y, options) {\n            var pdata;\n            var pg = (options && options.renderer) || this.parent._renderer;\n            var ctx = pg.drawingContext;\n\n            if (_typeof(line) === 'object' && line.commands) {\n              pdata = line.commands;\n            } else {\n              //pos = handleAlignment(p, ctx, line, x, y);\n              pdata = this._getPath(line, x, y, options).commands;\n            }\n\n            ctx.beginPath();\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n            try {\n              for (\n                var _iterator = pdata[Symbol.iterator](), _step;\n                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                _iteratorNormalCompletion = true\n              ) {\n                var cmd = _step.value;\n                if (cmd.type === 'M') {\n                  ctx.moveTo(cmd.x, cmd.y);\n                } else if (cmd.type === 'L') {\n                  ctx.lineTo(cmd.x, cmd.y);\n                } else if (cmd.type === 'C') {\n                  ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n                } else if (cmd.type === 'Q') {\n                  ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n                } else if (cmd.type === 'Z') {\n                  ctx.closePath();\n                }\n              }\n\n              // only draw stroke if manually set by user\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n            if (pg._doStroke && pg._strokeSet) {\n              ctx.stroke();\n            }\n\n            if (pg._doFill) {\n              // if fill hasn't been set by user, use default-text-fill\n              if (!pg._fillSet) {\n                pg._setFill(constants._DEFAULT_TEXT_FILL);\n              }\n              ctx.fill();\n            }\n\n            return this;\n          };\n\n          _main.default.Font.prototype._textWidth = function(str, fontSize) {\n            return this.font.getAdvanceWidth(str, fontSize);\n          };\n\n          _main.default.Font.prototype._textAscent = function(fontSize) {\n            return this.font.ascender * this._scale(fontSize);\n          };\n\n          _main.default.Font.prototype._textDescent = function(fontSize) {\n            return -this.font.descender * this._scale(fontSize);\n          };\n\n          _main.default.Font.prototype._scale = function(fontSize) {\n            return 1 / this.font.unitsPerEm * (fontSize || this.parent._renderer._textSize);\n          };\n\n          _main.default.Font.prototype._handleAlignment = function(\n            renderer,\n            line,\n            x,\n            y,\n            textWidth\n          ) {\n            var fontSize = renderer._textSize;\n\n            if (typeof textWidth === 'undefined') {\n              textWidth = this._textWidth(line, fontSize);\n            }\n\n            switch (renderer._textAlign) {\n              case constants.CENTER:\n                x -= textWidth / 2;\n                break;\n              case constants.RIGHT:\n                x -= textWidth;\n                break;\n            }\n\n            switch (renderer._textBaseline) {\n              case constants.TOP:\n                y += this._textAscent(fontSize);\n                break;\n              case constants.CENTER:\n                y += this._textAscent(fontSize) / 2;\n                break;\n              case constants.BOTTOM:\n                y -= this._textDescent(fontSize);\n                break;\n            }\n\n            return { x: x, y: y };\n          };\n\n          // path-utils\n\n          function pathToPoints(cmds, options) {\n            var opts = parseOpts(options, {\n              sampleFactor: 0.1,\n              simplifyThreshold: 0\n            });\n\n            var // total-length\n              len = pointAtLength(cmds, 0, 1),\n              t = len / (len * opts.sampleFactor),\n              pts = [];\n\n            for (var i = 0; i < len; i += t) {\n              pts.push(pointAtLength(cmds, i));\n            }\n\n            if (opts.simplifyThreshold) {\n              simplify(pts, opts.simplifyThreshold);\n            }\n\n            return pts;\n          }\n\n          function simplify(pts) {\n            var angle =\n              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var num = 0;\n            for (var i = pts.length - 1; pts.length > 3 && i >= 0; --i) {\n              if (collinear(at(pts, i - 1), at(pts, i), at(pts, i + 1), angle)) {\n                // Remove the middle point\n                pts.splice(i % pts.length, 1);\n                num++;\n              }\n            }\n            return num;\n          }\n\n          function splitPaths(cmds) {\n            var paths = [];\n            var current;\n            for (var i = 0; i < cmds.length; i++) {\n              if (cmds[i].type === 'M') {\n                if (current) {\n                  paths.push(current);\n                }\n                current = [];\n              }\n              current.push(cmdToArr(cmds[i]));\n            }\n            paths.push(current);\n\n            return paths;\n          }\n\n          function cmdToArr(cmd) {\n            var arr = [cmd.type];\n            if (cmd.type === 'M' || cmd.type === 'L') {\n              // moveto or lineto\n              arr.push(cmd.x, cmd.y);\n            } else if (cmd.type === 'C') {\n              arr.push(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n            } else if (cmd.type === 'Q') {\n              arr.push(cmd.x1, cmd.y1, cmd.x, cmd.y);\n            }\n            // else if (cmd.type === 'Z') { /* no-op */ }\n            return arr;\n          }\n\n          function parseOpts(options, defaults) {\n            if (_typeof(options) !== 'object') {\n              options = defaults;\n            } else {\n              for (var key in defaults) {\n                if (typeof options[key] === 'undefined') {\n                  options[key] = defaults[key];\n                }\n              }\n            }\n            return options;\n          }\n\n          //////////////////////// Helpers ////////////////////////////\n\n          function at(v, i) {\n            var s = v.length;\n            return v[i < 0 ? i % s + s : i % s];\n          }\n\n          function collinear(a, b, c, thresholdAngle) {\n            if (!thresholdAngle) {\n              return areaTriangle(a, b, c) === 0;\n            }\n\n            if (typeof collinear.tmpPoint1 === 'undefined') {\n              collinear.tmpPoint1 = [];\n              collinear.tmpPoint2 = [];\n            }\n\n            var ab = collinear.tmpPoint1,\n              bc = collinear.tmpPoint2;\n            ab.x = b.x - a.x;\n            ab.y = b.y - a.y;\n            bc.x = c.x - b.x;\n            bc.y = c.y - b.y;\n\n            var dot = ab.x * bc.x + ab.y * bc.y,\n              magA = Math.sqrt(ab.x * ab.x + ab.y * ab.y),\n              magB = Math.sqrt(bc.x * bc.x + bc.y * bc.y),\n              angle = Math.acos(dot / (magA * magB));\n\n            return angle < thresholdAngle;\n          }\n\n          function areaTriangle(a, b, c) {\n            return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);\n          }\n\n          // Portions of below code copyright 2008 Dmitry Baranovskiy (via MIT license)\n\n          function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n            var t1 = 1 - t;\n            var t13 = Math.pow(t1, 3);\n            var t12 = Math.pow(t1, 2);\n            var t2 = t * t;\n            var t3 = t2 * t;\n            var x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;\n            var y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n            var mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);\n            var my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);\n            var nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);\n            var ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);\n            var ax = t1 * p1x + t * c1x;\n            var ay = t1 * p1y + t * c1y;\n            var cx = t1 * c2x + t * p2x;\n            var cy = t1 * c2y + t * p2y;\n            var alpha = 90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI;\n\n            if (mx > nx || my < ny) {\n              alpha += 180;\n            }\n\n            return {\n              x: x,\n              y: y,\n              m: { x: mx, y: my },\n              n: { x: nx, y: ny },\n              start: { x: ax, y: ay },\n              end: { x: cx, y: cy },\n              alpha: alpha\n            };\n          }\n\n          function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n            return length == null\n              ? bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y)\n              : findDotsAtSegment(\n                  p1x,\n                  p1y,\n                  c1x,\n                  c1y,\n                  c2x,\n                  c2y,\n                  p2x,\n                  p2y,\n                  getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length)\n                );\n          }\n\n          function pointAtLength(path, length, istotal) {\n            path = path2curve(path);\n            var x;\n            var y;\n            var p;\n            var l;\n            var sp = '';\n            var subpaths = {};\n            var point;\n            var len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n              p = path[i];\n              if (p[0] === 'M') {\n                x = +p[1];\n                y = +p[2];\n              } else {\n                l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                if (len + l > length) {\n                  if (!istotal) {\n                    point = getPointAtSegmentLength(\n                      x,\n                      y,\n                      p[1],\n                      p[2],\n                      p[3],\n                      p[4],\n                      p[5],\n                      p[6],\n                      length - len\n                    );\n\n                    return { x: point.x, y: point.y, alpha: point.alpha };\n                  }\n                }\n                len += l;\n                x = +p[5];\n                y = +p[6];\n              }\n              sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n\n            point = istotal\n              ? len\n              : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\n            if (point.alpha) {\n              point = { x: point.x, y: point.y, alpha: point.alpha };\n            }\n\n            return point;\n          }\n\n          function pathToAbsolute(pathArray) {\n            var res = [],\n              x = 0,\n              y = 0,\n              mx = 0,\n              my = 0,\n              start = 0;\n            if (!pathArray) {\n              // console.warn(\"Unexpected state: undefined pathArray\"); // shouldn't happen\n              return res;\n            }\n            if (pathArray[0][0] === 'M') {\n              x = +pathArray[0][1];\n              y = +pathArray[0][2];\n              mx = x;\n              my = y;\n              start++;\n              res[0] = ['M', x, y];\n            }\n\n            var dots;\n\n            var crz =\n              pathArray.length === 3 &&\n              pathArray[0][0] === 'M' &&\n              pathArray[1][0].toUpperCase() === 'R' &&\n              pathArray[2][0].toUpperCase() === 'Z';\n\n            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n              res.push((r = []));\n              pa = pathArray[i];\n              if (pa[0] !== String.prototype.toUpperCase.call(pa[0])) {\n                r[0] = String.prototype.toUpperCase.call(pa[0]);\n                switch (r[0]) {\n                  case 'A':\n                    r[1] = pa[1];\n                    r[2] = pa[2];\n                    r[3] = pa[3];\n                    r[4] = pa[4];\n                    r[5] = pa[5];\n                    r[6] = +(pa[6] + x);\n                    r[7] = +(pa[7] + y);\n                    break;\n                  case 'V':\n                    r[1] = +pa[1] + y;\n                    break;\n                  case 'H':\n                    r[1] = +pa[1] + x;\n                    break;\n                  case 'R':\n                    dots = [x, y].concat(pa.slice(1));\n                    for (var j = 2, jj = dots.length; j < jj; j++) {\n                      dots[j] = +dots[j] + x;\n                      dots[++j] = +dots[j] + y;\n                    }\n                    res.pop();\n                    res = res.concat(catmullRom2bezier(dots, crz));\n                    break;\n                  case 'M':\n                    mx = +pa[1] + x;\n                    my = +pa[2] + y;\n                    break;\n                  default:\n                    for (var _j = 1, _jj = pa.length; _j < _jj; _j++) {\n                      r[_j] = +pa[_j] + (_j % 2 ? x : y);\n                    }\n                }\n              } else if (pa[0] === 'R') {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = ['R'].concat(pa.slice(-2));\n              } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                  r[k] = pa[k];\n                }\n              }\n              switch (r[0]) {\n                case 'Z':\n                  x = mx;\n                  y = my;\n                  break;\n                case 'H':\n                  x = r[1];\n                  break;\n                case 'V':\n                  y = r[1];\n                  break;\n                case 'M':\n                  mx = r[r.length - 2];\n                  my = r[r.length - 1];\n                  break;\n                default:\n                  x = r[r.length - 2];\n                  y = r[r.length - 1];\n              }\n            }\n            return res;\n          }\n\n          function path2curve(path, path2) {\n            var p = pathToAbsolute(path),\n              p2 = path2 && pathToAbsolute(path2);\n            var attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null };\n            var attrs2 = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null };\n            var pcoms1 = []; // path commands of original path p\n            var pcoms2 = []; // path commands of original path p2\n            var ii;\n\n            var processPath = function processPath(path, d, pcom) {\n                var nx;\n                var ny;\n                var tq = { T: 1, Q: 1 };\n                if (!path) {\n                  return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                if (!(path[0] in tq)) {\n                  d.qx = d.qy = null;\n                }\n                switch (path[0]) {\n                  case 'M':\n                    d.X = path[1];\n                    d.Y = path[2];\n                    break;\n                  case 'A':\n                    path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                    break;\n                  case 'S':\n                    if (pcom === 'C' || pcom === 'S') {\n                      nx = d.x * 2 - d.bx;\n                      ny = d.y * 2 - d.by;\n                    } else {\n                      nx = d.x;\n                      ny = d.y;\n                    }\n                    path = ['C', nx, ny].concat(path.slice(1));\n                    break;\n                  case 'T':\n                    if (pcom === 'Q' || pcom === 'T') {\n                      d.qx = d.x * 2 - d.qx;\n                      d.qy = d.y * 2 - d.qy;\n                    } else {\n                      d.qx = d.x;\n                      d.qy = d.y;\n                    }\n                    path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                    break;\n                  case 'Q':\n                    d.qx = path[1];\n                    d.qy = path[2];\n                    path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\n                    break;\n                  case 'L':\n                    path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));\n                    break;\n                  case 'H':\n                    path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));\n                    break;\n                  case 'V':\n                    path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));\n                    break;\n                  case 'Z':\n                    path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));\n                    break;\n                }\n\n                return path;\n              },\n              fixArc = function fixArc(pp, i) {\n                if (pp[i].length > 7) {\n                  pp[i].shift();\n                  var pi = pp[i];\n                  while (pi.length) {\n                    pcoms1[i] = 'A';\n                    if (p2) {\n                      pcoms2[i] = 'A';\n                    }\n                    pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n                  }\n                  pp.splice(i, 1);\n                  ii = Math.max(p.length, (p2 && p2.length) || 0);\n                }\n              },\n              fixM = function fixM(path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {\n                  path2.splice(i, 0, ['M', a2.x, a2.y]);\n                  a1.bx = 0;\n                  a1.by = 0;\n                  a1.x = path1[i][1];\n                  a1.y = path1[i][2];\n                  ii = Math.max(p.length, (p2 && p2.length) || 0);\n                }\n              };\n\n            var pfirst = ''; // temporary holder for original path command\n            var pcom = ''; // holder for previous path command of original path\n\n            ii = Math.max(p.length, (p2 && p2.length) || 0);\n            for (var i = 0; i < ii; i++) {\n              if (p[i]) {\n                pfirst = p[i][0];\n              } // save current path command\n\n              if (pfirst !== 'C') {\n                pcoms1[i] = pfirst; // Save current path command\n                if (i) {\n                  pcom = pcoms1[i - 1];\n                } // Get previous path command pcom\n              }\n              p[i] = processPath(p[i], attrs, pcom);\n\n              if (pcoms1[i] !== 'A' && pfirst === 'C') {\n                pcoms1[i] = 'C';\n              }\n\n              fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n              if (p2) {\n                // the same procedures is done to p2\n                if (p2[i]) {\n                  pfirst = p2[i][0];\n                }\n                if (pfirst !== 'C') {\n                  pcoms2[i] = pfirst;\n                  if (i) {\n                    pcom = pcoms2[i - 1];\n                  }\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] !== 'A' && pfirst === 'C') {\n                  pcoms2[i] = 'C';\n                }\n\n                fixArc(p2, i);\n              }\n              fixM(p, p2, attrs, attrs2, i);\n              fixM(p2, p, attrs2, attrs, i);\n              var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n              attrs.x = seg[seglen - 2];\n              attrs.y = seg[seglen - 1];\n              attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n              attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n              attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);\n              attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);\n              attrs2.x = p2 && seg2[seg2len - 2];\n              attrs2.y = p2 && seg2[seg2len - 1];\n            }\n\n            return p2 ? [p, p2] : p;\n          }\n\n          function a2c(x1, y1, rx, ry, angle, lac, sweep_flag, x2, y2, recursive) {\n            // for more information of where this Math came from visit:\n            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n            var PI = Math.PI;\n\n            var _120 = PI * 120 / 180;\n            var f1;\n            var f2;\n            var cx;\n            var cy;\n            var rad = PI / 180 * (+angle || 0);\n            var res = [];\n            var xy;\n\n            var rotate = function rotate(x, y, rad) {\n              var X = x * Math.cos(rad) - y * Math.sin(rad),\n                Y = x * Math.sin(rad) + y * Math.cos(rad);\n              return { x: X, y: Y };\n            };\n\n            if (!recursive) {\n              xy = rotate(x1, y1, -rad);\n              x1 = xy.x;\n              y1 = xy.y;\n              xy = rotate(x2, y2, -rad);\n              x2 = xy.x;\n              y2 = xy.y;\n              var x = (x1 - x2) / 2;\n              var y = (y1 - y2) / 2;\n              var h = x * x / (rx * rx) + y * y / (ry * ry);\n              if (h > 1) {\n                h = Math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n              }\n              var rx2 = rx * rx,\n                ry2 = ry * ry;\n              var k =\n                (lac === sweep_flag ? -1 : 1) *\n                Math.sqrt(\n                  Math.abs(\n                    (rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)\n                  )\n                );\n\n              cx = k * rx * y / ry + (x1 + x2) / 2;\n              cy = k * -ry * x / rx + (y1 + y2) / 2;\n              f1 = Math.asin(((y1 - cy) / ry).toFixed(9));\n              f2 = Math.asin(((y2 - cy) / ry).toFixed(9));\n\n              f1 = x1 < cx ? PI - f1 : f1;\n              f2 = x2 < cx ? PI - f2 : f2;\n\n              if (f1 < 0) {\n                f1 = PI * 2 + f1;\n              }\n              if (f2 < 0) {\n                f2 = PI * 2 + f2;\n              }\n\n              if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n              }\n              if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n              }\n            } else {\n              f1 = recursive[0];\n              f2 = recursive[1];\n              cx = recursive[2];\n              cy = recursive[3];\n            }\n            var df = f2 - f1;\n            if (Math.abs(df) > _120) {\n              var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n              f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n              x2 = cx + rx * Math.cos(f2);\n              y2 = cy + ry * Math.sin(f2);\n              res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [\n                f2,\n                f2old,\n                cx,\n                cy\n              ]);\n            }\n            df = f2 - f1;\n            var c1 = Math.cos(f1),\n              s1 = Math.sin(f1),\n              c2 = Math.cos(f2),\n              s2 = Math.sin(f2),\n              t = Math.tan(df / 4),\n              hx = 4 / 3 * rx * t,\n              hy = 4 / 3 * ry * t,\n              m1 = [x1, y1],\n              m2 = [x1 + hx * s1, y1 - hy * c1],\n              m3 = [x2 + hx * s2, y2 - hy * c2],\n              m4 = [x2, y2];\n            m2[0] = 2 * m1[0] - m2[0];\n            m2[1] = 2 * m1[1] - m2[1];\n            if (recursive) {\n              return [m2, m3, m4].concat(res);\n            } else {\n              res = [m2, m3, m4]\n                .concat(res)\n                .join()\n                .split(',');\n              var newres = [];\n              for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] =\n                  i % 2\n                    ? rotate(res[i - 1], res[i], rad).y\n                    : rotate(res[i], res[i + 1], rad).x;\n              }\n              return newres;\n            }\n          }\n\n          // http://schepers.cc/getting-to-the-point\n          function catmullRom2bezier(crp, z) {\n            var d = [];\n            for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n              var p = [\n                {\n                  x: +crp[i - 2],\n                  y: +crp[i - 1]\n                },\n\n                {\n                  x: +crp[i],\n                  y: +crp[i + 1]\n                },\n\n                {\n                  x: +crp[i + 2],\n                  y: +crp[i + 3]\n                },\n\n                {\n                  x: +crp[i + 4],\n                  y: +crp[i + 5]\n                }\n              ];\n\n              if (z) {\n                if (!i) {\n                  p[0] = {\n                    x: +crp[iLen - 2],\n                    y: +crp[iLen - 1]\n                  };\n                } else if (iLen - 4 === i) {\n                  p[3] = {\n                    x: +crp[0],\n                    y: +crp[1]\n                  };\n                } else if (iLen - 2 === i) {\n                  p[2] = {\n                    x: +crp[0],\n                    y: +crp[1]\n                  };\n\n                  p[3] = {\n                    x: +crp[2],\n                    y: +crp[3]\n                  };\n                }\n              } else {\n                if (iLen - 4 === i) {\n                  p[3] = p[2];\n                } else if (!i) {\n                  p[0] = {\n                    x: +crp[i],\n                    y: +crp[i + 1]\n                  };\n                }\n              }\n              d.push([\n                'C',\n                (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                (p[1].y + 6 * p[2].y - p[3].y) / 6,\n                p[2].x,\n                p[2].y\n              ]);\n            }\n\n            return d;\n          }\n\n          function l2c(x1, y1, x2, y2) {\n            return [x1, y1, x2, y2, x2, y2];\n          }\n\n          function q2c(x1, y1, ax, ay, x2, y2) {\n            var _13 = 1 / 3,\n              _23 = 2 / 3;\n            return [\n              _13 * x1 + _23 * ax,\n              _13 * y1 + _23 * ay,\n              _13 * x2 + _23 * ax,\n              _13 * y2 + _23 * ay,\n              x2,\n              y2\n            ];\n          }\n\n          function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n            if (z == null) {\n              z = 1;\n            }\n            z = z > 1 ? 1 : z < 0 ? 0 : z;\n            var z2 = z / 2;\n            var n = 12;\n            var Tvalues = [\n              -0.1252,\n              0.1252,\n              -0.3678,\n              0.3678,\n              -0.5873,\n              0.5873,\n              -0.7699,\n              0.7699,\n              -0.9041,\n              0.9041,\n              -0.9816,\n              0.9816\n            ];\n\n            var sum = 0;\n            var Cvalues = [\n              0.2491,\n              0.2491,\n              0.2335,\n              0.2335,\n              0.2032,\n              0.2032,\n              0.1601,\n              0.1601,\n              0.1069,\n              0.1069,\n              0.0472,\n              0.0472\n            ];\n\n            for (var i = 0; i < n; i++) {\n              var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n              sum += Cvalues[i] * Math.sqrt(comb);\n            }\n            return z2 * sum;\n          }\n\n          function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n            if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n              return;\n            }\n            var t = 1;\n            var step = t / 2;\n            var t2 = t - step;\n            var l;\n            var e = 0.01;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n            while (Math.abs(l - ll) > e) {\n              step /= 2;\n              t2 += (l < ll ? 1 : -1) * step;\n              l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n            }\n            return t2;\n          }\n\n          function base3(t, p1, p2, p3, p4) {\n            var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n              t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n            return t * t2 - 3 * p1 + 3 * p2;\n          }\n\n          function cacheKey() {\n            var hash = '';\n            for (var i = arguments.length - 1; i >= 0; --i) {\n              hash += '\\uFF1F'.concat(\n                i < 0 || arguments.length <= i ? undefined : arguments[i]\n              );\n            }\n            return hash;\n          }\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59 }\n      ],\n      98: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Data\n           * @submodule Array Functions\n           * @for p5\n           * @requires core\n           */ /**\n           * Adds a value to the end of an array. Extends the length of\n           * the array by one. Maps to Array.push().\n           *\n           * @method append\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">array.push(value)</a> instead.\n           * @param {Array} array Array to append\n           * @param {any} value to be added to the Array\n           * @return {Array} the array that was appended to\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let myArray = ['Mango', 'Apple', 'Papaya'];\n           *   print(myArray); // ['Mango', 'Apple', 'Papaya']\n           *\n           *   append(myArray, 'Peach');\n           *   print(myArray); // ['Mango', 'Apple', 'Papaya', 'Peach']\n           * }\n           * </code></div>\n           */ _main.default.prototype.append = function(array, value) {\n            array.push(value);\n            return array;\n          };\n\n          /**\n           * Copies an array (or part of an array) to another array. The src array is\n           * copied to the dst array, beginning at the position specified by\n           * srcPosition and into the position specified by dstPosition. The number of\n           * elements to copy is determined by length. Note that copying values\n           * overwrites existing values in the destination array. To append values\n           * instead of overwriting them, use <a href=\"#/p5/concat\">concat()</a>.\n           *\n           * The simplified version with only two arguments, arrayCopy(src, dst),\n           * copies an entire array to another of the same size. It is equivalent to\n           * arrayCopy(src, 0, dst, 0, src.length).\n           *\n           * Using this function is far more efficient for copying array data than\n           * iterating through a for() loop and copying each element individually.\n           *\n           * @method arrayCopy\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\">arr1.copyWithin(arr2)</a> instead.\n           * @param {Array}  src           the source Array\n           * @param {Integer} srcPosition  starting position in the source Array\n           * @param {Array}  dst           the destination Array\n           * @param {Integer} dstPosition   starting position in the destination Array\n           * @param {Integer} length        number of Array elements to be copied\n           *\n           * @example\n           * <div class='norender'><code>\n           * let src = ['A', 'B', 'C'];\n           * let dst = [1, 2, 3];\n           * let srcPosition = 1;\n           * let dstPosition = 0;\n           * let length = 2;\n           *\n           * print(src); // ['A', 'B', 'C']\n           * print(dst); // [ 1 ,  2 ,  3 ]\n           *\n           * arrayCopy(src, srcPosition, dst, dstPosition, length);\n           * print(dst); // ['B', 'C', 3]\n           * </code></div>\n           */\n          /**\n           * @method arrayCopy\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\">arr1.copyWithin(arr2)</a> instead.\n           * @param {Array}  src\n           * @param {Array}  dst\n           * @param {Integer} [length]\n           */\n          _main.default.prototype.arrayCopy = function(\n            src,\n            srcPosition,\n            dst,\n            dstPosition,\n            length\n          ) {\n            // the index to begin splicing from dst array\n            var start;\n            var end;\n\n            if (typeof length !== 'undefined') {\n              end = Math.min(length, src.length);\n              start = dstPosition;\n              src = src.slice(srcPosition, end + srcPosition);\n            } else {\n              if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n              } else {\n                // src, dst\n                end = src.length;\n              }\n\n              start = 0;\n              // rename  so we don't get confused\n              dst = srcPosition;\n              src = src.slice(0, end);\n            }\n\n            // Since we are not returning the array and JavaScript is pass by reference\n            // we must modify the actual values of the array\n            // instead of reassigning arrays\n            Array.prototype.splice.apply(dst, [start, end].concat(src));\n          };\n\n          /**\n           * Concatenates two arrays, maps to Array.concat(). Does not modify the\n           * input arrays.\n           *\n           * @method concat\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">arr1.concat(arr2)</a> instead.\n           * @param {Array} a first Array to concatenate\n           * @param {Array} b second Array to concatenate\n           * @return {Array} concatenated array\n           *\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   let arr1 = ['A', 'B', 'C'];\n           *   let arr2 = [1, 2, 3];\n           *\n           *   print(arr1); // ['A','B','C']\n           *   print(arr2); // [1,2,3]\n           *\n           *   let arr3 = concat(arr1, arr2);\n           *\n           *   print(arr1); // ['A','B','C']\n           *   print(arr2); // [1, 2, 3]\n           *   print(arr3); // ['A','B','C', 1, 2, 3]\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.concat = function(list0, list1) {\n            return list0.concat(list1);\n          };\n\n          /**\n           * Reverses the order of an array, maps to Array.reverse()\n           *\n           * @method reverse\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">array.reverse()</a> instead.\n           * @param {Array} list Array to reverse\n           * @return {Array} the reversed list\n           * @example\n           * <div class='norender'><code>\n           * function setup() {\n           *   let myArray = ['A', 'B', 'C'];\n           *   print(myArray); // ['A','B','C']\n           *\n           *   reverse(myArray);\n           *   print(myArray); // ['C','B','A']\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.reverse = function(list) {\n            return list.reverse();\n          };\n\n          /**\n           * Decreases an array by one element and returns the shortened array,\n           * maps to Array.pop().\n           *\n           * @method shorten\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">array.pop()</a> instead.\n           * @param  {Array} list Array to shorten\n           * @return {Array} shortened Array\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   let myArray = ['A', 'B', 'C'];\n           *   print(myArray); // ['A', 'B', 'C']\n           *   let newArray = shorten(myArray);\n           *   print(myArray); // ['A','B','C']\n           *   print(newArray); // ['A','B']\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.shorten = function(list) {\n            list.pop();\n            return list;\n          };\n\n          /**\n           * Randomizes the order of the elements of an array. Implements\n           * <a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank>\n           * Fisher-Yates Shuffle Algorithm</a>.\n           *\n           * @method shuffle\n           * @param  {Array}   array  Array to shuffle\n           * @param  {Boolean} [bool] modify passed array\n           * @return {Array}   shuffled Array\n           * @example\n           * <div><code>\n           * function setup() {\n           *   let regularArr = ['ABC', 'def', createVector(), TAU, Math.E];\n           *   print(regularArr);\n           *   shuffle(regularArr, true); // force modifications to passed array\n           *   print(regularArr);\n           *\n           *   // By default shuffle() returns a shuffled cloned array:\n           *   let newArr = shuffle(regularArr);\n           *   print(regularArr);\n           *   print(newArr);\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.shuffle = function(arr, bool) {\n            var isView = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(arr);\n            arr = bool || isView ? arr : arr.slice();\n\n            var rnd,\n              tmp,\n              idx = arr.length;\n            while (idx > 1) {\n              rnd = (this.random(0, 1) * idx) | 0;\n\n              tmp = arr[--idx];\n              arr[idx] = arr[rnd];\n              arr[rnd] = tmp;\n            }\n\n            return arr;\n          };\n\n          /**\n           * Sorts an array of numbers from smallest to largest, or puts an array of\n           * words in alphabetical order. The original array is not modified; a\n           * re-ordered array is returned. The count parameter states the number of\n           * elements to sort. For example, if there are 12 elements in an array and\n           * count is set to 5, only the first 5 elements in the array will be sorted.\n           *\n           * @method sort\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">array.sort()</a> instead.\n           * @param {Array} list Array to sort\n           * @param {Integer} [count] number of elements to sort, starting from 0\n           * @return {Array} the sorted list\n           *\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   let words = ['banana', 'apple', 'pear', 'lime'];\n           *   print(words); // ['banana', 'apple', 'pear', 'lime']\n           *   let count = 4; // length of array\n           *\n           *   words = sort(words, count);\n           *   print(words); // ['apple', 'banana', 'lime', 'pear']\n           * }\n           * </code></div>\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   let numbers = [2, 6, 1, 5, 14, 9, 8, 12];\n           *   print(numbers); // [2, 6, 1, 5, 14, 9, 8, 12]\n           *   let count = 5; // Less than the length of the array\n           *\n           *   numbers = sort(numbers, count);\n           *   print(numbers); // [1,2,5,6,14,9,8,12]\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.sort = function(list, count) {\n            var arr = count ? list.slice(0, Math.min(count, list.length)) : list;\n            var rest = count ? list.slice(Math.min(count, list.length)) : [];\n            if (typeof arr[0] === 'string') {\n              arr = arr.sort();\n            } else {\n              arr = arr.sort(function(a, b) {\n                return a - b;\n              });\n            }\n            return arr.concat(rest);\n          };\n\n          /**\n           * Inserts a value or an array of values into an existing array. The first\n           * parameter specifies the initial array to be modified, and the second\n           * parameter defines the data to be inserted. The third parameter is an index\n           * value which specifies the array position from which to insert data.\n           * (Remember that array index numbering starts at zero, so the first position\n           * is 0, the second position is 1, and so on.)\n           *\n           * @method splice\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">array.splice()</a> instead.\n           * @param {Array}  list Array to splice into\n           * @param {any}    value value to be spliced in\n           * @param {Integer} position in the array from which to insert data\n           * @return {Array} the list\n           *\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   let myArray = [0, 1, 2, 3, 4];\n           *   let insArray = ['A', 'B', 'C'];\n           *   print(myArray); // [0, 1, 2, 3, 4]\n           *   print(insArray); // ['A','B','C']\n           *\n           *   splice(myArray, insArray, 3);\n           *   print(myArray); // [0,1,2,'A','B','C',3,4]\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.splice = function(list, value, index) {\n            // note that splice returns spliced elements and not an array\n            Array.prototype.splice.apply(list, [index, 0].concat(value));\n\n            return list;\n          };\n\n          /**\n           * Extracts an array of elements from an existing array. The list parameter\n           * defines the array from which the elements will be copied, and the start\n           * and count parameters specify which elements to extract. If no count is\n           * given, elements will be extracted from the start to the end of the array.\n           * When specifying the start, remember that the first array element is 0.\n           * This function does not change the source array.\n           *\n           * @method subset\n           * @deprecated Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">array.slice()</a> instead.\n           * @param  {Array}  list    Array to extract from\n           * @param  {Integer} start   position to begin\n           * @param  {Integer} [count] number of values to extract\n           * @return {Array}          Array of extracted elements\n           *\n           * @example\n           * <div class = 'norender'><code>\n           * function setup() {\n           *   let myArray = [1, 2, 3, 4, 5];\n           *   print(myArray); // [1, 2, 3, 4, 5]\n           *\n           *   let sub1 = subset(myArray, 0, 3);\n           *   let sub2 = subset(myArray, 2, 2);\n           *   print(sub1); // [1,2,3]\n           *   print(sub2); // [3,4]\n           * }\n           * </code></div>\n           */\n          _main.default.prototype.subset = function(list, start, count) {\n            if (typeof count !== 'undefined') {\n              return list.slice(start, start + count);\n            } else {\n              return list.slice(start, list.length);\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      99: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Data\n           * @submodule Conversion\n           * @for p5\n           * @requires core\n           */ /**\n           * Converts a string to its floating point representation. The contents of a\n           * string must resemble a number, or NaN (not a number) will be returned.\n           * For example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\")\n           * will return NaN.\n           *\n           * When an array of values is passed in, then an array of floats of the same\n           * length is returned.\n           *\n           * @method float\n           * @param {String}  str float string to parse\n           * @return {Number}     floating point representation of string\n           * @example\n           * <div><code>\n           * let str = '20';\n           * let diameter = float(str);\n           * ellipse(width / 2, height / 2, diameter, diameter);\n           * </code></div>\n           * <div class='norender'><code>\n           * print(float('10.31')); // 10.31\n           * print(float('Infinity')); // Infinity\n           * print(float('-Infinity')); // -Infinity\n           * </code></div>\n           *\n           * @alt\n           * 20 by 20 white ellipse in the center of the canvas\n           */ _main.default.prototype.float = function(str) {\n            if (str instanceof Array) {\n              return str.map(parseFloat);\n            }\n            return parseFloat(str);\n          };\n\n          /**\n           * Converts a boolean, string, or float to its integer representation.\n           * When an array of values is passed in, then an int array of the same length\n           * is returned.\n           *\n           * @method int\n           * @param {String|Boolean|Number}       n value to parse\n           * @param {Integer}       [radix] the radix to convert to (default: 10)\n           * @return {Number}                     integer representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(int('10')); // 10\n           * print(int(10.31)); // 10\n           * print(int(-10)); // -10\n           * print(int(true)); // 1\n           * print(int(false)); // 0\n           * print(int([false, true, '10.3', 9.8])); // [0, 1, 10, 9]\n           * print(int(Infinity)); // Infinity\n           * print(int('-Infinity')); // -Infinity\n           * </code></div>\n           */\n          /**\n           * @method int\n           * @param {Array} ns                    values to parse\n           * @return {Number[]}                   integer representation of values\n           */\n          _main.default.prototype.int = function(n) {\n            var radix =\n              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n            if (n === Infinity || n === 'Infinity') {\n              return Infinity;\n            } else if (n === -Infinity || n === '-Infinity') {\n              return -Infinity;\n            } else if (typeof n === 'string') {\n              return parseInt(n, radix);\n            } else if (typeof n === 'number') {\n              return n | 0;\n            } else if (typeof n === 'boolean') {\n              return n ? 1 : 0;\n            } else if (n instanceof Array) {\n              return n.map(function(n) {\n                return _main.default.prototype.int(n, radix);\n              });\n            }\n          };\n\n          /**\n           * Converts a boolean, string or number to its string representation.\n           * When an array of values is passed in, then an array of strings of the same\n           * length is returned.\n           *\n           * @method str\n           * @param {String|Boolean|Number|Array} n value to parse\n           * @return {String}                     string representation of value\n           * @example\n           * <div class='norender'><code>\n           * print(str('10')); // \"10\"\n           * print(str(10.31)); // \"10.31\"\n           * print(str(-10)); // \"-10\"\n           * print(str(true)); // \"true\"\n           * print(str(false)); // \"false\"\n           * print(str([true, '10.3', 9.8])); // [ \"true\", \"10.3\", \"9.8\" ]\n           * </code></div>\n           */\n          _main.default.prototype.str = function(n) {\n            if (n instanceof Array) {\n              return n.map(_main.default.prototype.str);\n            } else {\n              return String(n);\n            }\n          };\n\n          /**\n           * Converts a number or string to its boolean representation.\n           * For a number, any non-zero value (positive or negative) evaluates to true,\n           * while zero evaluates to false. For a string, the value \"true\" evaluates to\n           * true, while any other value evaluates to false. When an array of number or\n           * string values is passed in, then a array of booleans of the same length is\n           * returned.\n           *\n           * @method boolean\n           * @param {String|Boolean|Number|Array} n value to parse\n           * @return {Boolean}                    boolean representation of value\n           * @example\n           * <div class='norender'><code>\n           * print(boolean(0)); // false\n           * print(boolean(1)); // true\n           * print(boolean('true')); // true\n           * print(boolean('abcd')); // false\n           * print(boolean([0, 12, 'true'])); // [false, true, true]\n           * </code></div>\n           */\n          _main.default.prototype.boolean = function(n) {\n            if (typeof n === 'number') {\n              return n !== 0;\n            } else if (typeof n === 'string') {\n              return n.toLowerCase() === 'true';\n            } else if (typeof n === 'boolean') {\n              return n;\n            } else if (n instanceof Array) {\n              return n.map(_main.default.prototype.boolean);\n            }\n          };\n\n          /**\n           * Converts a number, string representation of a number, or boolean to its byte\n           * representation. A byte can be only a whole number between -128 and 127, so\n           * when a value outside of this range is converted, it wraps around to the\n           * corresponding byte representation. When an array of number, string or boolean\n           * values is passed in, then an array of bytes the same length is returned.\n           *\n           * @method byte\n           * @param {String|Boolean|Number}       n value to parse\n           * @return {Number}                     byte representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(byte(127)); // 127\n           * print(byte(128)); // -128\n           * print(byte(23.4)); // 23\n           * print(byte('23.4')); // 23\n           * print(byte('hello')); // NaN\n           * print(byte(true)); // 1\n           * print(byte([0, 255, '100'])); // [0, -1, 100]\n           * </code></div>\n           */\n          /**\n           * @method byte\n           * @param {Array} ns                   values to parse\n           * @return {Number[]}                  array of byte representation of values\n           */\n          _main.default.prototype.byte = function(n) {\n            var nn = _main.default.prototype.int(n, 10);\n            if (typeof nn === 'number') {\n              return (nn + 128) % 256 - 128;\n            } else if (nn instanceof Array) {\n              return nn.map(_main.default.prototype.byte);\n            }\n          };\n\n          /**\n           * Converts a number or string to its corresponding single-character\n           * string representation. If a string parameter is provided, it is first\n           * parsed as an integer and then translated into a single-character string.\n           * When an array of number or string values is passed in, then an array of\n           * single-character strings of the same length is returned.\n           *\n           * @method char\n           * @param {String|Number}       n value to parse\n           * @return {String}             string representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(char(65)); // \"A\"\n           * print(char('65')); // \"A\"\n           * print(char([65, 66, 67])); // [ \"A\", \"B\", \"C\" ]\n           * print(join(char([65, 66, 67]), '')); // \"ABC\"\n           * </code></div>\n           */\n          /**\n           * @method char\n           * @param {Array} ns              values to parse\n           * @return {String[]}             array of string representation of values\n           */\n          _main.default.prototype.char = function(n) {\n            if (typeof n === 'number' && !isNaN(n)) {\n              return String.fromCharCode(n);\n            } else if (n instanceof Array) {\n              return n.map(_main.default.prototype.char);\n            } else if (typeof n === 'string') {\n              return _main.default.prototype.char(parseInt(n, 10));\n            }\n          };\n\n          /**\n           * Converts a single-character string to its corresponding integer\n           * representation. When an array of single-character string values is passed\n           * in, then an array of integers of the same length is returned.\n           *\n           * @method unchar\n           * @param {String} n     value to parse\n           * @return {Number}      integer representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(unchar('A')); // 65\n           * print(unchar(['A', 'B', 'C'])); // [ 65, 66, 67 ]\n           * print(unchar(split('ABC', ''))); // [ 65, 66, 67 ]\n           * </code></div>\n           */\n          /**\n           * @method unchar\n           * @param {Array} ns       values to parse\n           * @return {Number[]}      integer representation of values\n           */\n          _main.default.prototype.unchar = function(n) {\n            if (typeof n === 'string' && n.length === 1) {\n              return n.charCodeAt(0);\n            } else if (n instanceof Array) {\n              return n.map(_main.default.prototype.unchar);\n            }\n          };\n\n          /**\n           * Converts a number to a string in its equivalent hexadecimal notation. If a\n           * second parameter is passed, it is used to set the number of characters to\n           * generate in the hexadecimal notation. When an array is passed in, an\n           * array of strings in hexadecimal notation of the same length is returned.\n           *\n           * @method hex\n           * @param {Number} n     value to parse\n           * @param {Number} [digits]\n           * @return {String}      hexadecimal string representation of value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(hex(255)); // \"000000FF\"\n           * print(hex(255, 6)); // \"0000FF\"\n           * print(hex([0, 127, 255], 6)); // [ \"000000\", \"00007F\", \"0000FF\" ]\n           * print(Infinity); // \"FFFFFFFF\"\n           * print(-Infinity); // \"00000000\"\n           * </code></div>\n           */\n          /**\n           * @method hex\n           * @param {Number[]} ns    array of values to parse\n           * @param {Number} [digits]\n           * @return {String[]}      hexadecimal string representation of values\n           */\n          _main.default.prototype.hex = function(n, digits) {\n            digits = digits === undefined || digits === null ? (digits = 8) : digits;\n            if (n instanceof Array) {\n              return n.map(function(n) {\n                return _main.default.prototype.hex(n, digits);\n              });\n            } else if (n === Infinity || n === -Infinity) {\n              var c = n === Infinity ? 'F' : '0';\n              return c.repeat(digits);\n            } else if (typeof n === 'number') {\n              if (n < 0) {\n                n = 0xffffffff + n + 1;\n              }\n              var hex = Number(n)\n                .toString(16)\n                .toUpperCase();\n              while (hex.length < digits) {\n                hex = '0'.concat(hex);\n              }\n              if (hex.length >= digits) {\n                hex = hex.substring(hex.length - digits, hex.length);\n              }\n              return hex;\n            }\n          };\n\n          /**\n           * Converts a string representation of a hexadecimal number to its equivalent\n           * integer value. When an array of strings in hexadecimal notation is passed\n           * in, an array of integers of the same length is returned.\n           *\n           * @method unhex\n           * @param {String} n value to parse\n           * @return {Number}      integer representation of hexadecimal value\n           *\n           * @example\n           * <div class='norender'><code>\n           * print(unhex('A')); // 10\n           * print(unhex('FF')); // 255\n           * print(unhex(['FF', 'AA', '00'])); // [ 255, 170, 0 ]\n           * </code></div>\n           */\n          /**\n           * @method unhex\n           * @param {Array} ns values to parse\n           * @return {Number[]}      integer representations of hexadecimal value\n           */\n          _main.default.prototype.unhex = function(n) {\n            if (n instanceof Array) {\n              return n.map(_main.default.prototype.unhex);\n            } else {\n              return parseInt('0x'.concat(n), 16);\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      100: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          _dereq_('../core/friendly_errors/validate_params');\n          _dereq_('../core/friendly_errors/file_errors');\n          _dereq_('../core/friendly_errors/fes_core');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** //return p5; //LM is this a mistake?\n           * @module Data\n           * @submodule String Functions\n           * @for p5\n           * @requires core\n           */\n          /**\n           * Combines an array of Strings into one String, each separated by the\n           * character(s) used for the separator parameter. To join arrays of ints or\n           * floats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or\n           * nfs().\n           *\n           * @method join\n           * @param  {Array}  list      array of Strings to be joined\n           * @param  {String} separator String to be placed between each item\n           * @return {String}           joined String\n           * @example\n           * <div>\n           * <code>\n           * let array = ['Hello', 'world!'];\n           * let separator = ' ';\n           * let message = join(array, separator);\n           * text(message, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"hello world!\" displayed middle left of canvas.\n           */ _main.default.prototype.join = function(list, separator) {\n            _main.default._validateParameters('join', arguments);\n            return list.join(separator);\n          };\n\n          /**\n           * This function is used to apply a regular expression to a piece of text,\n           * and return matching groups (elements found inside parentheses) as a\n           * String array. If there are no matches, a null value will be returned.\n           * If no groups are specified in the regular expression, but the sequence\n           * matches, an array of length 1 (with the matched text as the first element\n           * of the array) will be returned.\n           *\n           * To use the function, first check to see if the result is null. If the\n           * result is null, then the sequence did not match at all. If the sequence\n           * did match, an array is returned.\n           *\n           * If there are groups (specified by sets of parentheses) in the regular\n           * expression, then the contents of each will be returned in the array.\n           * Element [0] of a regular expression match returns the entire matching\n           * string, and the match groups start at element [1] (the first group is [1],\n           * the second [2], and so on).\n           *\n           * @method match\n           * @param  {String} str    the String to be searched\n           * @param  {String} regexp the regexp to be used for matching\n           * @return {String[]}      Array of Strings found\n           * @example\n           * <div>\n           * <code>\n           * let string = 'Hello p5js*!';\n           * let regexp = 'p5js\\\\*';\n           * let m = match(string, regexp);\n           * text(m, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"p5js*\" displayed middle left of canvas.\n           */\n          _main.default.prototype.match = function(str, reg) {\n            _main.default._validateParameters('match', arguments);\n            return str.match(reg);\n          };\n\n          /**\n           * This function is used to apply a regular expression to a piece of text,\n           * and return a list of matching groups (elements found inside parentheses)\n           * as a two-dimensional String array. If there are no matches, a null value\n           * will be returned. If no groups are specified in the regular expression,\n           * but the sequence matches, a two dimensional array is still returned, but\n           * the second dimension is only of length one.\n           *\n           * To use the function, first check to see if the result is null. If the\n           * result is null, then the sequence did not match at all. If the sequence\n           * did match, a 2D array is returned.\n           *\n           * If there are groups (specified by sets of parentheses) in the regular\n           * expression, then the contents of each will be returned in the array.\n           * Assuming a loop with counter variable i, element [i][0] of a regular\n           * expression match returns the entire matching string, and the match groups\n           * start at element [i][1] (the first group is [i][1], the second [i][2],\n           * and so on).\n           *\n           * @method matchAll\n           * @param  {String} str    the String to be searched\n           * @param  {String} regexp the regexp to be used for matching\n           * @return {String[]}         2d Array of Strings found\n           * @example\n           * <div class=\"norender\">\n           * <code>\n           * let string = 'Hello p5js*! Hello world!';\n           * let regexp = 'Hello';\n           * matchAll(string, regexp);\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.matchAll = function(str, reg) {\n            _main.default._validateParameters('matchAll', arguments);\n            var re = new RegExp(reg, 'g');\n            var match = re.exec(str);\n            var matches = [];\n            while (match !== null) {\n              matches.push(match);\n              // matched text: match[0]\n              // match start: match.index\n              // capturing group n: match[n]\n              match = re.exec(str);\n            }\n            return matches;\n          };\n\n          /**\n           * Utility function for formatting numbers into strings. There are two\n           * versions: one for formatting floats, and one for formatting ints.\n           * The values for the digits, left, and right parameters should always\n           * be positive integers.\n           * (NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter\n           * if greater than the current length of the number.\n           * For example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\n           * (integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\n           * the result will be 123.200.\n           *\n           * @method nf\n           * @param {Number|String}       num      the Number to format\n           * @param {Integer|String}      [left]   number of digits to the left of the\n           *                                decimal point\n           * @param {Integer|String}      [right]  number of digits to the right of the\n           *                                decimal point\n           * @return {String}               formatted String\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myFont;\n           * function preload() {\n           *   myFont = loadFont('assets/fonts/inconsolata.ttf');\n           * }\n           * function setup() {\n           *   background(200);\n           *   let num1 = 321;\n           *   let num2 = -1321;\n           *\n           *   noStroke();\n           *   fill(0);\n           *   textFont(myFont);\n           *   textSize(22);\n           *\n           *   text(nf(num1, 4, 2), 10, 30);\n           *   text(nf(num2, 4, 2), 10, 80);\n           *   // Draw dividing line\n           *   stroke(120);\n           *   line(0, 50, width, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"0321.00\" middle top, -1321.00\" middle bottom canvas\n           */\n          /**\n           * @method nf\n           * @param {Array}        nums     the Numbers to format\n           * @param {Integer|String}      [left]\n           * @param {Integer|String}      [right]\n           * @return {String[]}                formatted Strings\n           */\n          _main.default.prototype.nf = function(nums, left, right) {\n            _main.default._validateParameters('nf', arguments);\n            if (nums instanceof Array) {\n              return nums.map(function(x) {\n                return doNf(x, left, right);\n              });\n            } else {\n              var typeOfFirst = Object.prototype.toString.call(nums);\n              if (typeOfFirst === '[object Arguments]') {\n                if (nums.length === 3) {\n                  return this.nf(nums[0], nums[1], nums[2]);\n                } else if (nums.length === 2) {\n                  return this.nf(nums[0], nums[1]);\n                } else {\n                  return this.nf(nums[0]);\n                }\n              } else {\n                return doNf(nums, left, right);\n              }\n            }\n          };\n\n          function doNf(num, left, right) {\n            var neg = num < 0;\n            var n = neg ? num.toString().substring(1) : num.toString();\n            var decimalInd = n.indexOf('.');\n            var intPart = decimalInd !== -1 ? n.substring(0, decimalInd) : n;\n            var decPart = decimalInd !== -1 ? n.substring(decimalInd + 1) : '';\n            var str = neg ? '-' : '';\n            if (typeof right !== 'undefined') {\n              var decimal = '';\n              if (decimalInd !== -1 || right - decPart.length > 0) {\n                decimal = '.';\n              }\n              if (decPart.length > right) {\n                decPart = decPart.substring(0, right);\n              }\n              for (var i = 0; i < left - intPart.length; i++) {\n                str += '0';\n              }\n              str += intPart;\n              str += decimal;\n              str += decPart;\n              for (var j = 0; j < right - decPart.length; j++) {\n                str += '0';\n              }\n              return str;\n            } else {\n              for (var k = 0; k < Math.max(left - intPart.length, 0); k++) {\n                str += '0';\n              }\n              str += n;\n              return str;\n            }\n          }\n\n          /**\n           * Utility function for formatting numbers into strings and placing\n           * appropriate commas to mark units of 1000. There are two versions: one\n           * for formatting ints, and one for formatting an array of ints. The value\n           * for the right parameter should always be a positive integer.\n           *\n           * @method nfc\n           * @param  {Number|String}   num     the Number to format\n           * @param  {Integer|String}  [right] number of digits to the right of the\n           *                                  decimal point\n           * @return {String}           formatted String\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   background(200);\n           *   let num = 11253106.115;\n           *   let numArr = [1, 1, 2];\n           *\n           *   noStroke();\n           *   fill(0);\n           *   textSize(12);\n           *\n           *   // Draw formatted numbers\n           *   text(nfc(num, 4), 10, 30);\n           *   text(nfc(numArr, 2), 10, 80);\n           *\n           *   // Draw dividing line\n           *   stroke(120);\n           *   line(0, 50, width, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"11,253,106.115\" top middle and \"1.00,1.00,2.00\" displayed bottom mid\n           */\n          /**\n           * @method nfc\n           * @param  {Array}    nums     the Numbers to format\n           * @param  {Integer|String}  [right]\n           * @return {String[]}           formatted Strings\n           */\n          _main.default.prototype.nfc = function(num, right) {\n            _main.default._validateParameters('nfc', arguments);\n            if (num instanceof Array) {\n              return num.map(function(x) {\n                return doNfc(x, right);\n              });\n            } else {\n              return doNfc(num, right);\n            }\n          };\n          function doNfc(num, right) {\n            num = num.toString();\n            var dec = num.indexOf('.');\n            var rem = dec !== -1 ? num.substring(dec) : '';\n            var n = dec !== -1 ? num.substring(0, dec) : num;\n            n = n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n            if (right === 0) {\n              rem = '';\n            } else if (typeof right !== 'undefined') {\n              if (right > rem.length) {\n                rem += dec === -1 ? '.' : '';\n                var len = right - rem.length + 1;\n                for (var i = 0; i < len; i++) {\n                  rem += '0';\n                }\n              } else {\n                rem = rem.substring(0, right + 1);\n              }\n            }\n            return n + rem;\n          }\n\n          /**\n           * Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\n           * puts a \"+\" in front of positive numbers and a \"-\" in front of negative\n           * numbers. There are two versions: one for formatting floats, and one for\n           * formatting ints. The values for left, and right parameters\n           * should always be positive integers.\n           *\n           * @method nfp\n           * @param {Number} num      the Number to format\n           * @param {Integer}      [left]   number of digits to the left of the decimal\n           *                                point\n           * @param {Integer}      [right]  number of digits to the right of the\n           *                                decimal point\n           * @return {String}         formatted String\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   background(200);\n           *   let num1 = 11253106.115;\n           *   let num2 = -11253106.115;\n           *\n           *   noStroke();\n           *   fill(0);\n           *   textSize(12);\n           *\n           *   // Draw formatted numbers\n           *   text(nfp(num1, 4, 2), 10, 30);\n           *   text(nfp(num2, 4, 2), 10, 80);\n           *\n           *   // Draw dividing line\n           *   stroke(120);\n           *   line(0, 50, width, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"+11253106.11\" top middle and \"-11253106.11\" displayed bottom middle\n           */\n          /**\n           * @method nfp\n           * @param {Number[]} nums      the Numbers to format\n           * @param {Integer}      [left]\n           * @param {Integer}      [right]\n           * @return {String[]}         formatted Strings\n           */\n          _main.default.prototype.nfp = function() {\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('nfp', args);\n            var nfRes = _main.default.prototype.nf.apply(this, args);\n            if (nfRes instanceof Array) {\n              return nfRes.map(addNfp);\n            } else {\n              return addNfp(nfRes);\n            }\n          };\n\n          function addNfp(num) {\n            return parseFloat(num) > 0 ? '+'.concat(num.toString()) : num.toString();\n          }\n\n          /**\n           * Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\n           * puts an additional \"_\" (space) in front of positive numbers just in case to align it with negative\n           * numbers which includes \"-\" (minus) sign.\n           * The main usecase of nfs() can be seen when one wants to align the digits (place values) of a non-negative\n           * number with some negative number (See the example to get a clear picture).\n           * There are two versions: one for formatting float, and one for formatting int.\n           * The values for the digits, left, and right parameters should always be positive integers.\n           * (IMP): The result on the canvas basically the expected alignment can vary based on the typeface you are using.\n           * (NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter\n           * if greater than the current length of the number.\n           * For example if number is 123.2 and left parameter passed is 4 which is greater than length of 123\n           * (integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than\n           * the result will be 123.200.\n           *\n           * @method nfs\n           * @param {Number}       num      the Number to format\n           * @param {Integer}      [left]   number of digits to the left of the decimal\n           *                                point\n           * @param {Integer}      [right]  number of digits to the right of the\n           *                                decimal point\n           * @return {String}         formatted String\n           *\n           * @example\n           * <div>\n           * <code>\n           * let myFont;\n           * function preload() {\n           *   myFont = loadFont('assets/fonts/inconsolata.ttf');\n           * }\n           * function setup() {\n           *   background(200);\n           *   let num1 = 321;\n           *   let num2 = -1321;\n           *\n           *   noStroke();\n           *   fill(0);\n           *   textFont(myFont);\n           *   textSize(22);\n           *\n           *   // nfs() aligns num1 (positive number) with num2 (negative number) by\n           *   // adding a blank space in front of the num1 (positive number)\n           *   // [left = 4] in num1 add one 0 in front, to align the digits with num2\n           *   // [right = 2] in num1 and num2 adds two 0's after both numbers\n           *   // To see the differences check the example of nf() too.\n           *   text(nfs(num1, 4, 2), 10, 30);\n           *   text(nfs(num2, 4, 2), 10, 80);\n           *   // Draw dividing line\n           *   stroke(120);\n           *   line(0, 50, width, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"0321.00\" top middle and \"-1321.00\" displayed bottom middle\n           */\n          /**\n           * @method nfs\n           * @param {Array}        nums     the Numbers to format\n           * @param {Integer}      [left]\n           * @param {Integer}      [right]\n           * @return {String[]}         formatted Strings\n           */\n          _main.default.prototype.nfs = function() {\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('nfs', args);\n            var nfRes = _main.default.prototype.nf.apply(this, args);\n            if (nfRes instanceof Array) {\n              return nfRes.map(addNfs);\n            } else {\n              return addNfs(nfRes);\n            }\n          };\n\n          function addNfs(num) {\n            return parseFloat(num) >= 0 ? ' '.concat(num.toString()) : num.toString();\n          }\n\n          /**\n           * The <a href=\"#/p5/split\">split()</a> function maps to String.split(), it breaks a String into\n           * pieces using a character or string as the delimiter. The delim parameter\n           * specifies the character or characters that mark the boundaries between\n           * each piece. A String[] array is returned that contains each of the pieces.\n           *\n           * The <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it\n           * splits using a range of characters instead of a specific character or\n           * sequence.\n           *\n           * @method split\n           * @param  {String} value the String to be split\n           * @param  {String} delim the String used to separate the data\n           * @return {String[]}  Array of Strings\n           * @example\n           * <div>\n           * <code>\n           * let names = 'Pat,Xio,Alex';\n           * let splitString = split(names, ',');\n           * text(splitString[0], 5, 30);\n           * text(splitString[1], 5, 50);\n           * text(splitString[2], 5, 70);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"pat\" top left, \"Xio\" mid left and \"Alex\" displayed bottom left\n           */\n          _main.default.prototype.split = function(str, delim) {\n            _main.default._validateParameters('split', arguments);\n            return str.split(delim);\n          };\n\n          /**\n           * The <a href=\"#/p5/splitTokens\">splitTokens()</a> function splits a String at one or many character\n           * delimiters or \"tokens.\" The delim parameter specifies the character or\n           * characters to be used as a boundary.\n           *\n           * If no delim characters are specified, any whitespace character is used to\n           * split. Whitespace characters include tab (\\t), line feed (\\n), carriage\n           * return (\\r), form feed (\\f), and space.\n           *\n           * @method splitTokens\n           * @param  {String} value   the String to be split\n           * @param  {String} [delim] list of individual Strings that will be used as\n           *                          separators\n           * @return {String[]}          Array of Strings\n           * @example\n           * <div class = \"norender\">\n           * <code>\n           * function setup() {\n           *   let myStr = 'Mango, Banana, Lime';\n           *   let myStrArr = splitTokens(myStr, ',');\n           *\n           *   print(myStrArr); // prints : [\"Mango\",\" Banana\",\" Lime\"]\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.splitTokens = function(value, delims) {\n            _main.default._validateParameters('splitTokens', arguments);\n            var d;\n            if (typeof delims !== 'undefined') {\n              var str = delims;\n              var sqc = /\\]/g.exec(str);\n              var sqo = /\\[/g.exec(str);\n              if (sqo && sqc) {\n                str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);\n                sqo = /\\[/g.exec(str);\n                str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);\n                d = new RegExp('[\\\\['.concat(str, '\\\\]]'), 'g');\n              } else if (sqc) {\n                str = str.slice(0, sqc.index) + str.slice(sqc.index + 1);\n                d = new RegExp('['.concat(str, '\\\\]]'), 'g');\n              } else if (sqo) {\n                str = str.slice(0, sqo.index) + str.slice(sqo.index + 1);\n                d = new RegExp('['.concat(str, '\\\\[]'), 'g');\n              } else {\n                d = new RegExp('['.concat(str, ']'), 'g');\n              }\n            } else {\n              d = /\\s/g;\n            }\n            return value.split(d).filter(function(n) {\n              return n;\n            });\n          };\n\n          /**\n           * Removes whitespace characters from the beginning and end of a String. In\n           * addition to standard whitespace characters such as space, carriage return,\n           * and tab, this function also removes the Unicode \"nbsp\" character.\n           *\n           * @method trim\n           * @param  {String} str a String to be trimmed\n           * @return {String}       a trimmed String\n           *\n           * @example\n           * <div>\n           * <code>\n           * let string = trim('  No new lines\\n   ');\n           * text(string + ' here', 2, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * \"No new lines here\" displayed center canvas\n           */\n          /**\n           * @method trim\n           * @param  {Array} strs an Array of Strings to be trimmed\n           * @return {String[]}   an Array of trimmed Strings\n           */\n          _main.default.prototype.trim = function(str) {\n            _main.default._validateParameters('trim', arguments);\n            if (str instanceof Array) {\n              return str.map(this.trim);\n            } else {\n              return str.trim();\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        {\n          '../core/friendly_errors/fes_core': 51,\n          '../core/friendly_errors/file_errors': 52,\n          '../core/friendly_errors/validate_params': 54,\n          '../core/main': 59\n        }\n      ],\n      101: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module IO\n           * @submodule Time & Date\n           * @for p5\n           * @requires core\n           */ /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/day\">day()</a> function\n           * returns the current day as a value from 1 - 31.\n           *\n           * @method day\n           * @return {Integer} the current day\n           * @example\n           * <div>\n           * <code>\n           * let d = day();\n           * text('Current day: \\n' + d, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current day is displayed\n           */ _main.default.prototype.day = function() {\n            return new Date().getDate();\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/hour\">hour()</a> function\n           * returns the current hour as a value from 0 - 23.\n           *\n           * @method hour\n           * @return {Integer} the current hour\n           * @example\n           * <div>\n           * <code>\n           * let h = hour();\n           * text('Current hour:\\n' + h, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current hour is displayed\n           */\n          _main.default.prototype.hour = function() {\n            return new Date().getHours();\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\">minute()</a> function\n           * returns the current minute as a value from 0 - 59.\n           *\n           * @method minute\n           * @return {Integer} the current minute\n           * @example\n           * <div>\n           * <code>\n           * let m = minute();\n           * text('Current minute: \\n' + m, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current minute is displayed\n           */\n          _main.default.prototype.minute = function() {\n            return new Date().getMinutes();\n          };\n\n          /**\n           * Returns the number of milliseconds (thousandths of a second) since\n           * starting the sketch (when `setup()` is called). This information is often\n           * used for timing events and animation sequences.\n           *\n           * @method millis\n           * @return {Number} the number of milliseconds since starting the sketch\n           * @example\n           * <div>\n           * <code>\n           * let millisecond = millis();\n           * text('Milliseconds \\nrunning: \\n' + millisecond, 5, 40);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * number of milliseconds since sketch has started displayed\n           */\n          _main.default.prototype.millis = function() {\n            if (this._millisStart === -1) {\n              // Sketch has not started\n              return 0;\n            } else {\n              return window.performance.now() - this._millisStart;\n            }\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\">month()</a> function\n           * returns the current month as a value from 1 - 12.\n           *\n           * @method month\n           * @return {Integer} the current month\n           * @example\n           * <div>\n           * <code>\n           * let m = month();\n           * text('Current month: \\n' + m, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current month is displayed\n           */\n          _main.default.prototype.month = function() {\n            //January is 0!\n            return new Date().getMonth() + 1;\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\">second()</a> function\n           * returns the current second as a value from 0 - 59.\n           *\n           * @method second\n           * @return {Integer} the current second\n           * @example\n           * <div>\n           * <code>\n           * let s = second();\n           * text('Current second: \\n' + s, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current second is displayed\n           */\n          _main.default.prototype.second = function() {\n            return new Date().getSeconds();\n          };\n\n          /**\n           * p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\">year()</a> function\n           * returns the current year as an integer (2014, 2015, 2016, etc).\n           *\n           * @method year\n           * @return {Integer} the current year\n           * @example\n           * <div>\n           * <code>\n           * let y = year();\n           * text('Current year: \\n' + y, 5, 50);\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Current year is displayed\n           */\n          _main.default.prototype.year = function() {\n            return new Date().getFullYear();\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      102: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          _dereq_('./p5.Geometry');\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Shape\n           * @submodule 3D Primitives\n           * @for p5\n           * @requires core\n           * @requires p5.Geometry\n           */ /**\n           * Draw a plane with given a width and height\n           * @method plane\n           * @param  {Number} [width]    width of the plane\n           * @param  {Number} [height]   height of the plane\n           * @param  {Integer} [detailX]  Optional number of triangle\n           *                             subdivisions in x-dimension\n           * @param {Integer} [detailY]   Optional number of triangle\n           *                             subdivisions in y-dimension\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a plane\n           * // with width 50 and height 50\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   plane(50, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Nothing displayed on canvas\n           * Rotating interior view of a box with sides that change color.\n           * 3d red and green gradient.\n           * Rotating interior view of a cylinder with sides that change color.\n           * Rotating view of a cylinder with sides that change color.\n           * 3d red and green gradient.\n           * rotating view of a multi-colored cylinder with concave sides.\n           */ _main.default.prototype.plane = function(width, height, detailX, detailY) {\n            this._assert3d('plane');\n            _main.default._validateParameters('plane', arguments);\n            if (typeof width === 'undefined') {\n              width = 50;\n            }\n            if (typeof height === 'undefined') {\n              height = width;\n            }\n\n            if (typeof detailX === 'undefined') {\n              detailX = 1;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 1;\n            }\n\n            var gId = 'plane|'.concat(detailX, '|').concat(detailY);\n\n            if (!this._renderer.geometryInHash(gId)) {\n              var _plane = function _plane() {\n                var u, v, p;\n                for (var i = 0; i <= this.detailY; i++) {\n                  v = i / this.detailY;\n                  for (var j = 0; j <= this.detailX; j++) {\n                    u = j / this.detailX;\n                    p = new _main.default.Vector(u - 0.5, v - 0.5, 0);\n                    this.vertices.push(p);\n                    this.uvs.push(u, v);\n                  }\n                }\n              };\n              var planeGeom = new _main.default.Geometry(detailX, detailY, _plane);\n              planeGeom.computeFaces().computeNormals();\n              if (detailX <= 1 && detailY <= 1) {\n                planeGeom._makeTriangleEdges()._edgesToVertices();\n              } else if (this._renderer._doStroke) {\n                console.log(\n                  'Cannot draw stroke on plane objects with more' +\n                    ' than 1 detailX or 1 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, planeGeom);\n            }\n\n            this._renderer.drawBuffersScaled(gId, width, height, 1);\n            return this;\n          };\n\n          /**\n           * Draw a box with given width, height and depth\n           * @method  box\n           * @param  {Number} [width]     width of the box\n           * @param  {Number} [Height]    height of the box\n           * @param  {Number} [depth]     depth of the box\n           * @param {Integer} [detailX]  Optional number of triangle\n           *                            subdivisions in x-dimension\n           * @param {Integer} [detailY]  Optional number of triangle\n           *                            subdivisions in y-dimension\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a spinning box\n           * // with width, height and depth of 50\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(50);\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.box = function(width, height, depth, detailX, detailY) {\n            this._assert3d('box');\n            _main.default._validateParameters('box', arguments);\n            if (typeof width === 'undefined') {\n              width = 50;\n            }\n            if (typeof height === 'undefined') {\n              height = width;\n            }\n            if (typeof depth === 'undefined') {\n              depth = height;\n            }\n\n            var perPixelLighting =\n              this._renderer.attributes && this._renderer.attributes.perPixelLighting;\n            if (typeof detailX === 'undefined') {\n              detailX = perPixelLighting ? 1 : 4;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = perPixelLighting ? 1 : 4;\n            }\n\n            var gId = 'box|'.concat(detailX, '|').concat(detailY);\n            if (!this._renderer.geometryInHash(gId)) {\n              var _box = function _box() {\n                var cubeIndices = [\n                  [0, 4, 2, 6], // -1, 0, 0],// -x\n                  [1, 3, 5, 7], // +1, 0, 0],// +x\n                  [0, 1, 4, 5], // 0, -1, 0],// -y\n                  [2, 6, 3, 7], // 0, +1, 0],// +y\n                  [0, 2, 1, 3], // 0, 0, -1],// -z\n                  [4, 5, 6, 7] // 0, 0, +1] // +z\n                ];\n                //using strokeIndices instead of faces for strokes\n                //to avoid diagonal stroke lines across face of box\n                this.strokeIndices = [\n                  [0, 1],\n                  [1, 3],\n                  [3, 2],\n                  [6, 7],\n                  [8, 9],\n                  [9, 11],\n                  [14, 15],\n                  [16, 17],\n                  [17, 19],\n                  [18, 19],\n                  [20, 21],\n                  [22, 23]\n                ];\n\n                for (var i = 0; i < cubeIndices.length; i++) {\n                  var cubeIndex = cubeIndices[i];\n                  var v = i * 4;\n                  for (var j = 0; j < 4; j++) {\n                    var d = cubeIndex[j];\n                    //inspired by lightgl:\n                    //https://github.com/evanw/lightgl.js\n                    //octants:https://en.wikipedia.org/wiki/Octant_(solid_geometry)\n                    var octant = new _main.default.Vector(\n                      ((d & 1) * 2 - 1) / 2,\n                      ((d & 2) - 1) / 2,\n                      ((d & 4) / 2 - 1) / 2\n                    );\n\n                    this.vertices.push(octant);\n                    this.uvs.push(j & 1, (j & 2) / 2);\n                  }\n                  this.faces.push([v, v + 1, v + 2]);\n                  this.faces.push([v + 2, v + 1, v + 3]);\n                }\n              };\n              var boxGeom = new _main.default.Geometry(detailX, detailY, _box);\n              boxGeom.computeNormals();\n              if (detailX <= 4 && detailY <= 4) {\n                boxGeom._makeTriangleEdges()._edgesToVertices();\n              } else if (this._renderer._doStroke) {\n                console.log(\n                  'Cannot draw stroke on box objects with more' +\n                    ' than 4 detailX or 4 detailY'\n                );\n              }\n              //initialize our geometry buffer with\n              //the key val pair:\n              //geometry Id, Geom object\n              this._renderer.createBuffers(gId, boxGeom);\n            }\n            this._renderer.drawBuffersScaled(gId, width, height, depth);\n\n            return this;\n          };\n\n          /**\n           * Draw a sphere with given radius.\n           *\n           * DetailX and detailY determines the number of subdivisions in the x-dimension\n           * and the y-dimension of a sphere. More subdivisions make the sphere seem\n           * smoother. The recommended maximum values are both 24. Using a value greater\n           * than 24 may cause a warning or slow down the browser.\n           * @method sphere\n           * @param  {Number} [radius]          radius of circle\n           * @param  {Integer} [detailX]        optional number of subdivisions in x-dimension\n           * @param  {Integer} [detailY]        optional number of subdivisions in y-dimension\n           *\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a sphere with radius 40\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(205, 102, 94);\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * let detailX;\n           * // slide to see how detailX works\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailX = createSlider(3, 24, 3);\n           *   detailX.position(10, height + 5);\n           *   detailX.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 105, 94);\n           *   rotateY(millis() / 1000);\n           *   sphere(40, detailX.value(), 16);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * let detailY;\n           * // slide to see how detailY works\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailY = createSlider(3, 16, 3);\n           *   detailY.position(10, height + 5);\n           *   detailY.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 105, 94);\n           *   rotateY(millis() / 1000);\n           *   sphere(40, 16, detailY.value());\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.sphere = function(radius, detailX, detailY) {\n            this._assert3d('sphere');\n            _main.default._validateParameters('sphere', arguments);\n            if (typeof radius === 'undefined') {\n              radius = 50;\n            }\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 16;\n            }\n\n            this.ellipsoid(radius, radius, radius, detailX, detailY);\n\n            return this;\n          };\n\n          /**\n           * @private\n           * Helper function for creating both cones and cylinders\n           * Will only generate well-defined geometry when bottomRadius, height > 0\n           * and topRadius >= 0\n           * If topRadius == 0, topCap should be false\n           */\n          var _truncatedCone = function _truncatedCone(\n            bottomRadius,\n            topRadius,\n            height,\n            detailX,\n            detailY,\n            bottomCap,\n            topCap\n          ) {\n            bottomRadius = bottomRadius <= 0 ? 1 : bottomRadius;\n            topRadius = topRadius < 0 ? 0 : topRadius;\n            height = height <= 0 ? bottomRadius : height;\n            detailX = detailX < 3 ? 3 : detailX;\n            detailY = detailY < 1 ? 1 : detailY;\n            bottomCap = bottomCap === undefined ? true : bottomCap;\n            topCap = topCap === undefined ? topRadius !== 0 : topCap;\n            var start = bottomCap ? -2 : 0;\n            var end = detailY + (topCap ? 2 : 0);\n            //ensure constant slant for interior vertex normals\n            var slant = Math.atan2(bottomRadius - topRadius, height);\n            var sinSlant = Math.sin(slant);\n            var cosSlant = Math.cos(slant);\n            var yy, ii, jj;\n            for (yy = start; yy <= end; ++yy) {\n              var v = yy / detailY;\n              var y = height * v;\n              var ringRadius = void 0;\n              if (yy < 0) {\n                //for the bottomCap edge\n                y = 0;\n                v = 0;\n                ringRadius = bottomRadius;\n              } else if (yy > detailY) {\n                //for the topCap edge\n                y = height;\n                v = 1;\n                ringRadius = topRadius;\n              } else {\n                //for the middle\n                ringRadius = bottomRadius + (topRadius - bottomRadius) * v;\n              }\n              if (yy === -2 || yy === detailY + 2) {\n                //center of bottom or top caps\n                ringRadius = 0;\n              }\n\n              y -= height / 2; //shift coordiate origin to the center of object\n              for (ii = 0; ii < detailX; ++ii) {\n                var u = ii / (detailX - 1);\n                var ur = 2 * Math.PI * u;\n                var sur = Math.sin(ur);\n                var cur = Math.cos(ur);\n\n                //VERTICES\n                this.vertices.push(\n                  new _main.default.Vector(sur * ringRadius, y, cur * ringRadius)\n                );\n\n                //VERTEX NORMALS\n                var vertexNormal = void 0;\n                if (yy < 0) {\n                  vertexNormal = new _main.default.Vector(0, -1, 0);\n                } else if (yy > detailY && topRadius) {\n                  vertexNormal = new _main.default.Vector(0, 1, 0);\n                } else {\n                  vertexNormal = new _main.default.Vector(\n                    sur * cosSlant,\n                    sinSlant,\n                    cur * cosSlant\n                  );\n                }\n                this.vertexNormals.push(vertexNormal);\n                //UVs\n                this.uvs.push(u, v);\n              }\n            }\n\n            var startIndex = 0;\n            if (bottomCap) {\n              for (jj = 0; jj < detailX; ++jj) {\n                var nextjj = (jj + 1) % detailX;\n                this.faces.push([\n                  startIndex + jj,\n                  startIndex + detailX + nextjj,\n                  startIndex + detailX + jj\n                ]);\n              }\n              startIndex += detailX * 2;\n            }\n            for (yy = 0; yy < detailY; ++yy) {\n              for (ii = 0; ii < detailX; ++ii) {\n                var nextii = (ii + 1) % detailX;\n                this.faces.push([\n                  startIndex + ii,\n                  startIndex + nextii,\n                  startIndex + detailX + nextii\n                ]);\n\n                this.faces.push([\n                  startIndex + ii,\n                  startIndex + detailX + nextii,\n                  startIndex + detailX + ii\n                ]);\n              }\n              startIndex += detailX;\n            }\n            if (topCap) {\n              startIndex += detailX;\n              for (ii = 0; ii < detailX; ++ii) {\n                this.faces.push([\n                  startIndex + ii,\n                  startIndex + (ii + 1) % detailX,\n                  startIndex + detailX\n                ]);\n              }\n            }\n          };\n\n          /**\n           * Draw a cylinder with given radius and height\n           *\n           * DetailX and detailY determines the number of subdivisions in the x-dimension\n           * and the y-dimension of a cylinder. More subdivisions make the cylinder seem smoother.\n           * The recommended maximum value for detailX is 24. Using a value greater than 24\n           * may cause a warning or slow down the browser.\n           *\n           * @method cylinder\n           * @param  {Number}  [radius]    radius of the surface\n           * @param  {Number}  [height]    height of the cylinder\n           * @param  {Integer} [detailX]   number of subdivisions in x-dimension;\n           *                               default is 24\n           * @param  {Integer} [detailY]   number of subdivisions in y-dimension;\n           *                               default is 1\n           * @param  {Boolean} [bottomCap] whether to draw the bottom of the cylinder\n           * @param  {Boolean} [topCap]    whether to draw the top of the cylinder\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a spinning cylinder\n           * // with radius 20 and height 50\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(205, 105, 94);\n           *   rotateX(frameCount * 0.01);\n           *   rotateZ(frameCount * 0.01);\n           *   cylinder(20, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * // slide to see how detailX works\n           * let detailX;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailX = createSlider(3, 24, 3);\n           *   detailX.position(10, height + 5);\n           *   detailX.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 105, 94);\n           *   rotateY(millis() / 1000);\n           *   cylinder(20, 75, detailX.value(), 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * // slide to see how detailY works\n           * let detailY;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailY = createSlider(1, 16, 1);\n           *   detailY.position(10, height + 5);\n           *   detailY.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 105, 94);\n           *   rotateY(millis() / 1000);\n           *   cylinder(20, 75, 16, detailY.value());\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.cylinder = function(\n            radius,\n            height,\n            detailX,\n            detailY,\n            bottomCap,\n            topCap\n          ) {\n            this._assert3d('cylinder');\n            _main.default._validateParameters('cylinder', arguments);\n            if (typeof radius === 'undefined') {\n              radius = 50;\n            }\n            if (typeof height === 'undefined') {\n              height = radius;\n            }\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 1;\n            }\n            if (typeof topCap === 'undefined') {\n              topCap = true;\n            }\n            if (typeof bottomCap === 'undefined') {\n              bottomCap = true;\n            }\n\n            var gId = 'cylinder|'\n              .concat(detailX, '|')\n              .concat(detailY, '|')\n              .concat(bottomCap, '|')\n              .concat(topCap);\n            if (!this._renderer.geometryInHash(gId)) {\n              var cylinderGeom = new _main.default.Geometry(detailX, detailY);\n              _truncatedCone.call(\n                cylinderGeom,\n                1,\n                1,\n                1,\n                detailX,\n                detailY,\n                bottomCap,\n                topCap\n              );\n\n              // normals are computed in call to _truncatedCone\n              if (detailX <= 24 && detailY <= 16) {\n                cylinderGeom._makeTriangleEdges()._edgesToVertices();\n              } else if (this._renderer._doStroke) {\n                console.log(\n                  'Cannot draw stroke on cylinder objects with more' +\n                    ' than 24 detailX or 16 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, cylinderGeom);\n            }\n\n            this._renderer.drawBuffersScaled(gId, radius, height, radius);\n\n            return this;\n          };\n\n          /**\n           * Draw a cone with given radius and height\n           *\n           * DetailX and detailY determine the number of subdivisions in the x-dimension and\n           * the y-dimension of a cone. More subdivisions make the cone seem smoother. The\n           * recommended maximum value for detailX is 24. Using a value greater than 24\n           * may cause a warning or slow down the browser.\n           * @method cone\n           * @param  {Number}  [radius]  radius of the bottom surface\n           * @param  {Number}  [height]  height of the cone\n           * @param  {Integer} [detailX] number of segments,\n           *                             the more segments the smoother geometry\n           *                             default is 24\n           * @param  {Integer} [detailY] number of segments,\n           *                             the more segments the smoother geometry\n           *                             default is 1\n           * @param  {Boolean} [cap]     whether to draw the base of the cone\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a spinning cone\n           * // with radius 40 and height 70\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateZ(frameCount * 0.01);\n           *   cone(40, 70);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * // slide to see how detailx works\n           * let detailX;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailX = createSlider(3, 16, 3);\n           *   detailX.position(10, height + 5);\n           *   detailX.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 102, 94);\n           *   rotateY(millis() / 1000);\n           *   cone(30, 65, detailX.value(), 16);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * // slide to see how detailY works\n           * let detailY;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailY = createSlider(3, 16, 3);\n           *   detailY.position(10, height + 5);\n           *   detailY.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 102, 94);\n           *   rotateY(millis() / 1000);\n           *   cone(30, 65, 16, detailY.value());\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.cone = function(radius, height, detailX, detailY, cap) {\n            this._assert3d('cone');\n            _main.default._validateParameters('cone', arguments);\n            if (typeof radius === 'undefined') {\n              radius = 50;\n            }\n            if (typeof height === 'undefined') {\n              height = radius;\n            }\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 1;\n            }\n            if (typeof cap === 'undefined') {\n              cap = true;\n            }\n\n            var gId = 'cone|'\n              .concat(detailX, '|')\n              .concat(detailY, '|')\n              .concat(cap);\n            if (!this._renderer.geometryInHash(gId)) {\n              var coneGeom = new _main.default.Geometry(detailX, detailY);\n              _truncatedCone.call(coneGeom, 1, 0, 1, detailX, detailY, cap, false);\n              if (detailX <= 24 && detailY <= 16) {\n                coneGeom._makeTriangleEdges()._edgesToVertices();\n              } else if (this._renderer._doStroke) {\n                console.log(\n                  'Cannot draw stroke on cone objects with more' +\n                    ' than 24 detailX or 16 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, coneGeom);\n            }\n\n            this._renderer.drawBuffersScaled(gId, radius, height, radius);\n\n            return this;\n          };\n\n          /**\n           * Draw an ellipsoid with given radius\n           *\n           * DetailX and detailY determine the number of subdivisions in the x-dimension and\n           * the y-dimension of a cone. More subdivisions make the ellipsoid appear to be smoother.\n           * Avoid detail number above 150, it may crash the browser.\n           * @method ellipsoid\n           * @param  {Number} [radiusx]         x-radius of ellipsoid\n           * @param  {Number} [radiusy]         y-radius of ellipsoid\n           * @param  {Number} [radiusz]         z-radius of ellipsoid\n           * @param  {Integer} [detailX]        number of segments,\n           *                                    the more segments the smoother geometry\n           *                                    default is 24. Avoid detail number above\n           *                                    150, it may crash the browser.\n           * @param  {Integer} [detailY]        number of segments,\n           *                                    the more segments the smoother geometry\n           *                                    default is 16. Avoid detail number above\n           *                                    150, it may crash the browser.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw an ellipsoid\n           * // with radius 30, 40 and 40.\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(205, 105, 94);\n           *   ellipsoid(30, 40, 40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * // slide to see how detailX works\n           * let detailX;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailX = createSlider(2, 24, 12);\n           *   detailX.position(10, height + 5);\n           *   detailX.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 105, 94);\n           *   rotateY(millis() / 1000);\n           *   ellipsoid(30, 40, 40, detailX.value(), 8);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * // slide to see how detailY works\n           * let detailY;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailY = createSlider(2, 24, 6);\n           *   detailY.position(10, height + 5);\n           *   detailY.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 105, 9);\n           *   rotateY(millis() / 1000);\n           *   ellipsoid(30, 40, 40, 12, detailY.value());\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.ellipsoid = function(\n            radiusX,\n            radiusY,\n            radiusZ,\n            detailX,\n            detailY\n          ) {\n            this._assert3d('ellipsoid');\n            _main.default._validateParameters('ellipsoid', arguments);\n            if (typeof radiusX === 'undefined') {\n              radiusX = 50;\n            }\n            if (typeof radiusY === 'undefined') {\n              radiusY = radiusX;\n            }\n            if (typeof radiusZ === 'undefined') {\n              radiusZ = radiusX;\n            }\n\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 16;\n            }\n\n            var gId = 'ellipsoid|'.concat(detailX, '|').concat(detailY);\n\n            if (!this._renderer.geometryInHash(gId)) {\n              var _ellipsoid = function _ellipsoid() {\n                for (var i = 0; i <= this.detailY; i++) {\n                  var v = i / this.detailY;\n                  var phi = Math.PI * v - Math.PI / 2;\n                  var cosPhi = Math.cos(phi);\n                  var sinPhi = Math.sin(phi);\n\n                  for (var j = 0; j <= this.detailX; j++) {\n                    var u = j / this.detailX;\n                    var theta = 2 * Math.PI * u;\n                    var cosTheta = Math.cos(theta);\n                    var sinTheta = Math.sin(theta);\n                    var p = new _main.default.Vector(\n                      cosPhi * sinTheta,\n                      sinPhi,\n                      cosPhi * cosTheta\n                    );\n                    this.vertices.push(p);\n                    this.vertexNormals.push(p);\n                    this.uvs.push(u, v);\n                  }\n                }\n              };\n              var ellipsoidGeom = new _main.default.Geometry(detailX, detailY, _ellipsoid);\n              ellipsoidGeom.computeFaces();\n              if (detailX <= 24 && detailY <= 24) {\n                ellipsoidGeom._makeTriangleEdges()._edgesToVertices();\n              } else if (this._renderer._doStroke) {\n                console.log(\n                  'Cannot draw stroke on ellipsoids with more' +\n                    ' than 24 detailX or 24 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, ellipsoidGeom);\n            }\n\n            this._renderer.drawBuffersScaled(gId, radiusX, radiusY, radiusZ);\n\n            return this;\n          };\n\n          /**\n           * Draw a torus with given radius and tube radius\n           *\n           * DetailX and detailY determine the number of subdivisions in the x-dimension and\n           * the y-dimension of a torus. More subdivisions make the torus appear to be smoother.\n           * The default and maximum values for detailX and detailY are 24 and 16, respectively.\n           * Setting them to relatively small values like 4 and 6 allows you to create new\n           * shapes other than a torus.\n           * @method torus\n           * @param  {Number} [radius]      radius of the whole ring\n           * @param  {Number} [tubeRadius]  radius of the tube\n           * @param  {Integer} [detailX]    number of segments in x-dimension,\n           *                                the more segments the smoother geometry\n           *                                default is 24\n           * @param  {Integer} [detailY]    number of segments in y-dimension,\n           *                                the more segments the smoother geometry\n           *                                default is 16\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * // draw a spinning torus\n           * // with ring radius 30 and tube radius 15\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(205, 102, 94);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   torus(30, 15);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * // slide to see how detailX works\n           * let detailX;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailX = createSlider(3, 24, 3);\n           *   detailX.position(10, height + 5);\n           *   detailX.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 102, 94);\n           *   rotateY(millis() / 1000);\n           *   torus(30, 15, detailX.value(), 12);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * // slide to see how detailY works\n           * let detailY;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   detailY = createSlider(3, 16, 3);\n           *   detailY.position(10, height + 5);\n           *   detailY.style('width', '80px');\n           * }\n           *\n           * function draw() {\n           *   background(205, 102, 94);\n           *   rotateY(millis() / 1000);\n           *   torus(30, 15, 16, detailY.value());\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.prototype.torus = function(radius, tubeRadius, detailX, detailY) {\n            this._assert3d('torus');\n            _main.default._validateParameters('torus', arguments);\n            if (typeof radius === 'undefined') {\n              radius = 50;\n            } else if (!radius) {\n              return; // nothing to draw\n            }\n\n            if (typeof tubeRadius === 'undefined') {\n              tubeRadius = 10;\n            } else if (!tubeRadius) {\n              return; // nothing to draw\n            }\n\n            if (typeof detailX === 'undefined') {\n              detailX = 24;\n            }\n            if (typeof detailY === 'undefined') {\n              detailY = 16;\n            }\n\n            var tubeRatio = (tubeRadius / radius).toPrecision(4);\n            var gId = 'torus|'\n              .concat(tubeRatio, '|')\n              .concat(detailX, '|')\n              .concat(detailY);\n\n            if (!this._renderer.geometryInHash(gId)) {\n              var _torus = function _torus() {\n                for (var i = 0; i <= this.detailY; i++) {\n                  var v = i / this.detailY;\n                  var phi = 2 * Math.PI * v;\n                  var cosPhi = Math.cos(phi);\n                  var sinPhi = Math.sin(phi);\n                  var r = 1 + tubeRatio * cosPhi;\n\n                  for (var j = 0; j <= this.detailX; j++) {\n                    var u = j / this.detailX;\n                    var theta = 2 * Math.PI * u;\n                    var cosTheta = Math.cos(theta);\n                    var sinTheta = Math.sin(theta);\n\n                    var p = new _main.default.Vector(\n                      r * cosTheta,\n                      r * sinTheta,\n                      tubeRatio * sinPhi\n                    );\n\n                    var n = new _main.default.Vector(\n                      cosPhi * cosTheta,\n                      cosPhi * sinTheta,\n                      sinPhi\n                    );\n\n                    this.vertices.push(p);\n                    this.vertexNormals.push(n);\n                    this.uvs.push(u, v);\n                  }\n                }\n              };\n              var torusGeom = new _main.default.Geometry(detailX, detailY, _torus);\n              torusGeom.computeFaces();\n              if (detailX <= 24 && detailY <= 16) {\n                torusGeom._makeTriangleEdges()._edgesToVertices();\n              } else if (this._renderer._doStroke) {\n                console.log(\n                  'Cannot draw strokes on torus object with more' +\n                    ' than 24 detailX or 16 detailY'\n                );\n              }\n              this._renderer.createBuffers(gId, torusGeom);\n            }\n            this._renderer.drawBuffersScaled(gId, radius, radius, radius);\n\n            return this;\n          };\n\n          ///////////////////////\n          /// 2D primitives\n          /////////////////////////\n\n          /**\n           * Draws a point, a coordinate in space at the dimension of one pixel,\n           * given x, y and z coordinates. The color of the point is determined\n           * by the current stroke, while the point size is determined by current\n           * stroke weight.\n           * @private\n           * @param {Number} x x-coordinate of point\n           * @param {Number} y y-coordinate of point\n           * @param {Number} z z-coordinate of point\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(50);\n           *   stroke(255);\n           *   strokeWeight(4);\n           *   point(25, 0);\n           *   strokeWeight(3);\n           *   point(-25, 0);\n           *   strokeWeight(2);\n           *   point(0, 25);\n           *   strokeWeight(1);\n           *   point(0, -25);\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.RendererGL.prototype.point = function(x, y, z) {\n            if (typeof z === 'undefined') {\n              z = 0;\n            }\n\n            var _vertex = [];\n            _vertex.push(new _main.default.Vector(x, y, z));\n            this._drawPoints(_vertex, this.immediateMode.buffers.point);\n\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.triangle = function(args) {\n            var x1 = args[0],\n              y1 = args[1];\n            var x2 = args[2],\n              y2 = args[3];\n            var x3 = args[4],\n              y3 = args[5];\n\n            var gId = 'tri';\n            if (!this.geometryInHash(gId)) {\n              var _triangle = function _triangle() {\n                var vertices = [];\n                vertices.push(new _main.default.Vector(0, 0, 0));\n                vertices.push(new _main.default.Vector(0, 1, 0));\n                vertices.push(new _main.default.Vector(1, 0, 0));\n                this.strokeIndices = [[0, 1], [1, 2], [2, 0]];\n                this.vertices = vertices;\n                this.faces = [[0, 1, 2]];\n                this.uvs = [0, 0, 0, 1, 1, 1];\n              };\n              var triGeom = new _main.default.Geometry(1, 1, _triangle);\n              triGeom._makeTriangleEdges()._edgesToVertices();\n              triGeom.computeNormals();\n              this.createBuffers(gId, triGeom);\n            }\n\n            // only one triangle is cached, one point is at the origin, and the\n            // two adjacent sides are tne unit vectors along the X & Y axes.\n            //\n            // this matrix multiplication transforms those two unit vectors\n            // onto the required vector prior to rendering, and moves the\n            // origin appropriately.\n            var uMVMatrix = this.uMVMatrix.copy();\n            try {\n              // prettier-ignore\n              var mult = new _main.default.Matrix([\n    x2 - x1, y2 - y1, 0, 0, // the resulting unit X-axis\n    x3 - x1, y3 - y1, 0, 0, // the resulting unit Y-axis\n    0, 0, 1, 0, // the resulting unit Z-axis (unchanged)\n    x1, y1, 0, 1 // the resulting origin\n    ]).mult(this.uMVMatrix);\n\n              this.uMVMatrix = mult;\n\n              this.drawBuffers(gId);\n            } finally {\n              this.uMVMatrix = uMVMatrix;\n            }\n\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.ellipse = function(args) {\n            this.arc(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              0,\n              constants.TWO_PI,\n              constants.OPEN,\n              args[4]\n            );\n          };\n\n          _main.default.RendererGL.prototype.arc = function(args) {\n            var x = arguments[0];\n            var y = arguments[1];\n            var width = arguments[2];\n            var height = arguments[3];\n            var start = arguments[4];\n            var stop = arguments[5];\n            var mode = arguments[6];\n            var detail = arguments[7] || 25;\n\n            var shape;\n            var gId;\n\n            // check if it is an ellipse or an arc\n            if (Math.abs(stop - start) >= constants.TWO_PI) {\n              shape = 'ellipse';\n              gId = ''.concat(shape, '|').concat(detail, '|');\n            } else {\n              shape = 'arc';\n              gId = ''\n                .concat(shape, '|')\n                .concat(start, '|')\n                .concat(stop, '|')\n                .concat(mode, '|')\n                .concat(detail, '|');\n            }\n\n            if (!this.geometryInHash(gId)) {\n              var _arc = function _arc() {\n                this.strokeIndices = [];\n\n                // if the start and stop angles are not the same, push vertices to the array\n                if (start.toFixed(10) !== stop.toFixed(10)) {\n                  // if the mode specified is PIE or null, push the mid point of the arc in vertices\n                  if (mode === constants.PIE || typeof mode === 'undefined') {\n                    this.vertices.push(new _main.default.Vector(0.5, 0.5, 0));\n                    this.uvs.push([0.5, 0.5]);\n                  }\n\n                  // vertices for the perimeter of the circle\n                  for (var i = 0; i <= detail; i++) {\n                    var u = i / detail;\n                    var theta = (stop - start) * u + start;\n\n                    var _x = 0.5 + Math.cos(theta) / 2;\n                    var _y = 0.5 + Math.sin(theta) / 2;\n\n                    this.vertices.push(new _main.default.Vector(_x, _y, 0));\n                    this.uvs.push([_x, _y]);\n\n                    if (i < detail - 1) {\n                      this.faces.push([0, i + 1, i + 2]);\n                      this.strokeIndices.push([i + 1, i + 2]);\n                    }\n                  }\n\n                  // check the mode specified in order to push vertices and faces, different for each mode\n                  switch (mode) {\n                    case constants.PIE:\n                      this.faces.push([\n                        0,\n                        this.vertices.length - 2,\n                        this.vertices.length - 1\n                      ]);\n\n                      this.strokeIndices.push([0, 1]);\n                      this.strokeIndices.push([\n                        this.vertices.length - 2,\n                        this.vertices.length - 1\n                      ]);\n\n                      this.strokeIndices.push([0, this.vertices.length - 1]);\n                      break;\n\n                    case constants.CHORD:\n                      this.strokeIndices.push([0, 1]);\n                      this.strokeIndices.push([0, this.vertices.length - 1]);\n                      break;\n\n                    case constants.OPEN:\n                      this.strokeIndices.push([0, 1]);\n                      break;\n\n                    default:\n                      this.faces.push([\n                        0,\n                        this.vertices.length - 2,\n                        this.vertices.length - 1\n                      ]);\n\n                      this.strokeIndices.push([\n                        this.vertices.length - 2,\n                        this.vertices.length - 1\n                      ]);\n                  }\n                }\n              };\n\n              var arcGeom = new _main.default.Geometry(detail, 1, _arc);\n              arcGeom.computeNormals();\n\n              if (detail <= 50) {\n                arcGeom._makeTriangleEdges()._edgesToVertices(arcGeom);\n              } else if (this._renderer._doStroke) {\n                console.log('Cannot stroke ${shape} with more than 50 detail');\n              }\n\n              this.createBuffers(gId, arcGeom);\n            }\n\n            var uMVMatrix = this.uMVMatrix.copy();\n\n            try {\n              this.uMVMatrix.translate([x, y, 0]);\n              this.uMVMatrix.scale(width, height, 1);\n\n              this.drawBuffers(gId);\n            } finally {\n              this.uMVMatrix = uMVMatrix;\n            }\n\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.rect = function(args) {\n            var perPixelLighting = this._pInst._glAttributes.perPixelLighting;\n            var x = args[0];\n            var y = args[1];\n            var width = args[2];\n            var height = args[3];\n            var detailX = args[4] || (perPixelLighting ? 1 : 24);\n            var detailY = args[5] || (perPixelLighting ? 1 : 16);\n            var gId = 'rect|'.concat(detailX, '|').concat(detailY);\n            if (!this.geometryInHash(gId)) {\n              var _rect = function _rect() {\n                for (var i = 0; i <= this.detailY; i++) {\n                  var v = i / this.detailY;\n                  for (var j = 0; j <= this.detailX; j++) {\n                    var u = j / this.detailX;\n                    var p = new _main.default.Vector(u, v, 0);\n                    this.vertices.push(p);\n                    this.uvs.push(u, v);\n                  }\n                }\n                // using stroke indices to avoid stroke over face(s) of rectangle\n                if (detailX > 0 && detailY > 0) {\n                  this.strokeIndices = [\n                    [0, detailX],\n                    [detailX, (detailX + 1) * (detailY + 1) - 1],\n                    [(detailX + 1) * (detailY + 1) - 1, (detailX + 1) * detailY],\n                    [(detailX + 1) * detailY, 0]\n                  ];\n                }\n              };\n              var rectGeom = new _main.default.Geometry(detailX, detailY, _rect);\n              rectGeom\n                .computeFaces()\n                .computeNormals()\n                ._makeTriangleEdges()\n                ._edgesToVertices();\n              this.createBuffers(gId, rectGeom);\n            }\n\n            // only a single rectangle (of a given detail) is cached: a square with\n            // opposite corners at (0,0) & (1,1).\n            //\n            // before rendering, this square is scaled & moved to the required location.\n            var uMVMatrix = this.uMVMatrix.copy();\n            try {\n              this.uMVMatrix.translate([x, y, 0]);\n              this.uMVMatrix.scale(width, height, 1);\n\n              this.drawBuffers(gId);\n            } finally {\n              this.uMVMatrix = uMVMatrix;\n            }\n            return this;\n          };\n\n          // prettier-ignore\n          _main.default.RendererGL.prototype.quad = function (x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n  var gId = \"quad|\".concat(\n  x1, \"|\").concat(y1, \"|\").concat(z1, \"|\").concat(x2, \"|\").concat(y2, \"|\").concat(z2, \"|\").concat(x3, \"|\").concat(y3, \"|\").concat(z3, \"|\").concat(x4, \"|\").concat(y4, \"|\").concat(z4);\n  if (!this.geometryInHash(gId)) {\n    var _quad = function _quad() {\n      this.vertices.push(new _main.default.Vector(x1, y1, z1));\n      this.vertices.push(new _main.default.Vector(x2, y2, z2));\n      this.vertices.push(new _main.default.Vector(x3, y3, z3));\n      this.vertices.push(new _main.default.Vector(x4, y4, z4));\n      this.uvs.push(0, 0, 1, 0, 1, 1, 0, 1);\n      this.strokeIndices = [[0, 1], [1, 2], [2, 3], [3, 0]];\n    };\n    var quadGeom = new _main.default.Geometry(2, 2, _quad);\n    quadGeom.\n    computeNormals().\n    _makeTriangleEdges().\n    _edgesToVertices();\n    quadGeom.faces = [[0, 1, 2], [2, 3, 0]];\n    this.createBuffers(gId, quadGeom);\n  }\n  this.drawBuffers(gId);\n  return this;\n};\n\n          //this implementation of bezier curve\n          //is based on Bernstein polynomial\n          // pretier-ignore\n          _main.default.RendererGL.prototype.bezier = function(\n            x1,\n            y1,\n            z1, // x2\n            x2, // y2\n            y2, // x3\n            z2, // y3\n            x3, // x4\n            y3, // y4\n            z3,\n            x4,\n            y4,\n            z4\n          ) {\n            if (arguments.length === 8) {\n              y4 = y3;\n              x4 = x3;\n              y3 = z2;\n              x3 = y2;\n              y2 = x2;\n              x2 = z1;\n              z1 = z2 = z3 = z4 = 0;\n            }\n            var bezierDetail = this._pInst._bezierDetail || 20; //value of Bezier detail\n            this.beginShape();\n            for (var i = 0; i <= bezierDetail; i++) {\n              var c1 = Math.pow(1 - i / bezierDetail, 3);\n              var c2 = 3 * (i / bezierDetail) * Math.pow(1 - i / bezierDetail, 2);\n              var c3 = 3 * Math.pow(i / bezierDetail, 2) * (1 - i / bezierDetail);\n              var c4 = Math.pow(i / bezierDetail, 3);\n              this.vertex(\n                x1 * c1 + x2 * c2 + x3 * c3 + x4 * c4,\n                y1 * c1 + y2 * c2 + y3 * c3 + y4 * c4,\n                z1 * c1 + z2 * c2 + z3 * c3 + z4 * c4\n              );\n            }\n            this.endShape();\n            return this;\n          };\n\n          // pretier-ignore\n          _main.default.RendererGL.prototype.curve = function(\n            x1,\n            y1,\n            z1, // x2\n            x2, // y2\n            y2, // x3\n            z2, // y3\n            x3, // x4\n            y3, // y4\n            z3,\n            x4,\n            y4,\n            z4\n          ) {\n            if (arguments.length === 8) {\n              x4 = x3;\n              y4 = y3;\n              x3 = y2;\n              y3 = x2;\n              x2 = z1;\n              y2 = x2;\n              z1 = z2 = z3 = z4 = 0;\n            }\n            var curveDetail = this._pInst._curveDetail;\n            this.beginShape();\n            for (var i = 0; i <= curveDetail; i++) {\n              var c1 = Math.pow(i / curveDetail, 3) * 0.5;\n              var c2 = Math.pow(i / curveDetail, 2) * 0.5;\n              var c3 = i / curveDetail * 0.5;\n              var c4 = 0.5;\n              var vx =\n                c1 * (-x1 + 3 * x2 - 3 * x3 + x4) +\n                c2 * (2 * x1 - 5 * x2 + 4 * x3 - x4) +\n                c3 * (-x1 + x3) +\n                c4 * (2 * x2);\n              var vy =\n                c1 * (-y1 + 3 * y2 - 3 * y3 + y4) +\n                c2 * (2 * y1 - 5 * y2 + 4 * y3 - y4) +\n                c3 * (-y1 + y3) +\n                c4 * (2 * y2);\n              var vz =\n                c1 * (-z1 + 3 * z2 - 3 * z3 + z4) +\n                c2 * (2 * z1 - 5 * z2 + 4 * z3 - z4) +\n                c3 * (-z1 + z3) +\n                c4 * (2 * z2);\n              this.vertex(vx, vy, vz);\n            }\n            this.endShape();\n            return this;\n          };\n\n          /**\n           * Draw a line given two points\n           * @private\n           * @param {Number} x0 x-coordinate of first vertex\n           * @param {Number} y0 y-coordinate of first vertex\n           * @param {Number} z0 z-coordinate of first vertex\n           * @param {Number} x1 x-coordinate of second vertex\n           * @param {Number} y1 y-coordinate of second vertex\n           * @param {Number} z1 z-coordinate of second vertex\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * //draw a line\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   // Use fill instead of stroke to change the color of shape.\n           *   fill(255, 0, 0);\n           *   line(10, 10, 0, 60, 60, 20);\n           * }\n           * </code>\n           * </div>\n           */\n          _main.default.RendererGL.prototype.line = function() {\n            if (arguments.length === 6) {\n              this.beginShape(constants.LINES);\n              this.vertex(\n                arguments.length <= 0 ? undefined : arguments[0],\n                arguments.length <= 1 ? undefined : arguments[1],\n                arguments.length <= 2 ? undefined : arguments[2]\n              );\n              this.vertex(\n                arguments.length <= 3 ? undefined : arguments[3],\n                arguments.length <= 4 ? undefined : arguments[4],\n                arguments.length <= 5 ? undefined : arguments[5]\n              );\n              this.endShape();\n            } else if (arguments.length === 4) {\n              this.beginShape(constants.LINES);\n              this.vertex(\n                arguments.length <= 0 ? undefined : arguments[0],\n                arguments.length <= 1 ? undefined : arguments[1],\n                0\n              );\n              this.vertex(\n                arguments.length <= 2 ? undefined : arguments[2],\n                arguments.length <= 3 ? undefined : arguments[3],\n                0\n              );\n              this.endShape();\n            }\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.bezierVertex = function() {\n            if (this.immediateMode._bezierVertex.length === 0) {\n              throw Error('vertex() must be used once before calling bezierVertex()');\n            } else {\n              var w_x = [];\n              var w_y = [];\n              var w_z = [];\n              var t, _x, _y, _z, i;\n              var argLength = arguments.length;\n\n              t = 0;\n\n              if (\n                this._lookUpTableBezier.length === 0 ||\n                this._lutBezierDetail !== this._pInst._curveDetail\n              ) {\n                this._lookUpTableBezier = [];\n                this._lutBezierDetail = this._pInst._curveDetail;\n                var step = 1 / this._lutBezierDetail;\n                var start = 0;\n                var end = 1;\n                var j = 0;\n                while (start < 1) {\n                  t = parseFloat(start.toFixed(6));\n                  this._lookUpTableBezier[j] = this._bezierCoefficients(t);\n                  if (end.toFixed(6) === step.toFixed(6)) {\n                    t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));\n                    ++j;\n                    this._lookUpTableBezier[j] = this._bezierCoefficients(t);\n                    break;\n                  }\n                  start += step;\n                  end -= step;\n                  ++j;\n                }\n              }\n\n              var LUTLength = this._lookUpTableBezier.length;\n\n              if (argLength === 6) {\n                this.isBezier = true;\n\n                w_x = [\n                  this.immediateMode._bezierVertex[0],\n                  arguments.length <= 0 ? undefined : arguments[0],\n                  arguments.length <= 2 ? undefined : arguments[2],\n                  arguments.length <= 4 ? undefined : arguments[4]\n                ];\n                w_y = [\n                  this.immediateMode._bezierVertex[1],\n                  arguments.length <= 1 ? undefined : arguments[1],\n                  arguments.length <= 3 ? undefined : arguments[3],\n                  arguments.length <= 5 ? undefined : arguments[5]\n                ];\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableBezier[i][0] +\n                    w_x[1] * this._lookUpTableBezier[i][1] +\n                    w_x[2] * this._lookUpTableBezier[i][2] +\n                    w_x[3] * this._lookUpTableBezier[i][3];\n                  _y =\n                    w_y[0] * this._lookUpTableBezier[i][0] +\n                    w_y[1] * this._lookUpTableBezier[i][1] +\n                    w_y[2] * this._lookUpTableBezier[i][2] +\n                    w_y[3] * this._lookUpTableBezier[i][3];\n                  this.vertex(_x, _y);\n                }\n                this.immediateMode._bezierVertex[0] =\n                  arguments.length <= 4 ? undefined : arguments[4];\n                this.immediateMode._bezierVertex[1] =\n                  arguments.length <= 5 ? undefined : arguments[5];\n              } else if (argLength === 9) {\n                this.isBezier = true;\n\n                w_x = [\n                  this.immediateMode._bezierVertex[0],\n                  arguments.length <= 0 ? undefined : arguments[0],\n                  arguments.length <= 3 ? undefined : arguments[3],\n                  arguments.length <= 6 ? undefined : arguments[6]\n                ];\n                w_y = [\n                  this.immediateMode._bezierVertex[1],\n                  arguments.length <= 1 ? undefined : arguments[1],\n                  arguments.length <= 4 ? undefined : arguments[4],\n                  arguments.length <= 7 ? undefined : arguments[7]\n                ];\n                w_z = [\n                  this.immediateMode._bezierVertex[2],\n                  arguments.length <= 2 ? undefined : arguments[2],\n                  arguments.length <= 5 ? undefined : arguments[5],\n                  arguments.length <= 8 ? undefined : arguments[8]\n                ];\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableBezier[i][0] +\n                    w_x[1] * this._lookUpTableBezier[i][1] +\n                    w_x[2] * this._lookUpTableBezier[i][2] +\n                    w_x[3] * this._lookUpTableBezier[i][3];\n                  _y =\n                    w_y[0] * this._lookUpTableBezier[i][0] +\n                    w_y[1] * this._lookUpTableBezier[i][1] +\n                    w_y[2] * this._lookUpTableBezier[i][2] +\n                    w_y[3] * this._lookUpTableBezier[i][3];\n                  _z =\n                    w_z[0] * this._lookUpTableBezier[i][0] +\n                    w_z[1] * this._lookUpTableBezier[i][1] +\n                    w_z[2] * this._lookUpTableBezier[i][2] +\n                    w_z[3] * this._lookUpTableBezier[i][3];\n                  this.vertex(_x, _y, _z);\n                }\n                this.immediateMode._bezierVertex[0] =\n                  arguments.length <= 6 ? undefined : arguments[6];\n                this.immediateMode._bezierVertex[1] =\n                  arguments.length <= 7 ? undefined : arguments[7];\n                this.immediateMode._bezierVertex[2] =\n                  arguments.length <= 8 ? undefined : arguments[8];\n              }\n            }\n          };\n\n          _main.default.RendererGL.prototype.quadraticVertex = function() {\n            if (this.immediateMode._quadraticVertex.length === 0) {\n              throw Error('vertex() must be used once before calling quadraticVertex()');\n            } else {\n              var w_x = [];\n              var w_y = [];\n              var w_z = [];\n              var t, _x, _y, _z, i;\n              var argLength = arguments.length;\n\n              t = 0;\n\n              if (\n                this._lookUpTableQuadratic.length === 0 ||\n                this._lutQuadraticDetail !== this._pInst._curveDetail\n              ) {\n                this._lookUpTableQuadratic = [];\n                this._lutQuadraticDetail = this._pInst._curveDetail;\n                var step = 1 / this._lutQuadraticDetail;\n                var start = 0;\n                var end = 1;\n                var j = 0;\n                while (start < 1) {\n                  t = parseFloat(start.toFixed(6));\n                  this._lookUpTableQuadratic[j] = this._quadraticCoefficients(t);\n                  if (end.toFixed(6) === step.toFixed(6)) {\n                    t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));\n                    ++j;\n                    this._lookUpTableQuadratic[j] = this._quadraticCoefficients(t);\n                    break;\n                  }\n                  start += step;\n                  end -= step;\n                  ++j;\n                }\n              }\n\n              var LUTLength = this._lookUpTableQuadratic.length;\n\n              if (argLength === 4) {\n                this.isQuadratic = true;\n\n                w_x = [\n                  this.immediateMode._quadraticVertex[0],\n                  arguments.length <= 0 ? undefined : arguments[0],\n                  arguments.length <= 2 ? undefined : arguments[2]\n                ];\n                w_y = [\n                  this.immediateMode._quadraticVertex[1],\n                  arguments.length <= 1 ? undefined : arguments[1],\n                  arguments.length <= 3 ? undefined : arguments[3]\n                ];\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableQuadratic[i][0] +\n                    w_x[1] * this._lookUpTableQuadratic[i][1] +\n                    w_x[2] * this._lookUpTableQuadratic[i][2];\n                  _y =\n                    w_y[0] * this._lookUpTableQuadratic[i][0] +\n                    w_y[1] * this._lookUpTableQuadratic[i][1] +\n                    w_y[2] * this._lookUpTableQuadratic[i][2];\n                  this.vertex(_x, _y);\n                }\n\n                this.immediateMode._quadraticVertex[0] =\n                  arguments.length <= 2 ? undefined : arguments[2];\n                this.immediateMode._quadraticVertex[1] =\n                  arguments.length <= 3 ? undefined : arguments[3];\n              } else if (argLength === 6) {\n                this.isQuadratic = true;\n\n                w_x = [\n                  this.immediateMode._quadraticVertex[0],\n                  arguments.length <= 0 ? undefined : arguments[0],\n                  arguments.length <= 3 ? undefined : arguments[3]\n                ];\n                w_y = [\n                  this.immediateMode._quadraticVertex[1],\n                  arguments.length <= 1 ? undefined : arguments[1],\n                  arguments.length <= 4 ? undefined : arguments[4]\n                ];\n                w_z = [\n                  this.immediateMode._quadraticVertex[2],\n                  arguments.length <= 2 ? undefined : arguments[2],\n                  arguments.length <= 5 ? undefined : arguments[5]\n                ];\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableQuadratic[i][0] +\n                    w_x[1] * this._lookUpTableQuadratic[i][1] +\n                    w_x[2] * this._lookUpTableQuadratic[i][2];\n                  _y =\n                    w_y[0] * this._lookUpTableQuadratic[i][0] +\n                    w_y[1] * this._lookUpTableQuadratic[i][1] +\n                    w_y[2] * this._lookUpTableQuadratic[i][2];\n                  _z =\n                    w_z[0] * this._lookUpTableQuadratic[i][0] +\n                    w_z[1] * this._lookUpTableQuadratic[i][1] +\n                    w_z[2] * this._lookUpTableQuadratic[i][2];\n                  this.vertex(_x, _y, _z);\n                }\n\n                this.immediateMode._quadraticVertex[0] =\n                  arguments.length <= 3 ? undefined : arguments[3];\n                this.immediateMode._quadraticVertex[1] =\n                  arguments.length <= 4 ? undefined : arguments[4];\n                this.immediateMode._quadraticVertex[2] =\n                  arguments.length <= 5 ? undefined : arguments[5];\n              }\n            }\n          };\n\n          _main.default.RendererGL.prototype.curveVertex = function() {\n            var w_x = [];\n            var w_y = [];\n            var w_z = [];\n            var t, _x, _y, _z, i;\n            t = 0;\n            var argLength = arguments.length;\n\n            if (\n              this._lookUpTableBezier.length === 0 ||\n              this._lutBezierDetail !== this._pInst._curveDetail\n            ) {\n              this._lookUpTableBezier = [];\n              this._lutBezierDetail = this._pInst._curveDetail;\n              var step = 1 / this._lutBezierDetail;\n              var start = 0;\n              var end = 1;\n              var j = 0;\n              while (start < 1) {\n                t = parseFloat(start.toFixed(6));\n                this._lookUpTableBezier[j] = this._bezierCoefficients(t);\n                if (end.toFixed(6) === step.toFixed(6)) {\n                  t = parseFloat(end.toFixed(6)) + parseFloat(start.toFixed(6));\n                  ++j;\n                  this._lookUpTableBezier[j] = this._bezierCoefficients(t);\n                  break;\n                }\n                start += step;\n                end -= step;\n                ++j;\n              }\n            }\n\n            var LUTLength = this._lookUpTableBezier.length;\n\n            if (argLength === 2) {\n              this.immediateMode._curveVertex.push(\n                arguments.length <= 0 ? undefined : arguments[0]\n              );\n              this.immediateMode._curveVertex.push(\n                arguments.length <= 1 ? undefined : arguments[1]\n              );\n              if (this.immediateMode._curveVertex.length === 8) {\n                this.isCurve = true;\n                w_x = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[0],\n                  this.immediateMode._curveVertex[2],\n                  this.immediateMode._curveVertex[4],\n                  this.immediateMode._curveVertex[6]\n                ]);\n\n                w_y = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[1],\n                  this.immediateMode._curveVertex[3],\n                  this.immediateMode._curveVertex[5],\n                  this.immediateMode._curveVertex[7]\n                ]);\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableBezier[i][0] +\n                    w_x[1] * this._lookUpTableBezier[i][1] +\n                    w_x[2] * this._lookUpTableBezier[i][2] +\n                    w_x[3] * this._lookUpTableBezier[i][3];\n                  _y =\n                    w_y[0] * this._lookUpTableBezier[i][0] +\n                    w_y[1] * this._lookUpTableBezier[i][1] +\n                    w_y[2] * this._lookUpTableBezier[i][2] +\n                    w_y[3] * this._lookUpTableBezier[i][3];\n                  this.vertex(_x, _y);\n                }\n                for (i = 0; i < argLength; i++) {\n                  this.immediateMode._curveVertex.shift();\n                }\n              }\n            } else if (argLength === 3) {\n              this.immediateMode._curveVertex.push(\n                arguments.length <= 0 ? undefined : arguments[0]\n              );\n              this.immediateMode._curveVertex.push(\n                arguments.length <= 1 ? undefined : arguments[1]\n              );\n              this.immediateMode._curveVertex.push(\n                arguments.length <= 2 ? undefined : arguments[2]\n              );\n              if (this.immediateMode._curveVertex.length === 12) {\n                this.isCurve = true;\n                w_x = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[0],\n                  this.immediateMode._curveVertex[3],\n                  this.immediateMode._curveVertex[6],\n                  this.immediateMode._curveVertex[9]\n                ]);\n\n                w_y = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[1],\n                  this.immediateMode._curveVertex[4],\n                  this.immediateMode._curveVertex[7],\n                  this.immediateMode._curveVertex[10]\n                ]);\n\n                w_z = this._bezierToCatmull([\n                  this.immediateMode._curveVertex[2],\n                  this.immediateMode._curveVertex[5],\n                  this.immediateMode._curveVertex[8],\n                  this.immediateMode._curveVertex[11]\n                ]);\n\n                for (i = 0; i < LUTLength; i++) {\n                  _x =\n                    w_x[0] * this._lookUpTableBezier[i][0] +\n                    w_x[1] * this._lookUpTableBezier[i][1] +\n                    w_x[2] * this._lookUpTableBezier[i][2] +\n                    w_x[3] * this._lookUpTableBezier[i][3];\n                  _y =\n                    w_y[0] * this._lookUpTableBezier[i][0] +\n                    w_y[1] * this._lookUpTableBezier[i][1] +\n                    w_y[2] * this._lookUpTableBezier[i][2] +\n                    w_y[3] * this._lookUpTableBezier[i][3];\n                  _z =\n                    w_z[0] * this._lookUpTableBezier[i][0] +\n                    w_z[1] * this._lookUpTableBezier[i][1] +\n                    w_z[2] * this._lookUpTableBezier[i][2] +\n                    w_z[3] * this._lookUpTableBezier[i][3];\n                  this.vertex(_x, _y, _z);\n                }\n                for (i = 0; i < argLength; i++) {\n                  this.immediateMode._curveVertex.shift();\n                }\n              }\n            }\n          };\n\n          _main.default.RendererGL.prototype.image = function(\n            img,\n            sx,\n            sy,\n            sWidth,\n            sHeight,\n            dx,\n            dy,\n            dWidth,\n            dHeight\n          ) {\n            if (this._isErasing) {\n              this.blendMode(this._cachedBlendMode);\n            }\n\n            this._pInst.push();\n\n            this._pInst.noLights();\n\n            this._pInst.texture(img);\n            this._pInst.textureMode(constants.NORMAL);\n\n            var u0 = 0;\n            if (sx <= img.width) {\n              u0 = sx / img.width;\n            }\n\n            var u1 = 1;\n            if (sx + sWidth <= img.width) {\n              u1 = (sx + sWidth) / img.width;\n            }\n\n            var v0 = 0;\n            if (sy <= img.height) {\n              v0 = sy / img.height;\n            }\n\n            var v1 = 1;\n            if (sy + sHeight <= img.height) {\n              v1 = (sy + sHeight) / img.height;\n            }\n\n            this.beginShape();\n            this.vertex(dx, dy, 0, u0, v0);\n            this.vertex(dx + dWidth, dy, 0, u1, v0);\n            this.vertex(dx + dWidth, dy + dHeight, 0, u1, v1);\n            this.vertex(dx, dy + dHeight, 0, u0, v1);\n            this.endShape(constants.CLOSE);\n\n            this._pInst.pop();\n\n            if (this._isErasing) {\n              this.blendMode(constants.REMOVE);\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59, './p5.Geometry': 108 }\n      ],\n      103: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** // implementation based on three.js 'orbitControls':\n           * @module Lights, Camera\n           * @submodule Interaction\n           * @for p5\n           * @requires core\n           */ /**\n           * Allows movement around a 3D sketch using a mouse or trackpad.  Left-clicking\n           * and dragging will rotate the camera position about the center of the sketch,\n           * right-clicking and dragging will pan the camera position without rotation,\n           * and using the mouse wheel (scrolling) will move the camera closer or further\n           * from the center of the sketch. This function can be called with parameters\n           * dictating sensitivity to mouse movement along the X and Y axes.  Calling\n           * this function without parameters is equivalent to calling orbitControl(1,1).\n           * To reverse direction of movement in either axis, enter a negative number\n           * for sensitivity.\n           * @method orbitControl\n           * @for p5\n           * @param  {Number} [sensitivityX] sensitivity to mouse movement along X axis\n           * @param  {Number} [sensitivityY] sensitivity to mouse movement along Y axis\n           * @param  {Number} [sensitivityZ] sensitivity to scroll movement along Z axis\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           * }\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   rotateY(0.5);\n           *   box(30, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Camera orbits around a box when mouse is hold-clicked & then moved.\n           */\n          // https://github.com/mrdoob/three.js/blob/dev/examples/js/controls/OrbitControls.js\n          _main.default.prototype.orbitControl = function(\n            sensitivityX,\n            sensitivityY,\n            sensitivityZ\n          ) {\n            this._assert3d('orbitControl');\n            _main.default._validateParameters('orbitControl', arguments);\n\n            // If the mouse is not in bounds of the canvas, disable all behaviors:\n            var mouseInCanvas =\n              this.mouseX < this.width &&\n              this.mouseX > 0 &&\n              this.mouseY < this.height &&\n              this.mouseY > 0;\n            if (!mouseInCanvas) return;\n\n            var cam = this._renderer._curCamera;\n\n            if (typeof sensitivityX === 'undefined') {\n              sensitivityX = 1;\n            }\n            if (typeof sensitivityY === 'undefined') {\n              sensitivityY = sensitivityX;\n            }\n            if (typeof sensitivityZ === 'undefined') {\n              sensitivityZ = 0.5;\n            }\n\n            // default right-mouse and mouse-wheel behaviors (context menu and scrolling,\n            // respectively) are disabled here to allow use of those events for panning and\n            // zooming\n\n            // disable context menu for canvas element and add 'contextMenuDisabled'\n            // flag to p5 instance\n            if (this.contextMenuDisabled !== true) {\n              this.canvas.oncontextmenu = function() {\n                return false;\n              };\n              this._setProperty('contextMenuDisabled', true);\n            }\n\n            // disable default scrolling behavior on the canvas element and add\n            // 'wheelDefaultDisabled' flag to p5 instance\n            if (this.wheelDefaultDisabled !== true) {\n              this.canvas.onwheel = function() {\n                return false;\n              };\n              this._setProperty('wheelDefaultDisabled', true);\n            }\n\n            var scaleFactor = this.height < this.width ? this.height : this.width;\n\n            // ZOOM if there is a change in mouseWheelDelta\n            if (this._mouseWheelDeltaY !== this._pmouseWheelDeltaY) {\n              // zoom according to direction of mouseWheelDeltaY rather than value\n              if (this._mouseWheelDeltaY > 0) {\n                this._renderer._curCamera._orbit(0, 0, sensitivityZ * scaleFactor);\n              } else {\n                this._renderer._curCamera._orbit(0, 0, -sensitivityZ * scaleFactor);\n              }\n            }\n\n            if (this.mouseIsPressed) {\n              // ORBIT BEHAVIOR\n              if (this.mouseButton === this.LEFT) {\n                var deltaTheta = -sensitivityX * (this.mouseX - this.pmouseX) / scaleFactor;\n                var deltaPhi = sensitivityY * (this.mouseY - this.pmouseY) / scaleFactor;\n                this._renderer._curCamera._orbit(deltaTheta, deltaPhi, 0);\n              } else if (this.mouseButton === this.RIGHT) {\n                // PANNING BEHAVIOR along X/Z camera axes and restricted to X/Z plane\n                // in world space\n                var local = cam._getLocalAxes();\n\n                // normalize portions along X/Z axes\n                var xmag = Math.sqrt(local.x[0] * local.x[0] + local.x[2] * local.x[2]);\n                if (xmag !== 0) {\n                  local.x[0] /= xmag;\n                  local.x[2] /= xmag;\n                }\n\n                // normalize portions along X/Z axes\n                var ymag = Math.sqrt(local.y[0] * local.y[0] + local.y[2] * local.y[2]);\n                if (ymag !== 0) {\n                  local.y[0] /= ymag;\n                  local.y[2] /= ymag;\n                }\n\n                // move along those vectors by amount controlled by mouseX, pmouseY\n                var dx = -1 * sensitivityX * (this.mouseX - this.pmouseX);\n                var dz = -1 * sensitivityY * (this.mouseY - this.pmouseY);\n\n                // restrict movement to XZ plane in world space\n                cam.setPosition(\n                  cam.eyeX + dx * local.x[0] + dz * local.z[0],\n                  cam.eyeY,\n                  cam.eyeZ + dx * local.x[2] + dz * local.z[2]\n                );\n              }\n            }\n            return this;\n          };\n\n          /**\n           * debugMode() helps visualize 3D space by adding a grid to indicate where the\n           * ‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\n           * directions. This function can be called without parameters to create a\n           * default grid and axes icon, or it can be called according to the examples\n           * above to customize the size and position of the grid and/or axes icon.  The\n           * grid is drawn using the most recently set stroke color and weight.  To\n           * specify these parameters, add a call to stroke() and strokeWeight()\n           * just before the end of the draw() loop.\n           *\n           * By default, the grid will run through the origin (0,0,0) of the sketch\n           * along the XZ plane\n           * and the axes icon will be offset from the origin.  Both the grid and axes\n           * icon will be sized according to the current canvas size.  Note that because the\n           * grid runs parallel to the default camera view, it is often helpful to use\n           * debugMode along with orbitControl to allow full view of the grid.\n           * @method debugMode\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           *   // Press the spacebar to turn debugMode off!\n           *   if (keyIsDown(32)) {\n           *     noDebugMode();\n           *   }\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch. an icon\n           * indicates the direction of each axis: a red line points +X,\n           * a green line +Y, and a blue line +Z. the grid and icon disappear when the\n           * spacebar is pressed.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode(GRID);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode(AXES);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered in a 3D sketch. an icon\n           * indicates the direction of each axis: a red line points +X,\n           * a green line +Y, and a blue line +Z.\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode(GRID, 100, 10, 0, 0, 0);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode(100, 10, 0, 0, 0, 20, 0, -40, 0);\n           * }\n           *\n           * function draw() {\n           *   noStroke();\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           *   // set the stroke color and weight for the grid!\n           *   stroke(255, 0, 150);\n           *   strokeWeight(0.8);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch. an icon\n           * indicates the direction of each axis: a red line points +X,\n           * a green line +Y, and a blue line +Z.\n           */\n\n          /**\n           * @method debugMode\n           * @param {Constant} mode either GRID or AXES\n           */\n\n          /**\n           * @method debugMode\n           * @param {Constant} mode\n           * @param {Number} [gridSize] size of one side of the grid\n           * @param {Number} [gridDivisions] number of divisions in the grid\n           * @param {Number} [xOff] X axis offset from origin (0,0,0)\n           * @param {Number} [yOff] Y axis offset from origin (0,0,0)\n           * @param {Number} [zOff] Z axis offset from origin (0,0,0)\n           */\n\n          /**\n           * @method debugMode\n           * @param {Constant} mode\n           * @param {Number} [axesSize] size of axes icon\n           * @param {Number} [xOff]\n           * @param {Number} [yOff]\n           * @param {Number} [zOff]\n           */\n\n          /**\n           * @method debugMode\n           * @param {Number} [gridSize]\n           * @param {Number} [gridDivisions]\n           * @param {Number} [gridXOff]\n           * @param {Number} [gridYOff]\n           * @param {Number} [gridZOff]\n           * @param {Number} [axesSize]\n           * @param {Number} [axesXOff]\n           * @param {Number} [axesYOff]\n           * @param {Number} [axesZOff]\n           */\n\n          _main.default.prototype.debugMode = function() {\n            this._assert3d('debugMode');\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('debugMode', args);\n\n            // start by removing existing 'post' registered debug methods\n            for (var i = this._registeredMethods.post.length - 1; i >= 0; i--) {\n              // test for equality...\n              if (\n                this._registeredMethods.post[i].toString() === this._grid().toString() ||\n                this._registeredMethods.post[i].toString() === this._axesIcon().toString()\n              ) {\n                this._registeredMethods.post.splice(i, 1);\n              }\n            }\n\n            // then add new debugMode functions according to the argument list\n            if (args[0] === constants.GRID) {\n              this.registerMethod(\n                'post',\n                this._grid.call(this, args[1], args[2], args[3], args[4], args[5])\n              );\n            } else if (args[0] === constants.AXES) {\n              this.registerMethod(\n                'post',\n                this._axesIcon.call(this, args[1], args[2], args[3], args[4])\n              );\n            } else {\n              this.registerMethod(\n                'post',\n                this._grid.call(this, args[0], args[1], args[2], args[3], args[4])\n              );\n\n              this.registerMethod(\n                'post',\n                this._axesIcon.call(this, args[5], args[6], args[7], args[8])\n              );\n            }\n          };\n\n          /**\n           * Turns off debugMode() in a 3D sketch.\n           * @method noDebugMode\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n           *   normalMaterial();\n           *   debugMode();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   box(15, 30);\n           *   // Press the spacebar to turn debugMode off!\n           *   if (keyIsDown(32)) {\n           *     noDebugMode();\n           *   }\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * a 3D box is centered on a grid in a 3D sketch. an icon\n           * indicates the direction of each axis: a red line points +X,\n           * a green line +Y, and a blue line +Z. the grid and icon disappear when the\n           * spacebar is pressed.\n           */\n          _main.default.prototype.noDebugMode = function() {\n            this._assert3d('noDebugMode');\n\n            // start by removing existing 'post' registered debug methods\n            for (var i = this._registeredMethods.post.length - 1; i >= 0; i--) {\n              // test for equality...\n              if (\n                this._registeredMethods.post[i].toString() === this._grid().toString() ||\n                this._registeredMethods.post[i].toString() === this._axesIcon().toString()\n              ) {\n                this._registeredMethods.post.splice(i, 1);\n              }\n            }\n          };\n\n          /**\n           * For use with debugMode\n           * @private\n           * @method _grid\n           * @param {Number} [size] size of grid sides\n           * @param {Number} [div] number of grid divisions\n           * @param {Number} [xOff] offset of grid center from origin in X axis\n           * @param {Number} [yOff] offset of grid center from origin in Y axis\n           * @param {Number} [zOff] offset of grid center from origin in Z axis\n           */\n          _main.default.prototype._grid = function(size, numDivs, xOff, yOff, zOff) {\n            if (typeof size === 'undefined') {\n              size = this.width / 2;\n            }\n            if (typeof numDivs === 'undefined') {\n              // ensure at least 2 divisions\n              numDivs = Math.round(size / 30) < 4 ? 4 : Math.round(size / 30);\n            }\n            if (typeof xOff === 'undefined') {\n              xOff = 0;\n            }\n            if (typeof yOff === 'undefined') {\n              yOff = 0;\n            }\n            if (typeof zOff === 'undefined') {\n              zOff = 0;\n            }\n\n            var spacing = size / numDivs;\n            var halfSize = size / 2;\n\n            return function() {\n              this.push();\n              this.stroke(\n                this._renderer.curStrokeColor[0] * 255,\n                this._renderer.curStrokeColor[1] * 255,\n                this._renderer.curStrokeColor[2] * 255\n              );\n\n              this._renderer.uMVMatrix.set(\n                this._renderer._curCamera.cameraMatrix.mat4[0],\n                this._renderer._curCamera.cameraMatrix.mat4[1],\n                this._renderer._curCamera.cameraMatrix.mat4[2],\n                this._renderer._curCamera.cameraMatrix.mat4[3],\n                this._renderer._curCamera.cameraMatrix.mat4[4],\n                this._renderer._curCamera.cameraMatrix.mat4[5],\n                this._renderer._curCamera.cameraMatrix.mat4[6],\n                this._renderer._curCamera.cameraMatrix.mat4[7],\n                this._renderer._curCamera.cameraMatrix.mat4[8],\n                this._renderer._curCamera.cameraMatrix.mat4[9],\n                this._renderer._curCamera.cameraMatrix.mat4[10],\n                this._renderer._curCamera.cameraMatrix.mat4[11],\n                this._renderer._curCamera.cameraMatrix.mat4[12],\n                this._renderer._curCamera.cameraMatrix.mat4[13],\n                this._renderer._curCamera.cameraMatrix.mat4[14],\n                this._renderer._curCamera.cameraMatrix.mat4[15]\n              );\n\n              // Lines along X axis\n              for (var q = 0; q <= numDivs; q++) {\n                this.beginShape(this.LINES);\n                this.vertex(-halfSize + xOff, yOff, q * spacing - halfSize + zOff);\n                this.vertex(+halfSize + xOff, yOff, q * spacing - halfSize + zOff);\n                this.endShape();\n              }\n\n              // Lines along Z axis\n              for (var i = 0; i <= numDivs; i++) {\n                this.beginShape(this.LINES);\n                this.vertex(i * spacing - halfSize + xOff, yOff, -halfSize + zOff);\n                this.vertex(i * spacing - halfSize + xOff, yOff, +halfSize + zOff);\n                this.endShape();\n              }\n\n              this.pop();\n            };\n          };\n\n          /**\n           * For use with debugMode\n           * @private\n           * @method _axesIcon\n           * @param {Number} [size] size of axes icon lines\n           * @param {Number} [xOff] offset of icon from origin in X axis\n           * @param {Number} [yOff] offset of icon from origin in Y axis\n           * @param {Number} [zOff] offset of icon from origin in Z axis\n           */\n          _main.default.prototype._axesIcon = function(size, xOff, yOff, zOff) {\n            if (typeof size === 'undefined') {\n              size = this.width / 20 > 40 ? this.width / 20 : 40;\n            }\n            if (typeof xOff === 'undefined') {\n              xOff = -this.width / 4;\n            }\n            if (typeof yOff === 'undefined') {\n              yOff = xOff;\n            }\n            if (typeof zOff === 'undefined') {\n              zOff = xOff;\n            }\n\n            return function() {\n              this.push();\n              this._renderer.uMVMatrix.set(\n                this._renderer._curCamera.cameraMatrix.mat4[0],\n                this._renderer._curCamera.cameraMatrix.mat4[1],\n                this._renderer._curCamera.cameraMatrix.mat4[2],\n                this._renderer._curCamera.cameraMatrix.mat4[3],\n                this._renderer._curCamera.cameraMatrix.mat4[4],\n                this._renderer._curCamera.cameraMatrix.mat4[5],\n                this._renderer._curCamera.cameraMatrix.mat4[6],\n                this._renderer._curCamera.cameraMatrix.mat4[7],\n                this._renderer._curCamera.cameraMatrix.mat4[8],\n                this._renderer._curCamera.cameraMatrix.mat4[9],\n                this._renderer._curCamera.cameraMatrix.mat4[10],\n                this._renderer._curCamera.cameraMatrix.mat4[11],\n                this._renderer._curCamera.cameraMatrix.mat4[12],\n                this._renderer._curCamera.cameraMatrix.mat4[13],\n                this._renderer._curCamera.cameraMatrix.mat4[14],\n                this._renderer._curCamera.cameraMatrix.mat4[15]\n              );\n\n              // X axis\n              this.strokeWeight(2);\n              this.stroke(255, 0, 0);\n              this.beginShape(this.LINES);\n              this.vertex(xOff, yOff, zOff);\n              this.vertex(xOff + size, yOff, zOff);\n              this.endShape();\n              // Y axis\n              this.stroke(0, 255, 0);\n              this.beginShape(this.LINES);\n              this.vertex(xOff, yOff, zOff);\n              this.vertex(xOff, yOff + size, zOff);\n              this.endShape();\n              // Z axis\n              this.stroke(0, 0, 255);\n              this.beginShape(this.LINES);\n              this.vertex(xOff, yOff, zOff);\n              this.vertex(xOff, yOff, zOff + size);\n              this.endShape();\n              this.pop();\n            };\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59 }\n      ],\n      104: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /**\n           * @method ambientLight\n           * @param  {String}        value   a color string\n           * @chainable\n           */ /**\n           * @module Lights, Camera\n           * @submodule Lights\n           * @for p5\n           * @requires core\n           */ /**\n           * Creates an ambient light with a color. Ambient light is light that comes from everywhere on the canvas.\n           * It has no particular source.\n           * @method ambientLight\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha] the alpha value\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * createCanvas(100, 100, WEBGL);\n           * ambientLight(0);\n           * ambientMaterial(250);\n           * sphere(40);\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(51);\n           *   ambientLight(100); // white light\n           *   ambientMaterial(255, 102, 94); // magenta material\n           *   box(30);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * evenly distributed light across a sphere\n           * evenly distributed light across a rotating sphere\n           */\n          /**\n           * @method ambientLight\n           * @param  {Number}        gray   a gray value\n           * @param  {Number}        [alpha]\n           * @chainable\n           */\n\n          /**\n           * @method ambientLight\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method ambientLight\n           * @param  {p5.Color}      color   the ambient light color\n           * @chainable\n           */\n          _main.default.prototype.ambientLight = function(v1, v2, v3, a) {\n            this._assert3d('ambientLight');\n            _main.default._validateParameters('ambientLight', arguments);\n            var color = this.color.apply(this, arguments);\n\n            this._renderer.ambientLightColors.push(\n              color._array[0],\n              color._array[1],\n              color._array[2]\n            );\n\n            this._renderer._enableLighting = true;\n\n            return this;\n          };\n\n          /**\n           * Set's the color of the specular highlight when using a specular material and\n           * specular light.\n           *\n           * This method can be combined with specularMaterial() and shininess()\n           * functions to set specular highlights. The default color is white, ie\n           * (255, 255, 255), which is used if this method is not called before\n           * specularMaterial(). If this method is called without specularMaterial(),\n           * There will be no effect.\n           *\n           * Note: specularColor is equivalent to the processing function\n           * <a href=\"https://processing.org/reference/lightSpecular_.html\">lightSpecular</a>.\n           *\n           * @method specularColor\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noStroke();\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   shininess(20);\n           *   ambientLight(50);\n           *   specularColor(255, 0, 0);\n           *   pointLight(255, 0, 0, 0, -50, 50);\n           *   specularColor(0, 255, 0);\n           *   pointLight(0, 255, 0, 0, 50, 50);\n           *   specularMaterial(255);\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * different specular light sources from top and bottom of canvas\n           */\n\n          /**\n           * @method specularColor\n           * @param  {String}        value   a color string\n           * @chainable\n           */\n\n          /**\n           * @method specularColor\n           * @param  {Number}        gray   a gray value\n           * @chainable\n           */\n\n          /**\n           * @method specularColor\n           * @param  {Number[]}      values  an array containing the red,green,blue &\n           *                                 and alpha components of the color\n           * @chainable\n           */\n\n          /**\n           * @method specularColor\n           * @param  {p5.Color}      color   the ambient light color\n           * @chainable\n           */\n          _main.default.prototype.specularColor = function(v1, v2, v3) {\n            this._assert3d('specularColor');\n            _main.default._validateParameters('specularColor', arguments);\n            var color = this.color.apply(this, arguments);\n\n            this._renderer.specularColors = [\n              color._array[0],\n              color._array[1],\n              color._array[2]\n            ];\n\n            return this;\n          };\n\n          /**\n           * Creates a directional light with a color and a direction\n           *\n           * A maximum of 5 directionalLight can be active at one time\n           * @method directionalLight\n           * @param  {Number}    v1       red or hue value (depending on the current\n           * color mode),\n           * @param  {Number}    v2       green or saturation value\n           * @param  {Number}    v3       blue or brightness value\n           * @param  {p5.Vector} position the direction of the light\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   //move your mouse to change light direction\n           *   let dirX = (mouseX / width - 0.5) * 2;\n           *   let dirY = (mouseY / height - 0.5) * 2;\n           *   directionalLight(250, 250, 250, -dirX, -dirY, -1);\n           *   noStroke();\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * light source on canvas changeable with mouse position\n           */\n\n          /**\n           * @method directionalLight\n           * @param  {Number[]|String|p5.Color} color   color Array, CSS color string,\n           *                                             or <a href=\"#/p5.Color\">p5.Color</a> value\n           * @param  {Number}                   x       x axis direction\n           * @param  {Number}                   y       y axis direction\n           * @param  {Number}                   z       z axis direction\n           * @chainable\n           */\n\n          /**\n           * @method directionalLight\n           * @param  {Number[]|String|p5.Color} color\n           * @param  {p5.Vector}                position\n           * @chainable\n           */\n\n          /**\n           * @method directionalLight\n           * @param  {Number}    v1\n           * @param  {Number}    v2\n           * @param  {Number}    v3\n           * @param  {Number}    x\n           * @param  {Number}    y\n           * @param  {Number}    z\n           * @chainable\n           */\n          _main.default.prototype.directionalLight = function(v1, v2, v3, x, y, z) {\n            this._assert3d('directionalLight');\n            _main.default._validateParameters('directionalLight', arguments);\n\n            //@TODO: check parameters number\n            var color;\n            if (v1 instanceof _main.default.Color) {\n              color = v1;\n            } else {\n              color = this.color(v1, v2, v3);\n            }\n\n            var _x, _y, _z;\n            var v = arguments[arguments.length - 1];\n            if (typeof v === 'number') {\n              _x = arguments[arguments.length - 3];\n              _y = arguments[arguments.length - 2];\n              _z = arguments[arguments.length - 1];\n            } else {\n              _x = v.x;\n              _y = v.y;\n              _z = v.z;\n            }\n\n            // normalize direction\n            var l = Math.sqrt(_x * _x + _y * _y + _z * _z);\n            this._renderer.directionalLightDirections.push(_x / l, _y / l, _z / l);\n\n            this._renderer.directionalLightDiffuseColors.push(\n              color._array[0],\n              color._array[1],\n              color._array[2]\n            );\n\n            Array.prototype.push.apply(\n              this._renderer.directionalLightSpecularColors,\n              this._renderer.specularColors\n            );\n\n            this._renderer._enableLighting = true;\n\n            return this;\n          };\n\n          /**\n           * Creates a point light with a color and a light position\n           *\n           * A maximum of 5 pointLight can be active at one time\n           * @method pointLight\n           * @param  {Number}    v1       red or hue value (depending on the current\n           * color mode),\n           * @param  {Number}    v2       green or saturation value\n           * @param  {Number}    v3       blue or brightness value\n           * @param  {Number}    x        x axis position\n           * @param  {Number}    y        y axis position\n           * @param  {Number}    z        z axis position\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   //move your mouse to change light position\n           *   let locX = mouseX - width / 2;\n           *   let locY = mouseY - height / 2;\n           *   // to set the light position,\n           *   // think of the world's coordinate as:\n           *   // -width/2,-height/2 -------- width/2,-height/2\n           *   //                |            |\n           *   //                |     0,0    |\n           *   //                |            |\n           *   // -width/2,height/2--------width/2,height/2\n           *   pointLight(250, 250, 250, locX, locY, 50);\n           *   noStroke();\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * spot light on canvas changes position with mouse\n           */\n\n          /**\n           * @method pointLight\n           * @param  {Number}    v1\n           * @param  {Number}    v2\n           * @param  {Number}    v3\n           * @param  {p5.Vector} position the position of the light\n           * @chainable\n           */\n\n          /**\n           * @method pointLight\n           * @param  {Number[]|String|p5.Color} color   color Array, CSS color string,\n           * or <a href=\"#/p5.Color\">p5.Color</a> value\n           * @param  {Number}                   x\n           * @param  {Number}                   y\n           * @param  {Number}                   z\n           * @chainable\n           */\n\n          /**\n           * @method pointLight\n           * @param  {Number[]|String|p5.Color} color\n           * @param  {p5.Vector}                position\n           * @chainable\n           */\n          _main.default.prototype.pointLight = function(v1, v2, v3, x, y, z) {\n            this._assert3d('pointLight');\n            _main.default._validateParameters('pointLight', arguments);\n\n            //@TODO: check parameters number\n            var color;\n            if (v1 instanceof _main.default.Color) {\n              color = v1;\n            } else {\n              color = this.color(v1, v2, v3);\n            }\n\n            var _x, _y, _z;\n            var v = arguments[arguments.length - 1];\n            if (typeof v === 'number') {\n              _x = arguments[arguments.length - 3];\n              _y = arguments[arguments.length - 2];\n              _z = arguments[arguments.length - 1];\n            } else {\n              _x = v.x;\n              _y = v.y;\n              _z = v.z;\n            }\n\n            this._renderer.pointLightPositions.push(_x, _y, _z);\n            this._renderer.pointLightDiffuseColors.push(\n              color._array[0],\n              color._array[1],\n              color._array[2]\n            );\n\n            Array.prototype.push.apply(\n              this._renderer.pointLightSpecularColors,\n              this._renderer.specularColors\n            );\n\n            this._renderer._enableLighting = true;\n\n            return this;\n          };\n\n          /**\n           * Sets the default ambient and directional light. The defaults are <a href=\"#/p5/ambientLight\">ambientLight(128, 128, 128)</a> and <a href=\"#/p5/directionalLight\">directionalLight(128, 128, 128, 0, 0, -1)</a>. Lights need to be included in the <a href=\"#/p5/draw\">draw()</a> to remain persistent in a looping program. Placing them in the <a href=\"#/p5/setup\">setup()</a> of a looping program will cause them to only have an effect the first time through the loop.\n           * @method lights\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   lights();\n           *   rotateX(millis() / 1000);\n           *   rotateY(millis() / 1000);\n           *   rotateZ(millis() / 1000);\n           *   box();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * the light is partially ambient and partially directional\n           */\n          _main.default.prototype.lights = function() {\n            this._assert3d('lights');\n            this.ambientLight(128, 128, 128);\n            this.directionalLight(128, 128, 128, 0, 0, -1);\n            return this;\n          };\n\n          /**\n           * Sets the falloff rates for point lights. It affects only the elements which are created after it in the code.\n           * The default value is lightFalloff(1.0, 0.0, 0.0), and the parameters are used to calculate the falloff with the following equation:\n           *\n           * d = distance from light position to vertex position\n           *\n           * falloff = 1 / (CONSTANT + d \\* LINEAR + ( d \\* d ) \\* QUADRATIC)\n           *\n           * @method lightFalloff\n           * @param {Number} constant   constant value for determining falloff\n           * @param {Number} linear     linear value for determining falloff\n           * @param {Number} quadratic  quadratic value for determining falloff\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noStroke();\n           * }\n           * function draw() {\n           *   background(0);\n           *   let locX = mouseX - width / 2;\n           *   let locY = mouseY - height / 2;\n           *   translate(-25, 0, 0);\n           *   lightFalloff(1, 0, 0);\n           *   pointLight(250, 250, 250, locX, locY, 50);\n           *   sphere(20);\n           *   translate(50, 0, 0);\n           *   lightFalloff(0.9, 0.01, 0);\n           *   pointLight(250, 250, 250, locX, locY, 50);\n           *   sphere(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Two spheres with different falloff values show different intensity of light\n           */\n          _main.default.prototype.lightFalloff = function(\n            constantAttenuation,\n            linearAttenuation,\n            quadraticAttenuation\n          ) {\n            this._assert3d('lightFalloff');\n            _main.default._validateParameters('lightFalloff', arguments);\n\n            if (constantAttenuation < 0) {\n              constantAttenuation = 0;\n              console.warn(\n                'Value of constant argument in lightFalloff() should be never be negative. Set to 0.'\n              );\n            }\n\n            if (linearAttenuation < 0) {\n              linearAttenuation = 0;\n              console.warn(\n                'Value of linear argument in lightFalloff() should be never be negative. Set to 0.'\n              );\n            }\n\n            if (quadraticAttenuation < 0) {\n              quadraticAttenuation = 0;\n              console.warn(\n                'Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.'\n              );\n            }\n\n            if (\n              constantAttenuation === 0 &&\n              linearAttenuation === 0 &&\n              quadraticAttenuation === 0\n            ) {\n              constantAttenuation = 1;\n              console.warn(\n                'Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.'\n              );\n            }\n\n            this._renderer.constantAttenuation = constantAttenuation;\n            this._renderer.linearAttenuation = linearAttenuation;\n            this._renderer.quadraticAttenuation = quadraticAttenuation;\n\n            return this;\n          };\n\n          /**\n           * Creates a spotlight with a given color, position, direction of light,\n           * angle and concentration. Here, angle refers to the opening or aperture\n           * of the cone of the spotlight, and concentration is used to focus the\n           * light towards the center. Both angle and concentration are optional, but if\n           * you want to provide concentration, you will also have to specify the angle.\n           *\n           * A maximum of 5 spotLight can be active at one time\n           * @method spotLight\n           * @param  {Number}    v1       red or hue value (depending on the current\n           * color mode),\n           * @param  {Number}    v2       green or saturation value\n           * @param  {Number}    v3       blue or brightness value\n           * @param  {Number}    x        x axis position\n           * @param  {Number}    y        y axis position\n           * @param  {Number}    z        z axis position\n           * @param  {Number}    rx       x axis direction of light\n           * @param  {Number}    ry       y axis direction of light\n           * @param  {Number}    rz       z axis direction of light\n           * @param  {Number}    [angle]  optional parameter for angle. Defaults to PI/3\n           * @param  {Number}    [conc]   optional parameter for concentration. Defaults to 100\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   //move your mouse to change light position\n           *   let locX = mouseX - width / 2;\n           *   let locY = mouseY - height / 2;\n           *   // to set the light position,\n           *   // think of the world's coordinate as:\n           *   // -width/2,-height/2 -------- width/2,-height/2\n           *   //                |            |\n           *   //                |     0,0    |\n           *   //                |            |\n           *   // -width/2,height/2--------width/2,height/2\n           *   ambientLight(50);\n           *   spotLight(0, 250, 0, locX, locY, 100, 0, 0, -1, Math.PI / 16);\n           *   noStroke();\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Spot light on a sphere which changes position with mouse\n           */\n          /**\n           * @method spotLight\n           * @param  {Number[]|String|p5.Color} color color Array, CSS color string,\n           * or <a href=\"#/p5.Color\">p5.Color</a> value\n           * @param  {p5.Vector}                position the position of the light\n           * @param  {p5.Vector}                direction the direction of the light\n           * @param  {Number}                   [angle]\n           * @param  {Number}                   [conc]\n           */\n          /**\n           * @method spotLight\n           * @param  {Number}     v1\n           * @param  {Number}     v2\n           * @param  {Number}     v3\n           * @param  {p5.Vector}  position\n           * @param  {p5.Vector}  direction\n           * @param  {Number}     [angle]\n           * @param  {Number}     [conc]\n           */\n          /**\n           * @method spotLight\n           * @param  {Number[]|String|p5.Color} color\n           * @param  {Number}                   x\n           * @param  {Number}                   y\n           * @param  {Number}                   z\n           * @param  {p5.Vector}                direction\n           * @param  {Number}                   [angle]\n           * @param  {Number}                   [conc]\n           */\n          /**\n           * @method spotLight\n           * @param  {Number[]|String|p5.Color} color\n           * @param  {p5.Vector}                position\n           * @param  {Number}                   rx\n           * @param  {Number}                   ry\n           * @param  {Number}                   rz\n           * @param  {Number}                   [angle]\n           * @param  {Number}                   [conc]\n           */\n          /**\n           * @method spotLight\n           * @param  {Number}     v1\n           * @param  {Number}     v2\n           * @param  {Number}     v3\n           * @param  {Number}     x\n           * @param  {Number}     y\n           * @param  {Number}     z\n           * @param  {p5.Vector}  direction\n           * @param  {Number}     [angle]\n           * @param  {Number}     [conc]\n           */\n          /**\n           * @method spotLight\n           * @param  {Number}     v1\n           * @param  {Number}     v2\n           * @param  {Number}     v3\n           * @param  {p5.Vector}  position\n           * @param  {Number}     rx\n           * @param  {Number}     ry\n           * @param  {Number}     rz\n           * @param  {Number}     [angle]\n           * @param  {Number}     [conc]\n           */\n          /**\n           * @method spotLight\n           * @param  {Number[]|String|p5.Color} color\n           * @param  {Number}                   x\n           * @param  {Number}                   y\n           * @param  {Number}                   z\n           * @param  {Number}                   rx\n           * @param  {Number}                   ry\n           * @param  {Number}                   rz\n           * @param  {Number}                   [angle]\n           * @param  {Number}                   [conc]\n           */\n          _main.default.prototype.spotLight = function(\n            v1,\n            v2,\n            v3,\n            x,\n            y,\n            z,\n            nx,\n            ny,\n            nz,\n            angle,\n            concentration\n          ) {\n            this._assert3d('spotLight');\n            _main.default._validateParameters('spotLight', arguments);\n\n            var color, position, direction;\n            var length = arguments.length;\n\n            switch (length) {\n              case 11:\n              case 10:\n                color = this.color(v1, v2, v3);\n                position = new _main.default.Vector(x, y, z);\n                direction = new _main.default.Vector(nx, ny, nz);\n                break;\n\n              case 9:\n                if (v1 instanceof _main.default.Color) {\n                  color = v1;\n                  position = new _main.default.Vector(v2, v3, x);\n                  direction = new _main.default.Vector(y, z, nx);\n                  angle = ny;\n                  concentration = nz;\n                } else if (x instanceof _main.default.Vector) {\n                  color = this.color(v1, v2, v3);\n                  position = x;\n                  direction = new _main.default.Vector(y, z, nx);\n                  angle = ny;\n                  concentration = nz;\n                } else if (nx instanceof _main.default.Vector) {\n                  color = this.color(v1, v2, v3);\n                  position = new _main.default.Vector(x, y, z);\n                  direction = nx;\n                  angle = ny;\n                  concentration = nz;\n                } else {\n                  color = this.color(v1, v2, v3);\n                  position = new _main.default.Vector(x, y, z);\n                  direction = new _main.default.Vector(nx, ny, nz);\n                }\n                break;\n\n              case 8:\n                if (v1 instanceof _main.default.Color) {\n                  color = v1;\n                  position = new _main.default.Vector(v2, v3, x);\n                  direction = new _main.default.Vector(y, z, nx);\n                  angle = ny;\n                } else if (x instanceof _main.default.Vector) {\n                  color = this.color(v1, v2, v3);\n                  position = x;\n                  direction = new _main.default.Vector(y, z, nx);\n                  angle = ny;\n                } else {\n                  color = this.color(v1, v2, v3);\n                  position = new _main.default.Vector(x, y, z);\n                  direction = nx;\n                  angle = ny;\n                }\n                break;\n\n              case 7:\n                if (\n                  v1 instanceof _main.default.Color &&\n                  v2 instanceof _main.default.Vector\n                ) {\n                  color = v1;\n                  position = v2;\n                  direction = new _main.default.Vector(v3, x, y);\n                  angle = z;\n                  concentration = nx;\n                } else if (\n                  v1 instanceof _main.default.Color &&\n                  y instanceof _main.default.Vector\n                ) {\n                  color = v1;\n                  position = new _main.default.Vector(v2, v3, x);\n                  direction = y;\n                  angle = z;\n                  concentration = nx;\n                } else if (\n                  x instanceof _main.default.Vector &&\n                  y instanceof _main.default.Vector\n                ) {\n                  color = this.color(v1, v2, v3);\n                  position = x;\n                  direction = y;\n                  angle = z;\n                  concentration = nx;\n                } else if (v1 instanceof _main.default.Color) {\n                  color = v1;\n                  position = new _main.default.Vector(v2, v3, x);\n                  direction = new _main.default.Vector(y, z, nx);\n                } else if (x instanceof _main.default.Vector) {\n                  color = this.color(v1, v2, v3);\n                  position = x;\n                  direction = new _main.default.Vector(y, z, nx);\n                } else {\n                  color = this.color(v1, v2, v3);\n                  position = new _main.default.Vector(x, y, z);\n                  direction = nx;\n                }\n                break;\n\n              case 6:\n                if (\n                  x instanceof _main.default.Vector &&\n                  y instanceof _main.default.Vector\n                ) {\n                  color = this.color(v1, v2, v3);\n                  position = x;\n                  direction = y;\n                  angle = z;\n                } else if (\n                  v1 instanceof _main.default.Color &&\n                  y instanceof _main.default.Vector\n                ) {\n                  color = v1;\n                  position = new _main.default.Vector(v2, v3, x);\n                  direction = y;\n                  angle = z;\n                } else if (\n                  v1 instanceof _main.default.Color &&\n                  v2 instanceof _main.default.Vector\n                ) {\n                  color = v1;\n                  position = v2;\n                  direction = new _main.default.Vector(v3, x, y);\n                  angle = z;\n                }\n                break;\n\n              case 5:\n                if (\n                  v1 instanceof _main.default.Color &&\n                  v2 instanceof _main.default.Vector &&\n                  v3 instanceof _main.default.Vector\n                ) {\n                  color = v1;\n                  position = v2;\n                  direction = v3;\n                  angle = x;\n                  concentration = y;\n                } else if (\n                  x instanceof _main.default.Vector &&\n                  y instanceof _main.default.Vector\n                ) {\n                  color = this.color(v1, v2, v3);\n                  position = x;\n                  direction = y;\n                } else if (\n                  v1 instanceof _main.default.Color &&\n                  y instanceof _main.default.Vector\n                ) {\n                  color = v1;\n                  position = new _main.default.Vector(v2, v3, x);\n                  direction = y;\n                } else if (\n                  v1 instanceof _main.default.Color &&\n                  v2 instanceof _main.default.Vector\n                ) {\n                  color = v1;\n                  position = v2;\n                  direction = new _main.default.Vector(v3, x, y);\n                }\n                break;\n\n              case 4:\n                color = v1;\n                position = v2;\n                direction = v3;\n                angle = x;\n                break;\n\n              case 3:\n                color = v1;\n                position = v2;\n                direction = v3;\n                break;\n\n              default:\n                console.warn(\n                  'Sorry, input for spotlight() is not in prescribed format. Too '.concat(\n                    length < 3 ? 'few' : 'many',\n                    ' arguments were provided'\n                  )\n                );\n\n                return this;\n            }\n\n            this._renderer.spotLightDiffuseColors.push(\n              color._array[0],\n              color._array[1],\n              color._array[2]\n            );\n\n            Array.prototype.push.apply(\n              this._renderer.spotLightSpecularColors,\n              this._renderer.specularColors\n            );\n\n            this._renderer.spotLightPositions.push(position.x, position.y, position.z);\n            direction.normalize();\n            this._renderer.spotLightDirections.push(direction.x, direction.y, direction.z);\n\n            if (angle === undefined) {\n              angle = Math.PI / 3;\n            }\n\n            if (concentration !== undefined && concentration < 1) {\n              concentration = 1;\n              console.warn(\n                'Value of concentration needs to be greater than 1. Setting it to 1'\n              );\n            } else if (concentration === undefined) {\n              concentration = 100;\n            }\n\n            angle = this._renderer._pInst._toRadians(angle);\n            this._renderer.spotLightAngle.push(Math.cos(angle));\n            this._renderer.spotLightConc.push(concentration);\n\n            this._renderer._enableLighting = true;\n\n            return this;\n          };\n\n          /**\n           * This function will remove all the lights from the sketch for the\n           * subsequent materials rendered. It affects all the subsequent methods.\n           * Calls to lighting methods made after noLights() will re-enable lights\n           * in the sketch.\n           * @method noLights\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *\n           *   ambientLight(150, 0, 0);\n           *   translate(-25, 0, 0);\n           *   ambientMaterial(250);\n           *   sphere(20);\n           *\n           *   noLights();\n           *   ambientLight(0, 150, 0);\n           *   translate(50, 0, 0);\n           *   ambientMaterial(250);\n           *   sphere(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Two spheres showing different colors\n           */\n          _main.default.prototype.noLights = function() {\n            this._assert3d('noLights');\n            _main.default._validateParameters('noLights', arguments);\n\n            this._renderer._enableLighting = false;\n\n            this._renderer.ambientLightColors.length = 0;\n            this._renderer.specularColors = [1, 1, 1];\n\n            this._renderer.directionalLightDirections.length = 0;\n            this._renderer.directionalLightDiffuseColors.length = 0;\n            this._renderer.directionalLightSpecularColors.length = 0;\n\n            this._renderer.pointLightPositions.length = 0;\n            this._renderer.pointLightDiffuseColors.length = 0;\n            this._renderer.pointLightSpecularColors.length = 0;\n\n            this._renderer.spotLightPositions.length = 0;\n            this._renderer.spotLightDirections.length = 0;\n            this._renderer.spotLightDiffuseColors.length = 0;\n            this._renderer.spotLightSpecularColors.length = 0;\n            this._renderer.spotLightAngle.length = 0;\n            this._renderer.spotLightConc.length = 0;\n\n            this._renderer.constantAttenuation = 1;\n            this._renderer.linearAttenuation = 0;\n            this._renderer.quadraticAttenuation = 0;\n            this._renderer._useShininess = 1;\n\n            return this;\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      105: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          _dereq_('./p5.Geometry');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Shape\n           * @submodule 3D Models\n           * @for p5\n           * @requires core\n           * @requires p5.Geometry\n           */ /**\n           * Load a 3d model from an OBJ or STL file.\n           *\n           * <a href=\"#/p5/loadModel\">loadModel()</a> should be placed inside of <a href=\"#/p5/preload\">preload()</a>.\n           * This allows the model to load fully before the rest of your code is run.\n           *\n           * One of the limitations of the OBJ and STL format is that it doesn't have a built-in\n           * sense of scale. This means that models exported from different programs might\n           * be very different sizes. If your model isn't displaying, try calling\n           * <a href=\"#/p5/loadModel\">loadModel()</a> with the normalized parameter set to true. This will resize the\n           * model to a scale appropriate for p5. You can also make additional changes to\n           * the final size of your model with the <a href=\"#/p5/scale\">scale()</a> function.\n           *\n           * Also, the support for colored STL files is not present. STL files with color will be\n           * rendered without color properties.\n           *\n           * @method loadModel\n           * @param  {String} path              Path of the model to be loaded\n           * @param  {Boolean} normalize        If true, scale the model to a\n           *                                      standardized size when loading\n           * @param  {function(p5.Geometry)} [successCallback] Function to be called\n           *                                     once the model is loaded. Will be passed\n           *                                     the 3D model object.\n           * @param  {function(Event)} [failureCallback] called with event error if\n           *                                         the model fails to load.\n           * @param  {String} [fileType]          The file extension of the model\n           *                                      (<code>.stl</code>, <code>.obj</code>).\n           * @return {p5.Geometry} the <a href=\"#/p5.Geometry\">p5.Geometry</a> object\n           *\n           * @example\n           * <div>\n           * <code>\n           * //draw a spinning octahedron\n           * let octahedron;\n           *\n           * function preload() {\n           *   octahedron = loadModel('assets/octahedron.obj');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   model(octahedron);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Vertically rotating 3-d octahedron.\n           *\n           * @example\n           * <div>\n           * <code>\n           * //draw a spinning teapot\n           * let teapot;\n           *\n           * function preload() {\n           *   // Load model with normalise parameter set to true\n           *   teapot = loadModel('assets/teapot.obj', true);\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   scale(0.4); // Scaled to make model fit into canvas\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   normalMaterial(); // For effect\n           *   model(teapot);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Vertically rotating 3-d teapot with red, green and blue gradient.\n           */ /**\n           * @method loadModel\n           * @param  {String} path\n           * @param  {function(p5.Geometry)} [successCallback]\n           * @param  {function(Event)} [failureCallback]\n           * @param  {String} [fileType]\n           * @return {p5.Geometry} the <a href=\"#/p5.Geometry\">p5.Geometry</a> object\n           */ _main.default.prototype.loadModel = function(path) {\n            _main.default._validateParameters('loadModel', arguments);\n            var normalize;\n            var successCallback;\n            var failureCallback;\n            var fileType = path.slice(-4);\n            if (typeof arguments[1] === 'boolean') {\n              normalize = arguments[1];\n              successCallback = arguments[2];\n              failureCallback = arguments[3];\n              if (typeof arguments[4] !== 'undefined') {\n                fileType = arguments[4];\n              }\n            } else {\n              normalize = false;\n              successCallback = arguments[1];\n              failureCallback = arguments[2];\n              if (typeof arguments[3] !== 'undefined') {\n                fileType = arguments[3];\n              }\n            }\n\n            var model = new _main.default.Geometry();\n            model.gid = ''.concat(path, '|').concat(normalize);\n            var self = this;\n\n            if (fileType.match(/\\.stl$/i)) {\n              this.httpDo(\n                path,\n                'GET',\n                'arrayBuffer',\n                function(arrayBuffer) {\n                  parseSTL(model, arrayBuffer);\n\n                  if (normalize) {\n                    model.normalize();\n                  }\n                  self._decrementPreload();\n                  if (typeof successCallback === 'function') {\n                    successCallback(model);\n                  }\n                },\n                failureCallback\n              );\n            } else if (fileType.match(/\\.obj$/i)) {\n              this.loadStrings(\n                path,\n                function(strings) {\n                  parseObj(model, strings);\n\n                  if (normalize) {\n                    model.normalize();\n                  }\n\n                  self._decrementPreload();\n                  if (typeof successCallback === 'function') {\n                    successCallback(model);\n                  }\n                },\n                failureCallback\n              );\n            } else {\n              _main.default._friendlyFileLoadError(3, path);\n\n              if (failureCallback) {\n                failureCallback();\n              } else {\n                console.error(\n                  'Sorry, the file type is invalid. Only OBJ and STL files are supported.'\n                );\n              }\n            }\n            return model;\n          };\n\n          /**\n           * Parse OBJ lines into model. For reference, this is what a simple model of a\n           * square might look like:\n           *\n           * v -0.5 -0.5 0.5\n           * v -0.5 -0.5 -0.5\n           * v -0.5 0.5 -0.5\n           * v -0.5 0.5 0.5\n           *\n           * f 4 3 2 1\n           */\n          function parseObj(model, lines) {\n            // OBJ allows a face to specify an index for a vertex (in the above example),\n            // but it also allows you to specify a custom combination of vertex, UV\n            // coordinate, and vertex normal. So, \"3/4/3\" would mean, \"use vertex 3 with\n            // UV coordinate 4 and vertex normal 3\". In WebGL, every vertex with different\n            // parameters must be a different vertex, so loadedVerts is used to\n            // temporarily store the parsed vertices, normals, etc., and indexedVerts is\n            // used to map a specific combination (keyed on, for example, the string\n            // \"3/4/3\"), to the actual index of the newly created vertex in the final\n            // object.\n            var loadedVerts = {\n              v: [],\n              vt: [],\n              vn: []\n            };\n\n            var indexedVerts = {};\n\n            for (var line = 0; line < lines.length; ++line) {\n              // Each line is a separate object (vertex, face, vertex normal, etc)\n              // For each line, split it into tokens on whitespace. The first token\n              // describes the type.\n              var tokens = lines[line].trim().split(/\\b\\s+/);\n\n              if (tokens.length > 0) {\n                if (tokens[0] === 'v' || tokens[0] === 'vn') {\n                  // Check if this line describes a vertex or vertex normal.\n                  // It will have three numeric parameters.\n                  var vertex = new _main.default.Vector(\n                    parseFloat(tokens[1]),\n                    parseFloat(tokens[2]),\n                    parseFloat(tokens[3])\n                  );\n\n                  loadedVerts[tokens[0]].push(vertex);\n                } else if (tokens[0] === 'vt') {\n                  // Check if this line describes a texture coordinate.\n                  // It will have two numeric parameters.\n                  var texVertex = [parseFloat(tokens[1]), parseFloat(tokens[2])];\n                  loadedVerts[tokens[0]].push(texVertex);\n                } else if (tokens[0] === 'f') {\n                  // Check if this line describes a face.\n                  // OBJ faces can have more than three points. Triangulate points.\n                  for (var tri = 3; tri < tokens.length; ++tri) {\n                    var face = [];\n\n                    var vertexTokens = [1, tri - 1, tri];\n\n                    for (var tokenInd = 0; tokenInd < vertexTokens.length; ++tokenInd) {\n                      // Now, convert the given token into an index\n                      var vertString = tokens[vertexTokens[tokenInd]];\n                      var vertIndex = 0;\n\n                      // TODO: Faces can technically use negative numbers to refer to the\n                      // previous nth vertex. I haven't seen this used in practice, but\n                      // it might be good to implement this in the future.\n\n                      if (indexedVerts[vertString] !== undefined) {\n                        vertIndex = indexedVerts[vertString];\n                      } else {\n                        var vertParts = vertString.split('/');\n                        for (var i = 0; i < vertParts.length; i++) {\n                          vertParts[i] = parseInt(vertParts[i]) - 1;\n                        }\n\n                        vertIndex = indexedVerts[vertString] = model.vertices.length;\n                        model.vertices.push(loadedVerts.v[vertParts[0]].copy());\n                        if (loadedVerts.vt[vertParts[1]]) {\n                          model.uvs.push(loadedVerts.vt[vertParts[1]].slice());\n                        } else {\n                          model.uvs.push([0, 0]);\n                        }\n\n                        if (loadedVerts.vn[vertParts[2]]) {\n                          model.vertexNormals.push(loadedVerts.vn[vertParts[2]].copy());\n                        }\n                      }\n\n                      face.push(vertIndex);\n                    }\n\n                    if (face[0] !== face[1] && face[0] !== face[2] && face[1] !== face[2]) {\n                      model.faces.push(face);\n                    }\n                  }\n                }\n              }\n            }\n            // If the model doesn't have normals, compute the normals\n            if (model.vertexNormals.length === 0) {\n              model.computeNormals();\n            }\n\n            return model;\n          }\n\n          /**\n           * STL files can be of two types, ASCII and Binary,\n           *\n           * We need to convert the arrayBuffer to an array of strings,\n           * to parse it as an ASCII file.\n           */\n          function parseSTL(model, buffer) {\n            if (isBinary(buffer)) {\n              parseBinarySTL(model, buffer);\n            } else {\n              var reader = new DataView(buffer);\n\n              if (!('TextDecoder' in window)) {\n                console.warn(\n                  'Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)'\n                );\n\n                return model;\n              }\n\n              var decoder = new TextDecoder('utf-8');\n              var lines = decoder.decode(reader);\n              var lineArray = lines.split('\\n');\n              parseASCIISTL(model, lineArray);\n            }\n            return model;\n          }\n\n          /**\n           * This function checks if the file is in ASCII format or in Binary format\n           *\n           * It is done by searching keyword `solid` at the start of the file.\n           *\n           * An ASCII STL data must begin with `solid` as the first six bytes.\n           * However, ASCII STLs lacking the SPACE after the `d` are known to be\n           * plentiful. So, check the first 5 bytes for `solid`.\n           *\n           * Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n           * https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n           * Search for `solid` to start anywhere after those prefixes.\n           */\n          function isBinary(data) {\n            var reader = new DataView(data);\n\n            // US-ASCII ordinal values for `s`, `o`, `l`, `i`, `d`\n            var solid = [115, 111, 108, 105, 100];\n            for (var off = 0; off < 5; off++) {\n              // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n              if (matchDataViewAt(solid, reader, off)) return false;\n            }\n\n            // Couldn't find \"solid\" text at the beginning; it is binary STL.\n            return true;\n          }\n\n          /**\n           * This function matches the `query` at the provided `offset`\n           */\n          function matchDataViewAt(query, reader, offset) {\n            // Check if each byte in query matches the corresponding byte from the current offset\n            for (var i = 0, il = query.length; i < il; i++) {\n              if (query[i] !== reader.getUint8(offset + i, false)) return false;\n            }\n\n            return true;\n          }\n\n          /**\n           * This function parses the Binary STL files.\n           * https://en.wikipedia.org/wiki/STL_%28file_format%29#Binary_STL\n           *\n           * Currently there is no support for the colors provided in STL files.\n           */\n          function parseBinarySTL(model, buffer) {\n            var reader = new DataView(buffer);\n\n            // Number of faces is present following the header\n            var faces = reader.getUint32(80, true);\n            var r,\n              g,\n              b,\n              hasColors = false,\n              colors;\n            var defaultR, defaultG, defaultB;\n\n            // Binary files contain 80-byte header, which is generally ignored.\n            for (var index = 0; index < 80 - 10; index++) {\n              // Check for `COLOR=`\n              if (\n                reader.getUint32(index, false) === 0x434f4c4f /*COLO*/ &&\n                reader.getUint8(index + 4) === 0x52 /*'R'*/ &&\n                reader.getUint8(index + 5) === 0x3d /*'='*/\n              ) {\n                hasColors = true;\n                colors = [];\n\n                defaultR = reader.getUint8(index + 6) / 255;\n                defaultG = reader.getUint8(index + 7) / 255;\n                defaultB = reader.getUint8(index + 8) / 255;\n                // To be used when color support is added\n                // alpha = reader.getUint8(index + 9) / 255;\n              }\n            }\n            var dataOffset = 84;\n            var faceLength = 12 * 4 + 2;\n\n            // Iterate the faces\n            for (var face = 0; face < faces; face++) {\n              var start = dataOffset + face * faceLength;\n              var normalX = reader.getFloat32(start, true);\n              var normalY = reader.getFloat32(start + 4, true);\n              var normalZ = reader.getFloat32(start + 8, true);\n\n              if (hasColors) {\n                var packedColor = reader.getUint16(start + 48, true);\n\n                if ((packedColor & 0x8000) === 0) {\n                  // facet has its own unique color\n                  r = (packedColor & 0x1f) / 31;\n                  g = ((packedColor >> 5) & 0x1f) / 31;\n                  b = ((packedColor >> 10) & 0x1f) / 31;\n                } else {\n                  r = defaultR;\n                  g = defaultG;\n                  b = defaultB;\n                }\n              }\n              var newNormal = new _main.default.Vector(normalX, normalY, normalZ);\n\n              for (var i = 1; i <= 3; i++) {\n                var vertexstart = start + i * 12;\n\n                var newVertex = new _main.default.Vector(\n                  reader.getFloat32(vertexstart, true),\n                  reader.getFloat32(vertexstart + 4, true),\n                  reader.getFloat32(vertexstart + 8, true)\n                );\n\n                model.vertices.push(newVertex);\n                model.vertexNormals.push(newNormal);\n\n                if (hasColors) {\n                  colors.push(r, g, b);\n                }\n              }\n\n              model.faces.push([3 * face, 3 * face + 1, 3 * face + 2]);\n              model.uvs.push([0, 0], [0, 0], [0, 0]);\n            }\n            if (hasColors) {\n              // add support for colors here.\n            }\n            return model;\n          }\n\n          /**\n           * ASCII STL file starts with `solid 'nameOfFile'`\n           * Then contain the normal of the face, starting with `facet normal`\n           * Next contain a keyword indicating the start of face vertex, `outer loop`\n           * Next comes the three vertex, starting with `vertex x y z`\n           * Vertices ends with `endloop`\n           * Face ends with `endfacet`\n           * Next face starts with `facet normal`\n           * The end of the file is indicated by `endsolid`\n           */\n          function parseASCIISTL(model, lines) {\n            var state = '';\n            var curVertexIndex = [];\n            var newNormal, newVertex;\n\n            for (var iterator = 0; iterator < lines.length; ++iterator) {\n              var line = lines[iterator].trim();\n              var parts = line.split(' ');\n\n              for (var partsiterator = 0; partsiterator < parts.length; ++partsiterator) {\n                if (parts[partsiterator] === '') {\n                  // Ignoring multiple whitespaces\n                  parts.splice(partsiterator, 1);\n                }\n              }\n\n              if (parts.length === 0) {\n                // Remove newline\n                continue;\n              }\n\n              switch (state) {\n                case '': // First run\n                  if (parts[0] !== 'solid') {\n                    // Invalid state\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"'.concat(parts[0], '\", should be \"solid\"')\n                    );\n                    return;\n                  } else {\n                    state = 'solid';\n                  }\n                  break;\n\n                case 'solid': // First face\n                  if (parts[0] !== 'facet' || parts[1] !== 'normal') {\n                    // Invalid state\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"'.concat(parts[0], '\", should be \"facet normal\"')\n                    );\n\n                    return;\n                  } else {\n                    // Push normal for first face\n                    newNormal = new _main.default.Vector(\n                      parseFloat(parts[2]),\n                      parseFloat(parts[3]),\n                      parseFloat(parts[4])\n                    );\n\n                    model.vertexNormals.push(newNormal, newNormal, newNormal);\n                    state = 'facet normal';\n                  }\n                  break;\n\n                case 'facet normal': // After normal is defined\n                  if (parts[0] !== 'outer' || parts[1] !== 'loop') {\n                    // Invalid State\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"'.concat(parts[0], '\", should be \"outer loop\"')\n                    );\n                    return;\n                  } else {\n                    // Next should be vertices\n                    state = 'vertex';\n                  }\n                  break;\n\n                case 'vertex':\n                  if (parts[0] === 'vertex') {\n                    //Vertex of triangle\n                    newVertex = new _main.default.Vector(\n                      parseFloat(parts[1]),\n                      parseFloat(parts[2]),\n                      parseFloat(parts[3])\n                    );\n\n                    model.vertices.push(newVertex);\n                    model.uvs.push([0, 0]);\n                    curVertexIndex.push(model.vertices.indexOf(newVertex));\n                  } else if (parts[0] === 'endloop') {\n                    // End of vertices\n                    model.faces.push(curVertexIndex);\n                    curVertexIndex = [];\n                    state = 'endloop';\n                  } else {\n                    // Invalid State\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"'.concat(\n                        parts[0],\n                        '\", should be \"vertex\" or \"endloop\"'\n                      )\n                    );\n\n                    return;\n                  }\n                  break;\n\n                case 'endloop':\n                  if (parts[0] !== 'endfacet') {\n                    // End of face\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"'.concat(parts[0], '\", should be \"endfacet\"')\n                    );\n                    return;\n                  } else {\n                    state = 'endfacet';\n                  }\n                  break;\n\n                case 'endfacet':\n                  if (parts[0] === 'endsolid') {\n                    // End of solid\n                  } else if (parts[0] === 'facet' && parts[1] === 'normal') {\n                    // Next face\n                    newNormal = new _main.default.Vector(\n                      parseFloat(parts[2]),\n                      parseFloat(parts[3]),\n                      parseFloat(parts[4])\n                    );\n\n                    model.vertexNormals.push(newNormal, newNormal, newNormal);\n                    state = 'facet normal';\n                  } else {\n                    // Invalid State\n                    console.error(line);\n                    console.error(\n                      'Invalid state \"'.concat(\n                        parts[0],\n                        '\", should be \"endsolid\" or \"facet normal\"'\n                      )\n                    );\n\n                    return;\n                  }\n                  break;\n\n                default:\n                  console.error('Invalid state \"'.concat(state, '\"'));\n                  break;\n              }\n            }\n            return model;\n          }\n\n          /**\n           * Render a 3d model to the screen.\n           *\n           * @method model\n           * @param  {p5.Geometry} model Loaded 3d model to be rendered\n           * @example\n           * <div>\n           * <code>\n           * //draw a spinning octahedron\n           * let octahedron;\n           *\n           * function preload() {\n           *   octahedron = loadModel('assets/octahedron.obj');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   model(octahedron);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Vertically rotating 3-d octahedron.\n           */\n          _main.default.prototype.model = function(model) {\n            this._assert3d('model');\n            _main.default._validateParameters('model', arguments);\n            if (model.vertices.length > 0) {\n              if (!this._renderer.geometryInHash(model.gid)) {\n                model._makeTriangleEdges()._edgesToVertices();\n                this._renderer.createBuffers(model.gid, model);\n              }\n\n              this._renderer.drawBuffers(model.gid);\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/main': 59, './p5.Geometry': 108 }\n      ],\n      106: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          _dereq_('./p5.Texture');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @module Lights, Camera\n           * @submodule Material\n           * @for p5\n           * @requires core\n           */ /**\n           * Loads a custom shader from the provided vertex and fragment\n           * shader paths. The shader files are loaded asynchronously in the\n           * background, so this method should be used in <a href=\"#/p5/preload\">preload()</a>.\n           *\n           * For now, there are three main types of shaders. p5 will automatically\n           * supply appropriate vertices, normals, colors, and lighting attributes\n           * if the parameters defined in the shader match the names.\n           *\n           * @method loadShader\n           * @param {String} vertFilename path to file containing vertex shader\n           * source code\n           * @param {String} fragFilename path to file containing fragment shader\n           * source code\n           * @param {function} [callback] callback to be executed after loadShader\n           * completes. On success, the Shader object is passed as the first argument.\n           * @param {function} [errorCallback] callback to be executed when an error\n           * occurs inside loadShader. On error, the error is passed as the first\n           * argument.\n           * @return {p5.Shader} a shader object created from the provided\n           * vertex and fragment shader files.\n           *\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * let mandel;\n           * function preload() {\n           *   // load the shader definitions from files\n           *   mandel = loadShader('assets/shader.vert', 'assets/shader.frag');\n           * }\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   // use the shader\n           *   shader(mandel);\n           *   noStroke();\n           *   mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n           * }\n           *\n           * function draw() {\n           *   mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n           *   quad(-1, -1, 1, -1, 1, 1, -1, 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * zooming Mandelbrot set. a colorful, infinitely detailed fractal.\n           */ _main.default.prototype.loadShader = function(\n            vertFilename,\n            fragFilename,\n            callback,\n            errorCallback\n          ) {\n            _main.default._validateParameters('loadShader', arguments);\n            if (!errorCallback) {\n              errorCallback = console.error;\n            }\n\n            var loadedShader = new _main.default.Shader();\n\n            var self = this;\n            var loadedFrag = false;\n            var loadedVert = false;\n\n            var onLoad = function onLoad() {\n              self._decrementPreload();\n              if (callback) {\n                callback(loadedShader);\n              }\n            };\n\n            this.loadStrings(\n              vertFilename,\n              function(result) {\n                loadedShader._vertSrc = result.join('\\n');\n                loadedVert = true;\n                if (loadedFrag) {\n                  onLoad();\n                }\n              },\n              errorCallback\n            );\n\n            this.loadStrings(\n              fragFilename,\n              function(result) {\n                loadedShader._fragSrc = result.join('\\n');\n                loadedFrag = true;\n                if (loadedVert) {\n                  onLoad();\n                }\n              },\n              errorCallback\n            );\n\n            return loadedShader;\n          };\n\n          /**\n           * @method createShader\n           * @param {String} vertSrc source code for the vertex shader\n           * @param {String} fragSrc source code for the fragment shader\n           * @returns {p5.Shader} a shader object created from the provided\n           * vertex and fragment shaders.\n           *\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * // the 'varying's are shared between both vertex & fragment shaders\n           * let varying = 'precision highp float; varying vec2 vPos;';\n           *\n           * // the vertex shader is called for each vertex\n           * let vs =\n           *   varying +\n           *   'attribute vec3 aPosition;' +\n           *   'void main() { vPos = (gl_Position = vec4(aPosition,1.0)).xy; }';\n           *\n           * // the fragment shader is called for each pixel\n           * let fs =\n           *   varying +\n           *   'uniform vec2 p;' +\n           *   'uniform float r;' +\n           *   'const int I = 500;' +\n           *   'void main() {' +\n           *   '  vec2 c = p + vPos * r, z = c;' +\n           *   '  float n = 0.0;' +\n           *   '  for (int i = I; i > 0; i --) {' +\n           *   '    if(z.x*z.x+z.y*z.y > 4.0) {' +\n           *   '      n = float(i)/float(I);' +\n           *   '      break;' +\n           *   '    }' +\n           *   '    z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;' +\n           *   '  }' +\n           *   '  gl_FragColor = vec4(0.5-cos(n*17.0)/2.0,0.5-cos(n*13.0)/2.0,0.5-cos(n*23.0)/2.0,1.0);' +\n           *   '}';\n           *\n           * let mandel;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *\n           *   // create and initialize the shader\n           *   mandel = createShader(vs, fs);\n           *   shader(mandel);\n           *   noStroke();\n           *\n           *   // 'p' is the center point of the Mandelbrot image\n           *   mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n           * }\n           *\n           * function draw() {\n           *   // 'r' is the size of the image in Mandelbrot-space\n           *   mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n           *   quad(-1, -1, 1, -1, 1, 1, -1, 1);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * zooming Mandelbrot set. a colorful, infinitely detailed fractal.\n           */\n          _main.default.prototype.createShader = function(vertSrc, fragSrc) {\n            this._assert3d('createShader');\n            _main.default._validateParameters('createShader', arguments);\n            return new _main.default.Shader(this._renderer, vertSrc, fragSrc);\n          };\n\n          /**\n           * The <a href=\"#/p5/shader\">shader()</a> function lets the user provide a custom shader\n           * to fill in shapes in WEBGL mode. Users can create their\n           * own shaders by loading vertex and fragment shaders with\n           * <a href=\"#/p5/loadShader\">loadShader()</a>.\n           *\n           * @method shader\n           * @chainable\n           * @param {p5.Shader} [s] the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering\n           * shapes.\n           *\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * // Click within the image to toggle\n           * // the shader used by the quad shape\n           * // Note: for an alternative approach to the same example,\n           * // involving changing uniforms please refer to:\n           * // https://p5js.org/reference/#/p5.Shader/setUniform\n           *\n           * let redGreen;\n           * let orangeBlue;\n           * let showRedGreen = false;\n           *\n           * function preload() {\n           *   // note that we are using two instances\n           *   // of the same vertex and fragment shaders\n           *   redGreen = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n           *   orangeBlue = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *\n           *   // initialize the colors for redGreen shader\n           *   shader(redGreen);\n           *   redGreen.setUniform('colorCenter', [1.0, 0.0, 0.0]);\n           *   redGreen.setUniform('colorBackground', [0.0, 1.0, 0.0]);\n           *\n           *   // initialize the colors for orangeBlue shader\n           *   shader(orangeBlue);\n           *   orangeBlue.setUniform('colorCenter', [1.0, 0.5, 0.0]);\n           *   orangeBlue.setUniform('colorBackground', [0.226, 0.0, 0.615]);\n           *\n           *   noStroke();\n           * }\n           *\n           * function draw() {\n           *   // update the offset values for each shader,\n           *   // moving orangeBlue in vertical and redGreen\n           *   // in horizontal direction\n           *   orangeBlue.setUniform('offset', [0, sin(millis() / 2000) + 1]);\n           *   redGreen.setUniform('offset', [sin(millis() / 2000), 1]);\n           *\n           *   if (showRedGreen === true) {\n           *     shader(redGreen);\n           *   } else {\n           *     shader(orangeBlue);\n           *   }\n           *   quad(-1, -1, 1, -1, 1, 1, -1, 1);\n           * }\n           *\n           * function mouseClicked() {\n           *   showRedGreen = !showRedGreen;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.\n           */\n          _main.default.prototype.shader = function(s) {\n            this._assert3d('shader');\n            _main.default._validateParameters('shader', arguments);\n\n            if (s._renderer === undefined) {\n              s._renderer = this._renderer;\n            }\n\n            if (s.isStrokeShader()) {\n              this._renderer.userStrokeShader = s;\n            } else {\n              this._renderer.userFillShader = s;\n              this._renderer._useNormalMaterial = false;\n            }\n\n            s.init();\n\n            return this;\n          };\n\n          /**\n           * This function restores the default shaders in WEBGL mode. Code that runs\n           * after resetShader() will not be affected by previously defined\n           * shaders. Should be run after <a href=\"#/p5/shader\">shader()</a>.\n           *\n           * @method resetShader\n           * @chainable\n           */\n          _main.default.prototype.resetShader = function() {\n            this._renderer.userFillShader = this._renderer.userStrokeShader = null;\n            return this;\n          };\n\n          /**\n           * Normal material for geometry is a material that is not affected by light.\n           * It is not reflective and is a placeholder material often used for debugging.\n           * Surfaces facing the X-axis, become red, those facing the Y-axis, become green and those facing the Z-axis, become blue.\n           * You can view all possible materials in this\n           * <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.\n           * @method normalMaterial\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *   normalMaterial();\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * Red, green and blue gradient.\n           */\n          _main.default.prototype.normalMaterial = function() {\n            this._assert3d('normalMaterial');\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('normalMaterial', args);\n            this._renderer.drawMode = constants.FILL;\n            this._renderer._useSpecularMaterial = false;\n            this._renderer._useEmissiveMaterial = false;\n            this._renderer._useNormalMaterial = true;\n            this._renderer.curFillColor = [1, 1, 1, 1];\n            this._renderer._setProperty('_doFill', true);\n            this.noStroke();\n            return this;\n          };\n\n          /**\n           * Texture for geometry.  You can view other possible materials in this\n           * <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.\n           * @method texture\n           * @param {p5.Image|p5.MediaElement|p5.Graphics} tex 2-dimensional graphics\n           *                    to render as texture\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   rotateZ(frameCount * 0.01);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   //pass image as texture\n           *   texture(img);\n           *   box(200, 200, 200);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let pg;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   pg = createGraphics(200, 200);\n           *   pg.textSize(75);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   pg.background(255);\n           *   pg.text('hello!', 0, 100);\n           *   //pass image as texture\n           *   texture(pg);\n           *   rotateX(0.5);\n           *   noStroke();\n           *   plane(50);\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * let vid;\n           * function preload() {\n           *   vid = createVideo('assets/fingers.mov');\n           *   vid.hide();\n           * }\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   //pass video frame as texture\n           *   texture(vid);\n           *   rect(-40, -40, 80, 80);\n           * }\n           *\n           * function mousePressed() {\n           *   vid.loop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Rotating view of many images umbrella and grid roof on a 3d plane\n           * black canvas\n           * black canvas\n           */\n          _main.default.prototype.texture = function(tex) {\n            this._assert3d('texture');\n            _main.default._validateParameters('texture', arguments);\n            if (tex.gifProperties) {\n              tex._animateGif(this);\n            }\n\n            this._renderer.drawMode = constants.TEXTURE;\n            this._renderer._useSpecularMaterial = false;\n            this._renderer._useEmissiveMaterial = false;\n            this._renderer._useNormalMaterial = false;\n            this._renderer._tex = tex;\n            this._renderer._setProperty('_doFill', true);\n\n            return this;\n          };\n\n          /**\n           * Sets the coordinate space for texture mapping. The default mode is IMAGE\n           * which refers to the actual coordinates of the image.\n           * NORMAL refers to a normalized space of values ranging from 0 to 1.\n           * This function only works in WEBGL mode.\n           *\n           * With IMAGE, if an image is 100 x 200 pixels, mapping the image onto the entire\n           * size of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\n           * The same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).\n           * @method  textureMode\n           * @param {Constant} mode either IMAGE or NORMAL\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           *\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   texture(img);\n           *   textureMode(NORMAL);\n           *   beginShape();\n           *   vertex(-50, -50, 0, 0);\n           *   vertex(50, -50, 1, 0);\n           *   vertex(50, 50, 1, 1);\n           *   vertex(-50, 50, 0, 1);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * the underside of a white umbrella and gridded ceiling above\n           *\n           * <div>\n           * <code>\n           * let img;\n           *\n           * function preload() {\n           *   img = loadImage('assets/laDefense.jpg');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   texture(img);\n           *   textureMode(NORMAL);\n           *   beginShape();\n           *   vertex(-50, -50, 0, 0);\n           *   vertex(50, -50, img.width, 0);\n           *   vertex(50, 50, img.width, img.height);\n           *   vertex(-50, 50, 0, img.height);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * the underside of a white umbrella and gridded ceiling above\n           */\n          _main.default.prototype.textureMode = function(mode) {\n            if (mode !== constants.IMAGE && mode !== constants.NORMAL) {\n              console.warn(\n                'You tried to set '.concat(\n                  mode,\n                  ' textureMode only supports IMAGE & NORMAL '\n                )\n              );\n            } else {\n              this._renderer.textureMode = mode;\n            }\n          };\n\n          /**\n           * Sets the global texture wrapping mode. This controls how textures behave\n           * when their uv's go outside of the 0 - 1 range. There are three options:\n           * CLAMP, REPEAT, and MIRROR.\n           *\n           * CLAMP causes the pixels at the edge of the texture to extend to the bounds\n           * REPEAT causes the texture to tile repeatedly until reaching the bounds\n           * MIRROR works similarly to REPEAT but it flips the texture with every new tile\n           *\n           * REPEAT & MIRROR are only available if the texture\n           * is a power of two size (128, 256, 512, 1024, etc.).\n           *\n           * This method will affect all textures in your sketch until a subsequent\n           * textureWrap call is made.\n           *\n           * If only one argument is provided, it will be applied to both the\n           * horizontal and vertical axes.\n           * @method textureWrap\n           * @param {Constant} wrapX either CLAMP, REPEAT, or MIRROR\n           * @param {Constant} [wrapY] either CLAMP, REPEAT, or MIRROR\n           * @example\n           * <div>\n           * <code>\n           * let img;\n           * function preload() {\n           *   img = loadImage('assets/rockies128.jpg');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   textureWrap(MIRROR);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *\n           *   let dX = mouseX;\n           *   let dY = mouseY;\n           *\n           *   let u = lerp(1.0, 2.0, dX);\n           *   let v = lerp(1.0, 2.0, dY);\n           *\n           *   scale(width / 2);\n           *\n           *   texture(img);\n           *\n           *   beginShape(TRIANGLES);\n           *   vertex(-1, -1, 0, 0, 0);\n           *   vertex(1, -1, 0, u, 0);\n           *   vertex(1, 1, 0, u, v);\n           *\n           *   vertex(1, 1, 0, u, v);\n           *   vertex(-1, 1, 0, 0, v);\n           *   vertex(-1, -1, 0, 0, 0);\n           *   endShape();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * an image of the rocky mountains repeated in mirrored tiles\n           */\n          _main.default.prototype.textureWrap = function(wrapX) {\n            var wrapY =\n              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : wrapX;\n            this._renderer.textureWrapX = wrapX;\n            this._renderer.textureWrapY = wrapY;\n\n            var textures = this._renderer.textures;\n            for (var i = 0; i < textures.length; i++) {\n              textures[i].setWrapMode(wrapX, wrapY);\n            }\n          };\n\n          /**\n           * Ambient material for geometry with a given color. Ambient material defines the color the object reflects under any lighting.\n           * For example, if the ambient material of an object is pure red, but the ambient lighting only contains green, the object will not reflect any light.\n           * Here's an <a href=\"https://p5js.org/examples/3d-materials.html\">example containing all possible materials</a>.\n           * @method  ambientMaterial\n           * @param  {Number} v1  gray value, red or hue value\n           *                         (depending on the current color mode),\n           * @param  {Number} [v2] green or saturation value\n           * @param  {Number} [v3] blue or brightness value\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   ambientLight(200);\n           *   ambientMaterial(70, 130, 230);\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * // ambientLight is both red and blue (magenta),\n           * // so object only reflects it's red and blue components\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(70);\n           *   ambientLight(100); // white light\n           *   ambientMaterial(255, 0, 255); // pink material\n           *   box(30);\n           * }\n           * </code>\n           * </div>\n           * <div>\n           * <code>\n           * // ambientLight is green. Since object does not contain\n           * // green, it does not reflect any light\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(70);\n           *   ambientLight(0, 255, 0); // green light\n           *   ambientMaterial(255, 0, 255); // pink material\n           *   box(30);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * radiating light source from top right of canvas\n           * box reflecting only red and blue light\n           * box reflecting no light\n           */\n          /**\n           * @method  ambientMaterial\n           * @param  {Number[]|String|p5.Color} color  color, color Array, or CSS color string\n           * @chainable\n           */\n          _main.default.prototype.ambientMaterial = function(v1, v2, v3) {\n            this._assert3d('ambientMaterial');\n            _main.default._validateParameters('ambientMaterial', arguments);\n\n            var color = _main.default.prototype.color.apply(this, arguments);\n            this._renderer.curFillColor = color._array;\n            this._renderer._useSpecularMaterial = false;\n            this._renderer._useEmissiveMaterial = false;\n            this._renderer._useNormalMaterial = false;\n            this._renderer._enableLighting = true;\n            this._renderer._tex = null;\n\n            return this;\n          };\n\n          /**\n           * Sets the emissive color of the material used for geometry drawn to\n           * the screen. This is a misnomer in the sense that the material does not\n           * actually emit light that effects surrounding polygons. Instead,\n           * it gives the appearance that the object is glowing. An emissive material\n           * will display at full strength even if there is no light for it to reflect.\n           * @method emissiveMaterial\n           * @param  {Number} v1  gray value, red or hue value\n           *                         (depending on the current color mode),\n           * @param  {Number} [v2] green or saturation value\n           * @param  {Number} [v3] blue or brightness value\n           * @param  {Number} [a]  opacity\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   ambientLight(0);\n           *   emissiveMaterial(130, 230, 0);\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * radiating light source from top right of canvas\n           */\n          /**\n           * @method  emissiveMaterial\n           * @param  {Number[]|String|p5.Color} color  color, color Array, or CSS color string\n           * @chainable\n           */\n          _main.default.prototype.emissiveMaterial = function(v1, v2, v3, a) {\n            this._assert3d('emissiveMaterial');\n            _main.default._validateParameters('emissiveMaterial', arguments);\n\n            var color = _main.default.prototype.color.apply(this, arguments);\n            this._renderer.curFillColor = color._array;\n            this._renderer._useSpecularMaterial = false;\n            this._renderer._useEmissiveMaterial = true;\n            this._renderer._useNormalMaterial = false;\n            this._renderer._enableLighting = true;\n            this._renderer._tex = null;\n\n            return this;\n          };\n\n          /**\n           * Specular material for geometry with a given color. Specular material is a shiny reflective material.\n           * Like ambient material it also defines the color the object reflects under ambient lighting.\n           * For example, if the specular material of an object is pure red, but the ambient lighting only contains green, the object will not reflect any light.\n           * For all other types of light like point and directional light, a specular material will reflect the color of the light source to the viewer.\n           * Here's an <a href=\"https://p5js.org/examples/3d-materials.html\">example containing all possible materials</a>.\n           *\n           * @method specularMaterial\n           * @param  {Number} gray number specifying value between white and black.\n           * @param  {Number} [alpha] alpha value relative to current color range\n           *                                 (default is 0-255)\n           * @chainable\n           */\n\n          /**\n           * @method specularMaterial\n           * @param  {Number}        v1      red or hue value relative to\n           *                                 the current color range\n           * @param  {Number}        v2      green or saturation value\n           *                                 relative to the current color range\n           * @param  {Number}        v3      blue or brightness value\n           *                                 relative to the current color range\n           * @param  {Number}        [alpha]\n           * @chainable\n           *\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   ambientLight(50);\n           *   pointLight(250, 250, 250, 100, 100, 30);\n           *   specularMaterial(250);\n           *   sphere(40);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * diffused radiating light source from top right of canvas\n           */\n\n          /**\n           * @method specularMaterial\n           * @param  {Number[]|String|p5.Color} color color Array, or CSS color string\n           * @chainable\n           */\n          _main.default.prototype.specularMaterial = function(v1, v2, v3, alpha) {\n            this._assert3d('specularMaterial');\n            _main.default._validateParameters('specularMaterial', arguments);\n\n            var color = _main.default.prototype.color.apply(this, arguments);\n            this._renderer.curFillColor = color._array;\n            this._renderer._useSpecularMaterial = true;\n            this._renderer._useEmissiveMaterial = false;\n            this._renderer._useNormalMaterial = false;\n            this._renderer._enableLighting = true;\n            this._renderer._tex = null;\n\n            return this;\n          };\n\n          /**\n           * Sets the amount of gloss in the surface of shapes.\n           * Used in combination with specularMaterial() in setting\n           * the material properties of shapes. The default and minimum value is 1.\n           * @method shininess\n           * @param {Number} shine Degree of Shininess.\n           *                       Defaults to 1.\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   let locX = mouseX - width / 2;\n           *   let locY = mouseY - height / 2;\n           *   ambientLight(60, 60, 60);\n           *   pointLight(255, 255, 255, locX, locY, 50);\n           *   specularMaterial(250);\n           *   translate(-25, 0, 0);\n           *   shininess(1);\n           *   sphere(20);\n           *   translate(50, 0, 0);\n           *   shininess(20);\n           *   sphere(20);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * Shininess on Camera changes position with mouse\n           */\n          _main.default.prototype.shininess = function(shine) {\n            this._assert3d('shininess');\n            _main.default._validateParameters('shininess', arguments);\n\n            if (shine < 1) {\n              shine = 1;\n            }\n            this._renderer._useShininess = shine;\n            return this;\n          };\n\n          /**\n           * @private blends colors according to color components.\n           * If alpha value is less than 1, or non-standard blendMode\n           * we need to enable blending on our gl context.\n           * @param  {Number[]} color [description]\n           * @return {Number[]]}  Normalized numbers array\n           */\n          _main.default.RendererGL.prototype._applyColorBlend = function(colors) {\n            var gl = this.GL;\n\n            var isTexture = this.drawMode === constants.TEXTURE;\n            var doBlend = isTexture || colors[colors.length - 1] < 1.0 || this._isErasing;\n\n            if (doBlend !== this._isBlending) {\n              if (\n                doBlend ||\n                (this.curBlendMode !== constants.BLEND &&\n                  this.curBlendMode !== constants.ADD)\n              ) {\n                gl.enable(gl.BLEND);\n              } else {\n                gl.disable(gl.BLEND);\n              }\n              gl.depthMask(true);\n              this._isBlending = doBlend;\n            }\n            this._applyBlendMode();\n            return colors;\n          };\n\n          /**\n           * @private sets blending in gl context to curBlendMode\n           * @param  {Number[]} color [description]\n           * @return {Number[]]}  Normalized numbers array\n           */\n          _main.default.RendererGL.prototype._applyBlendMode = function() {\n            if (this._cachedBlendMode === this.curBlendMode) {\n              return;\n            }\n            var gl = this.GL;\n            switch (this.curBlendMode) {\n              case constants.BLEND:\n              case constants.ADD:\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                break;\n              case constants.REMOVE:\n                gl.blendEquation(gl.FUNC_REVERSE_SUBTRACT);\n                gl.blendFunc(gl.SRC_ALPHA, gl.DST_ALPHA);\n                break;\n              case constants.MULTIPLY:\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ONE, gl.ONE);\n                break;\n              case constants.SCREEN:\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.ONE_MINUS_DST_COLOR, gl.ONE, gl.ONE, gl.ONE);\n                break;\n              case constants.EXCLUSION:\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(\n                  gl.ONE_MINUS_DST_COLOR,\n                  gl.ONE_MINUS_SRC_COLOR,\n                  gl.ONE,\n                  gl.ONE\n                );\n\n                break;\n              case constants.REPLACE:\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.ONE, gl.ZERO);\n                break;\n              case constants.SUBTRACT:\n                gl.blendEquationSeparate(gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE);\n                break;\n              case constants.DARKEST:\n                if (this.blendExt) {\n                  gl.blendEquationSeparate(this.blendExt.MIN_EXT, gl.FUNC_ADD);\n                  gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n                } else {\n                  console.warn(\n                    'blendMode(DARKEST) does not work in your browser in WEBGL mode.'\n                  );\n                }\n                break;\n              case constants.LIGHTEST:\n                if (this.blendExt) {\n                  gl.blendEquationSeparate(this.blendExt.MAX_EXT, gl.FUNC_ADD);\n                  gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n                } else {\n                  console.warn(\n                    'blendMode(LIGHTEST) does not work in your browser in WEBGL mode.'\n                  );\n                }\n                break;\n              default:\n                console.error(\n                  'Oops! Somehow RendererGL set curBlendMode to an unsupported mode.'\n                );\n\n                break;\n            }\n\n            if (!this._isErasing) {\n              this._cachedBlendMode = this.curBlendMode;\n            }\n          };\n          var _default = _main.default;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59, './p5.Texture': 115 }\n      ],\n      107: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** ////////////////////////////////////////////////////////////////////////////////\n           * @module Lights, Camera\n           * @submodule Camera\n           * @requires core\n           */\n          // p5.Prototype Methods\n          ////////////////////////////////////////////////////////////////////////////////\n          /**\n           * Sets the camera position for a 3D sketch. Parameters for this function define\n           * the position for the camera, the center of the sketch (where the camera is\n           * pointing), and an up direction (the orientation of the camera).\n           *\n           * This function simulates the movements of the camera, allowing objects to be\n           * viewed from various angles. Remember, it does not move the objects themselves\n           * but the camera instead. For example when centerX value is positive, the camera\n           * is rotating to the right side of the sketch, so the object would seem like\n           * moving to the left.\n           *\n           * See this <a href = \"https://www.openprocessing.org/sketch/740258\">example</a>\n           * to view the position of your camera.\n           *\n           * When called with no arguments, this function creates a default camera\n           * equivalent to\n           * camera(0, 0, (height/2.0) / tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);\n           * @method camera\n           * @constructor\n           * @for p5\n           * @param  {Number} [x]        camera position value on x axis\n           * @param  {Number} [y]        camera position value on y axis\n           * @param  {Number} [z]        camera position value on z axis\n           * @param  {Number} [centerX]  x coordinate representing center of the sketch\n           * @param  {Number} [centerY]  y coordinate representing center of the sketch\n           * @param  {Number} [centerZ]  z coordinate representing center of the sketch\n           * @param  {Number} [upX]      x component of direction 'up' from camera\n           * @param  {Number} [upY]      y component of direction 'up' from camera\n           * @param  {Number} [upZ]      z component of direction 'up' from camera\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           * function draw() {\n           *   background(204);\n           *   //move the camera away from the plane by a sin wave\n           *   camera(0, 0, 20 + sin(frameCount * 0.01) * 10, 0, 0, 0, 0, 1, 0);\n           *   plane(10, 10);\n           * }\n           * </code>\n           * </div>\n           *\n           * @example\n           * <div>\n           * <code>\n           * //move slider to see changes!\n           * //sliders control the first 6 parameters of camera()\n           * let sliderGroup = [];\n           * let X;\n           * let Y;\n           * let Z;\n           * let centerX;\n           * let centerY;\n           * let centerZ;\n           * let h = 20;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   //create sliders\n           *   for (var i = 0; i < 6; i++) {\n           *     if (i === 2) {\n           *       sliderGroup[i] = createSlider(10, 400, 200);\n           *     } else {\n           *       sliderGroup[i] = createSlider(-400, 400, 0);\n           *     }\n           *     h = map(i, 0, 6, 5, 85);\n           *     sliderGroup[i].position(10, height + h);\n           *     sliderGroup[i].style('width', '80px');\n           *   }\n           * }\n           *\n           * function draw() {\n           *   background(60);\n           *   // assigning sliders' value to each parameters\n           *   X = sliderGroup[0].value();\n           *   Y = sliderGroup[1].value();\n           *   Z = sliderGroup[2].value();\n           *   centerX = sliderGroup[3].value();\n           *   centerY = sliderGroup[4].value();\n           *   centerZ = sliderGroup[5].value();\n           *   camera(X, Y, Z, centerX, centerY, centerZ, 0, 1, 0);\n           *   stroke(255);\n           *   fill(255, 102, 94);\n           *   box(85);\n           * }\n           * </code>\n           * </div>\n           * @alt\n           * White square repeatedly grows to fill canvas and then shrinks.\n           * An interactive example of a red cube with 3 sliders for moving it across x, y,\n           * z axis and 3 sliders for shifting it's center.\n           */ _main.default.prototype.camera = function() {\n            var _this$_renderer$_curC;\n            this._assert3d('camera');\n            for (\n              var _len = arguments.length, args = new Array(_len), _key = 0;\n              _key < _len;\n              _key++\n            ) {\n              args[_key] = arguments[_key];\n            }\n            _main.default._validateParameters('camera', args);\n            (_this$_renderer$_curC = this._renderer._curCamera).camera.apply(\n              _this$_renderer$_curC,\n              args\n            );\n            return this;\n          };\n\n          /**\n           * Sets a perspective projection for the camera in a 3D sketch. This projection\n           * represents depth through foreshortening: objects that are close to the camera\n           * appear their actual size while those that are further away from the camera\n           * appear smaller. The parameters to this function define the viewing frustum\n           * (the truncated pyramid within which objects are seen by the camera) through\n           * vertical field of view, aspect ratio (usually width/height), and near and far\n           * clipping planes.\n           *\n           * When called with no arguments, the defaults\n           * provided are equivalent to\n           * perspective(PI/3.0, width/height, eyeZ/10.0, eyeZ*10.0), where eyeZ\n           * is equal to ((height/2.0) / tan(PI*60.0/360.0));\n           * @method  perspective\n           * @for p5\n           * @param  {Number} [fovy]   camera frustum vertical field of view,\n           *                           from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units\n           * @param  {Number} [aspect] camera frustum aspect ratio\n           * @param  {Number} [near]   frustum near plane length\n           * @param  {Number} [far]    frustum far plane length\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * //drag the mouse to look around!\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   perspective(PI / 3.0, width / height, 0.1, 500);\n           * }\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   normalMaterial();\n           *\n           *   rotateX(-0.3);\n           *   rotateY(-0.2);\n           *   translate(0, 0, -50);\n           *\n           *   push();\n           *   translate(-15, 0, sin(frameCount / 30) * 95);\n           *   box(30);\n           *   pop();\n           *   push();\n           *   translate(15, 0, sin(frameCount / 30 + PI) * 95);\n           *   box(30);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * two colored 3D boxes move back and forth, rotating as mouse is dragged.\n           */\n          _main.default.prototype.perspective = function() {\n            var _this$_renderer$_curC2;\n            this._assert3d('perspective');\n            for (\n              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n              _key2 < _len2;\n              _key2++\n            ) {\n              args[_key2] = arguments[_key2];\n            }\n            _main.default._validateParameters('perspective', args);\n            (_this$_renderer$_curC2 = this._renderer._curCamera).perspective.apply(\n              _this$_renderer$_curC2,\n              args\n            );\n            return this;\n          };\n\n          /**\n           * Sets an orthographic projection for the camera in a 3D sketch and defines a\n           * box-shaped viewing frustum within which objects are seen. In this projection,\n           * all objects with the same dimension appear the same size, regardless of\n           * whether they are near or far from the camera. The parameters to this\n           * function specify the viewing frustum where left and right are the minimum and\n           * maximum x values, top and bottom are the minimum and maximum y values, and near\n           * and far are the minimum and maximum z values. If no parameters are given, the\n           * default is used: ortho(-width/2, width/2, -height/2, height/2).\n           * @method  ortho\n           * @for p5\n           * @param  {Number} [left]   camera frustum left plane\n           * @param  {Number} [right]  camera frustum right plane\n           * @param  {Number} [bottom] camera frustum bottom plane\n           * @param  {Number} [top]    camera frustum top plane\n           * @param  {Number} [near]   camera frustum near plane\n           * @param  {Number} [far]    camera frustum far plane\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * //drag the mouse to look around!\n           * //there's no vanishing point\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   ortho(-width / 2, width / 2, height / 2, -height / 2, 0, 500);\n           * }\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   normalMaterial();\n           *\n           *   rotateX(0.2);\n           *   rotateY(-0.2);\n           *   push();\n           *   translate(-15, 0, sin(frameCount / 30) * 65);\n           *   box(30);\n           *   pop();\n           *   push();\n           *   translate(15, 0, sin(frameCount / 30 + PI) * 65);\n           *   box(30);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * two 3D boxes move back and forth along same plane, rotating as mouse is dragged.\n           */\n          _main.default.prototype.ortho = function() {\n            var _this$_renderer$_curC3;\n            this._assert3d('ortho');\n            for (\n              var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n              _key3 < _len3;\n              _key3++\n            ) {\n              args[_key3] = arguments[_key3];\n            }\n            _main.default._validateParameters('ortho', args);\n            (_this$_renderer$_curC3 = this._renderer._curCamera).ortho.apply(\n              _this$_renderer$_curC3,\n              args\n            );\n            return this;\n          };\n\n          /**\n           * Sets a perspective matrix as defined by the parameters.\n           *\n           * A frustum is a geometric form: a pyramid with its top\n           * cut off. With the viewer's eye at the imaginary top of\n           * the pyramid, the six planes of the frustum act as clipping\n           * planes when rendering a 3D view. Thus, any form inside the\n           * clipping planes is visible; anything outside\n           * those planes is not visible.\n           *\n           * Setting the frustum changes the perspective of the scene being rendered.\n           * This can be achieved more simply in many cases by using\n           * <a href=\"https://p5js.org/reference/#/p5/perspective\">perspective()</a>.\n           *\n           * @method frustum\n           * @for p5\n           * @param  {Number} [left]   camera frustum left plane\n           * @param  {Number} [right]  camera frustum right plane\n           * @param  {Number} [bottom] camera frustum bottom plane\n           * @param  {Number} [top]    camera frustum top plane\n           * @param  {Number} [near]   camera frustum near plane\n           * @param  {Number} [far]    camera frustum far plane\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   setAttributes('antialias', true);\n           *   frustum(-0.1, 0.1, -0.1, 0.1, 0.1, 200);\n           * }\n           * function draw() {\n           *   background(200);\n           *   orbitControl();\n           *   strokeWeight(10);\n           *   stroke(0, 0, 255);\n           *   noFill();\n           *\n           *   rotateY(-0.2);\n           *   rotateX(-0.3);\n           *   push();\n           *   translate(-15, 0, sin(frameCount / 30) * 25);\n           *   box(30);\n           *   pop();\n           *   push();\n           *   translate(15, 0, sin(frameCount / 30 + PI) * 25);\n           *   box(30);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * two 3D boxes move back and forth along same plane, rotating as mouse is dragged.\n           */\n          _main.default.prototype.frustum = function() {\n            var _this$_renderer$_curC4;\n            this._assert3d('frustum');\n            for (\n              var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;\n              _key4 < _len4;\n              _key4++\n            ) {\n              args[_key4] = arguments[_key4];\n            }\n            _main.default._validateParameters('frustum', args);\n            (_this$_renderer$_curC4 = this._renderer._curCamera).frustum.apply(\n              _this$_renderer$_curC4,\n              args\n            );\n            return this;\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // p5.Camera\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and tells the\n           * renderer to use that camera.\n           * Returns the p5.Camera object.\n           * @method createCamera\n           * @return {p5.Camera} The newly created camera object.\n           * @for p5\n           * @example\n           * <div><code>\n           * // Creates a camera object and animates it around a box.\n           * let camera;\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   background(0);\n           *   camera = createCamera();\n           *   setCamera(camera);\n           * }\n           *\n           * function draw() {\n           *   camera.lookAt(0, 0, 0);\n           *   camera.setPosition(sin(frameCount / 60) * 200, 0, 100);\n           *   box(20);\n           * }\n           * </code></div>\n           *\n           * @alt\n           * An example that creates a camera and moves it around the box.\n           */\n          _main.default.prototype.createCamera = function() {\n            this._assert3d('createCamera');\n            var _cam = new _main.default.Camera(this._renderer);\n\n            // compute default camera settings, then set a default camera\n            _cam._computeCameraDefaultSettings();\n            _cam._setDefaultCamera();\n\n            // set renderer current camera to the new camera\n            this._renderer._curCamera = _cam;\n\n            return _cam;\n          };\n\n          /**\n           * This class describes a camera for use in p5's\n           * <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\n           * WebGL mode</a>. It contains camera position, orientation, and projection\n           * information necessary for rendering a 3D scene.\n           *\n           * New p5.Camera objects can be made through the\n           * <a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through\n           * the methods described below. A camera created in this way will use a default\n           * position in the scene and a default perspective projection until these\n           * properties are changed through the various methods available. It is possible\n           * to create multiple cameras, in which case the current camera\n           * can be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.\n           *\n           * Note:\n           * The methods below operate in two coordinate systems: the 'world' coordinate\n           * system describe positions in terms of their relationship to the origin along\n           * the X, Y and Z axes whereas the camera's 'local' coordinate system\n           * describes positions from the camera's point of view: left-right, up-down,\n           * and forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method,\n           * for instance, moves the camera along its own axes, whereas the\n           * <a href=\"#/p5.Camera/setPosition\">setPosition()</a>\n           * method sets the camera's position in world-space.\n           *\n           * @class p5.Camera\n           * @param {rendererGL} rendererGL instance of WebGL renderer\n           * @example\n           * <div>\n           * <code>\n           * let cam;\n           * let delta = 0.01;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           *   // set initial pan angle\n           *   cam.pan(-0.8);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // pan camera according to angle 'delta'\n           *   cam.pan(delta);\n           *\n           *   // every 160 frames, switch direction\n           *   if (frameCount % 160 === 0) {\n           *     delta *= -1;\n           *   }\n           *\n           *   rotateX(frameCount * 0.01);\n           *   translate(-100, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view pans left and right across a series of rotating 3D boxes.\n           */\n          _main.default.Camera = function(renderer) {\n            this._renderer = renderer;\n\n            this.cameraType = 'default';\n\n            this.cameraMatrix = new _main.default.Matrix();\n            this.projMatrix = new _main.default.Matrix();\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // Camera Projection Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Sets a perspective projection for a p5.Camera object and sets parameters\n           * for that projection according to <a href=\"#/p5/perspective\">perspective()</a>\n           * syntax.\n           * @method perspective\n           * @for p5.Camera\n           */\n          _main.default.Camera.prototype.perspective = function(fovy, aspect, near, far) {\n            this.cameraType = arguments.length > 0 ? 'custom' : 'default';\n            if (typeof fovy === 'undefined') {\n              fovy = this.defaultCameraFOV;\n              // this avoids issue where setting angleMode(DEGREES) before calling\n              // perspective leads to a smaller than expected FOV (because\n              // _computeCameraDefaultSettings computes in radians)\n              this.cameraFOV = fovy;\n            } else {\n              this.cameraFOV = this._renderer._pInst._toRadians(fovy);\n            }\n            if (typeof aspect === 'undefined') {\n              aspect = this.defaultAspectRatio;\n            }\n            if (typeof near === 'undefined') {\n              near = this.defaultCameraNear;\n            }\n            if (typeof far === 'undefined') {\n              far = this.defaultCameraFar;\n            }\n\n            if (near <= 0.0001) {\n              near = 0.01;\n              console.log(\n                'Avoid perspective near plane values close to or below 0. ' +\n                  'Setting value to 0.01.'\n              );\n            }\n\n            if (far < near) {\n              console.log(\n                'Perspective far plane value is less than near plane value. ' +\n                  'Nothing will be shown.'\n              );\n            }\n\n            this.aspectRatio = aspect;\n            this.cameraNear = near;\n            this.cameraFar = far;\n\n            this.projMatrix = _main.default.Matrix.identity();\n\n            var f = 1.0 / Math.tan(this.cameraFOV / 2);\n            var nf = 1.0 / (this.cameraNear - this.cameraFar);\n\n            // prettier-ignore\n            this.projMatrix.set(f / aspect, 0, 0, 0,\n  0, -f, 0, 0,\n  0, 0, (far + near) * nf, -1,\n  0, 0, 2 * far * near * nf, 0);\n\n            if (this._isActive()) {\n              this._renderer.uPMatrix.set(\n                this.projMatrix.mat4[0],\n                this.projMatrix.mat4[1],\n                this.projMatrix.mat4[2],\n                this.projMatrix.mat4[3],\n                this.projMatrix.mat4[4],\n                this.projMatrix.mat4[5],\n                this.projMatrix.mat4[6],\n                this.projMatrix.mat4[7],\n                this.projMatrix.mat4[8],\n                this.projMatrix.mat4[9],\n                this.projMatrix.mat4[10],\n                this.projMatrix.mat4[11],\n                this.projMatrix.mat4[12],\n                this.projMatrix.mat4[13],\n                this.projMatrix.mat4[14],\n                this.projMatrix.mat4[15]\n              );\n            }\n          };\n\n          /**\n           * Sets an orthographic projection for a p5.Camera object and sets parameters\n           * for that projection according to <a href=\"#/p5/ortho\">ortho()</a> syntax.\n           * @method ortho\n           * @for p5.Camera\n           */\n          _main.default.Camera.prototype.ortho = function(\n            left,\n            right,\n            bottom,\n            top,\n            near,\n            far\n          ) {\n            if (left === undefined) left = -this._renderer.width / 2;\n            if (right === undefined) right = +this._renderer.width / 2;\n            if (bottom === undefined) bottom = -this._renderer.height / 2;\n            if (top === undefined) top = +this._renderer.height / 2;\n            if (near === undefined) near = 0;\n            if (far === undefined)\n              far = Math.max(this._renderer.width, this._renderer.height);\n\n            var w = right - left;\n            var h = top - bottom;\n            var d = far - near;\n\n            var x = +2.0 / w;\n            var y = +2.0 / h;\n            var z = -2.0 / d;\n\n            var tx = -(right + left) / w;\n            var ty = -(top + bottom) / h;\n            var tz = -(far + near) / d;\n\n            this.projMatrix = _main.default.Matrix.identity();\n\n            // prettier-ignore\n            this.projMatrix.set(x, 0, 0, 0,\n  0, -y, 0, 0,\n  0, 0, z, 0,\n  tx, ty, tz, 1);\n\n            if (this._isActive()) {\n              this._renderer.uPMatrix.set(\n                this.projMatrix.mat4[0],\n                this.projMatrix.mat4[1],\n                this.projMatrix.mat4[2],\n                this.projMatrix.mat4[3],\n                this.projMatrix.mat4[4],\n                this.projMatrix.mat4[5],\n                this.projMatrix.mat4[6],\n                this.projMatrix.mat4[7],\n                this.projMatrix.mat4[8],\n                this.projMatrix.mat4[9],\n                this.projMatrix.mat4[10],\n                this.projMatrix.mat4[11],\n                this.projMatrix.mat4[12],\n                this.projMatrix.mat4[13],\n                this.projMatrix.mat4[14],\n                this.projMatrix.mat4[15]\n              );\n            }\n\n            this.cameraType = 'custom';\n          };\n\n          /**\n           * @method frustum\n           * @for p5.Camera\n           */\n          _main.default.Camera.prototype.frustum = function(\n            left,\n            right,\n            bottom,\n            top,\n            near,\n            far\n          ) {\n            if (left === undefined) left = -this._renderer.width / 2;\n            if (right === undefined) right = +this._renderer.width / 2;\n            if (bottom === undefined) bottom = -this._renderer.height / 2;\n            if (top === undefined) top = +this._renderer.height / 2;\n            if (near === undefined) near = 0;\n            if (far === undefined)\n              far = Math.max(this._renderer.width, this._renderer.height);\n\n            var w = right - left;\n            var h = top - bottom;\n            var d = far - near;\n\n            var x = +(2.0 * near) / w;\n            var y = +(2.0 * near) / h;\n            var z = -(2.0 * far * near) / d;\n\n            var tx = (right + left) / w;\n            var ty = (top + bottom) / h;\n            var tz = -(far + near) / d;\n\n            this.projMatrix = _main.default.Matrix.identity();\n\n            // prettier-ignore\n            this.projMatrix.set(x, 0, 0, 0,\n  0, y, 0, 0,\n  tx, ty, tz, -1,\n  0, 0, z, 0);\n\n            if (this._isActive()) {\n              this._renderer.uPMatrix.set(\n                this.projMatrix.mat4[0],\n                this.projMatrix.mat4[1],\n                this.projMatrix.mat4[2],\n                this.projMatrix.mat4[3],\n                this.projMatrix.mat4[4],\n                this.projMatrix.mat4[5],\n                this.projMatrix.mat4[6],\n                this.projMatrix.mat4[7],\n                this.projMatrix.mat4[8],\n                this.projMatrix.mat4[9],\n                this.projMatrix.mat4[10],\n                this.projMatrix.mat4[11],\n                this.projMatrix.mat4[12],\n                this.projMatrix.mat4[13],\n                this.projMatrix.mat4[14],\n                this.projMatrix.mat4[15]\n              );\n            }\n\n            this.cameraType = 'custom';\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // Camera Orientation Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Rotate camera view about arbitrary axis defined by x,y,z\n           * based on http://learnwebgl.brown37.net/07_cameras/camera_rotating_motion.html\n           * @method _rotateView\n           * @private\n           */\n          _main.default.Camera.prototype._rotateView = function(a, x, y, z) {\n            var centerX = this.centerX;\n            var centerY = this.centerY;\n            var centerZ = this.centerZ;\n\n            // move center by eye position such that rotation happens around eye position\n            centerX -= this.eyeX;\n            centerY -= this.eyeY;\n            centerZ -= this.eyeZ;\n\n            var rotation = _main.default.Matrix.identity(this._renderer._pInst);\n            rotation.rotate(this._renderer._pInst._toRadians(a), x, y, z);\n\n            // prettier-ignore\n            var rotatedCenter = [\n  centerX * rotation.mat4[0] + centerY * rotation.mat4[4] + centerZ * rotation.mat4[8],\n  centerX * rotation.mat4[1] + centerY * rotation.mat4[5] + centerZ * rotation.mat4[9],\n  centerX * rotation.mat4[2] + centerY * rotation.mat4[6] + centerZ * rotation.mat4[10]];\n\n            // add eye position back into center\n            rotatedCenter[0] += this.eyeX;\n            rotatedCenter[1] += this.eyeY;\n            rotatedCenter[2] += this.eyeZ;\n\n            this.camera(\n              this.eyeX,\n              this.eyeY,\n              this.eyeZ,\n              rotatedCenter[0],\n              rotatedCenter[1],\n              rotatedCenter[2],\n              this.upX,\n              this.upY,\n              this.upZ\n            );\n          };\n\n          /**\n           * Panning rotates the camera view to the left and right.\n           * @method pan\n           * @param {Number} angle amount to rotate camera in current\n           * <a href=\"#/p5/angleMode\">angleMode</a> units.\n           * Greater than 0 values rotate counterclockwise (to the left).\n           * @example\n           * <div>\n           * <code>\n           * let cam;\n           * let delta = 0.01;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           *   // set initial pan angle\n           *   cam.pan(-0.8);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // pan camera according to angle 'delta'\n           *   cam.pan(delta);\n           *\n           *   // every 160 frames, switch direction\n           *   if (frameCount % 160 === 0) {\n           *     delta *= -1;\n           *   }\n           *\n           *   rotateX(frameCount * 0.01);\n           *   translate(-100, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view pans left and right across a series of rotating 3D boxes.\n           */\n          _main.default.Camera.prototype.pan = function(amount) {\n            var local = this._getLocalAxes();\n            this._rotateView(amount, local.y[0], local.y[1], local.y[2]);\n          };\n\n          /**\n           * Tilting rotates the camera view up and down.\n           * @method tilt\n           * @param {Number} angle amount to rotate camera in current\n           * <a href=\"#/p5/angleMode\">angleMode</a> units.\n           * Greater than 0 values rotate counterclockwise (to the left).\n           * @example\n           * <div>\n           * <code>\n           * let cam;\n           * let delta = 0.01;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           *   // set initial tilt\n           *   cam.tilt(-0.8);\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // pan camera according to angle 'delta'\n           *   cam.tilt(delta);\n           *\n           *   // every 160 frames, switch direction\n           *   if (frameCount % 160 === 0) {\n           *     delta *= -1;\n           *   }\n           *\n           *   rotateY(frameCount * 0.01);\n           *   translate(0, -100, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           *   translate(0, 35, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view tilts up and down across a series of rotating 3D boxes.\n           */\n          _main.default.Camera.prototype.tilt = function(amount) {\n            var local = this._getLocalAxes();\n            this._rotateView(amount, local.x[0], local.x[1], local.x[2]);\n          };\n\n          /**\n           * Reorients the camera to look at a position in world space.\n           * @method lookAt\n           * @for p5.Camera\n           * @param {Number} x x position of a point in world space\n           * @param {Number} y y position of a point in world space\n           * @param {Number} z z position of a point in world space\n           * @example\n           * <div>\n           * <code>\n           * let cam;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // look at a new random point every 60 frames\n           *   if (frameCount % 60 === 0) {\n           *     cam.lookAt(random(-100, 100), random(-50, 50), 0);\n           *   }\n           *\n           *   rotateX(frameCount * 0.01);\n           *   translate(-100, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view of rotating 3D cubes changes to look at a new random\n           * point every second .\n           */\n          _main.default.Camera.prototype.lookAt = function(x, y, z) {\n            this.camera(\n              this.eyeX,\n              this.eyeY,\n              this.eyeZ,\n              x,\n              y,\n              z,\n              this.upX,\n              this.upY,\n              this.upZ\n            );\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // Camera Position Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          /**\n           * Sets a camera's position and orientation.  This is equivalent to calling\n           * <a href=\"#/p5/camera\">camera()</a> on a p5.Camera object.\n           * @method camera\n           * @for p5.Camera\n           */\n          _main.default.Camera.prototype.camera = function(\n            eyeX,\n            eyeY,\n            eyeZ,\n            centerX,\n            centerY,\n            centerZ,\n            upX,\n            upY,\n            upZ\n          ) {\n            if (typeof eyeX === 'undefined') {\n              eyeX = this.defaultEyeX;\n              eyeY = this.defaultEyeY;\n              eyeZ = this.defaultEyeZ;\n              centerX = eyeX;\n              centerY = eyeY;\n              centerZ = 0;\n              upX = 0;\n              upY = 1;\n              upZ = 0;\n            }\n\n            this.eyeX = eyeX;\n            this.eyeY = eyeY;\n            this.eyeZ = eyeZ;\n\n            if (typeof centerX !== 'undefined') {\n              this.centerX = centerX;\n              this.centerY = centerY;\n              this.centerZ = centerZ;\n            }\n\n            if (typeof upX !== 'undefined') {\n              this.upX = upX;\n              this.upY = upY;\n              this.upZ = upZ;\n            }\n\n            var local = this._getLocalAxes();\n\n            // the camera affects the model view matrix, insofar as it\n            // inverse translates the world to the eye position of the camera\n            // and rotates it.\n            // prettier-ignore\n            this.cameraMatrix.set(local.x[0], local.y[0], local.z[0], 0,\n  local.x[1], local.y[1], local.z[1], 0,\n  local.x[2], local.y[2], local.z[2], 0,\n  0, 0, 0, 1);\n\n            var tx = -eyeX;\n            var ty = -eyeY;\n            var tz = -eyeZ;\n\n            this.cameraMatrix.translate([tx, ty, tz]);\n\n            if (this._isActive()) {\n              this._renderer.uMVMatrix.set(\n                this.cameraMatrix.mat4[0],\n                this.cameraMatrix.mat4[1],\n                this.cameraMatrix.mat4[2],\n                this.cameraMatrix.mat4[3],\n                this.cameraMatrix.mat4[4],\n                this.cameraMatrix.mat4[5],\n                this.cameraMatrix.mat4[6],\n                this.cameraMatrix.mat4[7],\n                this.cameraMatrix.mat4[8],\n                this.cameraMatrix.mat4[9],\n                this.cameraMatrix.mat4[10],\n                this.cameraMatrix.mat4[11],\n                this.cameraMatrix.mat4[12],\n                this.cameraMatrix.mat4[13],\n                this.cameraMatrix.mat4[14],\n                this.cameraMatrix.mat4[15]\n              );\n            }\n            return this;\n          };\n\n          /**\n           * Move camera along its local axes while maintaining current camera orientation.\n           * @method move\n           * @param {Number} x amount to move along camera's left-right axis\n           * @param {Number} y amount to move along camera's up-down axis\n           * @param {Number} z amount to move along camera's forward-backward axis\n           * @example\n           * <div>\n           * <code>\n           * // see the camera move along its own axes while maintaining its orientation\n           * let cam;\n           * let delta = 0.5;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // move the camera along its local axes\n           *   cam.move(delta, delta, 0);\n           *\n           *   // every 100 frames, switch direction\n           *   if (frameCount % 150 === 0) {\n           *     delta *= -1;\n           *   }\n           *\n           *   translate(-10, -10, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           *   translate(15, 15, 0);\n           *   box(50, 8, 50);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera view moves along a series of 3D boxes, maintaining the same\n           * orientation throughout the move\n           */\n          _main.default.Camera.prototype.move = function(x, y, z) {\n            var local = this._getLocalAxes();\n\n            // scale local axes by movement amounts\n            // based on http://learnwebgl.brown37.net/07_cameras/camera_linear_motion.html\n            var dx = [local.x[0] * x, local.x[1] * x, local.x[2] * x];\n            var dy = [local.y[0] * y, local.y[1] * y, local.y[2] * y];\n            var dz = [local.z[0] * z, local.z[1] * z, local.z[2] * z];\n\n            this.camera(\n              this.eyeX + dx[0] + dy[0] + dz[0],\n              this.eyeY + dx[1] + dy[1] + dz[1],\n              this.eyeZ + dx[2] + dy[2] + dz[2],\n              this.centerX + dx[0] + dy[0] + dz[0],\n              this.centerY + dx[1] + dy[1] + dz[1],\n              this.centerZ + dx[2] + dy[2] + dz[2],\n              0,\n              1,\n              0\n            );\n          };\n\n          /**\n           * Set camera position in world-space while maintaining current camera\n           * orientation.\n           * @method setPosition\n           * @param {Number} x x position of a point in world space\n           * @param {Number} y y position of a point in world space\n           * @param {Number} z z position of a point in world space\n           * @example\n           * <div>\n           * <code>\n           * // press '1' '2' or '3' keys to set camera position\n           *\n           * let cam;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *   cam = createCamera();\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // '1' key\n           *   if (keyIsDown(49)) {\n           *     cam.setPosition(30, 0, 80);\n           *   }\n           *   // '2' key\n           *   if (keyIsDown(50)) {\n           *     cam.setPosition(0, 0, 80);\n           *   }\n           *   // '3' key\n           *   if (keyIsDown(51)) {\n           *     cam.setPosition(-30, 0, 80);\n           *   }\n           *\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * camera position changes as the user presses keys, altering view of a 3D box\n           */\n          _main.default.Camera.prototype.setPosition = function(x, y, z) {\n            var diffX = x - this.eyeX;\n            var diffY = y - this.eyeY;\n            var diffZ = z - this.eyeZ;\n\n            this.camera(\n              x,\n              y,\n              z,\n              this.centerX + diffX,\n              this.centerY + diffY,\n              this.centerZ + diffZ,\n              0,\n              1,\n              0\n            );\n          };\n\n          ////////////////////////////////////////////////////////////////////////////////\n          // Camera Helper Methods\n          ////////////////////////////////////////////////////////////////////////////////\n\n          // @TODO: combine this function with _setDefaultCamera to compute these values\n          // as-needed\n          _main.default.Camera.prototype._computeCameraDefaultSettings = function() {\n            this.defaultCameraFOV = 60 / 180 * Math.PI;\n            this.defaultAspectRatio = this._renderer.width / this._renderer.height;\n            this.defaultEyeX = 0;\n            this.defaultEyeY = 0;\n            this.defaultEyeZ =\n              this._renderer.height / 2.0 / Math.tan(this.defaultCameraFOV / 2.0);\n            this.defaultCenterX = 0;\n            this.defaultCenterY = 0;\n            this.defaultCenterZ = 0;\n            this.defaultCameraNear = this.defaultEyeZ * 0.1;\n            this.defaultCameraFar = this.defaultEyeZ * 10;\n          };\n\n          //detect if user didn't set the camera\n          //then call this function below\n          _main.default.Camera.prototype._setDefaultCamera = function() {\n            this.cameraFOV = this.defaultCameraFOV;\n            this.aspectRatio = this.defaultAspectRatio;\n            this.eyeX = this.defaultEyeX;\n            this.eyeY = this.defaultEyeY;\n            this.eyeZ = this.defaultEyeZ;\n            this.centerX = this.defaultCenterX;\n            this.centerY = this.defaultCenterY;\n            this.centerZ = this.defaultCenterZ;\n            this.upX = 0;\n            this.upY = 1;\n            this.upZ = 0;\n            this.cameraNear = this.defaultCameraNear;\n            this.cameraFar = this.defaultCameraFar;\n\n            this.perspective();\n            this.camera();\n\n            this.cameraType = 'default';\n          };\n\n          _main.default.Camera.prototype._resize = function() {\n            // If we're using the default camera, update the aspect ratio\n            if (this.cameraType === 'default') {\n              this._computeCameraDefaultSettings();\n              this._setDefaultCamera();\n            } else {\n              this.perspective(\n                this.cameraFOV,\n                this._renderer.width / this._renderer.height\n              );\n            }\n          };\n\n          /**\n           * Returns a copy of a camera.\n           * @method copy\n           * @private\n           */\n          _main.default.Camera.prototype.copy = function() {\n            var _cam = new _main.default.Camera(this._renderer);\n            _cam.cameraFOV = this.cameraFOV;\n            _cam.aspectRatio = this.aspectRatio;\n            _cam.eyeX = this.eyeX;\n            _cam.eyeY = this.eyeY;\n            _cam.eyeZ = this.eyeZ;\n            _cam.centerX = this.centerX;\n            _cam.centerY = this.centerY;\n            _cam.centerZ = this.centerZ;\n            _cam.cameraNear = this.cameraNear;\n            _cam.cameraFar = this.cameraFar;\n\n            _cam.cameraType = this.cameraType;\n\n            _cam.cameraMatrix = this.cameraMatrix.copy();\n            _cam.projMatrix = this.projMatrix.copy();\n\n            return _cam;\n          };\n\n          /**\n           * Returns a camera's local axes: left-right, up-down, and forward-backward,\n           * as defined by vectors in world-space.\n           * @method _getLocalAxes\n           * @private\n           */\n          _main.default.Camera.prototype._getLocalAxes = function() {\n            // calculate camera local Z vector\n            var z0 = this.eyeX - this.centerX;\n            var z1 = this.eyeY - this.centerY;\n            var z2 = this.eyeZ - this.centerZ;\n\n            // normalize camera local Z vector\n            var eyeDist = Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n            if (eyeDist !== 0) {\n              z0 /= eyeDist;\n              z1 /= eyeDist;\n              z2 /= eyeDist;\n            }\n\n            // calculate camera Y vector\n            var y0 = this.upX;\n            var y1 = this.upY;\n            var y2 = this.upZ;\n\n            // compute camera local X vector as up vector (local Y) cross local Z\n            var x0 = y1 * z2 - y2 * z1;\n            var x1 = -y0 * z2 + y2 * z0;\n            var x2 = y0 * z1 - y1 * z0;\n\n            // recompute y = z cross x\n            y0 = z1 * x2 - z2 * x1;\n            y1 = -z0 * x2 + z2 * x0;\n            y2 = z0 * x1 - z1 * x0;\n\n            // cross product gives area of parallelogram, which is < 1.0 for\n            // non-perpendicular unit-length vectors; so normalize x, y here:\n            var xmag = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n            if (xmag !== 0) {\n              x0 /= xmag;\n              x1 /= xmag;\n              x2 /= xmag;\n            }\n\n            var ymag = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n            if (ymag !== 0) {\n              y0 /= ymag;\n              y1 /= ymag;\n              y2 /= ymag;\n            }\n\n            return {\n              x: [x0, x1, x2],\n              y: [y0, y1, y2],\n              z: [z0, z1, z2]\n            };\n          };\n\n          /**\n           * Orbits the camera about center point. For use with orbitControl().\n           * @method _orbit\n           * @private\n           * @param {Number} dTheta change in spherical coordinate theta\n           * @param {Number} dPhi change in spherical coordinate phi\n           * @param {Number} dRadius change in radius\n           */\n          _main.default.Camera.prototype._orbit = function(dTheta, dPhi, dRadius) {\n            var diffX = this.eyeX - this.centerX;\n            var diffY = this.eyeY - this.centerY;\n            var diffZ = this.eyeZ - this.centerZ;\n\n            // get spherical coorinates for current camera position about origin\n            var camRadius = Math.sqrt(diffX * diffX + diffY * diffY + diffZ * diffZ);\n            // from https://github.com/mrdoob/three.js/blob/dev/src/math/Spherical.js#L72-L73\n            var camTheta = Math.atan2(diffX, diffZ); // equatorial angle\n            var camPhi = Math.acos(Math.max(-1, Math.min(1, diffY / camRadius))); // polar angle\n\n            // add change\n            camTheta += dTheta;\n            camPhi += dPhi;\n            camRadius += dRadius;\n\n            // prevent zooming through the center:\n            if (camRadius < 0) {\n              camRadius = 0.1;\n            }\n\n            // prevent rotation over the zenith / under bottom\n            if (camPhi > Math.PI) {\n              camPhi = Math.PI;\n            } else if (camPhi <= 0) {\n              camPhi = 0.001;\n            }\n\n            // from https://github.com/mrdoob/three.js/blob/dev/src/math/Vector3.js#L628-L632\n            var _x = Math.sin(camPhi) * camRadius * Math.sin(camTheta);\n            var _y = Math.cos(camPhi) * camRadius;\n            var _z = Math.sin(camPhi) * camRadius * Math.cos(camTheta);\n\n            this.camera(\n              _x + this.centerX,\n              _y + this.centerY,\n              _z + this.centerZ,\n              this.centerX,\n              this.centerY,\n              this.centerZ,\n              0,\n              1,\n              0\n            );\n          };\n\n          /**\n           * Returns true if camera is currently attached to renderer.\n           * @method _isActive\n           * @private\n           */\n          _main.default.Camera.prototype._isActive = function() {\n            return this === this._renderer._curCamera;\n          };\n\n          /**\n           * Sets rendererGL's current camera to a p5.Camera object.  Allows switching\n           * between multiple cameras.\n           * @method setCamera\n           * @param  {p5.Camera} cam  p5.Camera object\n           * @for p5\n           * @example\n           * <div>\n           * <code>\n           * let cam1, cam2;\n           * let currentCamera;\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   normalMaterial();\n           *\n           *   cam1 = createCamera();\n           *   cam2 = createCamera();\n           *   cam2.setPosition(30, 0, 50);\n           *   cam2.lookAt(0, 0, 0);\n           *   cam2.ortho();\n           *\n           *   // set variable for previously active camera:\n           *   currentCamera = 1;\n           * }\n           *\n           * function draw() {\n           *   background(200);\n           *\n           *   // camera 1:\n           *   cam1.lookAt(0, 0, 0);\n           *   cam1.setPosition(sin(frameCount / 60) * 200, 0, 100);\n           *\n           *   // every 100 frames, switch between the two cameras\n           *   if (frameCount % 100 === 0) {\n           *     if (currentCamera === 1) {\n           *       setCamera(cam1);\n           *       currentCamera = 0;\n           *     } else {\n           *       setCamera(cam2);\n           *       currentCamera = 1;\n           *     }\n           *   }\n           *\n           *   drawBoxes();\n           * }\n           *\n           * function drawBoxes() {\n           *   rotateX(frameCount * 0.01);\n           *   translate(-100, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           *   translate(35, 0, 0);\n           *   box(20);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * Canvas switches between two camera views, each showing a series of spinning\n           * 3D boxes.\n           */\n          _main.default.prototype.setCamera = function(cam) {\n            this._renderer._curCamera = cam;\n\n            // set the projection matrix (which is not normally updated each frame)\n            this._renderer.uPMatrix.set(\n              cam.projMatrix.mat4[0],\n              cam.projMatrix.mat4[1],\n              cam.projMatrix.mat4[2],\n              cam.projMatrix.mat4[3],\n              cam.projMatrix.mat4[4],\n              cam.projMatrix.mat4[5],\n              cam.projMatrix.mat4[6],\n              cam.projMatrix.mat4[7],\n              cam.projMatrix.mat4[8],\n              cam.projMatrix.mat4[9],\n              cam.projMatrix.mat4[10],\n              cam.projMatrix.mat4[11],\n              cam.projMatrix.mat4[12],\n              cam.projMatrix.mat4[13],\n              cam.projMatrix.mat4[14],\n              cam.projMatrix.mat4[15]\n            );\n          };\n          var _default = _main.default.Camera;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      108: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } /** //some of the functions are adjusted from Three.js(http://threejs.org)\n           * @module Lights, Camera\n           * @submodule Material\n           * @for p5\n           * @requires core\n           * @requires p5.Geometry\n           */\n          /**\n           * p5 Geometry class\n           * @class p5.Geometry\n           * @constructor\n           * @param  {Integer} [detailX] number of vertices on horizontal surface\n           * @param  {Integer} [detailY] number of vertices on horizontal surface\n           * @param {function} [callback] function to call upon object instantiation.\n           */ _main.default.Geometry = function(detailX, detailY, callback) {\n            //an array containing every vertex\n            //@type [p5.Vector]\n            this.vertices = []; //an array containing every vertex for stroke drawing\n            this.lineVertices = []; //an array 1 normal per lineVertex with\n            //final position representing which direction to\n            //displace for strokeWeight\n            //[[0,0,-1,1], [0,1,0,-1] ...];\n            this.lineNormals = [];\n\n            //an array containing 1 normal per vertex\n            //@type [p5.Vector]\n            //[p5.Vector, p5.Vector, p5.Vector,p5.Vector, p5.Vector, p5.Vector,...]\n            this.vertexNormals = [];\n            //an array containing each three vertex indices that form a face\n            //[[0, 1, 2], [2, 1, 3], ...]\n            this.faces = [];\n            //a 2D array containing uvs for every vertex\n            //[[0.0,0.0],[1.0,0.0], ...]\n            this.uvs = [];\n            // a 2D array containing edge connectivity pattern for create line vertices\n            //based on faces for most objects;\n            this.edges = [];\n            this.vertexColors = [];\n            this.detailX = detailX !== undefined ? detailX : 1;\n            this.detailY = detailY !== undefined ? detailY : 1;\n            this.dirtyFlags = {};\n\n            if (callback instanceof Function) {\n              callback.call(this);\n            }\n            return this; // TODO: is this a constructor?\n          };\n\n          _main.default.Geometry.prototype.reset = function() {\n            this.lineVertices.length = 0;\n            this.lineNormals.length = 0;\n\n            this.vertices.length = 0;\n            this.edges.length = 0;\n            this.vertexColors.length = 0;\n            this.vertexNormals.length = 0;\n            this.uvs.length = 0;\n\n            this.dirtyFlags = {};\n          };\n\n          /**\n           * computes faces for geometry objects based on the vertices.\n           * @method computeFaces\n           * @chainable\n           */\n          _main.default.Geometry.prototype.computeFaces = function() {\n            this.faces.length = 0;\n            var sliceCount = this.detailX + 1;\n            var a, b, c, d;\n            for (var i = 0; i < this.detailY; i++) {\n              for (var j = 0; j < this.detailX; j++) {\n                a = i * sliceCount + j; // + offset;\n                b = i * sliceCount + j + 1; // + offset;\n                c = (i + 1) * sliceCount + j + 1; // + offset;\n                d = (i + 1) * sliceCount + j; // + offset;\n                this.faces.push([a, b, d]);\n                this.faces.push([d, b, c]);\n              }\n            }\n            return this;\n          };\n\n          _main.default.Geometry.prototype._getFaceNormal = function(faceId) {\n            //This assumes that vA->vB->vC is a counter-clockwise ordering\n            var face = this.faces[faceId];\n            var vA = this.vertices[face[0]];\n            var vB = this.vertices[face[1]];\n            var vC = this.vertices[face[2]];\n            var ab = _main.default.Vector.sub(vB, vA);\n            var ac = _main.default.Vector.sub(vC, vA);\n            var n = _main.default.Vector.cross(ab, ac);\n            var ln = _main.default.Vector.mag(n);\n            var sinAlpha =\n              ln / (_main.default.Vector.mag(ab) * _main.default.Vector.mag(ac));\n            if (sinAlpha === 0 || isNaN(sinAlpha)) {\n              console.warn(\n                'p5.Geometry.prototype._getFaceNormal:',\n                'face has colinear sides or a repeated vertex'\n              );\n\n              return n;\n            }\n            if (sinAlpha > 1) sinAlpha = 1; // handle float rounding error\n            return n.mult(Math.asin(sinAlpha) / ln);\n          };\n          /**\n           * computes smooth normals per vertex as an average of each\n           * face.\n           * @method computeNormals\n           * @chainable\n           */\n          _main.default.Geometry.prototype.computeNormals = function() {\n            var vertexNormals = this.vertexNormals;\n            var vertices = this.vertices;\n            var faces = this.faces;\n            var iv;\n\n            // initialize the vertexNormals array with empty vectors\n            vertexNormals.length = 0;\n            for (iv = 0; iv < vertices.length; ++iv) {\n              vertexNormals.push(new _main.default.Vector());\n            }\n\n            // loop through all the faces adding its normal to the normal\n            // of each of its vertices\n            for (var f = 0; f < faces.length; ++f) {\n              var face = faces[f];\n              var faceNormal = this._getFaceNormal(f);\n\n              // all three vertices get the normal added\n              for (var fv = 0; fv < 3; ++fv) {\n                var vertexIndex = face[fv];\n                vertexNormals[vertexIndex].add(faceNormal);\n              }\n            }\n\n            // normalize the normals\n            for (iv = 0; iv < vertices.length; ++iv) {\n              vertexNormals[iv].normalize();\n            }\n\n            return this;\n          };\n\n          /**\n           * Averages the vertex normals. Used in curved\n           * surfaces\n           * @method averageNormals\n           * @chainable\n           */\n          _main.default.Geometry.prototype.averageNormals = function() {\n            for (var i = 0; i <= this.detailY; i++) {\n              var offset = this.detailX + 1;\n              var temp = _main.default.Vector.add(\n                this.vertexNormals[i * offset],\n                this.vertexNormals[i * offset + this.detailX]\n              );\n\n              temp = _main.default.Vector.div(temp, 2);\n              this.vertexNormals[i * offset] = temp;\n              this.vertexNormals[i * offset + this.detailX] = temp;\n            }\n            return this;\n          };\n\n          /**\n           * Averages pole normals.  Used in spherical primitives\n           * @method averagePoleNormals\n           * @chainable\n           */\n          _main.default.Geometry.prototype.averagePoleNormals = function() {\n            //average the north pole\n            var sum = new _main.default.Vector(0, 0, 0);\n            for (var i = 0; i < this.detailX; i++) {\n              sum.add(this.vertexNormals[i]);\n            }\n            sum = _main.default.Vector.div(sum, this.detailX);\n\n            for (var _i = 0; _i < this.detailX; _i++) {\n              this.vertexNormals[_i] = sum;\n            }\n\n            //average the south pole\n            sum = new _main.default.Vector(0, 0, 0);\n            for (\n              var _i2 = this.vertices.length - 1;\n              _i2 > this.vertices.length - 1 - this.detailX;\n              _i2--\n            ) {\n              sum.add(this.vertexNormals[_i2]);\n            }\n            sum = _main.default.Vector.div(sum, this.detailX);\n\n            for (\n              var _i3 = this.vertices.length - 1;\n              _i3 > this.vertices.length - 1 - this.detailX;\n              _i3--\n            ) {\n              this.vertexNormals[_i3] = sum;\n            }\n            return this;\n          };\n\n          /**\n           * Create a 2D array for establishing stroke connections\n           * @private\n           * @chainable\n           */\n          _main.default.Geometry.prototype._makeTriangleEdges = function() {\n            this.edges.length = 0;\n            if (Array.isArray(this.strokeIndices)) {\n              for (var i = 0, max = this.strokeIndices.length; i < max; i++) {\n                this.edges.push(this.strokeIndices[i]);\n              }\n            } else {\n              for (var j = 0; j < this.faces.length; j++) {\n                this.edges.push([this.faces[j][0], this.faces[j][1]]);\n                this.edges.push([this.faces[j][1], this.faces[j][2]]);\n                this.edges.push([this.faces[j][2], this.faces[j][0]]);\n              }\n            }\n            return this;\n          };\n\n          /**\n           * Create 4 vertices for each stroke line, two at the beginning position\n           * and two at the end position. These vertices are displaced relative to\n           * that line's normal on the GPU\n           * @private\n           * @chainable\n           */\n          _main.default.Geometry.prototype._edgesToVertices = function() {\n            this.lineVertices.length = 0;\n            this.lineNormals.length = 0;\n\n            for (var i = 0; i < this.edges.length; i++) {\n              var begin = this.vertices[this.edges[i][0]];\n              var end = this.vertices[this.edges[i][1]];\n              var dir = end\n                .copy()\n                .sub(begin)\n                .normalize();\n              var a = begin.array();\n              var b = begin.array();\n              var c = end.array();\n              var d = end.array();\n              var dirAdd = dir.array();\n              var dirSub = dir.array();\n              // below is used to displace the pair of vertices at beginning and end\n              // in opposite directions\n              dirAdd.push(1);\n              dirSub.push(-1);\n              this.lineNormals.push(dirAdd, dirSub, dirAdd, dirAdd, dirSub, dirSub);\n              this.lineVertices.push(a, b, c, c, b, d);\n            }\n            return this;\n          };\n\n          /**\n           * Modifies all vertices to be centered within the range -100 to 100.\n           * @method normalize\n           * @chainable\n           */\n          _main.default.Geometry.prototype.normalize = function() {\n            if (this.vertices.length > 0) {\n              // Find the corners of our bounding box\n              var maxPosition = this.vertices[0].copy();\n              var minPosition = this.vertices[0].copy();\n\n              for (var i = 0; i < this.vertices.length; i++) {\n                maxPosition.x = Math.max(maxPosition.x, this.vertices[i].x);\n                minPosition.x = Math.min(minPosition.x, this.vertices[i].x);\n                maxPosition.y = Math.max(maxPosition.y, this.vertices[i].y);\n                minPosition.y = Math.min(minPosition.y, this.vertices[i].y);\n                maxPosition.z = Math.max(maxPosition.z, this.vertices[i].z);\n                minPosition.z = Math.min(minPosition.z, this.vertices[i].z);\n              }\n\n              var center = _main.default.Vector.lerp(maxPosition, minPosition, 0.5);\n              var dist = _main.default.Vector.sub(maxPosition, minPosition);\n              var longestDist = Math.max(Math.max(dist.x, dist.y), dist.z);\n              var scale = 200 / longestDist;\n\n              for (var _i4 = 0; _i4 < this.vertices.length; _i4++) {\n                this.vertices[_i4].sub(center);\n                this.vertices[_i4].mult(scale);\n              }\n            }\n            return this;\n          };\n          var _default = _main.default.Geometry;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      109: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * @requires constants\n           * @todo see methods below needing further implementation.\n           * future consideration: implement SIMD optimizations\n           * when browser compatibility becomes available\n           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/\n           *   Reference/Global_Objects/SIMD\n           */ var GLMAT_ARRAY_TYPE = Array;\n          var isMatrixArray = function isMatrixArray(x) {\n            return x instanceof Array;\n          };\n          if (typeof Float32Array !== 'undefined') {\n            GLMAT_ARRAY_TYPE = Float32Array;\n            isMatrixArray = function isMatrixArray(x) {\n              return x instanceof Array || x instanceof Float32Array;\n            };\n          }\n\n          /**\n           * A class to describe a 4x4 matrix\n           * for model and view matrix manipulation in the p5js webgl renderer.\n           * @class p5.Matrix\n           * @private\n           * @constructor\n           * @param {Array} [mat4] array literal of our 4x4 matrix\n           */\n          _main.default.Matrix = function() {\n            var args = new Array(arguments.length);\n            for (var i = 0; i < args.length; ++i) {\n              args[i] = arguments[i];\n            }\n\n            // This is default behavior when object\n            // instantiated using createMatrix()\n            // @todo implement createMatrix() in core/math.js\n            if (args.length && args[args.length - 1] instanceof _main.default) {\n              this.p5 = args[args.length - 1];\n            }\n\n            if (args[0] === 'mat3') {\n              this.mat3 = Array.isArray(args[1])\n                ? args[1]\n                : new GLMAT_ARRAY_TYPE([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n            } else {\n              this.mat4 = Array.isArray(args[0])\n                ? args[0]\n                : new GLMAT_ARRAY_TYPE([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n            }\n            return this;\n          };\n\n          /**\n           * Sets the x, y, and z component of the vector using two or three separate\n           * variables, the data from a p5.Matrix, or the values from a float array.\n           *\n           * @method set\n           * @param {p5.Matrix|Float32Array|Number[]} [inMatrix] the input p5.Matrix or\n           *                                     an Array of length 16\n           * @chainable\n           */\n          /**\n           * @method set\n           * @param {Number[]} elements 16 numbers passed by value to avoid\n           *                                     array copying.\n           * @chainable\n           */\n          _main.default.Matrix.prototype.set = function(inMatrix) {\n            if (inMatrix instanceof _main.default.Matrix) {\n              this.mat4 = inMatrix.mat4;\n              return this;\n            } else if (isMatrixArray(inMatrix)) {\n              this.mat4 = inMatrix;\n              return this;\n            } else if (arguments.length === 16) {\n              this.mat4[0] = arguments[0];\n              this.mat4[1] = arguments[1];\n              this.mat4[2] = arguments[2];\n              this.mat4[3] = arguments[3];\n              this.mat4[4] = arguments[4];\n              this.mat4[5] = arguments[5];\n              this.mat4[6] = arguments[6];\n              this.mat4[7] = arguments[7];\n              this.mat4[8] = arguments[8];\n              this.mat4[9] = arguments[9];\n              this.mat4[10] = arguments[10];\n              this.mat4[11] = arguments[11];\n              this.mat4[12] = arguments[12];\n              this.mat4[13] = arguments[13];\n              this.mat4[14] = arguments[14];\n              this.mat4[15] = arguments[15];\n            }\n            return this;\n          };\n\n          /**\n           * Gets a copy of the vector, returns a p5.Matrix object.\n           *\n           * @method get\n           * @return {p5.Matrix} the copy of the p5.Matrix object\n           */\n          _main.default.Matrix.prototype.get = function() {\n            return new _main.default.Matrix(this.mat4, this.p5);\n          };\n\n          /**\n           * return a copy of a matrix\n           * @method copy\n           * @return {p5.Matrix}   the result matrix\n           */\n          _main.default.Matrix.prototype.copy = function() {\n            var copied = new _main.default.Matrix(this.p5);\n            copied.mat4[0] = this.mat4[0];\n            copied.mat4[1] = this.mat4[1];\n            copied.mat4[2] = this.mat4[2];\n            copied.mat4[3] = this.mat4[3];\n            copied.mat4[4] = this.mat4[4];\n            copied.mat4[5] = this.mat4[5];\n            copied.mat4[6] = this.mat4[6];\n            copied.mat4[7] = this.mat4[7];\n            copied.mat4[8] = this.mat4[8];\n            copied.mat4[9] = this.mat4[9];\n            copied.mat4[10] = this.mat4[10];\n            copied.mat4[11] = this.mat4[11];\n            copied.mat4[12] = this.mat4[12];\n            copied.mat4[13] = this.mat4[13];\n            copied.mat4[14] = this.mat4[14];\n            copied.mat4[15] = this.mat4[15];\n            return copied;\n          };\n\n          /**\n           * return an identity matrix\n           * @method identity\n           * @return {p5.Matrix}   the result matrix\n           */\n          _main.default.Matrix.identity = function(pInst) {\n            return new _main.default.Matrix(pInst);\n          };\n\n          /**\n           * transpose according to a given matrix\n           * @method transpose\n           * @param  {p5.Matrix|Float32Array|Number[]} a  the matrix to be\n           *                                               based on to transpose\n           * @chainable\n           */\n          _main.default.Matrix.prototype.transpose = function(a) {\n            var a01, a02, a03, a12, a13, a23;\n            if (a instanceof _main.default.Matrix) {\n              a01 = a.mat4[1];\n              a02 = a.mat4[2];\n              a03 = a.mat4[3];\n              a12 = a.mat4[6];\n              a13 = a.mat4[7];\n              a23 = a.mat4[11];\n\n              this.mat4[0] = a.mat4[0];\n              this.mat4[1] = a.mat4[4];\n              this.mat4[2] = a.mat4[8];\n              this.mat4[3] = a.mat4[12];\n              this.mat4[4] = a01;\n              this.mat4[5] = a.mat4[5];\n              this.mat4[6] = a.mat4[9];\n              this.mat4[7] = a.mat4[13];\n              this.mat4[8] = a02;\n              this.mat4[9] = a12;\n              this.mat4[10] = a.mat4[10];\n              this.mat4[11] = a.mat4[14];\n              this.mat4[12] = a03;\n              this.mat4[13] = a13;\n              this.mat4[14] = a23;\n              this.mat4[15] = a.mat4[15];\n            } else if (isMatrixArray(a)) {\n              a01 = a[1];\n              a02 = a[2];\n              a03 = a[3];\n              a12 = a[6];\n              a13 = a[7];\n              a23 = a[11];\n\n              this.mat4[0] = a[0];\n              this.mat4[1] = a[4];\n              this.mat4[2] = a[8];\n              this.mat4[3] = a[12];\n              this.mat4[4] = a01;\n              this.mat4[5] = a[5];\n              this.mat4[6] = a[9];\n              this.mat4[7] = a[13];\n              this.mat4[8] = a02;\n              this.mat4[9] = a12;\n              this.mat4[10] = a[10];\n              this.mat4[11] = a[14];\n              this.mat4[12] = a03;\n              this.mat4[13] = a13;\n              this.mat4[14] = a23;\n              this.mat4[15] = a[15];\n            }\n            return this;\n          };\n\n          /**\n           * invert  matrix according to a give matrix\n           * @method invert\n           * @param  {p5.Matrix|Float32Array|Number[]} a   the matrix to be\n           *                                                based on to invert\n           * @chainable\n           */\n          _main.default.Matrix.prototype.invert = function(a) {\n            var a00, a01, a02, a03, a10, a11, a12, a13;\n            var a20, a21, a22, a23, a30, a31, a32, a33;\n            if (a instanceof _main.default.Matrix) {\n              a00 = a.mat4[0];\n              a01 = a.mat4[1];\n              a02 = a.mat4[2];\n              a03 = a.mat4[3];\n              a10 = a.mat4[4];\n              a11 = a.mat4[5];\n              a12 = a.mat4[6];\n              a13 = a.mat4[7];\n              a20 = a.mat4[8];\n              a21 = a.mat4[9];\n              a22 = a.mat4[10];\n              a23 = a.mat4[11];\n              a30 = a.mat4[12];\n              a31 = a.mat4[13];\n              a32 = a.mat4[14];\n              a33 = a.mat4[15];\n            } else if (isMatrixArray(a)) {\n              a00 = a[0];\n              a01 = a[1];\n              a02 = a[2];\n              a03 = a[3];\n              a10 = a[4];\n              a11 = a[5];\n              a12 = a[6];\n              a13 = a[7];\n              a20 = a[8];\n              a21 = a[9];\n              a22 = a[10];\n              a23 = a[11];\n              a30 = a[12];\n              a31 = a[13];\n              a32 = a[14];\n              a33 = a[15];\n            }\n            var b00 = a00 * a11 - a01 * a10;\n            var b01 = a00 * a12 - a02 * a10;\n            var b02 = a00 * a13 - a03 * a10;\n            var b03 = a01 * a12 - a02 * a11;\n            var b04 = a01 * a13 - a03 * a11;\n            var b05 = a02 * a13 - a03 * a12;\n            var b06 = a20 * a31 - a21 * a30;\n            var b07 = a20 * a32 - a22 * a30;\n            var b08 = a20 * a33 - a23 * a30;\n            var b09 = a21 * a32 - a22 * a31;\n            var b10 = a21 * a33 - a23 * a31;\n            var b11 = a22 * a33 - a23 * a32;\n\n            // Calculate the determinant\n            var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n            if (!det) {\n              return null;\n            }\n            det = 1.0 / det;\n\n            this.mat4[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n            this.mat4[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n            this.mat4[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n            this.mat4[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n            this.mat4[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n            this.mat4[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n            this.mat4[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n            this.mat4[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n            this.mat4[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n            this.mat4[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n            this.mat4[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n            this.mat4[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n            this.mat4[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n            this.mat4[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n            this.mat4[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n            this.mat4[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n            return this;\n          };\n\n          /**\n           * Inverts a 3x3 matrix\n           * @method invert3x3\n           * @chainable\n           */\n          _main.default.Matrix.prototype.invert3x3 = function() {\n            var a00 = this.mat3[0];\n            var a01 = this.mat3[1];\n            var a02 = this.mat3[2];\n            var a10 = this.mat3[3];\n            var a11 = this.mat3[4];\n            var a12 = this.mat3[5];\n            var a20 = this.mat3[6];\n            var a21 = this.mat3[7];\n            var a22 = this.mat3[8];\n            var b01 = a22 * a11 - a12 * a21;\n            var b11 = -a22 * a10 + a12 * a20;\n            var b21 = a21 * a10 - a11 * a20;\n\n            // Calculate the determinant\n            var det = a00 * b01 + a01 * b11 + a02 * b21;\n            if (!det) {\n              return null;\n            }\n            det = 1.0 / det;\n            this.mat3[0] = b01 * det;\n            this.mat3[1] = (-a22 * a01 + a02 * a21) * det;\n            this.mat3[2] = (a12 * a01 - a02 * a11) * det;\n            this.mat3[3] = b11 * det;\n            this.mat3[4] = (a22 * a00 - a02 * a20) * det;\n            this.mat3[5] = (-a12 * a00 + a02 * a10) * det;\n            this.mat3[6] = b21 * det;\n            this.mat3[7] = (-a21 * a00 + a01 * a20) * det;\n            this.mat3[8] = (a11 * a00 - a01 * a10) * det;\n            return this;\n          };\n\n          /**\n           * transposes a 3x3 p5.Matrix by a mat3\n           * @method transpose3x3\n           * @param  {Number[]} mat3 1-dimensional array\n           * @chainable\n           */\n          _main.default.Matrix.prototype.transpose3x3 = function(mat3) {\n            var a01 = mat3[1],\n              a02 = mat3[2],\n              a12 = mat3[5];\n            this.mat3[1] = mat3[3];\n            this.mat3[2] = mat3[6];\n            this.mat3[3] = a01;\n            this.mat3[5] = mat3[7];\n            this.mat3[6] = a02;\n            this.mat3[7] = a12;\n            return this;\n          };\n\n          /**\n           * converts a 4x4 matrix to its 3x3 inverse transform\n           * commonly used in MVMatrix to NMatrix conversions.\n           * @method invertTranspose\n           * @param  {p5.Matrix} mat4 the matrix to be based on to invert\n           * @chainable\n           * @todo  finish implementation\n           */\n          _main.default.Matrix.prototype.inverseTranspose = function(matrix) {\n            if (this.mat3 === undefined) {\n              console.error('sorry, this function only works with mat3');\n            } else {\n              //convert mat4 -> mat3\n              this.mat3[0] = matrix.mat4[0];\n              this.mat3[1] = matrix.mat4[1];\n              this.mat3[2] = matrix.mat4[2];\n              this.mat3[3] = matrix.mat4[4];\n              this.mat3[4] = matrix.mat4[5];\n              this.mat3[5] = matrix.mat4[6];\n              this.mat3[6] = matrix.mat4[8];\n              this.mat3[7] = matrix.mat4[9];\n              this.mat3[8] = matrix.mat4[10];\n            }\n\n            var inverse = this.invert3x3();\n            // check inverse succeeded\n            if (inverse) {\n              inverse.transpose3x3(this.mat3);\n            } else {\n              // in case of singularity, just zero the matrix\n              for (var i = 0; i < 9; i++) {\n                this.mat3[i] = 0;\n              }\n            }\n            return this;\n          };\n\n          /**\n           * inspired by Toji's mat4 determinant\n           * @method determinant\n           * @return {Number} Determinant of our 4x4 matrix\n           */\n          _main.default.Matrix.prototype.determinant = function() {\n            var d00 = this.mat4[0] * this.mat4[5] - this.mat4[1] * this.mat4[4],\n              d01 = this.mat4[0] * this.mat4[6] - this.mat4[2] * this.mat4[4],\n              d02 = this.mat4[0] * this.mat4[7] - this.mat4[3] * this.mat4[4],\n              d03 = this.mat4[1] * this.mat4[6] - this.mat4[2] * this.mat4[5],\n              d04 = this.mat4[1] * this.mat4[7] - this.mat4[3] * this.mat4[5],\n              d05 = this.mat4[2] * this.mat4[7] - this.mat4[3] * this.mat4[6],\n              d06 = this.mat4[8] * this.mat4[13] - this.mat4[9] * this.mat4[12],\n              d07 = this.mat4[8] * this.mat4[14] - this.mat4[10] * this.mat4[12],\n              d08 = this.mat4[8] * this.mat4[15] - this.mat4[11] * this.mat4[12],\n              d09 = this.mat4[9] * this.mat4[14] - this.mat4[10] * this.mat4[13],\n              d10 = this.mat4[9] * this.mat4[15] - this.mat4[11] * this.mat4[13],\n              d11 = this.mat4[10] * this.mat4[15] - this.mat4[11] * this.mat4[14];\n\n            // Calculate the determinant\n            return d00 * d11 - d01 * d10 + d02 * d09 + d03 * d08 - d04 * d07 + d05 * d06;\n          };\n\n          /**\n           * multiply two mat4s\n           * @method mult\n           * @param {p5.Matrix|Float32Array|Number[]} multMatrix The matrix\n           *                                                we want to multiply by\n           * @chainable\n           */\n          _main.default.Matrix.prototype.mult = function(multMatrix) {\n            var _src;\n\n            if (multMatrix === this || multMatrix === this.mat4) {\n              _src = this.copy().mat4; // only need to allocate in this rare case\n            } else if (multMatrix instanceof _main.default.Matrix) {\n              _src = multMatrix.mat4;\n            } else if (isMatrixArray(multMatrix)) {\n              _src = multMatrix;\n            } else if (arguments.length === 16) {\n              _src = arguments;\n            } else {\n              return; // nothing to do.\n            }\n\n            // each row is used for the multiplier\n            var b0 = this.mat4[0],\n              b1 = this.mat4[1],\n              b2 = this.mat4[2],\n              b3 = this.mat4[3];\n            this.mat4[0] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n            this.mat4[1] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n            this.mat4[2] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n            this.mat4[3] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n            b0 = this.mat4[4];\n            b1 = this.mat4[5];\n            b2 = this.mat4[6];\n            b3 = this.mat4[7];\n            this.mat4[4] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n            this.mat4[5] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n            this.mat4[6] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n            this.mat4[7] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n            b0 = this.mat4[8];\n            b1 = this.mat4[9];\n            b2 = this.mat4[10];\n            b3 = this.mat4[11];\n            this.mat4[8] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n            this.mat4[9] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n            this.mat4[10] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n            this.mat4[11] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n            b0 = this.mat4[12];\n            b1 = this.mat4[13];\n            b2 = this.mat4[14];\n            b3 = this.mat4[15];\n            this.mat4[12] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n            this.mat4[13] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n            this.mat4[14] = b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n            this.mat4[15] = b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n            return this;\n          };\n\n          _main.default.Matrix.prototype.apply = function(multMatrix) {\n            var _src;\n\n            if (multMatrix === this || multMatrix === this.mat4) {\n              _src = this.copy().mat4; // only need to allocate in this rare case\n            } else if (multMatrix instanceof _main.default.Matrix) {\n              _src = multMatrix.mat4;\n            } else if (isMatrixArray(multMatrix)) {\n              _src = multMatrix;\n            } else if (arguments.length === 16) {\n              _src = arguments;\n            } else {\n              return; // nothing to do.\n            }\n\n            var mat4 = this.mat4;\n\n            // each row is used for the multiplier\n            var m0 = mat4[0];\n            var m4 = mat4[4];\n            var m8 = mat4[8];\n            var m12 = mat4[12];\n            mat4[0] = _src[0] * m0 + _src[1] * m4 + _src[2] * m8 + _src[3] * m12;\n            mat4[4] = _src[4] * m0 + _src[5] * m4 + _src[6] * m8 + _src[7] * m12;\n            mat4[8] = _src[8] * m0 + _src[9] * m4 + _src[10] * m8 + _src[11] * m12;\n            mat4[12] = _src[12] * m0 + _src[13] * m4 + _src[14] * m8 + _src[15] * m12;\n\n            var m1 = mat4[1];\n            var m5 = mat4[5];\n            var m9 = mat4[9];\n            var m13 = mat4[13];\n            mat4[1] = _src[0] * m1 + _src[1] * m5 + _src[2] * m9 + _src[3] * m13;\n            mat4[5] = _src[4] * m1 + _src[5] * m5 + _src[6] * m9 + _src[7] * m13;\n            mat4[9] = _src[8] * m1 + _src[9] * m5 + _src[10] * m9 + _src[11] * m13;\n            mat4[13] = _src[12] * m1 + _src[13] * m5 + _src[14] * m9 + _src[15] * m13;\n\n            var m2 = mat4[2];\n            var m6 = mat4[6];\n            var m10 = mat4[10];\n            var m14 = mat4[14];\n            mat4[2] = _src[0] * m2 + _src[1] * m6 + _src[2] * m10 + _src[3] * m14;\n            mat4[6] = _src[4] * m2 + _src[5] * m6 + _src[6] * m10 + _src[7] * m14;\n            mat4[10] = _src[8] * m2 + _src[9] * m6 + _src[10] * m10 + _src[11] * m14;\n            mat4[14] = _src[12] * m2 + _src[13] * m6 + _src[14] * m10 + _src[15] * m14;\n\n            var m3 = mat4[3];\n            var m7 = mat4[7];\n            var m11 = mat4[11];\n            var m15 = mat4[15];\n            mat4[3] = _src[0] * m3 + _src[1] * m7 + _src[2] * m11 + _src[3] * m15;\n            mat4[7] = _src[4] * m3 + _src[5] * m7 + _src[6] * m11 + _src[7] * m15;\n            mat4[11] = _src[8] * m3 + _src[9] * m7 + _src[10] * m11 + _src[11] * m15;\n            mat4[15] = _src[12] * m3 + _src[13] * m7 + _src[14] * m11 + _src[15] * m15;\n\n            return this;\n          };\n\n          /**\n           * scales a p5.Matrix by scalars or a vector\n           * @method scale\n           * @param  {p5.Vector|Float32Array|Number[]} s vector to scale by\n           * @chainable\n           */\n          _main.default.Matrix.prototype.scale = function(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              // x is a vector, extract the components from it.\n              y = x.y;\n              z = x.z;\n              x = x.x; // must be last\n            } else if (x instanceof Array) {\n              // x is an array, extract the components from it.\n              y = x[1];\n              z = x[2];\n              x = x[0]; // must be last\n            }\n\n            this.mat4[0] *= x;\n            this.mat4[1] *= x;\n            this.mat4[2] *= x;\n            this.mat4[3] *= x;\n            this.mat4[4] *= y;\n            this.mat4[5] *= y;\n            this.mat4[6] *= y;\n            this.mat4[7] *= y;\n            this.mat4[8] *= z;\n            this.mat4[9] *= z;\n            this.mat4[10] *= z;\n            this.mat4[11] *= z;\n\n            return this;\n          };\n\n          /**\n           * rotate our Matrix around an axis by the given angle.\n           * @method rotate\n           * @param  {Number} a The angle of rotation in radians\n           * @param  {p5.Vector|Number[]} axis  the axis(es) to rotate around\n           * @chainable\n           * inspired by Toji's gl-matrix lib, mat4 rotation\n           */\n          _main.default.Matrix.prototype.rotate = function(a, x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              // x is a vector, extract the components from it.\n              y = x.y;\n              z = x.z;\n              x = x.x; //must be last\n            } else if (x instanceof Array) {\n              // x is an array, extract the components from it.\n              y = x[1];\n              z = x[2];\n              x = x[0]; //must be last\n            }\n\n            var len = Math.sqrt(x * x + y * y + z * z);\n            x *= 1 / len;\n            y *= 1 / len;\n            z *= 1 / len;\n\n            var a00 = this.mat4[0];\n            var a01 = this.mat4[1];\n            var a02 = this.mat4[2];\n            var a03 = this.mat4[3];\n            var a10 = this.mat4[4];\n            var a11 = this.mat4[5];\n            var a12 = this.mat4[6];\n            var a13 = this.mat4[7];\n            var a20 = this.mat4[8];\n            var a21 = this.mat4[9];\n            var a22 = this.mat4[10];\n            var a23 = this.mat4[11];\n\n            //sin,cos, and tan of respective angle\n            var sA = Math.sin(a);\n            var cA = Math.cos(a);\n            var tA = 1 - cA;\n            // Construct the elements of the rotation matrix\n            var b00 = x * x * tA + cA;\n            var b01 = y * x * tA + z * sA;\n            var b02 = z * x * tA - y * sA;\n            var b10 = x * y * tA - z * sA;\n            var b11 = y * y * tA + cA;\n            var b12 = z * y * tA + x * sA;\n            var b20 = x * z * tA + y * sA;\n            var b21 = y * z * tA - x * sA;\n            var b22 = z * z * tA + cA;\n\n            // rotation-specific matrix multiplication\n            this.mat4[0] = a00 * b00 + a10 * b01 + a20 * b02;\n            this.mat4[1] = a01 * b00 + a11 * b01 + a21 * b02;\n            this.mat4[2] = a02 * b00 + a12 * b01 + a22 * b02;\n            this.mat4[3] = a03 * b00 + a13 * b01 + a23 * b02;\n            this.mat4[4] = a00 * b10 + a10 * b11 + a20 * b12;\n            this.mat4[5] = a01 * b10 + a11 * b11 + a21 * b12;\n            this.mat4[6] = a02 * b10 + a12 * b11 + a22 * b12;\n            this.mat4[7] = a03 * b10 + a13 * b11 + a23 * b12;\n            this.mat4[8] = a00 * b20 + a10 * b21 + a20 * b22;\n            this.mat4[9] = a01 * b20 + a11 * b21 + a21 * b22;\n            this.mat4[10] = a02 * b20 + a12 * b21 + a22 * b22;\n            this.mat4[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n            return this;\n          };\n\n          /**\n           * @todo  finish implementing this method!\n           * translates\n           * @method translate\n           * @param  {Number[]} v vector to translate by\n           * @chainable\n           */\n          _main.default.Matrix.prototype.translate = function(v) {\n            var x = v[0],\n              y = v[1],\n              z = v[2] || 0;\n            this.mat4[12] += this.mat4[0] * x + this.mat4[4] * y + this.mat4[8] * z;\n            this.mat4[13] += this.mat4[1] * x + this.mat4[5] * y + this.mat4[9] * z;\n            this.mat4[14] += this.mat4[2] * x + this.mat4[6] * y + this.mat4[10] * z;\n            this.mat4[15] += this.mat4[3] * x + this.mat4[7] * y + this.mat4[11] * z;\n          };\n\n          _main.default.Matrix.prototype.rotateX = function(a) {\n            this.rotate(a, 1, 0, 0);\n          };\n          _main.default.Matrix.prototype.rotateY = function(a) {\n            this.rotate(a, 0, 1, 0);\n          };\n          _main.default.Matrix.prototype.rotateZ = function(a) {\n            this.rotate(a, 0, 0, 1);\n          };\n\n          /**\n           * sets the perspective matrix\n           * @method perspective\n           * @param  {Number} fovy   [description]\n           * @param  {Number} aspect [description]\n           * @param  {Number} near   near clipping plane\n           * @param  {Number} far    far clipping plane\n           * @chainable\n           */\n          _main.default.Matrix.prototype.perspective = function(fovy, aspect, near, far) {\n            var f = 1.0 / Math.tan(fovy / 2),\n              nf = 1 / (near - far);\n\n            this.mat4[0] = f / aspect;\n            this.mat4[1] = 0;\n            this.mat4[2] = 0;\n            this.mat4[3] = 0;\n            this.mat4[4] = 0;\n            this.mat4[5] = f;\n            this.mat4[6] = 0;\n            this.mat4[7] = 0;\n            this.mat4[8] = 0;\n            this.mat4[9] = 0;\n            this.mat4[10] = (far + near) * nf;\n            this.mat4[11] = -1;\n            this.mat4[12] = 0;\n            this.mat4[13] = 0;\n            this.mat4[14] = 2 * far * near * nf;\n            this.mat4[15] = 0;\n\n            return this;\n          };\n\n          /**\n           * sets the ortho matrix\n           * @method ortho\n           * @param  {Number} left   [description]\n           * @param  {Number} right  [description]\n           * @param  {Number} bottom [description]\n           * @param  {Number} top    [description]\n           * @param  {Number} near   near clipping plane\n           * @param  {Number} far    far clipping plane\n           * @chainable\n           */\n          _main.default.Matrix.prototype.ortho = function(\n            left,\n            right,\n            bottom,\n            top,\n            near,\n            far\n          ) {\n            var lr = 1 / (left - right),\n              bt = 1 / (bottom - top),\n              nf = 1 / (near - far);\n            this.mat4[0] = -2 * lr;\n            this.mat4[1] = 0;\n            this.mat4[2] = 0;\n            this.mat4[3] = 0;\n            this.mat4[4] = 0;\n            this.mat4[5] = -2 * bt;\n            this.mat4[6] = 0;\n            this.mat4[7] = 0;\n            this.mat4[8] = 0;\n            this.mat4[9] = 0;\n            this.mat4[10] = 2 * nf;\n            this.mat4[11] = 0;\n            this.mat4[12] = (left + right) * lr;\n            this.mat4[13] = (top + bottom) * bt;\n            this.mat4[14] = (far + near) * nf;\n            this.mat4[15] = 1;\n\n            return this;\n          };\n\n          /**\n           * PRIVATE\n           */\n          // matrix methods adapted from:\n          // https://developer.mozilla.org/en-US/docs/Web/WebGL/\n          // gluPerspective\n          //\n          // function _makePerspective(fovy, aspect, znear, zfar){\n          //    const ymax = znear * Math.tan(fovy * Math.PI / 360.0);\n          //    const ymin = -ymax;\n          //    const xmin = ymin * aspect;\n          //    const xmax = ymax * aspect;\n          //    return _makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\n          //  }\n\n          ////\n          //// glFrustum\n          ////\n          //function _makeFrustum(left, right, bottom, top, znear, zfar){\n          //  const X = 2*znear/(right-left);\n          //  const Y = 2*znear/(top-bottom);\n          //  const A = (right+left)/(right-left);\n          //  const B = (top+bottom)/(top-bottom);\n          //  const C = -(zfar+znear)/(zfar-znear);\n          //  const D = -2*zfar*znear/(zfar-znear);\n          //  const frustrumMatrix =[\n          //  X, 0, A, 0,\n          //  0, Y, B, 0,\n          //  0, 0, C, D,\n          //  0, 0, -1, 0\n          //];\n          //return frustrumMatrix;\n          // }\n\n          // function _setMVPMatrices(){\n          ////an identity matrix\n          ////@TODO use the p5.Matrix class to abstract away our MV matrices and\n          ///other math\n          //const _mvMatrix =\n          //[\n          //  1.0,0.0,0.0,0.0,\n          //  0.0,1.0,0.0,0.0,\n          //  0.0,0.0,1.0,0.0,\n          //  0.0,0.0,0.0,1.0\n          //];\n          var _default = _main.default.Matrix;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      110: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n\n          _main.default.RenderBuffer = function(size, src, dst, attr, renderer, map) {\n            this.size = size; // the number of FLOATs in each vertex\n            this.src = src; // the name of the model's source array\n            this.dst = dst; // the name of the geometry's buffer\n            this.attr = attr; // the name of the vertex attribute\n            this._renderer = renderer;\n            this.map = map; // optional, a transformation function to apply to src\n          };\n\n          /**\n           * Enables and binds the buffers used by shader when the appropriate data exists in geometry.\n           * Must always be done prior to drawing geometry in WebGL.\n           * @param {p5.Geometry} geometry Geometry that is going to be drawn\n           * @param {p5.Shader} shader Active shader\n           * @private\n           */\n          _main.default.RenderBuffer.prototype._prepareBuffer = function(geometry, shader) {\n            var attributes = shader.attributes;\n            var gl = this._renderer.GL;\n            var model;\n            if (geometry.model) {\n              model = geometry.model;\n            } else {\n              model = geometry;\n            }\n\n            // loop through each of the buffer definitions\n            var attr = attributes[this.attr];\n            if (!attr) {\n              return;\n            }\n\n            // check if the model has the appropriate source array\n            var buffer = geometry[this.dst];\n            var src = model[this.src];\n            if (src.length > 0) {\n              // check if we need to create the GL buffer\n              var createBuffer = !buffer;\n              if (createBuffer) {\n                // create and remember the buffer\n                geometry[this.dst] = buffer = gl.createBuffer();\n              }\n              // bind the buffer\n              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n              // check if we need to fill the buffer with data\n              if (createBuffer || model.dirtyFlags[this.src] !== false) {\n                var map = this.map;\n                // get the values from the model, possibly transformed\n                var values = map ? map(src) : src;\n                // fill the buffer with the values\n                this._renderer._bindBuffer(buffer, gl.ARRAY_BUFFER, values);\n\n                // mark the model's source array as clean\n                model.dirtyFlags[this.src] = false;\n              }\n              // enable the attribute\n              shader.enableAttrib(attr, this.size);\n            }\n          };\n          var _default = _main.default.RenderBuffer;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      111: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          _dereq_('./p5.RenderBuffer');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * Welcome to RendererGL Immediate Mode.\n           * Immediate mode is used for drawing custom shapes\n           * from a set of vertices.  Immediate Mode is activated\n           * when you call <a href=\"#/p5/beginShape\">beginShape()</a> & de-activated when you call <a href=\"#/p5/endShape\">endShape()</a>.\n           * Immediate mode is a style of programming borrowed\n           * from OpenGL's (now-deprecated) immediate mode.\n           * It differs from p5.js' default, Retained Mode, which caches\n           * geometries and buffers on the CPU to reduce the number of webgl\n           * draw calls. Retained mode is more efficient & performative,\n           * however, Immediate Mode is useful for sketching quick\n           * geometric ideas.\n           */ /**\n           * Begin shape drawing.  This is a helpful way of generating\n           * custom shapes quickly.  However in WEBGL mode, application\n           * performance will likely drop as a result of too many calls to\n           * <a href=\"#/p5/beginShape\">beginShape()</a> / <a href=\"#/p5/endShape\">endShape()</a>.  As a high performance alternative,\n           * please use p5.js geometry primitives.\n           * @private\n           * @method beginShape\n           * @param  {Number} mode webgl primitives mode.  beginShape supports the\n           *                       following modes:\n           *                       POINTS,LINES,LINE_STRIP,LINE_LOOP,TRIANGLES,\n           *                       TRIANGLE_STRIP, TRIANGLE_FAN and TESS(WEBGL only)\n           * @chainable\n           */ _main.default.RendererGL.prototype.beginShape = function(mode) {\n            this.immediateMode.shapeMode =\n              mode !== undefined ? mode : constants.TRIANGLE_FAN;\n            this.immediateMode.geometry.reset();\n            return this;\n          };\n          /**\n           * adds a vertex to be drawn in a custom Shape.\n           * @private\n           * @method vertex\n           * @param  {Number} x x-coordinate of vertex\n           * @param  {Number} y y-coordinate of vertex\n           * @param  {Number} z z-coordinate of vertex\n           * @chainable\n           * @TODO implement handling of <a href=\"#/p5.Vector\">p5.Vector</a> args\n           */ _main.default.RendererGL.prototype.vertex = function(x, y) {\n            var z, u, v;\n\n            // default to (x, y) mode: all other arugments assumed to be 0.\n            z = u = v = 0;\n\n            if (arguments.length === 3) {\n              // (x, y, z) mode: (u, v) assumed to be 0.\n              z = arguments[2];\n            } else if (arguments.length === 4) {\n              // (x, y, u, v) mode: z assumed to be 0.\n              u = arguments[2];\n              v = arguments[3];\n            } else if (arguments.length === 5) {\n              // (x, y, z, u, v) mode\n              z = arguments[2];\n              u = arguments[3];\n              v = arguments[4];\n            }\n            var vert = new _main.default.Vector(x, y, z);\n            this.immediateMode.geometry.vertices.push(vert);\n            var vertexColor = this.curFillColor || [0.5, 0.5, 0.5, 1.0];\n            this.immediateMode.geometry.vertexColors.push(\n              vertexColor[0],\n              vertexColor[1],\n              vertexColor[2],\n              vertexColor[3]\n            );\n\n            if (this.textureMode === constants.IMAGE) {\n              if (this._tex !== null) {\n                if (this._tex.width > 0 && this._tex.height > 0) {\n                  u /= this._tex.width;\n                  v /= this._tex.height;\n                }\n              } else if (this._tex === null && arguments.length >= 4) {\n                // Only throw this warning if custom uv's have  been provided\n                console.warn(\n                  'You must first call texture() before using' +\n                    ' vertex() with image based u and v coordinates'\n                );\n              }\n            }\n\n            this.immediateMode.geometry.uvs.push(u, v);\n\n            this.immediateMode._bezierVertex[0] = x;\n            this.immediateMode._bezierVertex[1] = y;\n            this.immediateMode._bezierVertex[2] = z;\n\n            this.immediateMode._quadraticVertex[0] = x;\n            this.immediateMode._quadraticVertex[1] = y;\n            this.immediateMode._quadraticVertex[2] = z;\n\n            return this;\n          };\n\n          /**\n           * End shape drawing and render vertices to screen.\n           * @chainable\n           */\n          _main.default.RendererGL.prototype.endShape = function(\n            mode,\n            isCurve,\n            isBezier,\n            isQuadratic,\n            isContour,\n            shapeKind\n          ) {\n            if (this.immediateMode.shapeMode === constants.POINTS) {\n              this._drawPoints(\n                this.immediateMode.geometry.vertices,\n                this.immediateMode.buffers.point\n              );\n\n              return this;\n            }\n            this._processVertices.apply(this, arguments);\n            if (this._doFill) {\n              if (this.immediateMode.geometry.vertices.length > 1) {\n                this._drawImmediateFill();\n              }\n            }\n            if (this._doStroke) {\n              if (this.immediateMode.geometry.lineVertices.length > 1) {\n                this._drawImmediateStroke();\n              }\n            }\n\n            this.isBezier = false;\n            this.isQuadratic = false;\n            this.isCurve = false;\n            this.immediateMode._bezierVertex.length = 0;\n            this.immediateMode._quadraticVertex.length = 0;\n            this.immediateMode._curveVertex.length = 0;\n            return this;\n          };\n\n          /**\n           * Called from endShape(). This function calculates the stroke vertices for custom shapes and\n           * tesselates shapes when applicable.\n           * @private\n           * @param  {Number} mode webgl primitives mode.  beginShape supports the\n           *                       following modes:\n           *                       POINTS,LINES,LINE_STRIP,LINE_LOOP,TRIANGLES,\n           *                       TRIANGLE_STRIP, TRIANGLE_FAN and TESS(WEBGL only)\n           */\n          _main.default.RendererGL.prototype._processVertices = function(mode) {\n            if (this.immediateMode.geometry.vertices.length === 0) return;\n\n            var calculateStroke = this._doStroke && this.drawMode !== constants.TEXTURE;\n            var shouldClose = mode === constants.CLOSE;\n            if (calculateStroke) {\n              this.immediateMode.geometry.edges = this._calculateEdges(\n                this.immediateMode.shapeMode,\n                this.immediateMode.geometry.vertices,\n                shouldClose\n              );\n\n              this.immediateMode.geometry._edgesToVertices();\n            }\n            // For hollow shapes, user must set mode to TESS\n            var convexShape = this.immediateMode.shapeMode === constants.TESS;\n            // We tesselate when drawing curves or convex shapes\n            var shouldTess =\n              (this.isBezier || this.isQuadratic || this.isCurve || convexShape) &&\n              this.immediateMode.shapeMode !== constants.LINES;\n\n            if (shouldTess) {\n              this._tesselateShape();\n            }\n          };\n\n          /**\n           * Called from _processVertices(). This function calculates the stroke vertices for custom shapes and\n           * tesselates shapes when applicable.\n           * @private\n           * @returns  {Array[Number]} indices for custom shape vertices indicating edges.\n           */\n          _main.default.RendererGL.prototype._calculateEdges = function(\n            shapeMode,\n            verts,\n            shouldClose\n          ) {\n            var res = [];\n            var i = 0;\n            switch (shapeMode) {\n              case constants.TRIANGLE_STRIP:\n                for (i = 0; i < verts.length - 2; i++) {\n                  res.push([i, i + 1]);\n                  res.push([i, i + 2]);\n                }\n                res.push([i, i + 1]);\n                break;\n              case constants.TRIANGLES:\n                for (i = 0; i < verts.length - 2; i = i + 3) {\n                  res.push([i, i + 1]);\n                  res.push([i + 1, i + 2]);\n                  res.push([i + 2, i]);\n                }\n                break;\n              case constants.LINES:\n                for (i = 0; i < verts.length - 1; i = i + 2) {\n                  res.push([i, i + 1]);\n                }\n                break;\n              default:\n                for (i = 0; i < verts.length - 1; i++) {\n                  res.push([i, i + 1]);\n                }\n                break;\n            }\n\n            if (shouldClose) {\n              res.push([verts.length - 1, 0]);\n            }\n            return res;\n          };\n\n          /**\n           * Called from _processVertices() when applicable. This function tesselates immediateMode.geometry.\n           * @private\n           */\n          _main.default.RendererGL.prototype._tesselateShape = function() {\n            this.immediateMode.shapeMode = constants.TRIANGLES;\n            var contours = [\n              new Float32Array(this._vToNArray(this.immediateMode.geometry.vertices))\n            ];\n\n            var polyTriangles = this._triangulate(contours);\n            this.immediateMode.geometry.vertices = [];\n            for (\n              var j = 0, polyTriLength = polyTriangles.length;\n              j < polyTriLength;\n              j = j + 3\n            ) {\n              this.vertex(polyTriangles[j], polyTriangles[j + 1], polyTriangles[j + 2]);\n            }\n          };\n\n          /**\n           * Called from endShape(). Responsible for calculating normals, setting shader uniforms,\n           * enabling all appropriate buffers, applying color blend, and drawing the fill geometry.\n           * @private\n           */\n          _main.default.RendererGL.prototype._drawImmediateFill = function() {\n            var gl = this.GL;\n            var shader = this._getImmediateFillShader();\n\n            this._calculateNormals(this.immediateMode.geometry);\n            this._setFillUniforms(shader);\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n            try {\n              for (\n                var _iterator = this.immediateMode.buffers.fill[Symbol.iterator](), _step;\n                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                _iteratorNormalCompletion = true\n              ) {\n                var buff = _step.value;\n                buff._prepareBuffer(this.immediateMode.geometry, shader);\n              }\n\n              // LINE_STRIP and LINES are not used for rendering, instead\n              // they only indicate a way to modify vertices during the _processVertices() step\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n            if (\n              this.immediateMode.shapeMode === constants.LINE_STRIP ||\n              this.immediateMode.shapeMode === constants.LINES\n            ) {\n              this.immediateMode.shapeMode = constants.TRIANGLE_FAN;\n            }\n\n            this._applyColorBlend(this.curFillColor);\n            gl.drawArrays(\n              this.immediateMode.shapeMode,\n              0,\n              this.immediateMode.geometry.vertices.length\n            );\n\n            shader.unbindShader();\n          };\n\n          /**\n           * Called from endShape(). Responsible for calculating normals, setting shader uniforms,\n           * enabling all appropriate buffers, applying color blend, and drawing the stroke geometry.\n           * @private\n           */\n          _main.default.RendererGL.prototype._drawImmediateStroke = function() {\n            var gl = this.GL;\n            var shader = this._getImmediateStrokeShader();\n            this._setStrokeUniforms(shader);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n            try {\n              for (\n                var _iterator2 = this.immediateMode.buffers.stroke[Symbol.iterator](),\n                  _step2;\n                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n                _iteratorNormalCompletion2 = true\n              ) {\n                var buff = _step2.value;\n                buff._prepareBuffer(this.immediateMode.geometry, shader);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n            this._applyColorBlend(this.curStrokeColor);\n            gl.drawArrays(gl.TRIANGLES, 0, this.immediateMode.geometry.lineVertices.length);\n\n            shader.unbindShader();\n          };\n\n          /**\n           * Called from _drawImmediateFill(). Currently adds default normals which\n           * only work for flat shapes.\n           * @parem\n           * @private\n           */\n          _main.default.RendererGL.prototype._calculateNormals = function(geometry) {\n            geometry.vertices.forEach(function() {\n              geometry.vertexNormals.push(new _main.default.Vector(0, 0, 1));\n            });\n          };\n          var _default = _main.default.RendererGL;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59, './p5.RenderBuffer': 110 }\n      ],\n      112: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          _dereq_('./p5.RendererGL');\n          _dereq_('./p5.RenderBuffer');\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          } //Retained Mode. The default mode for rendering 3D primitives\n          //in WEBGL.\n          var hashCount = 0;\n          /**\n           * _initBufferDefaults\n           * @private\n           * @description initializes buffer defaults. runs each time a new geometry is\n           * registered\n           * @param  {String} gId  key of the geometry object\n           * @returns {Object} a new buffer object\n           */\n          _main.default.RendererGL.prototype._initBufferDefaults = function(gId) {\n            this._freeBuffers(gId);\n\n            //@TODO remove this limit on hashes in retainedMode.geometry\n            hashCount++;\n            if (hashCount > 1000) {\n              var key = Object.keys(this.retainedMode.geometry)[0];\n              delete this.retainedMode.geometry[key];\n              hashCount--;\n            }\n\n            //create a new entry in our retainedMode.geometry\n            return (this.retainedMode.geometry[gId] = {});\n          };\n\n          _main.default.RendererGL.prototype._freeBuffers = function(gId) {\n            var buffers = this.retainedMode.geometry[gId];\n            if (!buffers) {\n              return;\n            }\n\n            delete this.retainedMode.geometry[gId];\n            hashCount--;\n\n            var gl = this.GL;\n            if (buffers.indexBuffer) {\n              gl.deleteBuffer(buffers.indexBuffer);\n            }\n\n            function freeBuffers(defs) {\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n              try {\n                for (\n                  var _iterator = defs[Symbol.iterator](), _step;\n                  !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                  _iteratorNormalCompletion = true\n                ) {\n                  var def = _step.value;\n                  if (buffers[def.dst]) {\n                    gl.deleteBuffer(buffers[def.dst]);\n                    buffers[def.dst] = null;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n            }\n\n            // free all the buffers\n            freeBuffers(this.retainedMode.buffers.stroke);\n            freeBuffers(this.retainedMode.buffers.fill);\n          };\n\n          /**\n           * creates a buffers object that holds the WebGL render buffers\n           * for a geometry.\n           * @private\n           * @param  {String} gId    key of the geometry object\n           * @param  {p5.Geometry}  model contains geometry data\n           */\n          _main.default.RendererGL.prototype.createBuffers = function(gId, model) {\n            var gl = this.GL;\n            //initialize the gl buffers for our geom groups\n            var buffers = this._initBufferDefaults(gId);\n            buffers.model = model;\n\n            var indexBuffer = buffers.indexBuffer;\n\n            if (model.faces.length) {\n              // allocate space for faces\n              if (!indexBuffer) indexBuffer = buffers.indexBuffer = gl.createBuffer();\n              var vals = _main.default.RendererGL.prototype._flatten(model.faces);\n              this._bindBuffer(indexBuffer, gl.ELEMENT_ARRAY_BUFFER, vals, Uint16Array);\n\n              // the vertex count is based on the number of faces\n              buffers.vertexCount = model.faces.length * 3;\n            } else {\n              // the index buffer is unused, remove it\n              if (indexBuffer) {\n                gl.deleteBuffer(indexBuffer);\n                buffers.indexBuffer = null;\n              }\n              // the vertex count comes directly from the model\n              buffers.vertexCount = model.vertices ? model.vertices.length : 0;\n            }\n\n            buffers.lineVertexCount = model.lineVertices ? model.lineVertices.length : 0;\n\n            return buffers;\n          };\n\n          /**\n           * Draws buffers given a geometry key ID\n           * @private\n           * @param  {String} gId     ID in our geom hash\n           * @chainable\n           */\n          _main.default.RendererGL.prototype.drawBuffers = function(gId) {\n            var gl = this.GL;\n            var geometry = this.retainedMode.geometry[gId];\n\n            if (this._doStroke && geometry.lineVertexCount > 0) {\n              var strokeShader = this._getRetainedStrokeShader();\n              this._setStrokeUniforms(strokeShader);\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n              try {\n                for (\n                  var _iterator2 = this.retainedMode.buffers.stroke[Symbol.iterator](),\n                    _step2;\n                  !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n                  _iteratorNormalCompletion2 = true\n                ) {\n                  var buff = _step2.value;\n                  buff._prepareBuffer(geometry, strokeShader);\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n              this._applyColorBlend(this.curStrokeColor);\n              this._drawArrays(gl.TRIANGLES, gId);\n              strokeShader.unbindShader();\n            }\n\n            if (this._doFill) {\n              var fillShader = this._getRetainedFillShader();\n              this._setFillUniforms(fillShader);\n              var _iteratorNormalCompletion3 = true;\n              var _didIteratorError3 = false;\n              var _iteratorError3 = undefined;\n              try {\n                for (\n                  var _iterator3 = this.retainedMode.buffers.fill[Symbol.iterator](),\n                    _step3;\n                  !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);\n                  _iteratorNormalCompletion3 = true\n                ) {\n                  var _buff = _step3.value;\n                  _buff._prepareBuffer(geometry, fillShader);\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                    _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n              if (geometry.indexBuffer) {\n                //vertex index buffer\n                this._bindBuffer(geometry.indexBuffer, gl.ELEMENT_ARRAY_BUFFER);\n              }\n              this._applyColorBlend(this.curFillColor);\n              this._drawElements(gl.TRIANGLES, gId);\n              fillShader.unbindShader();\n            }\n            return this;\n          };\n\n          /**\n           * Calls drawBuffers() with a scaled model/view matrix.\n           *\n           * This is used by various 3d primitive methods (in primitives.js, eg. plane,\n           * box, torus, etc...) to allow caching of un-scaled geometries. Those\n           * geometries are generally created with unit-length dimensions, cached as\n           * such, and then scaled appropriately in this method prior to rendering.\n           *\n           * @private\n           * @method drawBuffersScaled\n           * @param {String} gId     ID in our geom hash\n           * @param {Number} scaleX  the amount to scale in the X direction\n           * @param {Number} scaleY  the amount to scale in the Y direction\n           * @param {Number} scaleZ  the amount to scale in the Z direction\n           */\n          _main.default.RendererGL.prototype.drawBuffersScaled = function(\n            gId,\n            scaleX,\n            scaleY,\n            scaleZ\n          ) {\n            var uMVMatrix = this.uMVMatrix.copy();\n            try {\n              this.uMVMatrix.scale(scaleX, scaleY, scaleZ);\n              this.drawBuffers(gId);\n            } finally {\n              this.uMVMatrix = uMVMatrix;\n            }\n          };\n\n          _main.default.RendererGL.prototype._drawArrays = function(drawMode, gId) {\n            this.GL.drawArrays(\n              drawMode,\n              0,\n              this.retainedMode.geometry[gId].lineVertexCount\n            );\n\n            return this;\n          };\n\n          _main.default.RendererGL.prototype._drawElements = function(drawMode, gId) {\n            var buffers = this.retainedMode.geometry[gId];\n            var gl = this.GL;\n            // render the fill\n            if (buffers.indexBuffer) {\n              // we're drawing faces\n              gl.drawElements(gl.TRIANGLES, buffers.vertexCount, gl.UNSIGNED_SHORT, 0);\n            } else {\n              // drawing vertices\n              gl.drawArrays(drawMode || gl.TRIANGLES, 0, buffers.vertexCount);\n            }\n          };\n\n          _main.default.RendererGL.prototype._drawPoints = function(\n            vertices,\n            vertexBuffer\n          ) {\n            var gl = this.GL;\n            var pointShader = this._getImmediatePointShader();\n            this._setPointUniforms(pointShader);\n\n            this._bindBuffer(\n              vertexBuffer,\n              gl.ARRAY_BUFFER,\n              this._vToNArray(vertices),\n              Float32Array,\n              gl.STATIC_DRAW\n            );\n\n            pointShader.enableAttrib(pointShader.attributes.aPosition, 3);\n\n            gl.drawArrays(gl.Points, 0, vertices.length);\n\n            pointShader.unbindShader();\n          };\n          var _default = _main.default.RendererGL;\n          exports.default = _default;\n        },\n        { '../core/main': 59, './p5.RenderBuffer': 110, './p5.RendererGL': 113 }\n      ],\n      113: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          var _libtess = _interopRequireDefault(_dereq_('libtess'));\n          _dereq_('./p5.Shader');\n          _dereq_('./p5.Camera');\n          _dereq_('../core/p5.Renderer');\n          _dereq_('./p5.Matrix');\n\n          var _path = _dereq_('path');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          function _toConsumableArray(arr) {\n            return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n          }\n          function _nonIterableSpread() {\n            throw new TypeError('Invalid attempt to spread non-iterable instance');\n          }\n          function _iterableToArray(iter) {\n            if (\n              Symbol.iterator in Object(iter) ||\n              Object.prototype.toString.call(iter) === '[object Arguments]'\n            )\n              return Array.from(iter);\n          }\n          function _arrayWithoutHoles(arr) {\n            if (Array.isArray(arr)) {\n              for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n                arr2[i] = arr[i];\n              }\n              return arr2;\n            }\n          }\n\n          var lightingShader =\n            'precision highp float;\\nprecision highp int;\\n\\nuniform mat4 uViewMatrix;\\n\\nuniform bool uUseLighting;\\n\\nuniform int uAmbientLightCount;\\nuniform vec3 uAmbientColor[5];\\n\\nuniform int uDirectionalLightCount;\\nuniform vec3 uLightingDirection[5];\\nuniform vec3 uDirectionalDiffuseColors[5];\\nuniform vec3 uDirectionalSpecularColors[5];\\n\\nuniform int uPointLightCount;\\nuniform vec3 uPointLightLocation[5];\\nuniform vec3 uPointLightDiffuseColors[5];\\t\\nuniform vec3 uPointLightSpecularColors[5];\\n\\nuniform int uSpotLightCount;\\nuniform float uSpotLightAngle[5];\\nuniform float uSpotLightConc[5];\\nuniform vec3 uSpotLightDiffuseColors[5];\\nuniform vec3 uSpotLightSpecularColors[5];\\nuniform vec3 uSpotLightLocation[5];\\nuniform vec3 uSpotLightDirection[5];\\n\\nuniform bool uSpecular;\\nuniform float uShininess;\\n\\nuniform float uConstantAttenuation;\\nuniform float uLinearAttenuation;\\nuniform float uQuadraticAttenuation;\\n\\nconst float specularFactor = 2.0;\\nconst float diffuseFactor = 0.73;\\n\\nstruct LightResult {\\n  float specular;\\n  float diffuse;\\n};\\n\\nfloat _phongSpecular(\\n  vec3 lightDirection,\\n  vec3 viewDirection,\\n  vec3 surfaceNormal,\\n  float shininess) {\\n\\n  vec3 R = reflect(lightDirection, surfaceNormal);\\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\\n}\\n\\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\\n  return max(0.0, dot(-lightDirection, surfaceNormal));\\n}\\n\\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector) {\\n\\n  vec3 lightDir = normalize(lightVector);\\n\\n  //compute our diffuse & specular terms\\n  LightResult lr;\\n  if (uSpecular)\\n    lr.specular = _phongSpecular(lightDir, viewDirection, normal, uShininess);\\n  lr.diffuse = _lambertDiffuse(lightDir, normal);\\n  return lr;\\n}\\n\\nvoid totalLight(\\n  vec3 modelPosition,\\n  vec3 normal,\\n  out vec3 totalDiffuse,\\n  out vec3 totalSpecular\\n) {\\n\\n  totalSpecular = vec3(0.0);\\n\\n  if (!uUseLighting) {\\n    totalDiffuse = vec3(1.0);\\n    return;\\n  }\\n\\n  totalDiffuse = vec3(0.0);\\n\\n  vec3 viewDirection = normalize(-modelPosition);\\n\\n  for (int j = 0; j < 5; j++) {\\n    if (j < uDirectionalLightCount) {\\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\\n      vec3 lightColor = uDirectionalDiffuseColors[j];\\n      vec3 specularColor = uDirectionalSpecularColors[j];\\n      LightResult result = _light(viewDirection, normal, lightVector);\\n      totalDiffuse += result.diffuse * lightColor;\\n      totalSpecular += result.specular * lightColor * specularColor;\\n    }\\n\\n    if (j < uPointLightCount) {\\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\\n      vec3 lightVector = modelPosition - lightPosition;\\n    \\n      //calculate attenuation\\n      float lightDistance = length(lightVector);\\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\\n      vec3 lightColor = lightFalloff * uPointLightDiffuseColors[j];\\n      vec3 specularColor = lightFalloff * uPointLightSpecularColors[j];\\n\\n      LightResult result = _light(viewDirection, normal, lightVector);\\n      totalDiffuse += result.diffuse * lightColor;\\n      totalSpecular += result.specular * lightColor * specularColor;\\n    }\\n\\n    if(j < uSpotLightCount) {\\n      vec3 lightPosition = (uViewMatrix * vec4(uSpotLightLocation[j], 1.0)).xyz;\\n      vec3 lightVector = modelPosition - lightPosition;\\n    \\n      float lightDistance = length(lightVector);\\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\\n\\n      vec3 lightDirection = (uViewMatrix * vec4(uSpotLightDirection[j], 0.0)).xyz;\\n      float spotDot = dot(normalize(lightVector), normalize(lightDirection));\\n      float spotFalloff;\\n      if(spotDot < uSpotLightAngle[j]) {\\n        spotFalloff = 0.0;\\n      }\\n      else {\\n        spotFalloff = pow(spotDot, uSpotLightConc[j]);\\n      }\\n      lightFalloff *= spotFalloff;\\n\\n      vec3 lightColor = uSpotLightDiffuseColors[j];\\n      vec3 specularColor = uSpotLightSpecularColors[j];\\n     \\n      LightResult result = _light(viewDirection, normal, lightVector);\\n      \\n      totalDiffuse += result.diffuse * lightColor * lightFalloff;\\n      totalSpecular += result.specular * lightColor * specularColor * lightFalloff;\\n    }\\n  }\\n\\n  totalDiffuse *= diffuseFactor;\\n  totalSpecular *= specularFactor;\\n}\\n';\n\n          var defaultShaders = {\n            immediateVert:\n              'attribute vec3 aPosition;\\nattribute vec4 aVertexColor;\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform float uResolution;\\nuniform float uPointSize;\\n\\nvarying vec4 vColor;\\nvoid main(void) {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n  vColor = aVertexColor;\\n  gl_PointSize = uPointSize;\\n}\\n',\n\n            vertexColorVert:\n              'attribute vec3 aPosition;\\nattribute vec4 aVertexColor;\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nvarying vec4 vColor;\\n\\nvoid main(void) {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n  vColor = aVertexColor;\\n}\\n',\n\n            vertexColorFrag:\n              'precision mediump float;\\nvarying vec4 vColor;\\nvoid main(void) {\\n  gl_FragColor = vColor;\\n}',\n\n            normalVert:\n              'attribute vec3 aPosition;\\nattribute vec3 aNormal;\\nattribute vec2 aTexCoord;\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform mat3 uNormalMatrix;\\n\\nvarying vec3 vVertexNormal;\\nvarying highp vec2 vVertTexCoord;\\n\\nvoid main(void) {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\\n  vVertTexCoord = aTexCoord;\\n}\\n',\n            normalFrag:\n              'precision mediump float;\\nvarying vec3 vVertexNormal;\\nvoid main(void) {\\n  gl_FragColor = vec4(vVertexNormal, 1.0);\\n}',\n            basicFrag:\n              'precision mediump float;\\nuniform vec4 uMaterialColor;\\nvoid main(void) {\\n  gl_FragColor = uMaterialColor;\\n}',\n            lightVert:\n              lightingShader +\n              '// include lighting.glgl\\n\\nattribute vec3 aPosition;\\nattribute vec3 aNormal;\\nattribute vec2 aTexCoord;\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform mat3 uNormalMatrix;\\n\\nvarying highp vec2 vVertTexCoord;\\nvarying vec3 vDiffuseColor;\\nvarying vec3 vSpecularColor;\\n\\nvoid main(void) {\\n\\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\\n  gl_Position = uProjectionMatrix * viewModelPosition;\\n\\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\\n  vVertTexCoord = aTexCoord;\\n\\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\\n\\n  for (int i = 0; i < 8; i++) {\\n    if (i < uAmbientLightCount) {\\n      vDiffuseColor += uAmbientColor[i];\\n    }\\n  }\\n}\\n',\n\n            lightTextureFrag:\n              'precision highp float;\\n\\nuniform vec4 uMaterialColor;\\nuniform vec4 uTint;\\nuniform sampler2D uSampler;\\nuniform bool isTexture;\\nuniform bool uEmissive;\\n\\nvarying highp vec2 vVertTexCoord;\\nvarying vec3 vDiffuseColor;\\nvarying vec3 vSpecularColor;\\n\\nvoid main(void) {\\n  if(uEmissive && !isTexture) {\\n    gl_FragColor = uMaterialColor;\\n  }\\n  else {\\n    gl_FragColor = isTexture ? texture2D(uSampler, vVertTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\\n    gl_FragColor.rgb = gl_FragColor.rgb * vDiffuseColor + vSpecularColor;\\n  }\\n}',\n\n            phongVert:\n              'precision highp float;\\nprecision highp int;\\n\\nattribute vec3 aPosition;\\nattribute vec3 aNormal;\\nattribute vec2 aTexCoord;\\n\\nuniform vec3 uAmbientColor[5];\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform mat3 uNormalMatrix;\\nuniform int uAmbientLightCount;\\n\\nvarying vec3 vNormal;\\nvarying vec2 vTexCoord;\\nvarying vec3 vViewPosition;\\nvarying vec3 vAmbientColor;\\n\\nvoid main(void) {\\n\\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\\n\\n  // Pass varyings to fragment shader\\n  vViewPosition = viewModelPosition.xyz;\\n  gl_Position = uProjectionMatrix * viewModelPosition;  \\n\\n  vNormal = uNormalMatrix * aNormal;\\n  vTexCoord = aTexCoord;\\n\\n  // TODO: this should be a uniform\\n  vAmbientColor = vec3(0.0);\\n  for (int i = 0; i < 5; i++) {\\n    if (i < uAmbientLightCount) {\\n      vAmbientColor += uAmbientColor[i];\\n    }\\n  }\\n}\\n',\n            phongFrag:\n              lightingShader +\n              '// include lighting.glsl\\nprecision highp float;\\nprecision highp int;\\n\\nuniform vec4 uMaterialColor;\\nuniform vec4 uTint;\\nuniform sampler2D uSampler;\\nuniform bool isTexture;\\nuniform bool uEmissive;\\n\\nvarying vec3 vNormal;\\nvarying vec2 vTexCoord;\\nvarying vec3 vViewPosition;\\nvarying vec3 vAmbientColor;\\n\\nvoid main(void) {\\n\\n  vec3 diffuse;\\n  vec3 specular;\\n  totalLight(vViewPosition, normalize(vNormal), diffuse, specular);\\n\\n  if(uEmissive && !isTexture) {\\n    gl_FragColor = uMaterialColor;\\n  }\\n  else {\\n    gl_FragColor = isTexture ? texture2D(uSampler, vTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\\n    gl_FragColor.rgb = gl_FragColor.rgb * (diffuse + vAmbientColor) + specular;\\n  }\\n}',\n\n            fontVert:\n              \"precision mediump float;\\n\\nattribute vec3 aPosition;\\nattribute vec2 aTexCoord;\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\n\\nuniform vec4 uGlyphRect;\\nuniform float uGlyphOffset;\\n\\nvarying vec2 vTexCoord;\\nvarying float w;\\n\\nvoid main() {\\n  vec4 positionVec4 = vec4(aPosition, 1.0);\\n\\n  // scale by the size of the glyph's rectangle\\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\\n\\n  // move to the corner of the glyph\\n  positionVec4.xy += uGlyphRect.xy;\\n\\n  // move to the letter's line offset\\n  positionVec4.x += uGlyphOffset;\\n  \\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n  vTexCoord = aTexCoord;\\n  w = gl_Position.w;\\n}\\n\",\n            fontFrag:\n              \"#extension GL_OES_standard_derivatives : enable\\nprecision mediump float;\\n\\n#if 0\\n  // simulate integer math using floats\\n\\t#define int float\\n\\t#define ivec2 vec2\\n\\t#define INT(x) float(x)\\n\\n\\tint ifloor(float v) { return floor(v); }\\n\\tivec2 ifloor(vec2 v) { return floor(v); }\\n\\n#else\\n  // use native integer math\\n\\tprecision highp int;\\n\\t#define INT(x) x\\n\\n\\tint ifloor(float v) { return int(v); }\\n\\tint ifloor(int v) { return v; }\\n\\tivec2 ifloor(vec2 v) { return ivec2(v); }\\n\\n#endif\\n\\nuniform sampler2D uSamplerStrokes;\\nuniform sampler2D uSamplerRowStrokes;\\nuniform sampler2D uSamplerRows;\\nuniform sampler2D uSamplerColStrokes;\\nuniform sampler2D uSamplerCols;\\n\\nuniform ivec2 uStrokeImageSize;\\nuniform ivec2 uCellsImageSize;\\nuniform ivec2 uGridImageSize;\\n\\nuniform ivec2 uGridOffset;\\nuniform ivec2 uGridSize;\\nuniform vec4 uMaterialColor;\\n\\nvarying vec2 vTexCoord;\\n\\n// some helper functions\\nint round(float v) { return ifloor(v + 0.5); }\\nivec2 round(vec2 v) { return ifloor(v + 0.5); }\\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\\n\\nint mul(float v1, int v2) {\\n  return ifloor(v1 * float(v2));\\n}\\n\\nivec2 mul(vec2 v1, ivec2 v2) {\\n  return ifloor(v1 * vec2(v2) + 0.5);\\n}\\n\\n// unpack a 16-bit integer from a float vec2\\nint getInt16(vec2 v) {\\n  ivec2 iv = round(v * 255.0);\\n  return iv.x * INT(128) + iv.y;\\n}\\n\\nvec2 pixelScale;\\nvec2 coverage = vec2(0.0);\\nvec2 weight = vec2(0.5);\\nconst float minDistance = 1.0/8192.0;\\nconst float hardness = 1.05; // amount of antialias\\n\\n// the maximum number of curves in a glyph\\nconst int N = INT(250);\\n\\n// retrieves an indexed pixel from a sampler\\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\\n  int width = size.x;\\n  int y = ifloor(pos / width);\\n  int x = pos - y * width;  // pos % width\\n\\n  return texture2D(sampler, (vec2(x, y) + 0.5) / vec2(size));\\n}\\n\\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\\n\\n  // get the coefficients of the quadratic in t\\n  vec2 a = p0 - p1 * 2.0 + p2;\\n  vec2 b = p0 - p1;\\n  vec2 c = p0 - vTexCoord;\\n\\n  // found out which values of 't' it crosses the axes\\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\\n  vec2 t1 = ((b - surd) / a).yx;\\n  vec2 t2 = ((b + surd) / a).yx;\\n\\n  // approximate straight lines to avoid rounding errors\\n  if (abs(a.y) < 0.001)\\n    t1.x = t2.x = c.y / (2.0 * b.y);\\n\\n  if (abs(a.x) < 0.001)\\n    t1.y = t2.y = c.x / (2.0 * b.x);\\n\\n  // plug into quadratic formula to find the corrdinates of the crossings\\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\\n}\\n\\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\\n\\n  vec2 C1, C2;\\n  calulateCrossings(p0, p1, p2, C1, C2);\\n\\n  // determine on which side of the x-axis the points lie\\n  bool y0 = p0.y > vTexCoord.y;\\n  bool y1 = p1.y > vTexCoord.y;\\n  bool y2 = p2.y > vTexCoord.y;\\n\\n  // could web be under the curve (after t1)?\\n  if (y1 ? !y2 : y0) {\\n    // add the coverage for t1\\n    coverage.x += saturate(C1.x + 0.5);\\n    // calculate the anti-aliasing for t1\\n    weight.x = min(weight.x, abs(C1.x));\\n  }\\n\\n  // are we outside the curve (after t2)?\\n  if (y1 ? !y0 : y2) {\\n    // subtract the coverage for t2\\n    coverage.x -= saturate(C2.x + 0.5);\\n    // calculate the anti-aliasing for t2\\n    weight.x = min(weight.x, abs(C2.x));\\n  }\\n}\\n\\n// this is essentially the same as coverageX, but with the axes swapped\\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\\n\\n  vec2 C1, C2;\\n  calulateCrossings(p0, p1, p2, C1, C2);\\n\\n  bool x0 = p0.x > vTexCoord.x;\\n  bool x1 = p1.x > vTexCoord.x;\\n  bool x2 = p2.x > vTexCoord.x;\\n\\n  if (x1 ? !x2 : x0) {\\n    coverage.y -= saturate(C1.y + 0.5);\\n    weight.y = min(weight.y, abs(C1.y));\\n  }\\n\\n  if (x1 ? !x0 : x2) {\\n    coverage.y += saturate(C2.y + 0.5);\\n    weight.y = min(weight.y, abs(C2.y));\\n  }\\n}\\n\\nvoid main() {\\n\\n  // calculate the pixel scale based on screen-coordinates\\n  pixelScale = hardness / fwidth(vTexCoord);\\n\\n  // which grid cell is this pixel in?\\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\\n\\n  // intersect curves in this row\\n  {\\n    // the index into the row info bitmap\\n    int rowIndex = gridCoord.y + uGridOffset.y;\\n    // fetch the info texel\\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\\n    // unpack the rowInfo\\n    int rowStrokeIndex = getInt16(rowInfo.xy);\\n    int rowStrokeCount = getInt16(rowInfo.zw);\\n\\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\\n      if (iRowStroke >= rowStrokeCount)\\n        break;\\n\\n      // each stroke is made up of 3 points: the start and control point\\n      // and the start of the next curve.\\n      // fetch the indices of this pair of strokes:\\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\\n\\n      // unpack the stroke index\\n      int strokePos = getInt16(strokeIndices.xy);\\n\\n      // fetch the two strokes\\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\\n\\n      // calculate the coverage\\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\\n    }\\n  }\\n\\n  // intersect curves in this column\\n  {\\n    int colIndex = gridCoord.x + uGridOffset.x;\\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\\n    int colStrokeIndex = getInt16(colInfo.xy);\\n    int colStrokeCount = getInt16(colInfo.zw);\\n    \\n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\\n      if (iColStroke >= colStrokeCount)\\n        break;\\n\\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\\n\\n      int strokePos = getInt16(strokeIndices.xy);\\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\\n    }\\n  }\\n\\n  weight = saturate(1.0 - weight * 2.0);\\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\\n  float antialias = abs(dot(coverage, weight) / distance);\\n  float cover = min(abs(coverage.x), abs(coverage.y));\\n  gl_FragColor = uMaterialColor;\\n  gl_FragColor.a *= saturate(max(antialias, cover));\\n}\",\n            lineVert:\n              \"/*\\n  Part of the Processing project - http://processing.org\\n  Copyright (c) 2012-15 The Processing Foundation\\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\\n  This library is free software; you can redistribute it and/or\\n  modify it under the terms of the GNU Lesser General Public\\n  License as published by the Free Software Foundation, version 2.1.\\n  This library is distributed in the hope that it will be useful,\\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\\n  Lesser General Public License for more details.\\n  You should have received a copy of the GNU Lesser General\\n  Public License along with this library; if not, write to the\\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\\n  Boston, MA  02111-1307  USA\\n*/\\n\\n#define PROCESSING_LINE_SHADER\\n\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nuniform float uStrokeWeight;\\n\\nuniform vec4 uViewport;\\nuniform int uPerspective;\\n\\nattribute vec4 aPosition;\\nattribute vec4 aDirection;\\n  \\nvoid main() {\\n  // using a scale <1 moves the lines towards the camera\\n  // in order to prevent popping effects due to half of\\n  // the line disappearing behind the geometry faces.\\n  vec3 scale = vec3(0.9995);\\n\\n  vec4 posp = uModelViewMatrix * aPosition;\\n  vec4 posq = uModelViewMatrix * (aPosition + vec4(aDirection.xyz, 0));\\n\\n  // Moving vertices slightly toward the camera\\n  // to avoid depth-fighting with the fill triangles.\\n  // Discussed here:\\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \\n  posp.xyz = posp.xyz * scale;\\n  posq.xyz = posq.xyz * scale;\\n\\n  vec4 p = uProjectionMatrix * posp;\\n  vec4 q = uProjectionMatrix * posq;\\n\\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\\n\\n  // prevent division by W by transforming the tangent formula (div by 0 causes\\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\\n  // t = screen_q - screen_p\\n  //\\n  // tangent is normalized and we don't care which aDirection it points to (+-)\\n  // t = +- normalize( screen_q - screen_p )\\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\\n  //\\n  // extract common factor, <1,1> - <1,1> cancels out\\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\\n  //\\n  // convert to common divisor\\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\\n  //\\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\\n  // (keep uViewport - can't remove because it has different components for x and y\\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\\n\\n  vec2 tangent = normalize((q.xy*p.w - p.xy*q.w) * uViewport.zw);\\n\\n  // flip tangent to normal (it's already normalized)\\n  vec2 normal = vec2(-tangent.y, tangent.x);\\n\\n  float thickness = aDirection.w * uStrokeWeight;\\n  vec2 offset = normal * thickness / 2.0;\\n\\n  vec2 curPerspScale;\\n\\n  if(uPerspective == 1) {\\n    // Perspective ---\\n    // convert from world to clip by multiplying with projection scaling factor\\n    // to get the right thickness (see https://github.com/processing/processing/issues/5182)\\n    // invert Y, projections in Processing invert Y\\n    curPerspScale = (uProjectionMatrix * vec4(1, -1, 0, 0)).xy;\\n  } else {\\n    // No Perspective ---\\n    // multiply by W (to cancel out division by W later in the pipeline) and\\n    // convert from screen to clip (derived from clip to screen above)\\n    curPerspScale = p.w / (0.5 * uViewport.zw);\\n  }\\n\\n  gl_Position.xy = p.xy + offset.xy * curPerspScale;\\n  gl_Position.zw = p.zw;\\n}\\n\",\n            lineFrag:\n              'precision mediump float;\\nprecision mediump int;\\n\\nuniform vec4 uMaterialColor;\\n\\nvoid main() {\\n  gl_FragColor = uMaterialColor;\\n}',\n            pointVert:\n              'attribute vec3 aPosition;\\nuniform float uPointSize;\\nvarying float vStrokeWeight;\\nuniform mat4 uModelViewMatrix;\\nuniform mat4 uProjectionMatrix;\\nvoid main() {\\n\\tvec4 positionVec4 =  vec4(aPosition, 1.0);\\n\\tgl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\\n\\tgl_PointSize = uPointSize;\\n\\tvStrokeWeight = uPointSize;\\n}',\n            pointFrag:\n              'precision mediump float;\\nprecision mediump int;\\nuniform vec4 uMaterialColor;\\nvarying float vStrokeWeight;\\n\\nvoid main(){\\n\\tfloat mask = 0.0;\\n\\n\\t// make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\\n    // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\\n\\n\\tmask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\\n\\n\\t// if strokeWeight is 1 or less lets just draw a square\\n\\t// this prevents weird artifacting from carving circles when our points are really small\\n\\t// if strokeWeight is larger than 1, we just use it as is\\n\\n\\tmask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\\n\\n\\t// throw away the borders of the mask\\n    // otherwise we get weird alpha blending issues\\n\\n\\tif(mask > 0.98){\\n      discard;\\n  \\t}\\n\\n  \\tgl_FragColor = vec4(uMaterialColor.rgb * (1.0 - mask), uMaterialColor.a) ;\\n}'\n          };\n\n          /**\n           * 3D graphics class\n           * @private\n           * @class p5.RendererGL\n           * @constructor\n           * @extends p5.Renderer\n           * @todo extend class to include public method for offscreen\n           * rendering (FBO).\n           */\n          _main.default.RendererGL = function(elt, pInst, isMainCanvas, attr) {\n            _main.default.Renderer.call(this, elt, pInst, isMainCanvas);\n            this._setAttributeDefaults(pInst);\n            this._initContext();\n            this.isP3D = true; //lets us know we're in 3d mode\n\n            // This redundant property is useful in reminding you that you are\n            // interacting with WebGLRenderingContext, still worth considering future removal\n            this.GL = this.drawingContext;\n            this._pInst._setProperty('drawingContext', this.drawingContext);\n\n            // erasing\n            this._isErasing = false;\n\n            // lights\n            this._enableLighting = false;\n\n            this.ambientLightColors = [];\n            this.specularColors = [1, 1, 1];\n\n            this.directionalLightDirections = [];\n            this.directionalLightDiffuseColors = [];\n            this.directionalLightSpecularColors = [];\n\n            this.pointLightPositions = [];\n            this.pointLightDiffuseColors = [];\n            this.pointLightSpecularColors = [];\n\n            this.spotLightPositions = [];\n            this.spotLightDirections = [];\n            this.spotLightDiffuseColors = [];\n            this.spotLightSpecularColors = [];\n            this.spotLightAngle = [];\n            this.spotLightConc = [];\n\n            this.drawMode = constants.FILL;\n\n            this.curFillColor = this._cachedFillStyle = [1, 1, 1, 1];\n            this.curStrokeColor = this._cachedStrokeStyle = [0, 0, 0, 1];\n\n            this.curBlendMode = constants.BLEND;\n            this._cachedBlendMode = undefined;\n            this.blendExt = this.GL.getExtension('EXT_blend_minmax');\n            this._isBlending = false;\n\n            this._useSpecularMaterial = false;\n            this._useEmissiveMaterial = false;\n            this._useNormalMaterial = false;\n            this._useShininess = 1;\n\n            this._tint = [255, 255, 255, 255];\n\n            // lightFalloff variables\n            this.constantAttenuation = 1;\n            this.linearAttenuation = 0;\n            this.quadraticAttenuation = 0;\n\n            /**\n             * model view, projection, & normal\n             * matrices\n             */\n            this.uMVMatrix = new _main.default.Matrix();\n            this.uPMatrix = new _main.default.Matrix();\n            this.uNMatrix = new _main.default.Matrix('mat3');\n\n            // Camera\n            this._curCamera = new _main.default.Camera(this);\n            this._curCamera._computeCameraDefaultSettings();\n            this._curCamera._setDefaultCamera();\n\n            this._defaultLightShader = undefined;\n            this._defaultImmediateModeShader = undefined;\n            this._defaultNormalShader = undefined;\n            this._defaultColorShader = undefined;\n            this._defaultPointShader = undefined;\n\n            this.userFillShader = undefined;\n            this.userStrokeShader = undefined;\n            this.userPointShader = undefined;\n\n            // Default drawing is done in Retained Mode\n            // Geometry and Material hashes stored here\n            this.retainedMode = {\n              geometry: {},\n              buffers: {\n                // prettier-ignore\n                stroke: [\n      new _main.default.RenderBuffer(3, 'lineVertices', 'lineVertexBuffer', 'aPosition', this, this._flatten),\n      new _main.default.RenderBuffer(4, 'lineNormals', 'lineNormalBuffer', 'aDirection', this, this._flatten)],\n\n                // prettier-ignore\n                fill: [\n      new _main.default.RenderBuffer(3, 'vertices', 'vertexBuffer', 'aPosition', this, this._vToNArray),\n      new _main.default.RenderBuffer(3, 'vertexNormals', 'normalBuffer', 'aNormal', this, this._vToNArray),\n      new _main.default.RenderBuffer(4, 'vertexColors', 'colorBuffer', 'aMaterialColor', this),\n      new _main.default.RenderBuffer(3, 'vertexAmbients', 'ambientBuffer', 'aAmbientColor', this),\n      //new BufferDef(3, 'vertexSpeculars', 'specularBuffer', 'aSpecularColor'),\n      new _main.default.RenderBuffer(2, 'uvs', 'uvBuffer', 'aTexCoord', this, this._flatten)],\n\n                // prettier-ignore\n                text: [\n      new _main.default.RenderBuffer(3, 'vertices', 'vertexBuffer', 'aPosition', this, this._vToNArray),\n      new _main.default.RenderBuffer(2, 'uvs', 'uvBuffer', 'aTexCoord', this, this._flatten)]\n              }\n            };\n\n            // Immediate Mode\n            // Geometry and Material hashes stored here\n            this.immediateMode = {\n              geometry: new _main.default.Geometry(),\n              shapeMode: constants.TRIANGLE_FAN,\n              _bezierVertex: [],\n              _quadraticVertex: [],\n              _curveVertex: [],\n              buffers: {\n                // prettier-ignore\n                fill: [\n      new _main.default.RenderBuffer(3, 'vertices', 'vertexBuffer', 'aPosition', this, this._vToNArray),\n      new _main.default.RenderBuffer(3, 'vertexNormals', 'normalBuffer', 'aNormal', this, this._vToNArray),\n      new _main.default.RenderBuffer(4, 'vertexColors', 'colorBuffer', 'aVertexColor', this),\n      new _main.default.RenderBuffer(3, 'vertexAmbients', 'ambientBuffer', 'aAmbientColor', this),\n      new _main.default.RenderBuffer(2, 'uvs', 'uvBuffer', 'aTexCoord', this, this._flatten)],\n\n                // prettier-ignore\n                stroke: [\n      new _main.default.RenderBuffer(3, 'lineVertices', 'lineVertexBuffer', 'aPosition', this, this._flatten),\n      new _main.default.RenderBuffer(4, 'lineNormals', 'lineNormalBuffer', 'aDirection', this, this._flatten)],\n\n                point: this.GL.createBuffer()\n              }\n            };\n\n            this.pointSize = 5.0; //default point size\n            this.curStrokeWeight = 1;\n\n            // array of textures created in this gl context via this.getTexture(src)\n            this.textures = [];\n\n            this.textureMode = constants.IMAGE;\n            // default wrap settings\n            this.textureWrapX = constants.CLAMP;\n            this.textureWrapY = constants.CLAMP;\n            this._tex = null;\n            this._curveTightness = 6;\n\n            // lookUpTable for coefficients needed to be calculated for bezierVertex, same are used for curveVertex\n            this._lookUpTableBezier = [];\n            // lookUpTable for coefficients needed to be calculated for quadraticVertex\n            this._lookUpTableQuadratic = [];\n\n            // current curveDetail in the Bezier lookUpTable\n            this._lutBezierDetail = 0;\n            // current curveDetail in the Quadratic lookUpTable\n            this._lutQuadraticDetail = 0;\n\n            this._tessy = this._initTessy();\n\n            this.fontInfos = {};\n\n            this._curShader = undefined;\n\n            return this;\n          };\n\n          _main.default.RendererGL.prototype = Object.create(\n            _main.default.Renderer.prototype\n          );\n\n          //////////////////////////////////////////////\n          // Setting\n          //////////////////////////////////////////////\n\n          _main.default.RendererGL.prototype._setAttributeDefaults = function(pInst) {\n            // See issue #3850, safer to enable AA in Safari\n            var applyAA = navigator.userAgent.toLowerCase().includes('safari');\n            var defaults = {\n              alpha: true,\n              depth: true,\n              stencil: true,\n              antialias: applyAA,\n              premultipliedAlpha: false,\n              preserveDrawingBuffer: true,\n              perPixelLighting: true\n            };\n\n            if (pInst._glAttributes === null) {\n              pInst._glAttributes = defaults;\n            } else {\n              pInst._glAttributes = Object.assign(defaults, pInst._glAttributes);\n            }\n            return;\n          };\n\n          _main.default.RendererGL.prototype._initContext = function() {\n            try {\n              this.drawingContext =\n                this.canvas.getContext('webgl', this._pInst._glAttributes) ||\n                this.canvas.getContext('experimental-webgl', this._pInst._glAttributes);\n              if (this.drawingContext === null) {\n                throw new Error('Error creating webgl context');\n              } else {\n                var gl = this.drawingContext;\n                gl.enable(gl.DEPTH_TEST);\n                gl.depthFunc(gl.LEQUAL);\n                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n                this._viewport = this.drawingContext.getParameter(\n                  this.drawingContext.VIEWPORT\n                );\n              }\n            } catch (er) {\n              throw er;\n            }\n          };\n\n          //This is helper function to reset the context anytime the attributes\n          //are changed with setAttributes()\n\n          _main.default.RendererGL.prototype._resetContext = function(options, callback) {\n            var w = this.width;\n            var h = this.height;\n            var defaultId = this.canvas.id;\n            var isPGraphics = this._pInst instanceof _main.default.Graphics;\n\n            if (isPGraphics) {\n              var pg = this._pInst;\n              pg.canvas.parentNode.removeChild(pg.canvas);\n              pg.canvas = document.createElement('canvas');\n              var node = pg._pInst._userNode || document.body;\n              node.appendChild(pg.canvas);\n              _main.default.Element.call(pg, pg.canvas, pg._pInst);\n              pg.width = w;\n              pg.height = h;\n            } else {\n              var c = this.canvas;\n              if (c) {\n                c.parentNode.removeChild(c);\n              }\n              c = document.createElement('canvas');\n              c.id = defaultId;\n              if (this._pInst._userNode) {\n                this._pInst._userNode.appendChild(c);\n              } else {\n                document.body.appendChild(c);\n              }\n              this._pInst.canvas = c;\n            }\n\n            var renderer = new _main.default.RendererGL(\n              this._pInst.canvas,\n              this._pInst,\n              !isPGraphics\n            );\n\n            this._pInst._setProperty('_renderer', renderer);\n            renderer.resize(w, h);\n            renderer._applyDefaults();\n\n            if (!isPGraphics) {\n              this._pInst._elements.push(renderer);\n            }\n\n            if (typeof callback === 'function') {\n              //setTimeout with 0 forces the task to the back of the queue, this ensures that\n              //we finish switching out the renderer\n              setTimeout(function() {\n                callback.apply(window._renderer, options);\n              }, 0);\n            }\n          };\n          /**\n           * @module Rendering\n           * @submodule Rendering\n           * @for p5\n           */\n          /**\n           * Set attributes for the WebGL Drawing context.\n           * This is a way of adjusting how the WebGL\n           * renderer works to fine-tune the display and performance.\n           *\n           * Note that this will reinitialize the drawing context\n           * if called after the WebGL canvas is made.\n           *\n           * If an object is passed as the parameter, all attributes\n           * not declared in the object will be set to defaults.\n           *\n           * The available attributes are:\n           * <br>\n           * alpha - indicates if the canvas contains an alpha buffer\n           * default is true\n           *\n           * depth - indicates whether the drawing buffer has a depth buffer\n           * of at least 16 bits - default is true\n           *\n           * stencil - indicates whether the drawing buffer has a stencil buffer\n           * of at least 8 bits\n           *\n           * antialias - indicates whether or not to perform anti-aliasing\n           * default is false (true in Safari)\n           *\n           * premultipliedAlpha - indicates that the page compositor will assume\n           * the drawing buffer contains colors with pre-multiplied alpha\n           * default is false\n           *\n           * preserveDrawingBuffer - if true the buffers will not be cleared and\n           * and will preserve their values until cleared or overwritten by author\n           * (note that p5 clears automatically on draw loop)\n           * default is true\n           *\n           * perPixelLighting - if true, per-pixel lighting will be used in the\n           * lighting shader otherwise per-vertex lighting is used.\n           * default is true.\n           *\n           * @method setAttributes\n           * @for p5\n           * @param  {String}  key Name of attribute\n           * @param  {Boolean}        value New value of named attribute\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   push();\n           *   rotateZ(frameCount * 0.02);\n           *   rotateX(frameCount * 0.02);\n           *   rotateY(frameCount * 0.02);\n           *   fill(0, 0, 0);\n           *   box(50);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           * <br>\n           * Now with the antialias attribute set to true.\n           * <br>\n           * <div>\n           * <code>\n           * function setup() {\n           *   setAttributes('antialias', true);\n           *   createCanvas(100, 100, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(255);\n           *   push();\n           *   rotateZ(frameCount * 0.02);\n           *   rotateX(frameCount * 0.02);\n           *   rotateY(frameCount * 0.02);\n           *   fill(0, 0, 0);\n           *   box(50);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * <div>\n           * <code>\n           * // press the mouse button to disable perPixelLighting\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   noStroke();\n           *   fill(255);\n           * }\n           *\n           * let lights = [\n           *   { c: '#f00', t: 1.12, p: 1.91, r: 0.2 },\n           *   { c: '#0f0', t: 1.21, p: 1.31, r: 0.2 },\n           *   { c: '#00f', t: 1.37, p: 1.57, r: 0.2 },\n           *   { c: '#ff0', t: 1.12, p: 1.91, r: 0.7 },\n           *   { c: '#0ff', t: 1.21, p: 1.31, r: 0.7 },\n           *   { c: '#f0f', t: 1.37, p: 1.57, r: 0.7 }\n           * ];\n           *\n           * function draw() {\n           *   let t = millis() / 1000 + 1000;\n           *   background(0);\n           *   directionalLight(color('#222'), 1, 1, 1);\n           *\n           *   for (let i = 0; i < lights.length; i++) {\n           *     let light = lights[i];\n           *     pointLight(\n           *       color(light.c),\n           *       p5.Vector.fromAngles(t * light.t, t * light.p, width * light.r)\n           *     );\n           *   }\n           *\n           *   specularMaterial(255);\n           *   sphere(width * 0.1);\n           *\n           *   rotateX(t * 0.77);\n           *   rotateY(t * 0.83);\n           *   rotateZ(t * 0.91);\n           *   torus(width * 0.3, width * 0.07, 24, 10);\n           * }\n           *\n           * function mousePressed() {\n           *   setAttributes('perPixelLighting', false);\n           *   noStroke();\n           *   fill(255);\n           * }\n           * function mouseReleased() {\n           *   setAttributes('perPixelLighting', true);\n           *   noStroke();\n           *   fill(255);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt a rotating cube with smoother edges\n           */\n          /**\n           * @method setAttributes\n           * @for p5\n           * @param  {Object}  obj object with key-value pairs\n           */\n\n          _main.default.prototype.setAttributes = function(key, value) {\n            if (typeof this._glAttributes === 'undefined') {\n              console.log(\n                'You are trying to use setAttributes on a p5.Graphics object ' +\n                  'that does not use a WEBGL renderer.'\n              );\n\n              return;\n            }\n            var unchanged = true;\n            if (typeof value !== 'undefined') {\n              //first time modifying the attributes\n              if (this._glAttributes === null) {\n                this._glAttributes = {};\n              }\n              if (this._glAttributes[key] !== value) {\n                //changing value of previously altered attribute\n                this._glAttributes[key] = value;\n                unchanged = false;\n              }\n              //setting all attributes with some change\n            } else if (key instanceof Object) {\n              if (this._glAttributes !== key) {\n                this._glAttributes = key;\n                unchanged = false;\n              }\n            }\n            //@todo_FES\n            if (!this._renderer.isP3D || unchanged) {\n              return;\n            }\n\n            if (!this._setupDone) {\n              for (var x in this._renderer.retainedMode.geometry) {\n                if (this._renderer.retainedMode.geometry.hasOwnProperty(x)) {\n                  console.error(\n                    'Sorry, Could not set the attributes, you need to call setAttributes() ' +\n                      'before calling the other drawing methods in setup()'\n                  );\n\n                  return;\n                }\n              }\n            }\n\n            this.push();\n            this._renderer._resetContext();\n            this.pop();\n\n            if (this._renderer._curCamera) {\n              this._renderer._curCamera._renderer = this._renderer;\n            }\n          };\n\n          /**\n           * @class p5.RendererGL\n           */\n\n          _main.default.RendererGL.prototype._update = function() {\n            // reset model view and apply initial camera transform\n            // (containing only look at info; no projection).\n            this.uMVMatrix.set(\n              this._curCamera.cameraMatrix.mat4[0],\n              this._curCamera.cameraMatrix.mat4[1],\n              this._curCamera.cameraMatrix.mat4[2],\n              this._curCamera.cameraMatrix.mat4[3],\n              this._curCamera.cameraMatrix.mat4[4],\n              this._curCamera.cameraMatrix.mat4[5],\n              this._curCamera.cameraMatrix.mat4[6],\n              this._curCamera.cameraMatrix.mat4[7],\n              this._curCamera.cameraMatrix.mat4[8],\n              this._curCamera.cameraMatrix.mat4[9],\n              this._curCamera.cameraMatrix.mat4[10],\n              this._curCamera.cameraMatrix.mat4[11],\n              this._curCamera.cameraMatrix.mat4[12],\n              this._curCamera.cameraMatrix.mat4[13],\n              this._curCamera.cameraMatrix.mat4[14],\n              this._curCamera.cameraMatrix.mat4[15]\n            );\n\n            // reset light data for new frame.\n\n            this.ambientLightColors.length = 0;\n            this.specularColors = [1, 1, 1];\n\n            this.directionalLightDirections.length = 0;\n            this.directionalLightDiffuseColors.length = 0;\n            this.directionalLightSpecularColors.length = 0;\n\n            this.pointLightPositions.length = 0;\n            this.pointLightDiffuseColors.length = 0;\n            this.pointLightSpecularColors.length = 0;\n\n            this.spotLightPositions.length = 0;\n            this.spotLightDirections.length = 0;\n            this.spotLightDiffuseColors.length = 0;\n            this.spotLightSpecularColors.length = 0;\n            this.spotLightAngle.length = 0;\n            this.spotLightConc.length = 0;\n\n            this._enableLighting = false;\n\n            //reset tint value for new frame\n            this._tint = [255, 255, 255, 255];\n\n            //Clear depth every frame\n            this.GL.clear(this.GL.DEPTH_BUFFER_BIT);\n          };\n\n          /**\n           * [background description]\n           */\n          _main.default.RendererGL.prototype.background = function() {\n            var _this$_pInst;\n            var _col = (_this$_pInst = this._pInst).color.apply(_this$_pInst, arguments);\n            var _r = _col.levels[0] / 255;\n            var _g = _col.levels[1] / 255;\n            var _b = _col.levels[2] / 255;\n            var _a = _col.levels[3] / 255;\n            this.GL.clearColor(_r, _g, _b, _a);\n\n            this.GL.clear(this.GL.COLOR_BUFFER_BIT);\n          };\n\n          //////////////////////////////////////////////\n          // COLOR\n          //////////////////////////////////////////////\n          /**\n           * Basic fill material for geometry with a given color\n           * @method  fill\n           * @class p5.RendererGL\n           * @param  {Number|Number[]|String|p5.Color} v1  gray value,\n           * red or hue value (depending on the current color mode),\n           * or color Array, or CSS color string\n           * @param  {Number}            [v2] green or saturation value\n           * @param  {Number}            [v3] blue or brightness value\n           * @param  {Number}            [a]  opacity\n           * @chainable\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(200, 200, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   fill(100, 100, 240);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(75, 75, 75);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black canvas with purple cube spinning\n           */\n          _main.default.RendererGL.prototype.fill = function(v1, v2, v3, a) {\n            //see material.js for more info on color blending in webgl\n            var color = _main.default.prototype.color.apply(this._pInst, arguments);\n            this.curFillColor = color._array;\n            this.drawMode = constants.FILL;\n            this._useNormalMaterial = false;\n            this._tex = null;\n          };\n\n          /**\n           * Basic stroke material for geometry with a given color\n           * @method  stroke\n           * @param  {Number|Number[]|String|p5.Color} v1  gray value,\n           * red or hue value (depending on the current color mode),\n           * or color Array, or CSS color string\n           * @param  {Number}            [v2] green or saturation value\n           * @param  {Number}            [v3] blue or brightness value\n           * @param  {Number}            [a]  opacity\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(200, 200, WEBGL);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   stroke(240, 150, 150);\n           *   fill(100, 100, 240);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   box(75, 75, 75);\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black canvas with purple cube with pink outline spinning\n           */\n          _main.default.RendererGL.prototype.stroke = function(r, g, b, a) {\n            //@todo allow transparency in stroking currently doesn't have\n            //any impact and causes problems with specularMaterial\n            arguments[3] = 255;\n            var color = _main.default.prototype.color.apply(this._pInst, arguments);\n            this.curStrokeColor = color._array;\n          };\n\n          _main.default.RendererGL.prototype.strokeCap = function(cap) {\n            // @TODO : to be implemented\n            console.error('Sorry, strokeCap() is not yet implemented in WEBGL mode');\n          };\n\n          _main.default.RendererGL.prototype.strokeJoin = function(join) {\n            // @TODO : to be implemented\n            // https://processing.org/reference/strokeJoin_.html\n            console.error('Sorry, strokeJoin() is not yet implemented in WEBGL mode');\n          };\n\n          _main.default.RendererGL.prototype.filter = function(filterType) {\n            // filter can be achieved using custom shaders.\n            // https://github.com/aferriss/p5jsShaderExamples\n            // https://itp-xstory.github.io/p5js-shaders/#/\n            console.error('filter() does not work in WEBGL mode');\n          };\n\n          _main.default.RendererGL.prototype.blendMode = function(mode) {\n            if (\n              mode === constants.DARKEST ||\n              mode === constants.LIGHTEST ||\n              mode === constants.ADD ||\n              mode === constants.BLEND ||\n              mode === constants.SUBTRACT ||\n              mode === constants.SCREEN ||\n              mode === constants.EXCLUSION ||\n              mode === constants.REPLACE ||\n              mode === constants.MULTIPLY ||\n              mode === constants.REMOVE\n            )\n              this.curBlendMode = mode;\n            else if (\n              mode === constants.BURN ||\n              mode === constants.OVERLAY ||\n              mode === constants.HARD_LIGHT ||\n              mode === constants.SOFT_LIGHT ||\n              mode === constants.DODGE\n            ) {\n              console.warn(\n                'BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.'\n              );\n            }\n          };\n\n          _main.default.RendererGL.prototype.erase = function(opacityFill, opacityStroke) {\n            if (!this._isErasing) {\n              this._applyBlendMode(constants.REMOVE);\n              this._isErasing = true;\n\n              this._cachedFillStyle = this.curFillColor.slice();\n              this.curFillColor = [1, 1, 1, opacityFill / 255];\n\n              this._cachedStrokeStyle = this.curStrokeColor.slice();\n              this.curStrokeColor = [1, 1, 1, opacityStroke / 255];\n            }\n          };\n\n          _main.default.RendererGL.prototype.noErase = function() {\n            if (this._isErasing) {\n              this._isErasing = false;\n              this.curFillColor = this._cachedFillStyle.slice();\n              this.curStrokeColor = this._cachedStrokeStyle.slice();\n              this.blendMode(this._cachedBlendMode);\n            }\n          };\n\n          /**\n           * Change weight of stroke\n           * @method  strokeWeight\n           * @param  {Number} stroke weight to be used for drawing\n           * @example\n           * <div>\n           * <code>\n           * function setup() {\n           *   createCanvas(200, 400, WEBGL);\n           *   setAttributes('antialias', true);\n           * }\n           *\n           * function draw() {\n           *   background(0);\n           *   noStroke();\n           *   translate(0, -100, 0);\n           *   stroke(240, 150, 150);\n           *   fill(100, 100, 240);\n           *   push();\n           *   strokeWeight(8);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   sphere(75);\n           *   pop();\n           *   push();\n           *   translate(0, 200, 0);\n           *   strokeWeight(1);\n           *   rotateX(frameCount * 0.01);\n           *   rotateY(frameCount * 0.01);\n           *   sphere(75);\n           *   pop();\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * black canvas with two purple rotating spheres with pink\n           * outlines the sphere on top has much heavier outlines,\n           */\n          _main.default.RendererGL.prototype.strokeWeight = function(w) {\n            if (this.curStrokeWeight !== w) {\n              this.pointSize = w;\n              this.curStrokeWeight = w;\n            }\n          };\n\n          // x,y are canvas-relative (pre-scaled by _pixelDensity)\n          _main.default.RendererGL.prototype._getPixel = function(x, y) {\n            var imageData, index;\n            imageData = new Uint8Array(4);\n            // prettier-ignore\n            this.drawingContext.readPixels(\n  x, y, 1, 1,\n  this.drawingContext.RGBA, this.drawingContext.UNSIGNED_BYTE,\n  imageData);\n\n            index = 0;\n            return [\n              imageData[index + 0],\n              imageData[index + 1],\n              imageData[index + 2],\n              imageData[index + 3]\n            ];\n          };\n\n          /**\n           * Loads the pixels data for this canvas into the pixels[] attribute.\n           * Note that updatePixels() and set() do not work.\n           * Any pixel manipulation must be done directly to the pixels[] array.\n           *\n           * @private\n           * @method loadPixels\n           */\n\n          _main.default.RendererGL.prototype.loadPixels = function() {\n            var pixelsState = this._pixelsState;\n\n            //@todo_FES\n            if (this._pInst._glAttributes.preserveDrawingBuffer !== true) {\n              console.log(\n                'loadPixels only works in WebGL when preserveDrawingBuffer ' + 'is true.'\n              );\n\n              return;\n            }\n\n            //if there isn't a renderer-level temporary pixels buffer\n            //make a new one\n            var pixels = pixelsState.pixels;\n            var len = this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4;\n            if (!(pixels instanceof Uint8Array) || pixels.length !== len) {\n              pixels = new Uint8Array(len);\n              this._pixelsState._setProperty('pixels', pixels);\n            }\n\n            var pd = this._pInst._pixelDensity;\n            // prettier-ignore\n            this.GL.readPixels(\n  0, 0, this.width * pd, this.height * pd,\n  this.GL.RGBA, this.GL.UNSIGNED_BYTE,\n  pixels);\n          };\n\n          //////////////////////////////////////////////\n          // HASH | for geometry\n          //////////////////////////////////////////////\n\n          _main.default.RendererGL.prototype.geometryInHash = function(gId) {\n            return this.retainedMode.geometry[gId] !== undefined;\n          };\n\n          /**\n           * [resize description]\n           * @private\n           * @param  {Number} w [description]\n           * @param  {Number} h [description]\n           */\n          _main.default.RendererGL.prototype.resize = function(w, h) {\n            _main.default.Renderer.prototype.resize.call(this, w, h);\n            this.GL.viewport(0, 0, this.GL.drawingBufferWidth, this.GL.drawingBufferHeight);\n\n            this._viewport = this.GL.getParameter(this.GL.VIEWPORT);\n\n            this._curCamera._resize();\n\n            //resize pixels buffer\n            var pixelsState = this._pixelsState;\n            if (typeof pixelsState.pixels !== 'undefined') {\n              pixelsState._setProperty(\n                'pixels',\n                new Uint8Array(this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4)\n              );\n            }\n          };\n\n          /**\n           * clears color and depth buffers\n           * with r,g,b,a\n           * @private\n           * @param {Number} r normalized red val.\n           * @param {Number} g normalized green val.\n           * @param {Number} b normalized blue val.\n           * @param {Number} a normalized alpha val.\n           */\n          _main.default.RendererGL.prototype.clear = function() {\n            var _r = (arguments.length <= 0 ? undefined : arguments[0]) || 0;\n            var _g = (arguments.length <= 1 ? undefined : arguments[1]) || 0;\n            var _b = (arguments.length <= 2 ? undefined : arguments[2]) || 0;\n            var _a = (arguments.length <= 3 ? undefined : arguments[3]) || 0;\n            this.GL.clearColor(_r, _g, _b, _a);\n            this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);\n          };\n\n          _main.default.RendererGL.prototype.applyMatrix = function(a, b, c, d, e, f) {\n            if (arguments.length === 16) {\n              _main.default.Matrix.prototype.apply.apply(this.uMVMatrix, arguments);\n            } else {\n              // prettier-ignore\n              this.uMVMatrix.apply([\n    a, b, 0, 0,\n    c, d, 0, 0,\n    0, 0, 1, 0,\n    e, f, 0, 1]);\n            }\n          };\n\n          /**\n           * [translate description]\n           * @private\n           * @param  {Number} x [description]\n           * @param  {Number} y [description]\n           * @param  {Number} z [description]\n           * @chainable\n           * @todo implement handle for components or vector as args\n           */\n          _main.default.RendererGL.prototype.translate = function(x, y, z) {\n            if (x instanceof _main.default.Vector) {\n              z = x.z;\n              y = x.y;\n              x = x.x;\n            }\n            this.uMVMatrix.translate([x, y, z]);\n            return this;\n          };\n\n          /**\n           * Scales the Model View Matrix by a vector\n           * @private\n           * @param  {Number | p5.Vector | Array} x [description]\n           * @param  {Number} [y] y-axis scalar\n           * @param  {Number} [z] z-axis scalar\n           * @chainable\n           */\n          _main.default.RendererGL.prototype.scale = function(x, y, z) {\n            this.uMVMatrix.scale(x, y, z);\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.rotate = function(rad, axis) {\n            if (typeof axis === 'undefined') {\n              return this.rotateZ(rad);\n            }\n            _main.default.Matrix.prototype.rotate.apply(this.uMVMatrix, arguments);\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.rotateX = function(rad) {\n            this.rotate(rad, 1, 0, 0);\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.rotateY = function(rad) {\n            this.rotate(rad, 0, 1, 0);\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.rotateZ = function(rad) {\n            this.rotate(rad, 0, 0, 1);\n            return this;\n          };\n\n          _main.default.RendererGL.prototype.push = function() {\n            // get the base renderer style\n            var style = _main.default.Renderer.prototype.push.apply(this);\n\n            // add webgl-specific style properties\n            var properties = style.properties;\n\n            properties.uMVMatrix = this.uMVMatrix.copy();\n            properties.uPMatrix = this.uPMatrix.copy();\n            properties._curCamera = this._curCamera;\n\n            // make a copy of the current camera for the push state\n            // this preserves any references stored using 'createCamera'\n            this._curCamera = this._curCamera.copy();\n\n            properties.ambientLightColors = this.ambientLightColors.slice();\n            properties.specularColors = this.specularColors.slice();\n\n            properties.directionalLightDirections = this.directionalLightDirections.slice();\n            properties.directionalLightDiffuseColors = this.directionalLightDiffuseColors.slice();\n            properties.directionalLightSpecularColors = this.directionalLightSpecularColors.slice();\n\n            properties.pointLightPositions = this.pointLightPositions.slice();\n            properties.pointLightDiffuseColors = this.pointLightDiffuseColors.slice();\n            properties.pointLightSpecularColors = this.pointLightSpecularColors.slice();\n\n            properties.spotLightPositions = this.spotLightPositions.slice();\n            properties.spotLightDirections = this.spotLightDirections.slice();\n            properties.spotLightDiffuseColors = this.spotLightDiffuseColors.slice();\n            properties.spotLightSpecularColors = this.spotLightSpecularColors.slice();\n            properties.spotLightAngle = this.spotLightAngle.slice();\n            properties.spotLightConc = this.spotLightConc.slice();\n\n            properties.userFillShader = this.userFillShader;\n            properties.userStrokeShader = this.userStrokeShader;\n            properties.userPointShader = this.userPointShader;\n\n            properties.pointSize = this.pointSize;\n            properties.curStrokeWeight = this.curStrokeWeight;\n            properties.curStrokeColor = this.curStrokeColor;\n            properties.curFillColor = this.curFillColor;\n\n            properties._useSpecularMaterial = this._useSpecularMaterial;\n            properties._useEmissiveMaterial = this._useEmissiveMaterial;\n            properties._useShininess = this._useShininess;\n\n            properties.constantAttenuation = this.constantAttenuation;\n            properties.linearAttenuation = this.linearAttenuation;\n            properties.quadraticAttenuation = this.quadraticAttenuation;\n\n            properties._enableLighting = this._enableLighting;\n            properties._useNormalMaterial = this._useNormalMaterial;\n            properties._tex = this._tex;\n            properties.drawMode = this.drawMode;\n\n            return style;\n          };\n\n          _main.default.RendererGL.prototype.resetMatrix = function() {\n            this.uMVMatrix = _main.default.Matrix.identity(this._pInst);\n            return this;\n          };\n\n          //////////////////////////////////////////////\n          // SHADER\n          //////////////////////////////////////////////\n\n          /*\n * shaders are created and cached on a per-renderer basis,\n * on the grounds that each renderer will have its own gl context\n * and the shader must be valid in that context.\n */\n\n          _main.default.RendererGL.prototype._getImmediateStrokeShader = function() {\n            // select the stroke shader to use\n            var stroke = this.userStrokeShader;\n            if (!stroke || !stroke.isStrokeShader()) {\n              return this._getLineShader();\n            }\n            return stroke;\n          };\n\n          _main.default.RendererGL.prototype._getRetainedStrokeShader =\n            _main.default.RendererGL.prototype._getImmediateStrokeShader;\n\n          /*\n                                                               * selects which fill shader should be used based on renderer state,\n                                                               * for use with begin/endShape and immediate vertex mode.\n                                                               */\n          _main.default.RendererGL.prototype._getImmediateFillShader = function() {\n            var fill = this.userFillShader;\n            if (this._useNormalMaterial) {\n              if (!fill || !fill.isNormalShader()) {\n                return this._getNormalShader();\n              }\n            }\n            if (this._enableLighting) {\n              if (!fill || !fill.isLightShader()) {\n                return this._getLightShader();\n              }\n            } else if (this._tex) {\n              if (!fill || !fill.isTextureShader()) {\n                return this._getLightShader();\n              }\n            } else if (!fill /*|| !fill.isColorShader()*/) {\n              return this._getImmediateModeShader();\n            }\n            return fill;\n          };\n\n          /*\n    * selects which fill shader should be used based on renderer state\n    * for retained mode.\n    */\n          _main.default.RendererGL.prototype._getRetainedFillShader = function() {\n            if (this._useNormalMaterial) {\n              return this._getNormalShader();\n            }\n\n            var fill = this.userFillShader;\n            if (this._enableLighting) {\n              if (!fill || !fill.isLightShader()) {\n                return this._getLightShader();\n              }\n            } else if (this._tex) {\n              if (!fill || !fill.isTextureShader()) {\n                return this._getLightShader();\n              }\n            } else if (!fill /* || !fill.isColorShader()*/) {\n              return this._getColorShader();\n            }\n            return fill;\n          };\n\n          _main.default.RendererGL.prototype._getImmediatePointShader = function() {\n            // select the point shader to use\n            var point = this.userPointShader;\n            if (!point || !point.isPointShader()) {\n              return this._getPointShader();\n            }\n            return point;\n          };\n\n          _main.default.RendererGL.prototype._getRetainedLineShader =\n            _main.default.RendererGL.prototype._getImmediateLineShader;\n\n          _main.default.RendererGL.prototype._getLightShader = function() {\n            if (!this._defaultLightShader) {\n              if (this._pInst._glAttributes.perPixelLighting) {\n                this._defaultLightShader = new _main.default.Shader(\n                  this,\n                  defaultShaders.phongVert,\n                  defaultShaders.phongFrag\n                );\n              } else {\n                this._defaultLightShader = new _main.default.Shader(\n                  this,\n                  defaultShaders.lightVert,\n                  defaultShaders.lightTextureFrag\n                );\n              }\n            }\n\n            return this._defaultLightShader;\n          };\n\n          _main.default.RendererGL.prototype._getImmediateModeShader = function() {\n            if (!this._defaultImmediateModeShader) {\n              this._defaultImmediateModeShader = new _main.default.Shader(\n                this,\n                defaultShaders.immediateVert,\n                defaultShaders.vertexColorFrag\n              );\n            }\n\n            return this._defaultImmediateModeShader;\n          };\n\n          _main.default.RendererGL.prototype._getNormalShader = function() {\n            if (!this._defaultNormalShader) {\n              this._defaultNormalShader = new _main.default.Shader(\n                this,\n                defaultShaders.normalVert,\n                defaultShaders.normalFrag\n              );\n            }\n\n            return this._defaultNormalShader;\n          };\n\n          _main.default.RendererGL.prototype._getColorShader = function() {\n            if (!this._defaultColorShader) {\n              this._defaultColorShader = new _main.default.Shader(\n                this,\n                defaultShaders.normalVert,\n                defaultShaders.basicFrag\n              );\n            }\n\n            return this._defaultColorShader;\n          };\n\n          _main.default.RendererGL.prototype._getPointShader = function() {\n            if (!this._defaultPointShader) {\n              this._defaultPointShader = new _main.default.Shader(\n                this,\n                defaultShaders.pointVert,\n                defaultShaders.pointFrag\n              );\n            }\n            return this._defaultPointShader;\n          };\n\n          _main.default.RendererGL.prototype._getLineShader = function() {\n            if (!this._defaultLineShader) {\n              this._defaultLineShader = new _main.default.Shader(\n                this,\n                defaultShaders.lineVert,\n                defaultShaders.lineFrag\n              );\n            }\n\n            return this._defaultLineShader;\n          };\n\n          _main.default.RendererGL.prototype._getFontShader = function() {\n            if (!this._defaultFontShader) {\n              this.GL.getExtension('OES_standard_derivatives');\n              this._defaultFontShader = new _main.default.Shader(\n                this,\n                defaultShaders.fontVert,\n                defaultShaders.fontFrag\n              );\n            }\n            return this._defaultFontShader;\n          };\n\n          _main.default.RendererGL.prototype._getEmptyTexture = function() {\n            if (!this._emptyTexture) {\n              // a plain white texture RGBA, full alpha, single pixel.\n              var im = new _main.default.Image(1, 1);\n              im.set(0, 0, 255);\n              this._emptyTexture = new _main.default.Texture(this, im);\n            }\n            return this._emptyTexture;\n          };\n\n          _main.default.RendererGL.prototype.getTexture = function(img) {\n            var textures = this.textures;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n            try {\n              for (\n                var _iterator = textures[Symbol.iterator](), _step;\n                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                _iteratorNormalCompletion = true\n              ) {\n                var texture = _step.value;\n                if (texture.src === img) return texture;\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            var tex = new _main.default.Texture(this, img);\n            textures.push(tex);\n            return tex;\n          };\n\n          _main.default.RendererGL.prototype._setStrokeUniforms = function(strokeShader) {\n            strokeShader.bindShader();\n\n            // set the uniform values\n            strokeShader.setUniform('uMaterialColor', this.curStrokeColor);\n            strokeShader.setUniform('uStrokeWeight', this.curStrokeWeight);\n          };\n\n          _main.default.RendererGL.prototype._setFillUniforms = function(fillShader) {\n            fillShader.bindShader();\n\n            // TODO: optimize\n            fillShader.setUniform('uMaterialColor', this.curFillColor);\n            fillShader.setUniform('isTexture', !!this._tex);\n            if (this._tex) {\n              fillShader.setUniform('uSampler', this._tex);\n            }\n            fillShader.setUniform('uTint', this._tint);\n\n            fillShader.setUniform('uSpecular', this._useSpecularMaterial);\n            fillShader.setUniform('uEmissive', this._useEmissiveMaterial);\n            fillShader.setUniform('uShininess', this._useShininess);\n\n            fillShader.setUniform('uUseLighting', this._enableLighting);\n\n            var pointLightCount = this.pointLightDiffuseColors.length / 3;\n            fillShader.setUniform('uPointLightCount', pointLightCount);\n            fillShader.setUniform('uPointLightLocation', this.pointLightPositions);\n            fillShader.setUniform('uPointLightDiffuseColors', this.pointLightDiffuseColors);\n\n            fillShader.setUniform(\n              'uPointLightSpecularColors',\n              this.pointLightSpecularColors\n            );\n\n            var directionalLightCount = this.directionalLightDiffuseColors.length / 3;\n            fillShader.setUniform('uDirectionalLightCount', directionalLightCount);\n            fillShader.setUniform('uLightingDirection', this.directionalLightDirections);\n            fillShader.setUniform(\n              'uDirectionalDiffuseColors',\n              this.directionalLightDiffuseColors\n            );\n\n            fillShader.setUniform(\n              'uDirectionalSpecularColors',\n              this.directionalLightSpecularColors\n            );\n\n            // TODO: sum these here...\n            var ambientLightCount = this.ambientLightColors.length / 3;\n            fillShader.setUniform('uAmbientLightCount', ambientLightCount);\n            fillShader.setUniform('uAmbientColor', this.ambientLightColors);\n\n            var spotLightCount = this.spotLightDiffuseColors.length / 3;\n            fillShader.setUniform('uSpotLightCount', spotLightCount);\n            fillShader.setUniform('uSpotLightAngle', this.spotLightAngle);\n            fillShader.setUniform('uSpotLightConc', this.spotLightConc);\n            fillShader.setUniform('uSpotLightDiffuseColors', this.spotLightDiffuseColors);\n            fillShader.setUniform('uSpotLightSpecularColors', this.spotLightSpecularColors);\n\n            fillShader.setUniform('uSpotLightLocation', this.spotLightPositions);\n            fillShader.setUniform('uSpotLightDirection', this.spotLightDirections);\n\n            fillShader.setUniform('uConstantAttenuation', this.constantAttenuation);\n            fillShader.setUniform('uLinearAttenuation', this.linearAttenuation);\n            fillShader.setUniform('uQuadraticAttenuation', this.quadraticAttenuation);\n\n            fillShader.bindTextures();\n          };\n\n          _main.default.RendererGL.prototype._setPointUniforms = function(pointShader) {\n            pointShader.bindShader();\n\n            // set the uniform values\n            pointShader.setUniform('uMaterialColor', this.curStrokeColor);\n            // @todo is there an instance where this isn't stroke weight?\n            // should be they be same var?\n            pointShader.setUniform(\n              'uPointSize',\n              this.pointSize * this._pInst._pixelDensity\n            );\n          };\n\n          /* Binds a buffer to the drawing context\n    * when passed more than two arguments it also updates or initializes\n    * the data associated with the buffer\n    */\n          _main.default.RendererGL.prototype._bindBuffer = function(\n            buffer,\n            target,\n            values,\n            type,\n            usage\n          ) {\n            if (!target) target = this.GL.ARRAY_BUFFER;\n            this.GL.bindBuffer(target, buffer);\n            if (values !== undefined) {\n              var data = new (type || Float32Array)(values);\n              this.GL.bufferData(target, data, usage || this.GL.STATIC_DRAW);\n            }\n          };\n\n          ///////////////////////////////\n          //// UTILITY FUNCTIONS\n          //////////////////////////////\n          _main.default.RendererGL.prototype._arraysEqual = function(a, b) {\n            var aLength = a.length;\n            if (aLength !== b.length) return false;\n            for (var i = 0; i < aLength; i++) {\n              if (a[i] !== b[i]) return false;\n            }\n            return true;\n          };\n\n          _main.default.RendererGL.prototype._isTypedArray = function(arr) {\n            var res = false;\n            res = arr instanceof Float32Array;\n            res = arr instanceof Float64Array;\n            res = arr instanceof Int16Array;\n            res = arr instanceof Uint16Array;\n            res = arr instanceof Uint32Array;\n            return res;\n          };\n          /**\n           * turn a two dimensional array into one dimensional array\n           * @private\n           * @param  {Array} arr 2-dimensional array\n           * @return {Array}     1-dimensional array\n           * [[1, 2, 3],[4, 5, 6]] -> [1, 2, 3, 4, 5, 6]\n           */\n          _main.default.RendererGL.prototype._flatten = function(arr) {\n            //when empty, return empty\n            if (arr.length === 0) {\n              return [];\n            } else if (arr.length > 20000) {\n              //big models , load slower to avoid stack overflow\n              //faster non-recursive flatten via axelduch\n              //stackoverflow.com/questions/27266550/how-to-flatten-nested-array-in-javascript\n              var _toString = Object.prototype.toString;\n              var arrayTypeStr = '[object Array]';\n              var result = [];\n              var nodes = arr.slice();\n              var node;\n              node = nodes.pop();\n              do {\n                if (_toString.call(node) === arrayTypeStr) {\n                  nodes.push.apply(nodes, _toConsumableArray(node));\n                } else {\n                  result.push(node);\n                }\n              } while (nodes.length && (node = nodes.pop()) !== undefined);\n              result.reverse(); // we reverse result to restore the original order\n              return result;\n            } else {\n              var _ref;\n              //otherwise if model within limits for browser\n              //use faster recursive loading\n              return (_ref = []).concat.apply(_ref, _toConsumableArray(arr));\n            }\n          };\n\n          /**\n           * turn a p5.Vector Array into a one dimensional number array\n           * @private\n           * @param  {p5.Vector[]} arr  an array of p5.Vector\n           * @return {Number[]}     a one dimensional array of numbers\n           * [p5.Vector(1, 2, 3), p5.Vector(4, 5, 6)] ->\n           * [1, 2, 3, 4, 5, 6]\n           */\n          _main.default.RendererGL.prototype._vToNArray = function(arr) {\n            var ret = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n            try {\n              for (\n                var _iterator2 = arr[Symbol.iterator](), _step2;\n                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n                _iteratorNormalCompletion2 = true\n              ) {\n                var item = _step2.value;\n                ret.push(item.x, item.y, item.z);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            return ret;\n          };\n\n          /**\n           * ensures that p5 is using a 3d renderer. throws an error if not.\n           */\n          _main.default.prototype._assert3d = function(name) {\n            if (!this._renderer.isP3D)\n              throw new Error(\n                ''.concat(\n                  name,\n                  \"() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information.\"\n                )\n              );\n          };\n\n          // function to initialize GLU Tesselator\n\n          _main.default.RendererGL.prototype._initTessy = function initTesselator() {\n            // function called for each vertex of tesselator output\n            function vertexCallback(data, polyVertArray) {\n              polyVertArray[polyVertArray.length] = data[0];\n              polyVertArray[polyVertArray.length] = data[1];\n              polyVertArray[polyVertArray.length] = data[2];\n            }\n\n            function begincallback(type) {\n              if (type !== _libtess.default.primitiveType.GL_TRIANGLES) {\n                console.log('expected TRIANGLES but got type: '.concat(type));\n              }\n            }\n\n            function errorcallback(errno) {\n              console.log('error callback');\n              console.log('error number: '.concat(errno));\n            }\n            // callback for when segments intersect and must be split\n            function combinecallback(coords, data, weight) {\n              return [coords[0], coords[1], coords[2]];\n            }\n\n            function edgeCallback(flag) {\n              // don't really care about the flag, but need no-strip/no-fan behavior\n            }\n\n            var tessy = new _libtess.default.GluTesselator();\n            tessy.gluTessCallback(\n              _libtess.default.gluEnum.GLU_TESS_VERTEX_DATA,\n              vertexCallback\n            );\n            tessy.gluTessCallback(_libtess.default.gluEnum.GLU_TESS_BEGIN, begincallback);\n            tessy.gluTessCallback(_libtess.default.gluEnum.GLU_TESS_ERROR, errorcallback);\n            tessy.gluTessCallback(\n              _libtess.default.gluEnum.GLU_TESS_COMBINE,\n              combinecallback\n            );\n            tessy.gluTessCallback(\n              _libtess.default.gluEnum.GLU_TESS_EDGE_FLAG,\n              edgeCallback\n            );\n\n            return tessy;\n          };\n\n          _main.default.RendererGL.prototype._triangulate = function(contours) {\n            // libtess will take 3d verts and flatten to a plane for tesselation\n            // since only doing 2d tesselation here, provide z=1 normal to skip\n            // iterating over verts only to get the same answer.\n            // comment out to test normal-generation code\n            this._tessy.gluTessNormal(0, 0, 1);\n\n            var triangleVerts = [];\n            this._tessy.gluTessBeginPolygon(triangleVerts);\n\n            for (var i = 0; i < contours.length; i++) {\n              this._tessy.gluTessBeginContour();\n              var contour = contours[i];\n              for (var j = 0; j < contour.length; j += 3) {\n                var coords = [contour[j], contour[j + 1], contour[j + 2]];\n                this._tessy.gluTessVertex(coords, coords);\n              }\n              this._tessy.gluTessEndContour();\n            }\n\n            // finish polygon\n            this._tessy.gluTessEndPolygon();\n\n            return triangleVerts;\n          };\n\n          // function to calculate BezierVertex Coefficients\n          _main.default.RendererGL.prototype._bezierCoefficients = function(t) {\n            var t2 = t * t;\n            var t3 = t2 * t;\n            var mt = 1 - t;\n            var mt2 = mt * mt;\n            var mt3 = mt2 * mt;\n            return [mt3, 3 * mt2 * t, 3 * mt * t2, t3];\n          };\n\n          // function to calculate QuadraticVertex Coefficients\n          _main.default.RendererGL.prototype._quadraticCoefficients = function(t) {\n            var t2 = t * t;\n            var mt = 1 - t;\n            var mt2 = mt * mt;\n            return [mt2, 2 * mt * t, t2];\n          };\n\n          // function to convert Bezier coordinates to Catmull Rom Splines\n          _main.default.RendererGL.prototype._bezierToCatmull = function(w) {\n            var p1 = w[1];\n            var p2 = w[1] + (w[2] - w[0]) / this._curveTightness;\n            var p3 = w[2] - (w[3] - w[1]) / this._curveTightness;\n            var p4 = w[2];\n            var p = [p1, p2, p3, p4];\n            return p;\n          };\n          var _default = _main.default.RendererGL;\n          exports.default = _default;\n        },\n        {\n          '../core/constants': 48,\n          '../core/main': 59,\n          '../core/p5.Renderer': 62,\n          './p5.Camera': 107,\n          './p5.Matrix': 109,\n          './p5.Shader': 114,\n          libtess: 32,\n          path: 35\n        }\n      ],\n      114: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * This module defines the p5.Shader class\n           * @module Lights, Camera\n           * @submodule Material\n           * @for p5\n           * @requires core\n           */ /**\n           * Shader class for WEBGL Mode\n           * @class p5.Shader\n           * @constructor\n           * @param {p5.RendererGL} renderer an instance of p5.RendererGL that\n           * will provide the GL context for this new p5.Shader\n           * @param {String} vertSrc source code for the vertex shader (as a string)\n           * @param {String} fragSrc source code for the fragment shader (as a string)\n           */ _main.default.Shader = function(renderer, vertSrc, fragSrc) {\n            // TODO: adapt this to not take ids, but rather,\n            // to take the source for a vertex and fragment shader\n            // to enable custom shaders at some later date\n            this._renderer = renderer;\n            this._vertSrc = vertSrc;\n            this._fragSrc = fragSrc;\n            this._vertShader = -1;\n            this._fragShader = -1;\n            this._glProgram = 0;\n            this._loadedAttributes = false;\n            this.attributes = {};\n            this._loadedUniforms = false;\n            this.uniforms = {};\n            this._bound = false;\n            this.samplers = [];\n          };\n\n          /**\n           * Creates, compiles, and links the shader based on its\n           * sources for the vertex and fragment shaders (provided\n           * to the constructor). Populates known attributes and\n           * uniforms from the shader.\n           * @method init\n           * @chainable\n           * @private\n           */\n          _main.default.Shader.prototype.init = function() {\n            if (this._glProgram === 0 /* or context is stale? */) {\n              var gl = this._renderer.GL;\n\n              // @todo: once custom shading is allowed,\n              // friendly error messages should be used here to share\n              // compiler and linker errors.\n\n              //set up the shader by\n              // 1. creating and getting a gl id for the shader program,\n              // 2. compliling its vertex & fragment sources,\n              // 3. linking the vertex and fragment shaders\n              this._vertShader = gl.createShader(gl.VERTEX_SHADER);\n              //load in our default vertex shader\n              gl.shaderSource(this._vertShader, this._vertSrc);\n              gl.compileShader(this._vertShader);\n              // if our vertex shader failed compilation?\n              if (!gl.getShaderParameter(this._vertShader, gl.COMPILE_STATUS)) {\n                console.error(\n                  'Yikes! An error occurred compiling the vertex shader:'.concat(\n                    gl.getShaderInfoLog(this._vertShader)\n                  )\n                );\n\n                return null;\n              }\n\n              this._fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n              //load in our material frag shader\n              gl.shaderSource(this._fragShader, this._fragSrc);\n              gl.compileShader(this._fragShader);\n              // if our frag shader failed compilation?\n              if (!gl.getShaderParameter(this._fragShader, gl.COMPILE_STATUS)) {\n                console.error(\n                  'Darn! An error occurred compiling the fragment shader:'.concat(\n                    gl.getShaderInfoLog(this._fragShader)\n                  )\n                );\n\n                return null;\n              }\n\n              this._glProgram = gl.createProgram();\n              gl.attachShader(this._glProgram, this._vertShader);\n              gl.attachShader(this._glProgram, this._fragShader);\n              gl.linkProgram(this._glProgram);\n              if (!gl.getProgramParameter(this._glProgram, gl.LINK_STATUS)) {\n                console.error(\n                  'Snap! Error linking shader program: '.concat(\n                    gl.getProgramInfoLog(this._glProgram)\n                  )\n                );\n              }\n\n              this._loadAttributes();\n              this._loadUniforms();\n            }\n            return this;\n          };\n\n          /**\n           * Queries the active attributes for this shader and loads\n           * their names and locations into the attributes array.\n           * @method _loadAttributes\n           * @private\n           */\n          _main.default.Shader.prototype._loadAttributes = function() {\n            if (this._loadedAttributes) {\n              return;\n            }\n\n            this.attributes = {};\n\n            var gl = this._renderer.GL;\n\n            var numAttributes = gl.getProgramParameter(\n              this._glProgram,\n              gl.ACTIVE_ATTRIBUTES\n            );\n\n            for (var i = 0; i < numAttributes; ++i) {\n              var attributeInfo = gl.getActiveAttrib(this._glProgram, i);\n              var name = attributeInfo.name;\n              var location = gl.getAttribLocation(this._glProgram, name);\n              var attribute = {};\n              attribute.name = name;\n              attribute.location = location;\n              attribute.index = i;\n              attribute.type = attributeInfo.type;\n              attribute.size = attributeInfo.size;\n              this.attributes[name] = attribute;\n            }\n\n            this._loadedAttributes = true;\n          };\n\n          /**\n           * Queries the active uniforms for this shader and loads\n           * their names and locations into the uniforms array.\n           * @method _loadUniforms\n           * @private\n           */\n          _main.default.Shader.prototype._loadUniforms = function() {\n            if (this._loadedUniforms) {\n              return;\n            }\n\n            var gl = this._renderer.GL;\n\n            // Inspect shader and cache uniform info\n            var numUniforms = gl.getProgramParameter(this._glProgram, gl.ACTIVE_UNIFORMS);\n\n            var samplerIndex = 0;\n            for (var i = 0; i < numUniforms; ++i) {\n              var uniformInfo = gl.getActiveUniform(this._glProgram, i);\n              var uniform = {};\n              uniform.location = gl.getUniformLocation(this._glProgram, uniformInfo.name);\n              uniform.size = uniformInfo.size;\n              var uniformName = uniformInfo.name;\n              //uniforms thats are arrays have their name returned as\n              //someUniform[0] which is a bit silly so we trim it\n              //off here. The size property tells us that its an array\n              //so we dont lose any information by doing this\n              if (uniformInfo.size > 1) {\n                uniformName = uniformName.substring(0, uniformName.indexOf('[0]'));\n              }\n              uniform.name = uniformName;\n              uniform.type = uniformInfo.type;\n              uniform._cachedData = undefined;\n              if (uniform.type === gl.SAMPLER_2D) {\n                uniform.samplerIndex = samplerIndex;\n                samplerIndex++;\n                this.samplers.push(uniform);\n              }\n              uniform.isArray =\n                uniform.type === gl.FLOAT_MAT3 ||\n                uniform.type === gl.FLOAT_MAT4 ||\n                uniform.type === gl.FLOAT_VEC2 ||\n                uniform.type === gl.FLOAT_VEC3 ||\n                uniform.type === gl.FLOAT_VEC4 ||\n                uniform.type === gl.INT_VEC2 ||\n                uniform.type === gl.INT_VEC3 ||\n                uniform.type === gl.INT_VEC4;\n\n              this.uniforms[uniformName] = uniform;\n            }\n            this._loadedUniforms = true;\n          };\n\n          _main.default.Shader.prototype.compile = function() {\n            // TODO\n          };\n\n          /**\n           * initializes (if needed) and binds the shader program.\n           * @method bindShader\n           * @private\n           */\n          _main.default.Shader.prototype.bindShader = function() {\n            this.init();\n            if (!this._bound) {\n              this.useProgram();\n              this._bound = true;\n\n              this._setMatrixUniforms();\n\n              this.setUniform('uViewport', this._renderer._viewport);\n            }\n          };\n\n          /**\n           * @method unbindShader\n           * @chainable\n           * @private\n           */\n          _main.default.Shader.prototype.unbindShader = function() {\n            if (this._bound) {\n              this.unbindTextures();\n              //this._renderer.GL.useProgram(0); ??\n              this._bound = false;\n            }\n            return this;\n          };\n\n          _main.default.Shader.prototype.bindTextures = function() {\n            var gl = this._renderer.GL;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n            try {\n              for (\n                var _iterator = this.samplers[Symbol.iterator](), _step;\n                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                _iteratorNormalCompletion = true\n              ) {\n                var uniform = _step.value;\n                var tex = uniform.texture;\n                if (tex === undefined) {\n                  // user hasn't yet supplied a texture for this slot.\n                  // (or there may not be one--maybe just lighting),\n                  // so we supply a default texture instead.\n                  tex = this._renderer._getEmptyTexture();\n                }\n                gl.activeTexture(gl.TEXTURE0 + uniform.samplerIndex);\n                tex.bindTexture();\n                tex.update();\n                gl.uniform1i(uniform.location, uniform.samplerIndex);\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          };\n\n          _main.default.Shader.prototype.updateTextures = function() {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n            try {\n              for (\n                var _iterator2 = this.samplers[Symbol.iterator](), _step2;\n                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n                _iteratorNormalCompletion2 = true\n              ) {\n                var uniform = _step2.value;\n                var tex = uniform.texture;\n                if (tex) {\n                  tex.update();\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          };\n\n          _main.default.Shader.prototype.unbindTextures = function() {\n            // TODO: migrate stuff from material.js here\n            // - OR - have material.js define this function\n          };\n\n          _main.default.Shader.prototype._setMatrixUniforms = function() {\n            this.setUniform('uProjectionMatrix', this._renderer.uPMatrix.mat4);\n            if (this.isStrokeShader()) {\n              if (this._renderer._curCamera.cameraType === 'default') {\n                // strokes scale up as they approach camera, default\n                this.setUniform('uPerspective', 1);\n              } else {\n                // strokes have uniform scale regardless of distance from camera\n                this.setUniform('uPerspective', 0);\n              }\n            }\n            this.setUniform('uModelViewMatrix', this._renderer.uMVMatrix.mat4);\n            this.setUniform('uViewMatrix', this._renderer._curCamera.cameraMatrix.mat4);\n            if (this.uniforms.uNormalMatrix) {\n              this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix);\n              this.setUniform('uNormalMatrix', this._renderer.uNMatrix.mat3);\n            }\n          };\n\n          /**\n           * @method useProgram\n           * @chainable\n           * @private\n           */\n          _main.default.Shader.prototype.useProgram = function() {\n            var gl = this._renderer.GL;\n            if (this._renderer._curShader !== this) {\n              gl.useProgram(this._glProgram);\n              this._renderer._curShader = this;\n            }\n            return this;\n          };\n\n          /**\n           * Wrapper around gl.uniform functions.\n           * As we store uniform info in the shader we can use that\n           * to do type checking on the supplied data and call\n           * the appropriate function.\n           * @method setUniform\n           * @chainable\n           * @param {String} uniformName the name of the uniform in the\n           * shader program\n           * @param {Object|Number|Boolean|Number[]} data the data to be associated\n           * with that uniform; type varies (could be a single numerical value, array,\n           * matrix, or texture / sampler reference)\n           *\n           * @example\n           * <div modernizr='webgl'>\n           * <code>\n           * // Click within the image to toggle the value of uniforms\n           * // Note: for an alternative approach to the same example,\n           * // involving toggling between shaders please refer to:\n           * // https://p5js.org/reference/#/p5/shader\n           *\n           * let grad;\n           * let showRedGreen = false;\n           *\n           * function preload() {\n           *   // note that we are using two instances\n           *   // of the same vertex and fragment shaders\n           *   grad = loadShader('assets/shader.vert', 'assets/shader-gradient.frag');\n           * }\n           *\n           * function setup() {\n           *   createCanvas(100, 100, WEBGL);\n           *   shader(grad);\n           *   noStroke();\n           * }\n           *\n           * function draw() {\n           *   // update the offset values for each scenario,\n           *   // moving the \"grad\" shader in either vertical or\n           *   // horizontal direction each with differing colors\n           *\n           *   if (showRedGreen === true) {\n           *     grad.setUniform('colorCenter', [1, 0, 0]);\n           *     grad.setUniform('colorBackground', [0, 1, 0]);\n           *     grad.setUniform('offset', [sin(millis() / 2000), 1]);\n           *   } else {\n           *     grad.setUniform('colorCenter', [1, 0.5, 0]);\n           *     grad.setUniform('colorBackground', [0.226, 0, 0.615]);\n           *     grad.setUniform('offset', [0, sin(millis() / 2000) + 1]);\n           *   }\n           *   quad(-1, -1, 1, -1, 1, 1, -1, 1);\n           * }\n           *\n           * function mouseClicked() {\n           *   showRedGreen = !showRedGreen;\n           * }\n           * </code>\n           * </div>\n           *\n           * @alt\n           * canvas toggles between a circular gradient of orange and blue vertically. and a circular gradient of red and green moving horizontally when mouse is clicked/pressed.\n           */\n          _main.default.Shader.prototype.setUniform = function(uniformName, data) {\n            var uniform = this.uniforms[uniformName];\n            if (!uniform) {\n              return;\n            }\n            var gl = this._renderer.GL;\n\n            if (uniform.isArray) {\n              if (\n                uniform._cachedData &&\n                this._renderer._arraysEqual(uniform._cachedData, data)\n              ) {\n                return;\n              } else {\n                uniform._cachedData = data.slice(0);\n              }\n            } else if (uniform._cachedData && uniform._cachedData === data) {\n              return;\n            } else {\n              uniform._cachedData = data;\n            }\n\n            var location = uniform.location;\n\n            this.useProgram();\n\n            switch (uniform.type) {\n              case gl.BOOL:\n                if (data === true) {\n                  gl.uniform1i(location, 1);\n                } else {\n                  gl.uniform1i(location, 0);\n                }\n                break;\n              case gl.INT:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform1iv(location, data);\n                } else {\n                  gl.uniform1i(location, data);\n                }\n                break;\n              case gl.FLOAT:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform1fv(location, data);\n                } else {\n                  gl.uniform1f(location, data);\n                }\n                break;\n              case gl.FLOAT_MAT3:\n                gl.uniformMatrix3fv(location, false, data);\n                break;\n              case gl.FLOAT_MAT4:\n                gl.uniformMatrix4fv(location, false, data);\n                break;\n              case gl.FLOAT_VEC2:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform2fv(location, data);\n                } else {\n                  gl.uniform2f(location, data[0], data[1]);\n                }\n                break;\n              case gl.FLOAT_VEC3:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform3fv(location, data);\n                } else {\n                  gl.uniform3f(location, data[0], data[1], data[2]);\n                }\n                break;\n              case gl.FLOAT_VEC4:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform4fv(location, data);\n                } else {\n                  gl.uniform4f(location, data[0], data[1], data[2], data[3]);\n                }\n                break;\n              case gl.INT_VEC2:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform2iv(location, data);\n                } else {\n                  gl.uniform2i(location, data[0], data[1]);\n                }\n                break;\n              case gl.INT_VEC3:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform3iv(location, data);\n                } else {\n                  gl.uniform3i(location, data[0], data[1], data[2]);\n                }\n                break;\n              case gl.INT_VEC4:\n                if (uniform.size > 1) {\n                  data.length && gl.uniform4iv(location, data);\n                } else {\n                  gl.uniform4i(location, data[0], data[1], data[2], data[3]);\n                }\n                break;\n              case gl.SAMPLER_2D:\n                gl.activeTexture(gl.TEXTURE0 + uniform.samplerIndex);\n                uniform.texture = this._renderer.getTexture(data);\n                gl.uniform1i(uniform.location, uniform.samplerIndex);\n                break;\n              //@todo complete all types\n            }\n            return this;\n          };\n\n          /* NONE OF THIS IS FAST OR EFFICIENT BUT BEAR WITH ME\n    *\n    * these shader \"type\" query methods are used by various\n    * facilities of the renderer to determine if changing\n    * the shader type for the required action (for example,\n    * do we need to load the default lighting shader if the\n    * current shader cannot handle lighting?)\n    *\n    **/\n\n          _main.default.Shader.prototype.isLightShader = function() {\n            return (\n              this.attributes.aNormal !== undefined ||\n              this.uniforms.uUseLighting !== undefined ||\n              this.uniforms.uAmbientLightCount !== undefined ||\n              this.uniforms.uDirectionalLightCount !== undefined ||\n              this.uniforms.uPointLightCount !== undefined ||\n              this.uniforms.uAmbientColor !== undefined ||\n              this.uniforms.uDirectionalDiffuseColors !== undefined ||\n              this.uniforms.uDirectionalSpecularColors !== undefined ||\n              this.uniforms.uPointLightLocation !== undefined ||\n              this.uniforms.uPointLightDiffuseColors !== undefined ||\n              this.uniforms.uPointLightSpecularColors !== undefined ||\n              this.uniforms.uLightingDirection !== undefined ||\n              this.uniforms.uSpecular !== undefined\n            );\n          };\n\n          _main.default.Shader.prototype.isNormalShader = function() {\n            return this.attributes.aNormal !== undefined;\n          };\n\n          _main.default.Shader.prototype.isTextureShader = function() {\n            return this.samplerIndex > 0;\n          };\n\n          _main.default.Shader.prototype.isColorShader = function() {\n            return (\n              this.attributes.aVertexColor !== undefined ||\n              this.uniforms.uMaterialColor !== undefined\n            );\n          };\n\n          _main.default.Shader.prototype.isTexLightShader = function() {\n            return this.isLightShader() && this.isTextureShader();\n          };\n\n          _main.default.Shader.prototype.isStrokeShader = function() {\n            return this.uniforms.uStrokeWeight !== undefined;\n          };\n\n          /**\n           * @method enableAttrib\n           * @chainable\n           * @private\n           */\n          _main.default.Shader.prototype.enableAttrib = function(\n            attr,\n            size,\n            type,\n            normalized,\n            stride,\n            offset\n          ) {\n            if (attr) {\n              if (\n                typeof IS_MINIFIED === 'undefined' &&\n                this.attributes[attr.name] !== attr\n              ) {\n                console.warn(\n                  'The attribute \"'.concat(\n                    attr.name,\n                    '\"passed to enableAttrib does not belong to this shader.'\n                  )\n                );\n              }\n              var loc = attr.location;\n              if (loc !== -1) {\n                var gl = this._renderer.GL;\n                if (!attr.enabled) {\n                  gl.enableVertexAttribArray(loc);\n                  attr.enabled = true;\n                }\n                this._renderer.GL.vertexAttribPointer(\n                  loc,\n                  size,\n                  type || gl.FLOAT,\n                  normalized || false,\n                  stride || 0,\n                  offset || 0\n                );\n              }\n            }\n            return this;\n          };\n          var _default = _main.default.Shader;\n          exports.default = _default;\n        },\n        { '../core/main': 59 }\n      ],\n      115: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.default = void 0;\n\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n          /**\n           * This module defines the p5.Texture class\n           * @module Lights, Camera\n           * @submodule Material\n           * @for p5\n           * @requires core\n           */ /**\n           * Texture class for WEBGL Mode\n           * @private\n           * @class p5.Texture\n           * @param {p5.RendererGL} renderer an instance of p5.RendererGL that\n           * will provide the GL context for this new p5.Texture\n           * @param {p5.Image|p5.Graphics|p5.Element|p5.MediaElement|ImageData} [obj] the\n           * object containing the image data to store in the texture.\n           */ _main.default.Texture = function(renderer, obj) {\n            this._renderer = renderer;\n            var gl = this._renderer.GL;\n\n            this.src = obj;\n            this.glTex = undefined;\n            this.glTarget = gl.TEXTURE_2D;\n            this.glFormat = gl.RGBA;\n            this.mipmaps = false;\n            this.glMinFilter = gl.LINEAR;\n            this.glMagFilter = gl.LINEAR;\n            this.glWrapS = gl.CLAMP_TO_EDGE;\n            this.glWrapT = gl.CLAMP_TO_EDGE;\n\n            // used to determine if this texture might need constant updating\n            // because it is a video or gif.\n            this.isSrcMediaElement =\n              typeof _main.default.MediaElement !== 'undefined' &&\n              obj instanceof _main.default.MediaElement;\n            this._videoPrevUpdateTime = 0;\n            this.isSrcHTMLElement =\n              typeof _main.default.Element !== 'undefined' &&\n              obj instanceof _main.default.Element &&\n              !(obj instanceof _main.default.Graphics);\n            this.isSrcP5Image = obj instanceof _main.default.Image;\n            this.isSrcP5Graphics = obj instanceof _main.default.Graphics;\n            this.isImageData = typeof ImageData !== 'undefined' && obj instanceof ImageData;\n\n            var textureData = this._getTextureDataFromSource();\n            this.width = textureData.width;\n            this.height = textureData.height;\n\n            this.init(textureData);\n            return this;\n          };\n\n          _main.default.Texture.prototype._getTextureDataFromSource = function() {\n            var textureData;\n            if (this.isSrcP5Image) {\n              // param is a p5.Image\n              textureData = this.src.canvas;\n            } else if (\n              this.isSrcMediaElement ||\n              this.isSrcP5Graphics ||\n              this.isSrcHTMLElement\n            ) {\n              // if param is a video HTML element\n              textureData = this.src.elt;\n            } else if (this.isImageData) {\n              textureData = this.src;\n            }\n            return textureData;\n          };\n\n          /**\n           * Initializes common texture parameters, creates a gl texture,\n           * tries to upload the texture for the first time if data is\n           * already available.\n           * @private\n           * @method init\n           */\n          _main.default.Texture.prototype.init = function(data) {\n            var gl = this._renderer.GL;\n            this.glTex = gl.createTexture();\n\n            this.glWrapS = this._renderer.textureWrapX;\n            this.glWrapT = this._renderer.textureWrapY;\n\n            this.setWrapMode(this.glWrapS, this.glWrapT);\n            this.bindTexture();\n\n            //gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.glMagFilter);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.glMinFilter);\n\n            if (\n              this.width === 0 ||\n              this.height === 0 ||\n              (this.isSrcMediaElement && !this.src.loadedmetadata)\n            ) {\n              // assign a 1x1 empty texture initially, because data is not yet ready,\n              // so that no errors occur in gl console!\n              var tmpdata = new Uint8Array([1, 1, 1, 1]);\n              gl.texImage2D(\n                this.glTarget,\n                0,\n                gl.RGBA,\n                1,\n                1,\n                0,\n                this.glFormat,\n                gl.UNSIGNED_BYTE,\n                tmpdata\n              );\n            } else {\n              // data is ready: just push the texture!\n              gl.texImage2D(\n                this.glTarget,\n                0,\n                this.glFormat,\n                this.glFormat,\n                gl.UNSIGNED_BYTE,\n                data\n              );\n            }\n          };\n\n          /**\n           * Checks if the source data for this texture has changed (if it's\n           * easy to do so) and reuploads the texture if necessary. If it's not\n           * possible or to expensive to do a calculation to determine wheter or\n           * not the data has occurred, this method simply re-uploads the texture.\n           * @method update\n           */\n          _main.default.Texture.prototype.update = function() {\n            var data = this.src;\n            if (data.width === 0 || data.height === 0) {\n              return false; // nothing to do!\n            }\n\n            var textureData = this._getTextureDataFromSource();\n            var updated = false;\n\n            var gl = this._renderer.GL;\n            // pull texture from data, make sure width & height are appropriate\n            if (textureData.width !== this.width || textureData.height !== this.height) {\n              updated = true;\n\n              // make sure that if the width and height of this.src have changed\n              // for some reason, we update our metadata and upload the texture again\n              this.width = textureData.width;\n              this.height = textureData.height;\n\n              if (this.isSrcP5Image) {\n                data.setModified(false);\n              } else if (this.isSrcMediaElement || this.isSrcHTMLElement) {\n                // on the first frame the metadata comes in, the size will be changed\n                // from 0 to actual size, but pixels may not be available.\n                // flag for update in a future frame.\n                // if we don't do this, a paused video, for example, may not\n                // send the first frame to texture memory.\n                data.setModified(true);\n              }\n            } else if (this.isSrcP5Image) {\n              // for an image, we only update if the modified field has been set,\n              // for example, by a call to p5.Image.set\n              if (data.isModified()) {\n                updated = true;\n                data.setModified(false);\n              }\n            } else if (this.isSrcMediaElement) {\n              // for a media element (video), we'll check if the current time in\n              // the video frame matches the last time. if it doesn't match, the\n              // video has advanced or otherwise been taken to a new frame,\n              // and we need to upload it.\n              if (data.isModified()) {\n                // p5.MediaElement may have also had set/updatePixels, etc. called\n                // on it and should be updated, or may have been set for the first\n                // time!\n                updated = true;\n                data.setModified(false);\n              } else if (data.loadedmetadata) {\n                // if the meta data has been loaded, we can ask the video\n                // what it's current position (in time) is.\n                if (this._videoPrevUpdateTime !== data.time()) {\n                  // update the texture in gpu mem only if the current\n                  // video timestamp does not match the timestamp of the last\n                  // time we uploaded this texture (and update the time we\n                  // last uploaded, too)\n                  this._videoPrevUpdateTime = data.time();\n                  updated = true;\n                }\n              }\n            } else if (this.isImageData) {\n              if (data._dirty) {\n                data._dirty = false;\n                updated = true;\n              }\n            } else {\n              /* data instanceof p5.Graphics, probably */\n              // there is not enough information to tell if the texture can be\n              // conditionally updated; so to be safe, we just go ahead and upload it.\n              updated = true;\n            }\n\n            if (updated) {\n              this.bindTexture();\n              gl.texImage2D(\n                this.glTarget,\n                0,\n                this.glFormat,\n                this.glFormat,\n                gl.UNSIGNED_BYTE,\n                textureData\n              );\n            }\n\n            return updated;\n          };\n\n          /**\n           * Binds the texture to the appropriate GL target.\n           * @method bindTexture\n           */\n          _main.default.Texture.prototype.bindTexture = function() {\n            // bind texture using gl context + glTarget and\n            // generated gl texture object\n            var gl = this._renderer.GL;\n            gl.bindTexture(this.glTarget, this.glTex);\n\n            return this;\n          };\n\n          /**\n           * Unbinds the texture from the appropriate GL target.\n           * @method unbindTexture\n           */\n          _main.default.Texture.prototype.unbindTexture = function() {\n            // unbind per above, disable texturing on glTarget\n            var gl = this._renderer.GL;\n            gl.bindTexture(this.glTarget, null);\n          };\n\n          /**\n           * Sets how a texture is be interpolated when upscaled or downscaled.\n           * Nearest filtering uses nearest neighbor scaling when interpolating\n           * Linear filtering uses WebGL's linear scaling when interpolating\n           * @method setInterpolation\n           * @param {String} downScale Specifies the texture filtering when\n           *                           textures are shrunk. Options are LINEAR or NEAREST\n           * @param {String} upScale Specifies the texture filtering when\n           *                         textures are magnified. Options are LINEAR or NEAREST\n           * @todo implement mipmapping filters\n           */\n          _main.default.Texture.prototype.setInterpolation = function(downScale, upScale) {\n            var gl = this._renderer.GL;\n\n            if (downScale === constants.NEAREST) {\n              this.glMinFilter = gl.NEAREST;\n            } else {\n              this.glMinFilter = gl.LINEAR;\n            }\n\n            if (upScale === constants.NEAREST) {\n              this.glMagFilter = gl.NEAREST;\n            } else {\n              this.glMagFilter = gl.LINEAR;\n            }\n\n            this.bindTexture();\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.glMinFilter);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.glMagFilter);\n            this.unbindTexture();\n          };\n\n          /**\n           * Sets the texture wrapping mode. This controls how textures behave\n           * when their uv's go outside of the 0 - 1 range. There are three options:\n           * CLAMP, REPEAT, and MIRROR. REPEAT & MIRROR are only available if the texture\n           * is a power of two size (128, 256, 512, 1024, etc.).\n           * @method setWrapMode\n           * @param {String} wrapX Controls the horizontal texture wrapping behavior\n           * @param {String} wrapY Controls the vertical texture wrapping behavior\n           */\n          _main.default.Texture.prototype.setWrapMode = function(wrapX, wrapY) {\n            var gl = this._renderer.GL;\n\n            // for webgl 1 we need to check if the texture is power of two\n            // if it isn't we will set the wrap mode to CLAMP\n            // webgl2 will support npot REPEAT and MIRROR but we don't check for it yet\n            var isPowerOfTwo = function isPowerOfTwo(x) {\n              return (x & (x - 1)) === 0;\n            };\n\n            var widthPowerOfTwo = isPowerOfTwo(this.width);\n            var heightPowerOfTwo = isPowerOfTwo(this.height);\n\n            if (wrapX === constants.REPEAT) {\n              if (widthPowerOfTwo && heightPowerOfTwo) {\n                this.glWrapS = gl.REPEAT;\n              } else {\n                console.warn(\n                  'You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead'\n                );\n\n                this.glWrapS = gl.CLAMP_TO_EDGE;\n              }\n            } else if (wrapX === constants.MIRROR) {\n              if (widthPowerOfTwo && heightPowerOfTwo) {\n                this.glWrapS = gl.MIRRORED_REPEAT;\n              } else {\n                console.warn(\n                  'You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead'\n                );\n\n                this.glWrapS = gl.CLAMP_TO_EDGE;\n              }\n            } else {\n              // falling back to default if didn't get a proper mode\n              this.glWrapS = gl.CLAMP_TO_EDGE;\n            }\n\n            if (wrapY === constants.REPEAT) {\n              if (widthPowerOfTwo && heightPowerOfTwo) {\n                this.glWrapT = gl.REPEAT;\n              } else {\n                console.warn(\n                  'You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead'\n                );\n\n                this.glWrapT = gl.CLAMP_TO_EDGE;\n              }\n            } else if (wrapY === constants.MIRROR) {\n              if (widthPowerOfTwo && heightPowerOfTwo) {\n                this.glWrapT = gl.MIRRORED_REPEAT;\n              } else {\n                console.warn(\n                  'You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead'\n                );\n\n                this.glWrapT = gl.CLAMP_TO_EDGE;\n              }\n            } else {\n              // falling back to default if didn't get a proper mode\n              this.glWrapT = gl.CLAMP_TO_EDGE;\n            }\n\n            this.bindTexture();\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.glWrapS);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.glWrapT);\n            this.unbindTexture();\n          };\n          var _default = _main.default.Texture;\n          exports.default = _default;\n        },\n        { '../core/constants': 48, '../core/main': 59 }\n      ],\n      116: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          function _typeof(obj) {\n            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj &&\n                  typeof Symbol === 'function' &&\n                  obj.constructor === Symbol &&\n                  obj !== Symbol.prototype\n                  ? 'symbol'\n                  : typeof obj;\n              };\n            }\n            return _typeof(obj);\n          }\n          var _main = _interopRequireDefault(_dereq_('../core/main'));\n          var constants = _interopRequireWildcard(_dereq_('../core/constants'));\n          _dereq_('./p5.Shader');\n          _dereq_('./p5.RendererGL.Retained');\n          function _getRequireWildcardCache() {\n            if (typeof WeakMap !== 'function') return null;\n            var cache = new WeakMap();\n            _getRequireWildcardCache = function _getRequireWildcardCache() {\n              return cache;\n            };\n            return cache;\n          }\n          function _interopRequireWildcard(obj) {\n            if (obj && obj.__esModule) {\n              return obj;\n            }\n            if (obj === null || (_typeof(obj) !== 'object' && typeof obj !== 'function')) {\n              return { default: obj };\n            }\n            var cache = _getRequireWildcardCache();\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n            var newObj = {};\n            var hasPropertyDescriptor =\n              Object.defineProperty && Object.getOwnPropertyDescriptor;\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor\n                  ? Object.getOwnPropertyDescriptor(obj, key)\n                  : null;\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n            newObj.default = obj;\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n            return newObj;\n          }\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n\n          // Text/Typography\n          // @TODO:\n          _main.default.RendererGL.prototype._applyTextProperties = function() {\n            //@TODO finish implementation\n            //console.error('text commands not yet implemented in webgl');\n          };\n\n          _main.default.RendererGL.prototype.textWidth = function(s) {\n            if (this._isOpenType()) {\n              return this._textFont._textWidth(s, this._textSize);\n            }\n\n            return 0; // TODO: error\n          };\n\n          // rendering constants\n\n          // the number of rows/columns dividing each glyph\n          var charGridWidth = 9;\n          var charGridHeight = charGridWidth;\n\n          // size of the image holding the bezier stroke info\n          var strokeImageWidth = 64;\n          var strokeImageHeight = 64;\n\n          // size of the image holding the stroke indices for each row/col\n          var gridImageWidth = 64;\n          var gridImageHeight = 64;\n\n          // size of the image holding the offset/length of each row/col stripe\n          var cellImageWidth = 64;\n          var cellImageHeight = 64;\n\n          /**\n           * @private\n           * @class ImageInfos\n           * @param {Integer} width\n           * @param {Integer} height\n           *\n           * the ImageInfos class holds a list of ImageDatas of a given size.\n           */\n          function ImageInfos(width, height) {\n            this.width = width;\n            this.height = height;\n            this.infos = []; // the list of images\n\n            /**\n             *\n             * @method findImage\n             * @param {Integer} space\n             * @return {Object} contains the ImageData, and pixel index into that\n             *                  ImageData where the free space was allocated.\n             *\n             * finds free space of a given size in the ImageData list\n             */\n            this.findImage = function(space) {\n              var imageSize = this.width * this.height;\n              if (space > imageSize) throw new Error('font is too complex to render in 3D');\n\n              // search through the list of images, looking for one with\n              // anough unused space.\n              var imageInfo, imageData;\n              for (var ii = this.infos.length - 1; ii >= 0; --ii) {\n                var imageInfoTest = this.infos[ii];\n                if (imageInfoTest.index + space < imageSize) {\n                  // found one\n                  imageInfo = imageInfoTest;\n                  imageData = imageInfoTest.imageData;\n                  break;\n                }\n              }\n\n              if (!imageInfo) {\n                try {\n                  // create a new image\n                  imageData = new ImageData(this.width, this.height);\n                } catch (err) {\n                  // for browsers that don't support ImageData constructors (ie IE11)\n                  // create an ImageData using the old method\n                  var canvas = document.getElementsByTagName('canvas')[0];\n                  var created = !canvas;\n                  if (!canvas) {\n                    // create a temporary canvas\n                    canvas = document.createElement('canvas');\n                    canvas.style.display = 'none';\n                    document.body.appendChild(canvas);\n                  }\n                  var ctx = canvas.getContext('2d');\n                  if (ctx) {\n                    imageData = ctx.createImageData(this.width, this.height);\n                  }\n                  if (created) {\n                    // distroy the temporary canvas, if necessary\n                    document.body.removeChild(canvas);\n                  }\n                }\n                // construct & dd the new image info\n                imageInfo = { index: 0, imageData: imageData };\n                this.infos.push(imageInfo);\n              }\n\n              var index = imageInfo.index;\n              imageInfo.index += space; // move to the start of the next image\n              imageData._dirty = true;\n              return { imageData: imageData, index: index };\n            };\n          }\n\n          /**\n           * @function setPixel\n           * @param {Object} imageInfo\n           * @param {Number} r\n           * @param {Number} g\n           * @param {Number} b\n           * @param {Number} a\n           *\n           * writes the next pixel into an indexed ImageData\n           */\n          function setPixel(imageInfo, r, g, b, a) {\n            var imageData = imageInfo.imageData;\n            var pixels = imageData.data;\n            var index = imageInfo.index++ * 4;\n            pixels[index++] = r;\n            pixels[index++] = g;\n            pixels[index++] = b;\n            pixels[index++] = a;\n          }\n\n          var SQRT3 = Math.sqrt(3);\n\n          /**\n           * @private\n           * @class FontInfo\n           * @param {Object} font an opentype.js font object\n           *\n           * contains cached images and glyph information for an opentype font\n           */\n          var FontInfo = function FontInfo(font) {\n            this.font = font;\n            // the bezier curve coordinates\n            this.strokeImageInfos = new ImageInfos(strokeImageWidth, strokeImageHeight);\n            // lists of curve indices for each row/column slice\n            this.colDimImageInfos = new ImageInfos(gridImageWidth, gridImageHeight);\n            this.rowDimImageInfos = new ImageInfos(gridImageWidth, gridImageHeight);\n            // the offset & length of each row/col slice in the glyph\n            this.colCellImageInfos = new ImageInfos(cellImageWidth, cellImageHeight);\n            this.rowCellImageInfos = new ImageInfos(cellImageWidth, cellImageHeight);\n\n            // the cached information for each glyph\n            this.glyphInfos = {};\n\n            /**\n             * @method getGlyphInfo\n             * @param {Glyph} glyph the x positions of points in the curve\n             * @returns {Object} the glyphInfo for that glyph\n             *\n             * calculates rendering info for a glyph, including the curve information,\n             * row & column stripes compiled into textures.\n             */\n\n            this.getGlyphInfo = function(glyph) {\n              // check the cache\n              var gi = this.glyphInfos[glyph.index];\n              if (gi) return gi;\n\n              // get the bounding box of the glyph from opentype.js\n              var bb = glyph.getBoundingBox();\n              var xMin = bb.x1;\n              var yMin = bb.y1;\n              var gWidth = bb.x2 - xMin;\n              var gHeight = bb.y2 - yMin;\n              var cmds = glyph.path.commands;\n              // don't bother rendering invisible glyphs\n              if (gWidth === 0 || gHeight === 0 || !cmds.length) {\n                return (this.glyphInfos[glyph.index] = {});\n              }\n\n              var i;\n              var strokes = []; // the strokes in this glyph\n              var rows = []; // the indices of strokes in each row\n              var cols = []; // the indices of strokes in each column\n              for (i = charGridWidth - 1; i >= 0; --i) {\n                cols.push([]);\n              }\n              for (i = charGridHeight - 1; i >= 0; --i) {\n                rows.push([]);\n              }\n\n              /**\n               * @function push\n               * @param {Number[]} xs the x positions of points in the curve\n               * @param {Number[]} ys the y positions of points in the curve\n               * @param {Object} v    the curve information\n               *\n               * adds a curve to the rows & columns that it intersects with\n               */\n              function push(xs, ys, v) {\n                var index = strokes.length; // the index of this stroke\n                strokes.push(v); // add this stroke to the list\n\n                /**\n                 * @function minMax\n                 * @param {Number[]} rg the list of values to compare\n                 * @param {Number} min the initial minimum value\n                 * @param {Number} max the initial maximum value\n                 *\n                 * find the minimum & maximum value in a list of values\n                 */\n                function minMax(rg, min, max) {\n                  for (var _i = rg.length; _i-- > 0; ) {\n                    var _v = rg[_i];\n                    if (min > _v) min = _v;\n                    if (max < _v) max = _v;\n                  }\n                  return { min: min, max: max };\n                }\n\n                // loop through the rows & columns that the curve intersects\n                // adding the curve to those slices\n                var mmX = minMax(xs, 1, 0);\n                var ixMin = Math.max(Math.floor(mmX.min * charGridWidth), 0);\n                var ixMax = Math.min(Math.ceil(mmX.max * charGridWidth), charGridWidth);\n                for (var iCol = ixMin; iCol < ixMax; ++iCol) {\n                  cols[iCol].push(index);\n                }\n\n                var mmY = minMax(ys, 1, 0);\n                var iyMin = Math.max(Math.floor(mmY.min * charGridHeight), 0);\n                var iyMax = Math.min(Math.ceil(mmY.max * charGridHeight), charGridHeight);\n\n                for (var iRow = iyMin; iRow < iyMax; ++iRow) {\n                  rows[iRow].push(index);\n                }\n              }\n\n              /**\n               * @function clamp\n               * @param {Number} v the value to clamp\n               * @param {Number} min the minimum value\n               * @param {Number} max the maxmimum value\n               *\n               * clamps a value between a minimum & maximum value\n               */\n              function clamp(v, min, max) {\n                if (v < min) return min;\n                if (v > max) return max;\n                return v;\n              }\n\n              /**\n               * @function byte\n               * @param {Number} v the value to scale\n               *\n               * converts a floating-point number in the range 0-1 to a byte 0-255\n               */\n              function byte(v) {\n                return clamp(255 * v, 0, 255);\n              }\n\n              /**\n               * @private\n               * @class Cubic\n               * @param {Number} p0 the start point of the curve\n               * @param {Number} c0 the first control point\n               * @param {Number} c1 the second control point\n               * @param {Number} p1 the end point\n               *\n               * a cubic curve\n               */\n              function Cubic(p0, c0, c1, p1) {\n                this.p0 = p0;\n                this.c0 = c0;\n                this.c1 = c1;\n                this.p1 = p1;\n\n                /**\n                 * @method toQuadratic\n                 * @return {Object} the quadratic approximation\n                 *\n                 * converts the cubic to a quadtratic approximation by\n                 * picking an appropriate quadratic control point\n                 */\n                this.toQuadratic = function() {\n                  return {\n                    x: this.p0.x,\n                    y: this.p0.y,\n                    x1: this.p1.x,\n                    y1: this.p1.y,\n                    cx: ((this.c0.x + this.c1.x) * 3 - (this.p0.x + this.p1.x)) / 4,\n                    cy: ((this.c0.y + this.c1.y) * 3 - (this.p0.y + this.p1.y)) / 4\n                  };\n                };\n\n                /**\n                 * @method quadError\n                 * @return {Number} the error\n                 *\n                 * calculates the magnitude of error of this curve's\n                 * quadratic approximation.\n                 */\n                this.quadError = function() {\n                  return (\n                    _main.default.Vector.sub(\n                      _main.default.Vector.sub(this.p1, this.p0),\n                      _main.default.Vector.mult(\n                        _main.default.Vector.sub(this.c1, this.c0),\n                        3\n                      )\n                    ).mag() / 2\n                  );\n                };\n\n                /**\n                 * @method split\n                 * @param {Number} t the value (0-1) at which to split\n                 * @return {Cubic} the second part of the curve\n                 *\n                 * splits the cubic into two parts at a point 't' along the curve.\n                 * this cubic keeps its start point and its end point becomes the\n                 * point at 't'. the 'end half is returned.\n                 */\n                this.split = function(t) {\n                  var m1 = _main.default.Vector.lerp(this.p0, this.c0, t);\n                  var m2 = _main.default.Vector.lerp(this.c0, this.c1, t);\n                  var mm1 = _main.default.Vector.lerp(m1, m2, t);\n\n                  this.c1 = _main.default.Vector.lerp(this.c1, this.p1, t);\n                  this.c0 = _main.default.Vector.lerp(m2, this.c1, t);\n                  var pt = _main.default.Vector.lerp(mm1, this.c0, t);\n                  var part1 = new Cubic(this.p0, m1, mm1, pt);\n                  this.p0 = pt;\n                  return part1;\n                };\n\n                /**\n                 * @method splitInflections\n                 * @return {Cubic[]} the non-inflecting pieces of this cubic\n                 *\n                 * returns an array containing 0, 1 or 2 cubics split resulting\n                 * from splitting this cubic at its inflection points.\n                 * this cubic is (potentially) altered and returned in the list.\n                 */\n                this.splitInflections = function() {\n                  var a = _main.default.Vector.sub(this.c0, this.p0);\n                  var b = _main.default.Vector.sub(\n                    _main.default.Vector.sub(this.c1, this.c0),\n                    a\n                  );\n                  var c = _main.default.Vector.sub(\n                    _main.default.Vector.sub(_main.default.Vector.sub(this.p1, this.c1), a),\n                    _main.default.Vector.mult(b, 2)\n                  );\n\n                  var cubics = [];\n\n                  // find the derivative coefficients\n                  var A = b.x * c.y - b.y * c.x;\n                  if (A !== 0) {\n                    var B = a.x * c.y - a.y * c.x;\n                    var C = a.x * b.y - a.y * b.x;\n                    var disc = B * B - 4 * A * C;\n                    if (disc >= 0) {\n                      if (A < 0) {\n                        A = -A;\n                        B = -B;\n                        C = -C;\n                      }\n\n                      var Q = Math.sqrt(disc);\n                      var t0 = (-B - Q) / (2 * A); // the first inflection point\n                      var t1 = (-B + Q) / (2 * A); // the second inflection point\n\n                      // test if the first inflection point lies on the curve\n                      if (t0 > 0 && t0 < 1) {\n                        // split at the first inflection point\n                        cubics.push(this.split(t0));\n                        // scale t2 into the second part\n                        t1 = 1 - (1 - t1) / (1 - t0);\n                      }\n\n                      // test if the second inflection point lies on the curve\n                      if (t1 > 0 && t1 < 1) {\n                        // split at the second inflection point\n                        cubics.push(this.split(t1));\n                      }\n                    }\n                  }\n\n                  cubics.push(this);\n                  return cubics;\n                };\n              }\n\n              /**\n               * @function cubicToQuadratics\n               * @param {Number} x0\n               * @param {Number} y0\n               * @param {Number} cx0\n               * @param {Number} cy0\n               * @param {Number} cx1\n               * @param {Number} cy1\n               * @param {Number} x1\n               * @param {Number} y1\n               * @returns {Cubic[]} an array of cubics whose quadratic approximations\n               *                    closely match the civen cubic.\n               *\n               * converts a cubic curve to a list of quadratics.\n               */\n              function cubicToQuadratics(x0, y0, cx0, cy0, cx1, cy1, x1, y1) {\n                // create the Cubic object and split it at its inflections\n                var cubics = new Cubic(\n                  new _main.default.Vector(x0, y0),\n                  new _main.default.Vector(cx0, cy0),\n                  new _main.default.Vector(cx1, cy1),\n                  new _main.default.Vector(x1, y1)\n                ).splitInflections();\n\n                var qs = []; // the final list of quadratics\n                var precision = 30 / SQRT3;\n\n                // for each of the non-inflected pieces of the original cubic\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n                try {\n                  for (\n                    var _iterator = cubics[Symbol.iterator](), _step;\n                    !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                    _iteratorNormalCompletion = true\n                  ) {\n                    var cubic = _step.value;\n                    // the cubic is iteratively split in 3 pieces:\n                    // the first piece is accumulated in 'qs', the result.\n                    // the last piece is accumulated in 'tail', temporarily.\n                    // the middle piece is repeatedly split again, while necessary.\n                    var tail = [];\n\n                    var t3 = void 0;\n                    for (;;) {\n                      // calculate this cubic's precision\n                      t3 = precision / cubic.quadError();\n                      if (t3 >= 0.5 * 0.5 * 0.5) {\n                        break; // not too bad, we're done\n                      }\n\n                      // find a split point based on the error\n                      var t = Math.pow(t3, 1.0 / 3.0);\n                      // split the cubic in 3\n                      var start = cubic.split(t);\n                      var middle = cubic.split(1 - t / (1 - t));\n\n                      qs.push(start); // the first part\n                      tail.push(cubic); // the last part\n                      cubic = middle; // iterate on the middle piece\n                    }\n\n                    if (t3 < 1) {\n                      // a little excess error, split the middle in two\n                      qs.push(cubic.split(0.5));\n                    }\n                    // add the middle piece to the result\n                    qs.push(cubic);\n\n                    // finally add the tail, reversed, onto the result\n                    Array.prototype.push.apply(qs, tail.reverse());\n                  }\n                } catch (err) {\n                  _didIteratorError = true;\n                  _iteratorError = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                      _iterator.return();\n                    }\n                  } finally {\n                    if (_didIteratorError) {\n                      throw _iteratorError;\n                    }\n                  }\n                }\n\n                return qs;\n              }\n\n              /**\n               * @function pushLine\n               * @param {Number} x0\n               * @param {Number} y0\n               * @param {Number} x1\n               * @param {Number} y1\n               *\n               * add a straight line to the row/col grid of a glyph\n               */\n              function pushLine(x0, y0, x1, y1) {\n                var mx = (x0 + x1) / 2;\n                var my = (y0 + y1) / 2;\n                push([x0, x1], [y0, y1], { x: x0, y: y0, cx: mx, cy: my });\n              }\n\n              /**\n               * @function samePoint\n               * @param {Number} x0\n               * @param {Number} y0\n               * @param {Number} x1\n               * @param {Number} y1\n               * @return {Boolean} true if the two points are sufficiently close\n               *\n               * tests if two points are close enough to be considered the same\n               */\n              function samePoint(x0, y0, x1, y1) {\n                return Math.abs(x1 - x0) < 0.00001 && Math.abs(y1 - y0) < 0.00001;\n              }\n\n              var x0, y0, xs, ys;\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n              try {\n                for (\n                  var _iterator2 = cmds[Symbol.iterator](), _step2;\n                  !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n                  _iteratorNormalCompletion2 = true\n                ) {\n                  var cmd = _step2.value;\n                  // scale the coordinates to the range 0-1\n                  var x1 = (cmd.x - xMin) / gWidth;\n                  var y1 = (cmd.y - yMin) / gHeight;\n\n                  // don't bother if this point is the same as the last\n                  if (samePoint(x0, y0, x1, y1)) continue;\n\n                  switch (cmd.type) {\n                    case 'M': {\n                      // move\n                      xs = x1;\n                      ys = y1;\n                      break;\n                    }\n                    case 'L': {\n                      // line\n                      pushLine(x0, y0, x1, y1);\n                      break;\n                    }\n                    case 'Q': {\n                      // quadratic\n                      var cx = (cmd.x1 - xMin) / gWidth;\n                      var cy = (cmd.y1 - yMin) / gHeight;\n                      push([x0, x1, cx], [y0, y1, cy], { x: x0, y: y0, cx: cx, cy: cy });\n                      break;\n                    }\n                    case 'Z': {\n                      // end\n                      if (!samePoint(x0, y0, xs, ys)) {\n                        // add an extra line closing the loop, if necessary\n                        pushLine(x0, y0, xs, ys);\n                        strokes.push({ x: xs, y: ys });\n                      } else {\n                        strokes.push({ x: x0, y: y0 });\n                      }\n                      break;\n                    }\n                    case 'C': {\n                      // cubic\n                      var cx1 = (cmd.x1 - xMin) / gWidth;\n                      var cy1 = (cmd.y1 - yMin) / gHeight;\n                      var cx2 = (cmd.x2 - xMin) / gWidth;\n                      var cy2 = (cmd.y2 - yMin) / gHeight;\n                      var qs = cubicToQuadratics(x0, y0, cx1, cy1, cx2, cy2, x1, y1);\n                      for (var iq = 0; iq < qs.length; iq++) {\n                        var q = qs[iq].toQuadratic();\n                        push([q.x, q.x1, q.cx], [q.y, q.y1, q.cy], q);\n                      }\n                      break;\n                    }\n                    default:\n                      throw new Error('unknown command type: '.concat(cmd.type));\n                  }\n\n                  x0 = x1;\n                  y0 = y1;\n                }\n\n                // allocate space for the strokes\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n              var strokeCount = strokes.length;\n              var strokeImageInfo = this.strokeImageInfos.findImage(strokeCount);\n              var strokeOffset = strokeImageInfo.index;\n\n              // fill the stroke image\n              for (var il = 0; il < strokeCount; ++il) {\n                var s = strokes[il];\n                setPixel(strokeImageInfo, byte(s.x), byte(s.y), byte(s.cx), byte(s.cy));\n              }\n\n              /**\n               * @function layout\n               * @param {Number[][]} dim\n               * @param {ImageInfo[]} dimImageInfos\n               * @param {ImageInfo[]} cellImageInfos\n               * @return {Object}\n               *\n               * lays out the curves in a dimension (row or col) into two\n               * images, one for the indices of the curves themselves, and\n               * one containing the offset and length of those index spans.\n               */\n              function layout(dim, dimImageInfos, cellImageInfos) {\n                var dimLength = dim.length; // the number of slices in this dimension\n                var dimImageInfo = dimImageInfos.findImage(dimLength);\n                var dimOffset = dimImageInfo.index;\n                // calculate the total number of stroke indices in this dimension\n                var totalStrokes = 0;\n                for (var id = 0; id < dimLength; ++id) {\n                  totalStrokes += dim[id].length;\n                }\n\n                // allocate space for the stroke indices\n                var cellImageInfo = cellImageInfos.findImage(totalStrokes);\n\n                // for each slice in the glyph\n                for (var _i2 = 0; _i2 < dimLength; ++_i2) {\n                  var strokeIndices = dim[_i2];\n                  var _strokeCount = strokeIndices.length;\n                  var cellLineIndex = cellImageInfo.index;\n\n                  // write the offset and count into the glyph slice image\n                  setPixel(\n                    dimImageInfo,\n                    cellLineIndex >> 7,\n                    cellLineIndex & 0x7f,\n                    _strokeCount >> 7,\n                    _strokeCount & 0x7f\n                  );\n\n                  // for each stroke index in that slice\n                  for (var iil = 0; iil < _strokeCount; ++iil) {\n                    // write the stroke index into the slice's image\n                    var strokeIndex = strokeIndices[iil] + strokeOffset;\n                    setPixel(cellImageInfo, strokeIndex >> 7, strokeIndex & 0x7f, 0, 0);\n                  }\n                }\n\n                return {\n                  cellImageInfo: cellImageInfo,\n                  dimOffset: dimOffset,\n                  dimImageInfo: dimImageInfo\n                };\n              }\n\n              // initialize the info for this glyph\n              gi = this.glyphInfos[glyph.index] = {\n                glyph: glyph,\n                uGlyphRect: [bb.x1, -bb.y1, bb.x2, -bb.y2],\n                strokeImageInfo: strokeImageInfo,\n                strokes: strokes,\n                colInfo: layout(cols, this.colDimImageInfos, this.colCellImageInfos),\n                rowInfo: layout(rows, this.rowDimImageInfos, this.rowCellImageInfos)\n              };\n\n              gi.uGridOffset = [gi.colInfo.dimOffset, gi.rowInfo.dimOffset];\n              return gi;\n            };\n          };\n\n          _main.default.RendererGL.prototype._renderText = function(p, line, x, y, maxY) {\n            if (!this._textFont || typeof this._textFont === 'string') {\n              console.log(\n                'WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.'\n              );\n\n              return;\n            }\n            if (y >= maxY || !this._doFill) {\n              return; // don't render lines beyond our maxY position\n            }\n\n            if (!this._isOpenType()) {\n              console.log(\n                'WEBGL: only Opentype (.otf) and Truetype (.ttf) fonts are supported'\n              );\n\n              return p;\n            }\n\n            p.push(); // fix to #803\n\n            // remember this state, so it can be restored later\n            var doStroke = this._doStroke;\n            var drawMode = this.drawMode;\n\n            this._doStroke = false;\n            this.drawMode = constants.TEXTURE;\n\n            // get the cached FontInfo object\n            var font = this._textFont.font;\n            var fontInfo = this._textFont._fontInfo;\n            if (!fontInfo) {\n              fontInfo = this._textFont._fontInfo = new FontInfo(font);\n            }\n\n            // calculate the alignment and move/scale the view accordingly\n            var pos = this._textFont._handleAlignment(this, line, x, y);\n            var fontSize = this._textSize;\n            var scale = fontSize / font.unitsPerEm;\n            this.translate(pos.x, pos.y, 0);\n            this.scale(scale, scale, 1);\n\n            // initialize the font shader\n            var gl = this.GL;\n            var initializeShader = !this._defaultFontShader;\n            var sh = this._getFontShader();\n            sh.init();\n            sh.bindShader(); // first time around, bind the shader fully\n\n            if (initializeShader) {\n              // these are constants, really. just initialize them one-time.\n              sh.setUniform('uGridImageSize', [gridImageWidth, gridImageHeight]);\n              sh.setUniform('uCellsImageSize', [cellImageWidth, cellImageHeight]);\n              sh.setUniform('uStrokeImageSize', [strokeImageWidth, strokeImageHeight]);\n              sh.setUniform('uGridSize', [charGridWidth, charGridHeight]);\n            }\n            this._applyColorBlend(this.curFillColor);\n\n            var g = this.retainedMode.geometry['glyph'];\n            if (!g) {\n              // create the geometry for rendering a quad\n              var geom = (this._textGeom = new _main.default.Geometry(1, 1, function() {\n                for (var i = 0; i <= 1; i++) {\n                  for (var j = 0; j <= 1; j++) {\n                    this.vertices.push(new _main.default.Vector(j, i, 0));\n                    this.uvs.push(j, i);\n                  }\n                }\n              }));\n              geom.computeFaces().computeNormals();\n              g = this.createBuffers('glyph', geom);\n            }\n\n            // bind the shader buffers\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n            try {\n              for (\n                var _iterator3 = this.retainedMode.buffers.text[Symbol.iterator](), _step3;\n                !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);\n                _iteratorNormalCompletion3 = true\n              ) {\n                var buff = _step3.value;\n                buff._prepareBuffer(g, sh);\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n            this._bindBuffer(g.indexBuffer, gl.ELEMENT_ARRAY_BUFFER);\n\n            // this will have to do for now...\n            sh.setUniform('uMaterialColor', this.curFillColor);\n\n            try {\n              var dx = 0; // the x position in the line\n              var glyphPrev = null; // the previous glyph, used for kerning\n              // fetch the glyphs in the line of text\n              var glyphs = font.stringToGlyphs(line);\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n              try {\n                for (\n                  var _iterator4 = glyphs[Symbol.iterator](), _step4;\n                  !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done);\n                  _iteratorNormalCompletion4 = true\n                ) {\n                  var glyph = _step4.value;\n                  // kern\n                  if (glyphPrev) dx += font.getKerningValue(glyphPrev, glyph);\n\n                  var gi = fontInfo.getGlyphInfo(glyph);\n                  if (gi.uGlyphRect) {\n                    var rowInfo = gi.rowInfo;\n                    var colInfo = gi.colInfo;\n                    sh.setUniform('uSamplerStrokes', gi.strokeImageInfo.imageData);\n                    sh.setUniform('uSamplerRowStrokes', rowInfo.cellImageInfo.imageData);\n                    sh.setUniform('uSamplerRows', rowInfo.dimImageInfo.imageData);\n                    sh.setUniform('uSamplerColStrokes', colInfo.cellImageInfo.imageData);\n                    sh.setUniform('uSamplerCols', colInfo.dimImageInfo.imageData);\n                    sh.setUniform('uGridOffset', gi.uGridOffset);\n                    sh.setUniform('uGlyphRect', gi.uGlyphRect);\n                    sh.setUniform('uGlyphOffset', dx);\n\n                    sh.bindTextures(); // afterwards, only textures need updating\n\n                    // draw it\n                    gl.drawElements(gl.TRIANGLES, 6, this.GL.UNSIGNED_SHORT, 0);\n                  }\n                  dx += glyph.advanceWidth;\n                  glyphPrev = glyph;\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n            } finally {\n              // clean up\n              sh.unbindShader();\n\n              this._doStroke = doStroke;\n              this.drawMode = drawMode;\n\n              p.pop();\n            }\n\n            return p;\n          };\n        },\n        {\n          '../core/constants': 48,\n          '../core/main': 59,\n          './p5.RendererGL.Retained': 112,\n          './p5.Shader': 114\n        }\n      ],\n      117: [\n        function(_dereq_, module, exports) {\n          module.exports = {\n            fes: {\n              autoplay:\n                \"The media that tried to play (with '{{src}}') wasn't allowed to by this browser, most likely due to the browser's autoplay policy. Check out {{link}} for more information about why.\",\n              checkUserDefinedFns:\n                \"It seems that you may have accidentally written {{name}} instead of {{actualName}}.\\n\\nPlease correct it if it's not intentional.\",\n              fileLoadError: {\n                bytes:\n                  'It looks like there was a problem loading your file. {{suggestion}}',\n                font: 'It looks like there was a problem loading your font. {{suggestion}}',\n                gif:\n                  'There was some trouble loading your GIF. Make sure that your GIF is using 87a or 89a encoding.',\n                image:\n                  'It looks like there was a problem loading your image. {{suggestion}}',\n                json:\n                  'It looks like there was a problem loading your JSON file. {{suggestion}}',\n                large:\n                  \"If your large file isn't fetched successfully, we recommend splitting the file into smaller segments and fetching those.\",\n                strings:\n                  'It looks like there was a problem loading your text file. {{suggestion}}',\n                suggestion:\n                  'Try checking if the file path ({{filePath}}) is correct, hosting the file online, or running a local server. (More info at {{link}})',\n                table:\n                  'It looks like there was a problem loading your table file. {{suggestion}}',\n                xml:\n                  'It looks like there was a problem loading your XML file. {{suggestion}}'\n              },\n              friendlyParamError: {\n                type_EMPTY_VAR:\n                  '{{func}}() was expecting {{formatType}} for the {{position}} parameter, received an empty variable instead. {{location}}\\n\\nIf not intentional, this is often a problem with scope: {{link}}',\n                type_TOO_FEW_ARGUMENTS:\n                  '{{func}}() was expecting at least {{minParams}} arguments, but received only {{argCount}}. {{location}}',\n                type_TOO_MANY_ARGUMENTS:\n                  '{{func}}() was expecting no more than {{maxParams}} arguments, but received {{argCount}}. {{location}}',\n                type_WRONG_TYPE:\n                  '{{func}}() was expecting {{formatType}} for the {{position}} parameter, received {{argType}} instead. {{location}}'\n              },\n              globalErrors: {\n                reference: {\n                  notDefined:\n                    'There\\'s an error due to \"{{symbol}}\" not being defined in the current scope {{location}}.\\n\\nIf you have defined it in your code, you should check its scope, spelling, and letter-casing (JavaScript is case-sensitive). For more:\\n{{url1}}\\n{{url2}}'\n                },\n                stackSubseq:\n                  '▶️ Called from line {{line}} in \"{{func}}\" in {{file}} ({{location}})\\n\\n',\n                stackTop:\n                  '▶️ Error at line {{line}} in \"{{func}}\" in {{file}} ({{location}})\\n\\n',\n                syntax: {\n                  invalidToken:\n                    \"There's a syntax error due to a symbol that JavaScript doesn't recognize or didn't expect at it's place.\\nFor more: {{url}}\",\n                  unexpectedToken:\n                    \"There's a syntax error due to a symbol that wasn't expected at it's place.\\nUsually this is due to a typo. Check the line number in the error below for anything missing/extra.\\nFor more: {{url}}\"\n                },\n                type: {\n                  notfunc:\n                    'There\\'s an error as \"{{symbol}}\" could not be called as a function {{location}}.\\nCheck the spelling, letter-casing (Javacript is case-sensitive) and its type.\\nFor more: {{url}}',\n                  notfuncObj:\n                    'There\\'s an error as \"{{symbol}}\" could not be called as a function {{location}}.\\nVerify whether \"{{obj}}\" has \"{{symbol}}\" in it and check the spelling, letter-casing (Javacript is case-sensitive) and its type.\\nFor more: {{url}}'\n                }\n              },\n              libraryError:\n                'An error with message \"{{error}}\" occured inside the p5js library when {{func}} was called {{location}}\\n\\nIf not stated otherwise, it might be an issue with the arguments passed to {{func}}.',\n              location: '(on line {{line}} in {{file}} [{{location}}])',\n              misspelling:\n                'It seems that you may have accidentally written \"{{name}}\" instead of \"{{actualName}}\" {{location}}.\\n\\nPlease correct it to {{actualName}} if you wish to use the {{type}} from p5.js',\n              misspelling_plural:\n                'It seems that you may have accidentally written \"{{name}}\" {{location}}.\\n\\nYou may have meant one of the following:\\n{{suggestions}}',\n              misusedTopLevel:\n                \"Did you just try to use p5.js's {{symbolName}} {{symbolType}}? If so, you may want to move it into your sketch's setup() function.\\n\\nFor more details, see: {{link}}\",\n              positions: {\n                p_1: 'first',\n                p_10: 'tenth',\n                p_11: 'eleventh',\n                p_12: 'twelfth',\n                p_2: 'second',\n                p_3: 'third',\n                p_4: 'fourth',\n                p_5: 'fifth',\n                p_6: 'sixth',\n                p_7: 'seventh',\n                p_8: 'eighth',\n                p_9: 'ninth'\n              },\n              pre: '\\n🌸 p5.js says: {{message}}',\n              welcome:\n                'Welcome! This is your friendly debugger. To turn me off, switch to using p5.min.js.',\n              wrongPreload:\n                'An error with message \"{{error}}\" occured inside the p5js library when \"{{func}}\" was called {{location}}.\\n\\nIf not stated otherwise, it might be due to \"{{func}}\" being called from preload. Nothing besides load calls (loadImage, loadJSON, loadFont, loadStrings, etc.) should be inside the preload function.'\n            }\n          };\n        },\n        {}\n      ],\n      118: [\n        function(_dereq_, module, exports) {\n          'use strict';\n          Object.defineProperty(exports, '__esModule', { value: true });\n          exports.languages = exports.default = void 0;\n          var _translation = _interopRequireDefault(_dereq_('./en/translation'));\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n\n          // Only one language is imported above. This is intentional as other languages\n          // will be hosted online and then downloaded whenever needed\n\n          /**\n           * Here, we define a default/fallback language which we can use without internet.\n           * You won't have to change this when adding a new language.\n           *\n           * `translation` is the namespace we are using for our initial set of strings\n           */ var _default = {\n            en: {\n              translation: _translation.default\n            }\n          };\n\n          /**\n           * This is a list of languages that we have added so far.\n           * If you have just added a new language (yay!), add its key to the list below\n           * (`en` is english, `es` es español). Also add its export to\n           * dev.js, which is another file in this folder.\n           */ exports.default = _default;\n          var languages = ['en', 'es'];\n          exports.languages = languages;\n        },\n        { './en/translation': 117 }\n      ]\n    },\n    {},\n    [43]\n  )(43);\n});\n\n\n//# sourceURL=webpack://graphics/./src/lib/p5.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "graphics:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// Promise = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => {
/******/ 								installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 							});
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no deferred startup
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0, resolves = [];
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					resolves.push(installedChunks[chunkId][0]);
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			while(resolves.length) {
/******/ 				resolves.shift()();
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkgraphics"] = self["webpackChunkgraphics"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 		
/******/ 		// no deferred startup
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;